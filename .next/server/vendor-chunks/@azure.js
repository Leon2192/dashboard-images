"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@azure";
exports.ids = ["vendor-chunks/@azure"];
exports.modules = {

/***/ "(rsc)/./node_modules/@azure/abort-controller/dist-esm/src/AbortController.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/abort-controller/dist-esm/src/AbortController.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortController: () => (/* binding */ AbortController),\n/* harmony export */   AbortError: () => (/* binding */ AbortError)\n/* harmony export */ });\n/* harmony import */ var _AbortSignal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbortSignal */ \"(rsc)/./node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nclass AbortError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"AbortError\";\n    }\n}\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * Abort an operation when another event fires\n * ```ts\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n * ```\n *\n * @example\n * Share aborter cross multiple operations in 30s\n * ```ts\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *```\n *\n * @example\n * Cascaded aborting\n * ```ts\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * ```\n */\nclass AbortController {\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    constructor(parentSignals) {\n        this._signal = new _AbortSignal__WEBPACK_IMPORTED_MODULE_0__.AbortSignal();\n        if (!parentSignals) {\n            return;\n        }\n        // coerce parentSignals into an array\n        if (!Array.isArray(parentSignals)) {\n            // eslint-disable-next-line prefer-rest-params\n            parentSignals = arguments;\n        }\n        for (const parentSignal of parentSignals) {\n            // if the parent signal has already had abort() called,\n            // then call abort on this signal as well.\n            if (parentSignal.aborted) {\n                this.abort();\n            }\n            else {\n                // when the parent signal aborts, this signal should as well.\n                parentSignal.addEventListener(\"abort\", () => {\n                    this.abort();\n                });\n            }\n        }\n    }\n    /**\n     * The AbortSignal associated with this controller that will signal aborted\n     * when the abort method is called on this controller.\n     *\n     * @readonly\n     */\n    get signal() {\n        return this._signal;\n    }\n    /**\n     * Signal that any operations passed this controller's associated abort signal\n     * to cancel any remaining work and throw an `AbortError`.\n     */\n    abort() {\n        (0,_AbortSignal__WEBPACK_IMPORTED_MODULE_0__.abortSignal)(this._signal);\n    }\n    /**\n     * Creates a new AbortSignal instance that will abort after the provided ms.\n     * @param ms - Elapsed time in milliseconds to trigger an abort.\n     */\n    static timeout(ms) {\n        const signal = new _AbortSignal__WEBPACK_IMPORTED_MODULE_0__.AbortSignal();\n        const timer = setTimeout(_AbortSignal__WEBPACK_IMPORTED_MODULE_0__.abortSignal, ms, signal);\n        // Prevent the active Timer from keeping the Node.js event loop active.\n        if (typeof timer.unref === \"function\") {\n            timer.unref();\n        }\n        return signal;\n    }\n}\n//# sourceMappingURL=AbortController.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC1lc20vc3JjL0Fib3J0Q29udHJvbGxlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ3lEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSwyQkFBMkIscURBQVc7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHlEQUFXO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixxREFBVztBQUN0QyxpQ0FBaUMscURBQVc7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9hYm9ydC1jb250cm9sbGVyL2Rpc3QtZXNtL3NyYy9BYm9ydENvbnRyb2xsZXIuanM/MGM0YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEFib3J0U2lnbmFsLCBhYm9ydFNpZ25hbCB9IGZyb20gXCIuL0Fib3J0U2lnbmFsXCI7XG4vKipcbiAqIFRoaXMgZXJyb3IgaXMgdGhyb3duIHdoZW4gYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbiBoYXMgYmVlbiBhYm9ydGVkLlxuICogQ2hlY2sgZm9yIHRoaXMgZXJyb3IgYnkgdGVzdGluZyB0aGUgYG5hbWVgIHRoYXQgdGhlIG5hbWUgcHJvcGVydHkgb2YgdGhlXG4gKiBlcnJvciBtYXRjaGVzIGBcIkFib3J0RXJyb3JcImAuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICogY29udHJvbGxlci5hYm9ydCgpO1xuICogdHJ5IHtcbiAqICAgZG9Bc3luY1dvcmsoY29udHJvbGxlci5zaWduYWwpXG4gKiB9IGNhdGNoIChlKSB7XG4gKiAgIGlmIChlLm5hbWUgPT09ICdBYm9ydEVycm9yJykge1xuICogICAgIC8vIGhhbmRsZSBhYm9ydCBlcnJvciBoZXJlLlxuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIEFib3J0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBYm9ydEVycm9yXCI7XG4gICAgfVxufVxuLyoqXG4gKiBBbiBBYm9ydENvbnRyb2xsZXIgcHJvdmlkZXMgYW4gQWJvcnRTaWduYWwgYW5kIHRoZSBhc3NvY2lhdGVkIGNvbnRyb2xzIHRvIHNpZ25hbFxuICogdGhhdCBhbiBhc3luY2hyb25vdXMgb3BlcmF0aW9uIHNob3VsZCBiZSBhYm9ydGVkLlxuICpcbiAqIEBleGFtcGxlXG4gKiBBYm9ydCBhbiBvcGVyYXRpb24gd2hlbiBhbm90aGVyIGV2ZW50IGZpcmVzXG4gKiBgYGB0c1xuICogY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAqIGNvbnN0IHNpZ25hbCA9IGNvbnRyb2xsZXIuc2lnbmFsO1xuICogZG9Bc3luY1dvcmsoc2lnbmFsKTtcbiAqIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGNvbnRyb2xsZXIuYWJvcnQoKSk7XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogU2hhcmUgYWJvcnRlciBjcm9zcyBtdWx0aXBsZSBvcGVyYXRpb25zIGluIDMwc1xuICogYGBgdHNcbiAqIC8vIFVwbG9hZCB0aGUgc2FtZSBkYXRhIHRvIDIgZGlmZmVyZW50IGRhdGEgY2VudGVycyBhdCB0aGUgc2FtZSB0aW1lLFxuICogLy8gYWJvcnQgYW5vdGhlciB3aGVuIGFueSBvZiB0aGVtIGlzIGZpbmlzaGVkXG4gKiBjb25zdCBjb250cm9sbGVyID0gQWJvcnRDb250cm9sbGVyLndpdGhUaW1lb3V0KDMwICogMTAwMCk7XG4gKiBkb0FzeW5jV29yayhjb250cm9sbGVyLnNpZ25hbCkudGhlbihjb250cm9sbGVyLmFib3J0KTtcbiAqIGRvQXN5bmNXb3JrKGNvbnRyb2xsZXIuc2lnbmFsKS50aGVuKGNvbnRyb2xsZXIuYWJvcnQpO1xuICpgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogQ2FzY2FkZWQgYWJvcnRpbmdcbiAqIGBgYHRzXG4gKiAvLyBBbGwgb3BlcmF0aW9ucyBjYW4ndCB0YWtlIG1vcmUgdGhhbiAzMCBzZWNvbmRzXG4gKiBjb25zdCBhYm9ydGVyID0gQWJvcnRlci50aW1lb3V0KDMwICogMTAwMCk7XG4gKlxuICogLy8gRm9sbG93aW5nIDIgb3BlcmF0aW9ucyBjYW4ndCB0YWtlIG1vcmUgdGhhbiAyNSBzZWNvbmRzXG4gKiBhd2FpdCBkb0FzeW5jV29yayhhYm9ydGVyLndpdGhUaW1lb3V0KDI1ICogMTAwMCkpO1xuICogYXdhaXQgZG9Bc3luY1dvcmsoYWJvcnRlci53aXRoVGltZW91dCgyNSAqIDEwMDApKTtcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgQWJvcnRDb250cm9sbGVyIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudFNpZ25hbHMpIHtcbiAgICAgICAgdGhpcy5fc2lnbmFsID0gbmV3IEFib3J0U2lnbmFsKCk7XG4gICAgICAgIGlmICghcGFyZW50U2lnbmFscykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvZXJjZSBwYXJlbnRTaWduYWxzIGludG8gYW4gYXJyYXlcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHBhcmVudFNpZ25hbHMpKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICAgICAgICBwYXJlbnRTaWduYWxzID0gYXJndW1lbnRzO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgcGFyZW50U2lnbmFsIG9mIHBhcmVudFNpZ25hbHMpIHtcbiAgICAgICAgICAgIC8vIGlmIHRoZSBwYXJlbnQgc2lnbmFsIGhhcyBhbHJlYWR5IGhhZCBhYm9ydCgpIGNhbGxlZCxcbiAgICAgICAgICAgIC8vIHRoZW4gY2FsbCBhYm9ydCBvbiB0aGlzIHNpZ25hbCBhcyB3ZWxsLlxuICAgICAgICAgICAgaWYgKHBhcmVudFNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hYm9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgcGFyZW50IHNpZ25hbCBhYm9ydHMsIHRoaXMgc2lnbmFsIHNob3VsZCBhcyB3ZWxsLlxuICAgICAgICAgICAgICAgIHBhcmVudFNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIEFib3J0U2lnbmFsIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGNvbnRyb2xsZXIgdGhhdCB3aWxsIHNpZ25hbCBhYm9ydGVkXG4gICAgICogd2hlbiB0aGUgYWJvcnQgbWV0aG9kIGlzIGNhbGxlZCBvbiB0aGlzIGNvbnRyb2xsZXIuXG4gICAgICpcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBnZXQgc2lnbmFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmFsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTaWduYWwgdGhhdCBhbnkgb3BlcmF0aW9ucyBwYXNzZWQgdGhpcyBjb250cm9sbGVyJ3MgYXNzb2NpYXRlZCBhYm9ydCBzaWduYWxcbiAgICAgKiB0byBjYW5jZWwgYW55IHJlbWFpbmluZyB3b3JrIGFuZCB0aHJvdyBhbiBgQWJvcnRFcnJvcmAuXG4gICAgICovXG4gICAgYWJvcnQoKSB7XG4gICAgICAgIGFib3J0U2lnbmFsKHRoaXMuX3NpZ25hbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQWJvcnRTaWduYWwgaW5zdGFuY2UgdGhhdCB3aWxsIGFib3J0IGFmdGVyIHRoZSBwcm92aWRlZCBtcy5cbiAgICAgKiBAcGFyYW0gbXMgLSBFbGFwc2VkIHRpbWUgaW4gbWlsbGlzZWNvbmRzIHRvIHRyaWdnZXIgYW4gYWJvcnQuXG4gICAgICovXG4gICAgc3RhdGljIHRpbWVvdXQobXMpIHtcbiAgICAgICAgY29uc3Qgc2lnbmFsID0gbmV3IEFib3J0U2lnbmFsKCk7XG4gICAgICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dChhYm9ydFNpZ25hbCwgbXMsIHNpZ25hbCk7XG4gICAgICAgIC8vIFByZXZlbnQgdGhlIGFjdGl2ZSBUaW1lciBmcm9tIGtlZXBpbmcgdGhlIE5vZGUuanMgZXZlbnQgbG9vcCBhY3RpdmUuXG4gICAgICAgIGlmICh0eXBlb2YgdGltZXIudW5yZWYgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGltZXIudW5yZWYoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2lnbmFsO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFib3J0Q29udHJvbGxlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/abort-controller/dist-esm/src/AbortController.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortSignal: () => (/* binding */ AbortSignal),\n/* harmony export */   abortSignal: () => (/* binding */ abortSignal)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/// <reference path=\"../shims-public.d.ts\" />\nconst listenersMap = new WeakMap();\nconst abortedMap = new WeakMap();\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * Abort without timeout\n * ```ts\n * await doAsyncWork(AbortSignal.none);\n * ```\n */\nclass AbortSignal {\n    constructor() {\n        /**\n         * onabort event listener.\n         */\n        this.onabort = null;\n        listenersMap.set(this, []);\n        abortedMap.set(this, false);\n    }\n    /**\n     * Status of whether aborted or not.\n     *\n     * @readonly\n     */\n    get aborted() {\n        if (!abortedMap.has(this)) {\n            throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n        }\n        return abortedMap.get(this);\n    }\n    /**\n     * Creates a new AbortSignal instance that will never be aborted.\n     *\n     * @readonly\n     */\n    static get none() {\n        return new AbortSignal();\n    }\n    /**\n     * Added new \"abort\" event listener, only support \"abort\" event.\n     *\n     * @param _type - Only support \"abort\" event\n     * @param listener - The listener to be added\n     */\n    addEventListener(\n    // tslint:disable-next-line:variable-name\n    _type, listener) {\n        if (!listenersMap.has(this)) {\n            throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n        }\n        const listeners = listenersMap.get(this);\n        listeners.push(listener);\n    }\n    /**\n     * Remove \"abort\" event listener, only support \"abort\" event.\n     *\n     * @param _type - Only support \"abort\" event\n     * @param listener - The listener to be removed\n     */\n    removeEventListener(\n    // tslint:disable-next-line:variable-name\n    _type, listener) {\n        if (!listenersMap.has(this)) {\n            throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n        }\n        const listeners = listenersMap.get(this);\n        const index = listeners.indexOf(listener);\n        if (index > -1) {\n            listeners.splice(index, 1);\n        }\n    }\n    /**\n     * Dispatches a synthetic event to the AbortSignal.\n     */\n    dispatchEvent(_event) {\n        throw new Error(\"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\");\n    }\n}\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @internal\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nfunction abortSignal(signal) {\n    if (signal.aborted) {\n        return;\n    }\n    if (signal.onabort) {\n        signal.onabort.call(signal);\n    }\n    const listeners = listenersMap.get(signal);\n    if (listeners) {\n        // Create a copy of listeners so mutations to the array\n        // (e.g. via removeListener calls) don't affect the listeners\n        // we invoke.\n        listeners.slice().forEach((listener) => {\n            listener.call(signal, { type: \"abort\" });\n        });\n    }\n    abortedMap.set(signal, true);\n}\n//# sourceMappingURL=AbortSignal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC1lc20vc3JjL0Fib3J0U2lnbmFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsZUFBZTtBQUNuRCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvYWJvcnQtY29udHJvbGxlci9kaXN0LWVzbS9zcmMvQWJvcnRTaWduYWwuanM/MzAyMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9zaGltcy1wdWJsaWMuZC50c1wiIC8+XG5jb25zdCBsaXN0ZW5lcnNNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgYWJvcnRlZE1hcCA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIEFuIGFib3J0ZXIgaW5zdGFuY2UgaW1wbGVtZW50cyBBYm9ydFNpZ25hbCBpbnRlcmZhY2UsIGNhbiBhYm9ydCBIVFRQIHJlcXVlc3RzLlxuICpcbiAqIC0gQ2FsbCBBYm9ydFNpZ25hbC5ub25lIHRvIGNyZWF0ZSBhIG5ldyBBYm9ydFNpZ25hbCBpbnN0YW5jZSB0aGF0IGNhbm5vdCBiZSBjYW5jZWxsZWQuXG4gKiBVc2UgYEFib3J0U2lnbmFsLm5vbmVgIHdoZW4geW91IGFyZSByZXF1aXJlZCB0byBwYXNzIGEgY2FuY2VsbGF0aW9uIHRva2VuIGJ1dCB0aGUgb3BlcmF0aW9uXG4gKiBjYW5ub3Qgb3Igd2lsbCBub3QgZXZlciBiZSBjYW5jZWxsZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIEFib3J0IHdpdGhvdXQgdGltZW91dFxuICogYGBgdHNcbiAqIGF3YWl0IGRvQXN5bmNXb3JrKEFib3J0U2lnbmFsLm5vbmUpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBBYm9ydFNpZ25hbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBvbmFib3J0IGV2ZW50IGxpc3RlbmVyLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbmFib3J0ID0gbnVsbDtcbiAgICAgICAgbGlzdGVuZXJzTWFwLnNldCh0aGlzLCBbXSk7XG4gICAgICAgIGFib3J0ZWRNYXAuc2V0KHRoaXMsIGZhbHNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhdHVzIG9mIHdoZXRoZXIgYWJvcnRlZCBvciBub3QuXG4gICAgICpcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBnZXQgYWJvcnRlZCgpIHtcbiAgICAgICAgaWYgKCFhYm9ydGVkTWFwLmhhcyh0aGlzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIGB0aGlzYCB0byBiZSBhbiBpbnN0YW5jZSBvZiBBYm9ydFNpZ25hbC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFib3J0ZWRNYXAuZ2V0KHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEFib3J0U2lnbmFsIGluc3RhbmNlIHRoYXQgd2lsbCBuZXZlciBiZSBhYm9ydGVkLlxuICAgICAqXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgc3RhdGljIGdldCBub25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IEFib3J0U2lnbmFsKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZGVkIG5ldyBcImFib3J0XCIgZXZlbnQgbGlzdGVuZXIsIG9ubHkgc3VwcG9ydCBcImFib3J0XCIgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gX3R5cGUgLSBPbmx5IHN1cHBvcnQgXCJhYm9ydFwiIGV2ZW50XG4gICAgICogQHBhcmFtIGxpc3RlbmVyIC0gVGhlIGxpc3RlbmVyIHRvIGJlIGFkZGVkXG4gICAgICovXG4gICAgYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxuICAgIF90eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoIWxpc3RlbmVyc01hcC5oYXModGhpcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBgdGhpc2AgdG8gYmUgYW4gaW5zdGFuY2Ugb2YgQWJvcnRTaWduYWwuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IGxpc3RlbmVyc01hcC5nZXQodGhpcyk7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIFwiYWJvcnRcIiBldmVudCBsaXN0ZW5lciwgb25seSBzdXBwb3J0IFwiYWJvcnRcIiBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBfdHlwZSAtIE9ubHkgc3VwcG9ydCBcImFib3J0XCIgZXZlbnRcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgLSBUaGUgbGlzdGVuZXIgdG8gYmUgcmVtb3ZlZFxuICAgICAqL1xuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcbiAgICBfdHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKCFsaXN0ZW5lcnNNYXAuaGFzKHRoaXMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYHRoaXNgIHRvIGJlIGFuIGluc3RhbmNlIG9mIEFib3J0U2lnbmFsLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnNNYXAuZ2V0KHRoaXMpO1xuICAgICAgICBjb25zdCBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERpc3BhdGNoZXMgYSBzeW50aGV0aWMgZXZlbnQgdG8gdGhlIEFib3J0U2lnbmFsLlxuICAgICAqL1xuICAgIGRpc3BhdGNoRXZlbnQoX2V2ZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgaXMgYSBzdHViIGRpc3BhdGNoRXZlbnQgaW1wbGVtZW50YXRpb24gdGhhdCBzaG91bGQgbm90IGJlIHVzZWQuICBJdCBvbmx5IGV4aXN0cyBmb3IgdHlwZS1jaGVja2luZyBwdXJwb3Nlcy5cIik7XG4gICAgfVxufVxuLyoqXG4gKiBIZWxwZXIgdG8gdHJpZ2dlciBhbiBhYm9ydCBldmVudCBpbW1lZGlhdGVseSwgdGhlIG9uYWJvcnQgYW5kIGFsbCBhYm9ydCBldmVudCBsaXN0ZW5lcnMgd2lsbCBiZSB0cmlnZ2VyZWQuXG4gKiBXaWxsIHRyeSB0byB0cmlnZ2VyIGFib3J0IGV2ZW50IGZvciBhbGwgbGlua2VkIEFib3J0U2lnbmFsIG5vZGVzLlxuICpcbiAqIC0gSWYgdGhlcmUgaXMgYSB0aW1lb3V0LCB0aGUgdGltZXIgd2lsbCBiZSBjYW5jZWxsZWQuXG4gKiAtIElmIGFib3J0ZWQgaXMgdHJ1ZSwgbm90aGluZyB3aWxsIGhhcHBlbi5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhenVyZS9henVyZS1zZGsvdHMtdXNlLWludGVyZmFjZS1wYXJhbWV0ZXJzXG5leHBvcnQgZnVuY3Rpb24gYWJvcnRTaWduYWwoc2lnbmFsKSB7XG4gICAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHNpZ25hbC5vbmFib3J0KSB7XG4gICAgICAgIHNpZ25hbC5vbmFib3J0LmNhbGwoc2lnbmFsKTtcbiAgICB9XG4gICAgY29uc3QgbGlzdGVuZXJzID0gbGlzdGVuZXJzTWFwLmdldChzaWduYWwpO1xuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgY29weSBvZiBsaXN0ZW5lcnMgc28gbXV0YXRpb25zIHRvIHRoZSBhcnJheVxuICAgICAgICAvLyAoZS5nLiB2aWEgcmVtb3ZlTGlzdGVuZXIgY2FsbHMpIGRvbid0IGFmZmVjdCB0aGUgbGlzdGVuZXJzXG4gICAgICAgIC8vIHdlIGludm9rZS5cbiAgICAgICAgbGlzdGVuZXJzLnNsaWNlKCkuZm9yRWFjaCgobGlzdGVuZXIpID0+IHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwoc2lnbmFsLCB7IHR5cGU6IFwiYWJvcnRcIiB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFib3J0ZWRNYXAuc2V0KHNpZ25hbCwgdHJ1ZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BYm9ydFNpZ25hbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchResponseParser: () => (/* binding */ BatchResponseParser)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _azure_core_http_compat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-http-compat */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _BatchUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BatchUtils */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.js\");\n/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./log */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\nconst HTTP_HEADER_DELIMITER = \": \";\nconst SPACE_DELIMITER = \" \";\nconst NOT_FOUND = -1;\n/**\n * Util class for parsing batch response.\n */\nclass BatchResponseParser {\n    constructor(batchResponse, subRequests) {\n        if (!batchResponse || !batchResponse.contentType) {\n            // In special case(reported), server may return invalid content-type which could not be parsed.\n            throw new RangeError(\"batchResponse is malformed or doesn't contain valid content-type.\");\n        }\n        if (!subRequests || subRequests.size === 0) {\n            // This should be prevent during coding.\n            throw new RangeError(\"Invalid state: subRequests is not provided or size is 0.\");\n        }\n        this.batchResponse = batchResponse;\n        this.subRequests = subRequests;\n        this.responseBatchBoundary = this.batchResponse.contentType.split(\"=\")[1];\n        this.perResponsePrefix = `--${this.responseBatchBoundary}${_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HTTP_LINE_ENDING}`;\n        this.batchResponseEnding = `--${this.responseBatchBoundary}--`;\n    }\n    // For example of response, please refer to https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#response\n    async parseBatchResponse() {\n        // When logic reach here, suppose batch request has already succeeded with 202, so we can further parse\n        // sub request's response.\n        if (this.batchResponse._response.status !== _utils_constants__WEBPACK_IMPORTED_MODULE_2__.HTTPURLConnection.HTTP_ACCEPTED) {\n            throw new Error(`Invalid state: batch request failed with status: '${this.batchResponse._response.status}'.`);\n        }\n        const responseBodyAsText = await (0,_BatchUtils__WEBPACK_IMPORTED_MODULE_3__.getBodyAsText)(this.batchResponse);\n        const subResponses = responseBodyAsText\n            .split(this.batchResponseEnding)[0] // string after ending is useless\n            .split(this.perResponsePrefix)\n            .slice(1); // string before first response boundary is useless\n        const subResponseCount = subResponses.length;\n        // Defensive coding in case of potential error parsing.\n        // Note: subResponseCount == 1 is special case where sub request is invalid.\n        // We try to prevent such cases through early validation, e.g. validate sub request count >= 1.\n        // While in unexpected sub request invalid case, we allow sub response to be parsed and return to user.\n        if (subResponseCount !== this.subRequests.size && subResponseCount !== 1) {\n            throw new Error(\"Invalid state: sub responses' count is not equal to sub requests' count.\");\n        }\n        const deserializedSubResponses = new Array(subResponseCount);\n        let subResponsesSucceededCount = 0;\n        let subResponsesFailedCount = 0;\n        // Parse sub subResponses.\n        for (let index = 0; index < subResponseCount; index++) {\n            const subResponse = subResponses[index];\n            const deserializedSubResponse = {};\n            deserializedSubResponse.headers = (0,_azure_core_http_compat__WEBPACK_IMPORTED_MODULE_1__.toHttpHeadersLike)((0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)());\n            const responseLines = subResponse.split(`${_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HTTP_LINE_ENDING}`);\n            let subRespHeaderStartFound = false;\n            let subRespHeaderEndFound = false;\n            let subRespFailed = false;\n            let contentId = NOT_FOUND;\n            for (const responseLine of responseLines) {\n                if (!subRespHeaderStartFound) {\n                    // Convention line to indicate content ID\n                    if (responseLine.startsWith(_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.CONTENT_ID)) {\n                        contentId = parseInt(responseLine.split(HTTP_HEADER_DELIMITER)[1]);\n                    }\n                    // Http version line with status code indicates the start of sub request's response.\n                    // Example: HTTP/1.1 202 Accepted\n                    if (responseLine.startsWith(_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HTTP_VERSION_1_1)) {\n                        subRespHeaderStartFound = true;\n                        const tokens = responseLine.split(SPACE_DELIMITER);\n                        deserializedSubResponse.status = parseInt(tokens[1]);\n                        deserializedSubResponse.statusMessage = tokens.slice(2).join(SPACE_DELIMITER);\n                    }\n                    continue; // Skip convention headers not specifically for sub request i.e. Content-Type: application/http and Content-ID: *\n                }\n                if (responseLine.trim() === \"\") {\n                    // Sub response's header start line already found, and the first empty line indicates header end line found.\n                    if (!subRespHeaderEndFound) {\n                        subRespHeaderEndFound = true;\n                    }\n                    continue; // Skip empty line\n                }\n                // Note: when code reach here, it indicates subRespHeaderStartFound == true\n                if (!subRespHeaderEndFound) {\n                    if (responseLine.indexOf(HTTP_HEADER_DELIMITER) === -1) {\n                        // Defensive coding to prevent from missing valuable lines.\n                        throw new Error(`Invalid state: find non-empty line '${responseLine}' without HTTP header delimiter '${HTTP_HEADER_DELIMITER}'.`);\n                    }\n                    // Parse headers of sub response.\n                    const tokens = responseLine.split(HTTP_HEADER_DELIMITER);\n                    deserializedSubResponse.headers.set(tokens[0], tokens[1]);\n                    if (tokens[0] === _utils_constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.X_MS_ERROR_CODE) {\n                        deserializedSubResponse.errorCode = tokens[1];\n                        subRespFailed = true;\n                    }\n                }\n                else {\n                    // Assemble body of sub response.\n                    if (!deserializedSubResponse.bodyAsText) {\n                        deserializedSubResponse.bodyAsText = \"\";\n                    }\n                    deserializedSubResponse.bodyAsText += responseLine;\n                }\n            } // Inner for end\n            // The response will contain the Content-ID header for each corresponding subrequest response to use for tracking.\n            // The Content-IDs are set to a valid index in the subrequests we sent. In the status code 202 path, we could expect it\n            // to be 1-1 mapping from the [0, subRequests.size) to the Content-IDs returned. If not, we simply don't return that\n            // unexpected subResponse in the parsed reponse and we can always look it up in the raw response for debugging purpose.\n            if (contentId !== NOT_FOUND &&\n                Number.isInteger(contentId) &&\n                contentId >= 0 &&\n                contentId < this.subRequests.size &&\n                deserializedSubResponses[contentId] === undefined) {\n                deserializedSubResponse._request = this.subRequests.get(contentId);\n                deserializedSubResponses[contentId] = deserializedSubResponse;\n            }\n            else {\n                _log__WEBPACK_IMPORTED_MODULE_4__.logger.error(`subResponses[${index}] is dropped as the Content-ID is not found or invalid, Content-ID: ${contentId}`);\n            }\n            if (subRespFailed) {\n                subResponsesFailedCount++;\n            }\n            else {\n                subResponsesSucceededCount++;\n            }\n        }\n        return {\n            subResponses: deserializedSubResponses,\n            subResponsesSucceededCount: subResponsesSucceededCount,\n            subResponsesFailedCount: subResponsesFailedCount,\n        };\n    }\n}\n//# sourceMappingURL=BatchResponseParser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBodyAsText: () => (/* binding */ getBodyAsText),\n/* harmony export */   utf8ByteLength: () => (/* binding */ utf8ByteLength)\n/* harmony export */ });\n/* harmony import */ var _utils_utils_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/utils.node */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.node.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\nasync function getBodyAsText(batchResponse) {\n    let buffer = Buffer.alloc(_utils_constants__WEBPACK_IMPORTED_MODULE_0__.BATCH_MAX_PAYLOAD_IN_BYTES);\n    const responseLength = await (0,_utils_utils_node__WEBPACK_IMPORTED_MODULE_1__.streamToBuffer2)(batchResponse.readableStreamBody, buffer);\n    // Slice the buffer to trim the empty ending.\n    buffer = buffer.slice(0, responseLength);\n    return buffer.toString();\n}\nfunction utf8ByteLength(str) {\n    return Buffer.byteLength(str);\n}\n//# sourceMappingURL=BatchUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL0JhdGNoVXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDcUQ7QUFDVTtBQUN4RDtBQUNQLDhCQUE4Qix3RUFBMEI7QUFDeEQsaUNBQWlDLGtFQUFlO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvQmF0Y2hVdGlscy5qcz8xMjQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgc3RyZWFtVG9CdWZmZXIyIH0gZnJvbSBcIi4vdXRpbHMvdXRpbHMubm9kZVwiO1xuaW1wb3J0IHsgQkFUQ0hfTUFYX1BBWUxPQURfSU5fQllURVMgfSBmcm9tIFwiLi91dGlscy9jb25zdGFudHNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRCb2R5QXNUZXh0KGJhdGNoUmVzcG9uc2UpIHtcbiAgICBsZXQgYnVmZmVyID0gQnVmZmVyLmFsbG9jKEJBVENIX01BWF9QQVlMT0FEX0lOX0JZVEVTKTtcbiAgICBjb25zdCByZXNwb25zZUxlbmd0aCA9IGF3YWl0IHN0cmVhbVRvQnVmZmVyMihiYXRjaFJlc3BvbnNlLnJlYWRhYmxlU3RyZWFtQm9keSwgYnVmZmVyKTtcbiAgICAvLyBTbGljZSB0aGUgYnVmZmVyIHRvIHRyaW0gdGhlIGVtcHR5IGVuZGluZy5cbiAgICBidWZmZXIgPSBidWZmZXIuc2xpY2UoMCwgcmVzcG9uc2VMZW5ndGgpO1xuICAgIHJldHVybiBidWZmZXIudG9TdHJpbmcoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1dGY4Qnl0ZUxlbmd0aChzdHIpIHtcbiAgICByZXR1cm4gQnVmZmVyLmJ5dGVMZW5ndGgoc3RyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJhdGNoVXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobBatch: () => (/* binding */ BlobBatch)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _azure_core_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-auth */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/index.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _Clients__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Clients */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js\");\n/* harmony import */ var _utils_Mutex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/Mutex */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Pipeline */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _azure_core_xml__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/core-xml */ \"(rsc)/./node_modules/@azure/core-xml/dist/esm/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/tracing */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _policies_StorageSharedKeyCredentialPolicyV2__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./policies/StorageSharedKeyCredentialPolicyV2 */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A BlobBatch represents an aggregated set of operations on blobs.\n * Currently, only `delete` and `setAccessTier` are supported.\n */\nclass BlobBatch {\n    constructor() {\n        this.batch = \"batch\";\n        this.batchRequest = new InnerBatchRequest();\n    }\n    /**\n     * Get the value of Content-Type for a batch request.\n     * The value must be multipart/mixed with a batch boundary.\n     * Example: multipart/mixed; boundary=batch_a81786c8-e301-4e42-a729-a32ca24ae252\n     */\n    getMultiPartContentType() {\n        return this.batchRequest.getMultipartContentType();\n    }\n    /**\n     * Get assembled HTTP request body for sub requests.\n     */\n    getHttpRequestBody() {\n        return this.batchRequest.getHttpRequestBody();\n    }\n    /**\n     * Get sub requests that are added into the batch request.\n     */\n    getSubRequests() {\n        return this.batchRequest.getSubRequests();\n    }\n    async addSubRequestInternal(subRequest, assembleSubRequestFunc) {\n        await _utils_Mutex__WEBPACK_IMPORTED_MODULE_5__.Mutex.lock(this.batch);\n        try {\n            this.batchRequest.preAddSubRequest(subRequest);\n            await assembleSubRequestFunc();\n            this.batchRequest.postAddSubRequest(subRequest);\n        }\n        finally {\n            await _utils_Mutex__WEBPACK_IMPORTED_MODULE_5__.Mutex.unlock(this.batch);\n        }\n    }\n    setBatchType(batchType) {\n        if (!this.batchType) {\n            this.batchType = batchType;\n        }\n        if (this.batchType !== batchType) {\n            throw new RangeError(`BlobBatch only supports one operation type per batch and it already is being used for ${this.batchType} operations.`);\n        }\n    }\n    async deleteBlob(urlOrBlobClient, credentialOrOptions, options) {\n        let url;\n        let credential;\n        if (typeof urlOrBlobClient === \"string\" &&\n            ((_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNode && credentialOrOptions instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_6__.StorageSharedKeyCredential) ||\n                credentialOrOptions instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__.AnonymousCredential ||\n                (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrOptions))) {\n            // First overload\n            url = urlOrBlobClient;\n            credential = credentialOrOptions;\n        }\n        else if (urlOrBlobClient instanceof _Clients__WEBPACK_IMPORTED_MODULE_8__.BlobClient) {\n            // Second overload\n            url = urlOrBlobClient.url;\n            credential = urlOrBlobClient.credential;\n            options = credentialOrOptions;\n        }\n        else {\n            throw new RangeError(\"Invalid arguments. Either url and credential, or BlobClient need be provided.\");\n        }\n        if (!options) {\n            options = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BatchDeleteRequest-addSubRequest\", options, async (updatedOptions) => {\n            this.setBatchType(\"delete\");\n            await this.addSubRequestInternal({\n                url: url,\n                credential: credential,\n            }, async () => {\n                await new _Clients__WEBPACK_IMPORTED_MODULE_8__.BlobClient(url, this.batchRequest.createPipeline(credential)).delete(updatedOptions);\n            });\n        });\n    }\n    async setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options) {\n        let url;\n        let credential;\n        let tier;\n        if (typeof urlOrBlobClient === \"string\" &&\n            ((_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNode && credentialOrTier instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_6__.StorageSharedKeyCredential) ||\n                credentialOrTier instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__.AnonymousCredential ||\n                (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrTier))) {\n            // First overload\n            url = urlOrBlobClient;\n            credential = credentialOrTier;\n            tier = tierOrOptions;\n        }\n        else if (urlOrBlobClient instanceof _Clients__WEBPACK_IMPORTED_MODULE_8__.BlobClient) {\n            // Second overload\n            url = urlOrBlobClient.url;\n            credential = urlOrBlobClient.credential;\n            tier = credentialOrTier;\n            options = tierOrOptions;\n        }\n        else {\n            throw new RangeError(\"Invalid arguments. Either url and credential, or BlobClient need be provided.\");\n        }\n        if (!options) {\n            options = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BatchSetTierRequest-addSubRequest\", options, async (updatedOptions) => {\n            this.setBatchType(\"setAccessTier\");\n            await this.addSubRequestInternal({\n                url: url,\n                credential: credential,\n            }, async () => {\n                await new _Clients__WEBPACK_IMPORTED_MODULE_8__.BlobClient(url, this.batchRequest.createPipeline(credential)).setAccessTier(tier, updatedOptions);\n            });\n        });\n    }\n}\n/**\n * Inner batch request class which is responsible for assembling and serializing sub requests.\n * See https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#request-body for how requests are assembled.\n */\nclass InnerBatchRequest {\n    constructor() {\n        this.operationCount = 0;\n        this.body = \"\";\n        const tempGuid = (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        // batch_{batchid}\n        this.boundary = `batch_${tempGuid}`;\n        // --batch_{batchid}\n        // Content-Type: application/http\n        // Content-Transfer-Encoding: binary\n        this.subRequestPrefix = `--${this.boundary}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HeaderConstants.CONTENT_TYPE}: application/http${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HeaderConstants.CONTENT_TRANSFER_ENCODING}: binary`;\n        // multipart/mixed; boundary=batch_{batchid}\n        this.multipartContentType = `multipart/mixed; boundary=${this.boundary}`;\n        // --batch_{batchid}--\n        this.batchRequestEnding = `--${this.boundary}--`;\n        this.subRequests = new Map();\n    }\n    /**\n     * Create pipeline to assemble sub requests. The idea here is to use existing\n     * credential and serialization/deserialization components, with additional policies to\n     * filter unnecessary headers, assemble sub requests into request's body\n     * and intercept request from going to wire.\n     * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n     */\n    createPipeline(credential) {\n        const corePipeline = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__.createEmptyPipeline)();\n        corePipeline.addPolicy((0,_azure_core_client__WEBPACK_IMPORTED_MODULE_4__.serializationPolicy)({\n            stringifyXML: _azure_core_xml__WEBPACK_IMPORTED_MODULE_3__.stringifyXML,\n            serializerOptions: {\n                xml: {\n                    xmlCharKey: \"#\",\n                },\n            },\n        }), { phase: \"Serialize\" });\n        // Use batch header filter policy to exclude unnecessary headers\n        corePipeline.addPolicy(batchHeaderFilterPolicy());\n        // Use batch assemble policy to assemble request and intercept request from going to wire\n        corePipeline.addPolicy(batchRequestAssemblePolicy(this), { afterPhase: \"Sign\" });\n        if ((0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credential)) {\n            corePipeline.addPolicy((0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__.bearerTokenAuthenticationPolicy)({\n                credential,\n                scopes: _utils_constants__WEBPACK_IMPORTED_MODULE_10__.StorageOAuthScopes,\n                challengeCallbacks: { authorizeRequestOnChallenge: _azure_core_client__WEBPACK_IMPORTED_MODULE_4__.authorizeRequestOnTenantChallenge },\n            }), { phase: \"Sign\" });\n        }\n        else if (credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_6__.StorageSharedKeyCredential) {\n            corePipeline.addPolicy((0,_policies_StorageSharedKeyCredentialPolicyV2__WEBPACK_IMPORTED_MODULE_11__.storageSharedKeyCredentialPolicy)({\n                accountName: credential.accountName,\n                accountKey: credential.accountKey,\n            }), { phase: \"Sign\" });\n        }\n        const pipeline = new _Pipeline__WEBPACK_IMPORTED_MODULE_12__.Pipeline([]);\n        // attach the v2 pipeline to this one\n        pipeline._credential = credential;\n        pipeline._corePipeline = corePipeline;\n        return pipeline;\n    }\n    appendSubRequestToBody(request) {\n        // Start to assemble sub request\n        this.body += [\n            this.subRequestPrefix, // sub request constant prefix\n            `${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HeaderConstants.CONTENT_ID}: ${this.operationCount}`, // sub request's content ID\n            \"\", // empty line after sub request's content ID\n            `${request.method.toString()} ${(0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__.getURLPathAndQuery)(request.url)} ${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_VERSION_1_1}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING}`, // sub request start line with method\n        ].join(_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING);\n        for (const [name, value] of request.headers) {\n            this.body += `${name}: ${value}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING}`;\n        }\n        this.body += _utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING; // sub request's headers need be ending with an empty line\n        // No body to assemble for current batch request support\n        // End to assemble sub request\n    }\n    preAddSubRequest(subRequest) {\n        if (this.operationCount >= _utils_constants__WEBPACK_IMPORTED_MODULE_10__.BATCH_MAX_REQUEST) {\n            throw new RangeError(`Cannot exceed ${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.BATCH_MAX_REQUEST} sub requests in a single batch`);\n        }\n        // Fast fail if url for sub request is invalid\n        const path = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__.getURLPath)(subRequest.url);\n        if (!path || path === \"\") {\n            throw new RangeError(`Invalid url for sub request: '${subRequest.url}'`);\n        }\n    }\n    postAddSubRequest(subRequest) {\n        this.subRequests.set(this.operationCount, subRequest);\n        this.operationCount++;\n    }\n    // Return the http request body with assembling the ending line to the sub request body.\n    getHttpRequestBody() {\n        return `${this.body}${this.batchRequestEnding}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING}`;\n    }\n    getMultipartContentType() {\n        return this.multipartContentType;\n    }\n    getSubRequests() {\n        return this.subRequests;\n    }\n}\nfunction batchRequestAssemblePolicy(batchRequest) {\n    return {\n        name: \"batchRequestAssemblePolicy\",\n        async sendRequest(request) {\n            batchRequest.appendSubRequestToBody(request);\n            return {\n                request,\n                status: 200,\n                headers: (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__.createHttpHeaders)(),\n            };\n        },\n    };\n}\nfunction batchHeaderFilterPolicy() {\n    return {\n        name: \"batchHeaderFilterPolicy\",\n        async sendRequest(request, next) {\n            let xMsHeaderName = \"\";\n            for (const [name] of request.headers) {\n                if ((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__.iEqual)(name, _utils_constants__WEBPACK_IMPORTED_MODULE_10__.HeaderConstants.X_MS_VERSION)) {\n                    xMsHeaderName = name;\n                }\n            }\n            if (xMsHeaderName !== \"\") {\n                request.headers.delete(xMsHeaderName); // The subrequests should not have the x-ms-version header.\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=BlobBatch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobBatchClient: () => (/* binding */ BlobBatchClient)\n/* harmony export */ });\n/* harmony import */ var _BatchResponseParser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./BatchResponseParser */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js\");\n/* harmony import */ var _BatchUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BatchUtils */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.js\");\n/* harmony import */ var _BlobBatch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BlobBatch */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/tracing */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _StorageContextClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StorageContextClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Pipeline */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n */\nclass BlobBatchClient {\n    constructor(url, credentialOrPipeline, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        let pipeline;\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_0__.isPipelineLike)(credentialOrPipeline)) {\n            pipeline = credentialOrPipeline;\n        }\n        else if (!credentialOrPipeline) {\n            // no credential provided\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_0__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_1__.AnonymousCredential(), options);\n        }\n        else {\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_0__.newPipeline)(credentialOrPipeline, options);\n        }\n        const storageClientContext = new _StorageContextClient__WEBPACK_IMPORTED_MODULE_2__.StorageContextClient(url, (0,_Pipeline__WEBPACK_IMPORTED_MODULE_0__.getCoreClientOptions)(pipeline));\n        const path = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.getURLPath)(url);\n        if (path && path !== \"/\") {\n            // Container scoped.\n            this.serviceOrContainerContext = storageClientContext.container;\n        }\n        else {\n            this.serviceOrContainerContext = storageClientContext.service;\n        }\n    }\n    /**\n     * Creates a {@link BlobBatch}.\n     * A BlobBatch represents an aggregated set of operations on blobs.\n     */\n    createBatch() {\n        return new _BlobBatch__WEBPACK_IMPORTED_MODULE_4__.BlobBatch();\n    }\n    async deleteBlobs(urlsOrBlobClients, credentialOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        const batch = new _BlobBatch__WEBPACK_IMPORTED_MODULE_4__.BlobBatch();\n        for (const urlOrBlobClient of urlsOrBlobClients) {\n            if (typeof urlOrBlobClient === \"string\") {\n                await batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);\n            }\n            else {\n                await batch.deleteBlob(urlOrBlobClient, credentialOrOptions);\n            }\n        }\n        return this.submitBatch(batch);\n    }\n    async setBlobsAccessTier(urlsOrBlobClients, credentialOrTier, tierOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        const batch = new _BlobBatch__WEBPACK_IMPORTED_MODULE_4__.BlobBatch();\n        for (const urlOrBlobClient of urlsOrBlobClients) {\n            if (typeof urlOrBlobClient === \"string\") {\n                await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);\n            }\n            else {\n                await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);\n            }\n        }\n        return this.submitBatch(batch);\n    }\n    /**\n     * Submit batch request which consists of multiple subrequests.\n     *\n     * Get `blobBatchClient` and other details before running the snippets.\n     * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n     *\n     * Example usage:\n     *\n     * ```js\n     * let batchRequest = new BlobBatch();\n     * await batchRequest.deleteBlob(urlInString0, credential0);\n     * await batchRequest.deleteBlob(urlInString1, credential1, {\n     *  deleteSnapshots: \"include\"\n     * });\n     * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n     * console.log(batchResp.subResponsesSucceededCount);\n     * ```\n     *\n     * Example using a lease:\n     *\n     * ```js\n     * let batchRequest = new BlobBatch();\n     * await batchRequest.setBlobAccessTier(blockBlobClient0, \"Cool\");\n     * await batchRequest.setBlobAccessTier(blockBlobClient1, \"Cool\", {\n     *  conditions: { leaseId: leaseId }\n     * });\n     * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n     * console.log(batchResp.subResponsesSucceededCount);\n     * ```\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n     *\n     * @param batchRequest - A set of Delete or SetTier operations.\n     * @param options -\n     */\n    async submitBatch(batchRequest, options = {}) {\n        if (!batchRequest || batchRequest.getSubRequests().size === 0) {\n            throw new RangeError(\"Batch request should contain one or more sub requests.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_5__.tracingClient.withSpan(\"BlobBatchClient-submitBatch\", options, async (updatedOptions) => {\n            const batchRequestBody = batchRequest.getHttpRequestBody();\n            // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n            const rawBatchResponse = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.assertResponse)(await this.serviceOrContainerContext.submitBatch((0,_BatchUtils__WEBPACK_IMPORTED_MODULE_6__.utf8ByteLength)(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign({}, updatedOptions)));\n            // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n            const batchResponseParser = new _BatchResponseParser__WEBPACK_IMPORTED_MODULE_7__.BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());\n            const responseSummary = await batchResponseParser.parseBatchResponse();\n            const res = {\n                _response: rawBatchResponse._response,\n                contentType: rawBatchResponse.contentType,\n                errorCode: rawBatchResponse.errorCode,\n                requestId: rawBatchResponse.requestId,\n                clientRequestId: rawBatchResponse.clientRequestId,\n                version: rawBatchResponse.version,\n                subResponses: responseSummary.subResponses,\n                subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n                subResponsesFailedCount: responseSummary.subResponsesFailedCount,\n            };\n            return res;\n        });\n    }\n}\n//# sourceMappingURL=BlobBatchClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobDownloadResponse: () => (/* binding */ BlobDownloadResponse)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _utils_RetriableReadableStream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/RetriableReadableStream */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/RetriableReadableStream.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * BlobDownloadResponse implements BlobDownloadResponseParsed interface, and in Node.js runtime it will\n * automatically retry when internal read stream unexpected ends. (This kind of unexpected ends cannot\n * trigger retries defined in pipeline retry policy.)\n *\n * The {@link readableStreamBody} stream will retry underlayer, you can just use it as a normal Node.js\n * Readable stream.\n */\nclass BlobDownloadResponse {\n    /**\n     * Indicates that the service supports\n     * requests for partial file content.\n     *\n     * @readonly\n     */\n    get acceptRanges() {\n        return this.originalResponse.acceptRanges;\n    }\n    /**\n     * Returns if it was previously specified\n     * for the file.\n     *\n     * @readonly\n     */\n    get cacheControl() {\n        return this.originalResponse.cacheControl;\n    }\n    /**\n     * Returns the value that was specified\n     * for the 'x-ms-content-disposition' header and specifies how to process the\n     * response.\n     *\n     * @readonly\n     */\n    get contentDisposition() {\n        return this.originalResponse.contentDisposition;\n    }\n    /**\n     * Returns the value that was specified\n     * for the Content-Encoding request header.\n     *\n     * @readonly\n     */\n    get contentEncoding() {\n        return this.originalResponse.contentEncoding;\n    }\n    /**\n     * Returns the value that was specified\n     * for the Content-Language request header.\n     *\n     * @readonly\n     */\n    get contentLanguage() {\n        return this.originalResponse.contentLanguage;\n    }\n    /**\n     * The current sequence number for a\n     * page blob. This header is not returned for block blobs or append blobs.\n     *\n     * @readonly\n     */\n    get blobSequenceNumber() {\n        return this.originalResponse.blobSequenceNumber;\n    }\n    /**\n     * The blob's type. Possible values include:\n     * 'BlockBlob', 'PageBlob', 'AppendBlob'.\n     *\n     * @readonly\n     */\n    get blobType() {\n        return this.originalResponse.blobType;\n    }\n    /**\n     * The number of bytes present in the\n     * response body.\n     *\n     * @readonly\n     */\n    get contentLength() {\n        return this.originalResponse.contentLength;\n    }\n    /**\n     * If the file has an MD5 hash and the\n     * request is to read the full file, this response header is returned so that\n     * the client can check for message content integrity. If the request is to\n     * read a specified range and the 'x-ms-range-get-content-md5' is set to\n     * true, then the request returns an MD5 hash for the range, as long as the\n     * range size is less than or equal to 4 MB. If neither of these sets of\n     * conditions is true, then no value is returned for the 'Content-MD5'\n     * header.\n     *\n     * @readonly\n     */\n    get contentMD5() {\n        return this.originalResponse.contentMD5;\n    }\n    /**\n     * Indicates the range of bytes returned if\n     * the client requested a subset of the file by setting the Range request\n     * header.\n     *\n     * @readonly\n     */\n    get contentRange() {\n        return this.originalResponse.contentRange;\n    }\n    /**\n     * The content type specified for the file.\n     * The default content type is 'application/octet-stream'\n     *\n     * @readonly\n     */\n    get contentType() {\n        return this.originalResponse.contentType;\n    }\n    /**\n     * Conclusion time of the last attempted\n     * Copy File operation where this file was the destination file. This value\n     * can specify the time of a completed, aborted, or failed copy attempt.\n     *\n     * @readonly\n     */\n    get copyCompletedOn() {\n        return this.originalResponse.copyCompletedOn;\n    }\n    /**\n     * String identifier for the last attempted Copy\n     * File operation where this file was the destination file.\n     *\n     * @readonly\n     */\n    get copyId() {\n        return this.originalResponse.copyId;\n    }\n    /**\n     * Contains the number of bytes copied and\n     * the total bytes in the source in the last attempted Copy File operation\n     * where this file was the destination file. Can show between 0 and\n     * Content-Length bytes copied.\n     *\n     * @readonly\n     */\n    get copyProgress() {\n        return this.originalResponse.copyProgress;\n    }\n    /**\n     * URL up to 2KB in length that specifies the\n     * source file used in the last attempted Copy File operation where this file\n     * was the destination file.\n     *\n     * @readonly\n     */\n    get copySource() {\n        return this.originalResponse.copySource;\n    }\n    /**\n     * State of the copy operation\n     * identified by 'x-ms-copy-id'. Possible values include: 'pending',\n     * 'success', 'aborted', 'failed'\n     *\n     * @readonly\n     */\n    get copyStatus() {\n        return this.originalResponse.copyStatus;\n    }\n    /**\n     * Only appears when\n     * x-ms-copy-status is failed or pending. Describes cause of fatal or\n     * non-fatal copy operation failure.\n     *\n     * @readonly\n     */\n    get copyStatusDescription() {\n        return this.originalResponse.copyStatusDescription;\n    }\n    /**\n     * When a blob is leased,\n     * specifies whether the lease is of infinite or fixed duration. Possible\n     * values include: 'infinite', 'fixed'.\n     *\n     * @readonly\n     */\n    get leaseDuration() {\n        return this.originalResponse.leaseDuration;\n    }\n    /**\n     * Lease state of the blob. Possible\n     * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.\n     *\n     * @readonly\n     */\n    get leaseState() {\n        return this.originalResponse.leaseState;\n    }\n    /**\n     * The current lease status of the\n     * blob. Possible values include: 'locked', 'unlocked'.\n     *\n     * @readonly\n     */\n    get leaseStatus() {\n        return this.originalResponse.leaseStatus;\n    }\n    /**\n     * A UTC date/time value generated by the service that\n     * indicates the time at which the response was initiated.\n     *\n     * @readonly\n     */\n    get date() {\n        return this.originalResponse.date;\n    }\n    /**\n     * The number of committed blocks\n     * present in the blob. This header is returned only for append blobs.\n     *\n     * @readonly\n     */\n    get blobCommittedBlockCount() {\n        return this.originalResponse.blobCommittedBlockCount;\n    }\n    /**\n     * The ETag contains a value that you can use to\n     * perform operations conditionally, in quotes.\n     *\n     * @readonly\n     */\n    get etag() {\n        return this.originalResponse.etag;\n    }\n    /**\n     * The number of tags associated with the blob\n     *\n     * @readonly\n     */\n    get tagCount() {\n        return this.originalResponse.tagCount;\n    }\n    /**\n     * The error code.\n     *\n     * @readonly\n     */\n    get errorCode() {\n        return this.originalResponse.errorCode;\n    }\n    /**\n     * The value of this header is set to\n     * true if the file data and application metadata are completely encrypted\n     * using the specified algorithm. Otherwise, the value is set to false (when\n     * the file is unencrypted, or if only parts of the file/application metadata\n     * are encrypted).\n     *\n     * @readonly\n     */\n    get isServerEncrypted() {\n        return this.originalResponse.isServerEncrypted;\n    }\n    /**\n     * If the blob has a MD5 hash, and if\n     * request contains range header (Range or x-ms-range), this response header\n     * is returned with the value of the whole blob's MD5 value. This value may\n     * or may not be equal to the value returned in Content-MD5 header, with the\n     * latter calculated from the requested range.\n     *\n     * @readonly\n     */\n    get blobContentMD5() {\n        return this.originalResponse.blobContentMD5;\n    }\n    /**\n     * Returns the date and time the file was last\n     * modified. Any operation that modifies the file or its properties updates\n     * the last modified time.\n     *\n     * @readonly\n     */\n    get lastModified() {\n        return this.originalResponse.lastModified;\n    }\n    /**\n     * Returns the UTC date and time generated by the service that indicates the time at which the blob was\n     * last read or written to.\n     *\n     * @readonly\n     */\n    get lastAccessed() {\n        return this.originalResponse.lastAccessed;\n    }\n    /**\n     * Returns the date and time the blob was created.\n     *\n     * @readonly\n     */\n    get createdOn() {\n        return this.originalResponse.createdOn;\n    }\n    /**\n     * A name-value pair\n     * to associate with a file storage object.\n     *\n     * @readonly\n     */\n    get metadata() {\n        return this.originalResponse.metadata;\n    }\n    /**\n     * This header uniquely identifies the request\n     * that was made and can be used for troubleshooting the request.\n     *\n     * @readonly\n     */\n    get requestId() {\n        return this.originalResponse.requestId;\n    }\n    /**\n     * If a client request id header is sent in the request, this header will be present in the\n     * response with the same value.\n     *\n     * @readonly\n     */\n    get clientRequestId() {\n        return this.originalResponse.clientRequestId;\n    }\n    /**\n     * Indicates the version of the Blob service used\n     * to execute the request.\n     *\n     * @readonly\n     */\n    get version() {\n        return this.originalResponse.version;\n    }\n    /**\n     * Indicates the versionId of the downloaded blob version.\n     *\n     * @readonly\n     */\n    get versionId() {\n        return this.originalResponse.versionId;\n    }\n    /**\n     * Indicates whether version of this blob is a current version.\n     *\n     * @readonly\n     */\n    get isCurrentVersion() {\n        return this.originalResponse.isCurrentVersion;\n    }\n    /**\n     * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned\n     * when the blob was encrypted with a customer-provided key.\n     *\n     * @readonly\n     */\n    get encryptionKeySha256() {\n        return this.originalResponse.encryptionKeySha256;\n    }\n    /**\n     * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to\n     * true, then the request returns a crc64 for the range, as long as the range size is less than\n     * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is\n     * specified in the same request, it will fail with 400(Bad Request)\n     */\n    get contentCrc64() {\n        return this.originalResponse.contentCrc64;\n    }\n    /**\n     * Object Replication Policy Id of the destination blob.\n     *\n     * @readonly\n     */\n    get objectReplicationDestinationPolicyId() {\n        return this.originalResponse.objectReplicationDestinationPolicyId;\n    }\n    /**\n     * Parsed Object Replication Policy Id, Rule Id(s) and status of the source blob.\n     *\n     * @readonly\n     */\n    get objectReplicationSourceProperties() {\n        return this.originalResponse.objectReplicationSourceProperties;\n    }\n    /**\n     * If this blob has been sealed.\n     *\n     * @readonly\n     */\n    get isSealed() {\n        return this.originalResponse.isSealed;\n    }\n    /**\n     * UTC date/time value generated by the service that indicates the time at which the blob immutability policy will expire.\n     *\n     * @readonly\n     */\n    get immutabilityPolicyExpiresOn() {\n        return this.originalResponse.immutabilityPolicyExpiresOn;\n    }\n    /**\n     * Indicates immutability policy mode.\n     *\n     * @readonly\n     */\n    get immutabilityPolicyMode() {\n        return this.originalResponse.immutabilityPolicyMode;\n    }\n    /**\n     * Indicates if a legal hold is present on the blob.\n     *\n     * @readonly\n     */\n    get legalHold() {\n        return this.originalResponse.legalHold;\n    }\n    /**\n     * The response body as a browser Blob.\n     * Always undefined in node.js.\n     *\n     * @readonly\n     */\n    get contentAsBlob() {\n        return this.originalResponse.blobBody;\n    }\n    /**\n     * The response body as a node.js Readable stream.\n     * Always undefined in the browser.\n     *\n     * It will automatically retry when internal read stream unexpected ends.\n     *\n     * @readonly\n     */\n    get readableStreamBody() {\n        return _azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNode ? this.blobDownloadStream : undefined;\n    }\n    /**\n     * The HTTP response.\n     */\n    get _response() {\n        return this.originalResponse._response;\n    }\n    /**\n     * Creates an instance of BlobDownloadResponse.\n     *\n     * @param originalResponse -\n     * @param getter -\n     * @param offset -\n     * @param count -\n     * @param options -\n     */\n    constructor(originalResponse, getter, offset, count, options = {}) {\n        this.originalResponse = originalResponse;\n        this.blobDownloadStream = new _utils_RetriableReadableStream__WEBPACK_IMPORTED_MODULE_1__.RetriableReadableStream(this.originalResponse.readableStreamBody, getter, offset, count, options);\n    }\n}\n//# sourceMappingURL=BlobDownloadResponse.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobLeaseClient: () => (/* binding */ BlobLeaseClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/tracing */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n */\nclass BlobLeaseClient {\n    /**\n     * Gets the lease Id.\n     *\n     * @readonly\n     */\n    get leaseId() {\n        return this._leaseId;\n    }\n    /**\n     * Gets the url.\n     *\n     * @readonly\n     */\n    get url() {\n        return this._url;\n    }\n    /**\n     * Creates an instance of BlobLeaseClient.\n     * @param client - The client to make the lease operation requests.\n     * @param leaseId - Initial proposed lease id.\n     */\n    constructor(client, leaseId) {\n        const clientContext = client.storageClientContext;\n        this._url = client.url;\n        if (client.name === undefined) {\n            this._isContainer = true;\n            this._containerOrBlobOperation = clientContext.container;\n        }\n        else {\n            this._isContainer = false;\n            this._containerOrBlobOperation = clientContext.blob;\n        }\n        if (!leaseId) {\n            leaseId = (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        }\n        this._leaseId = leaseId;\n    }\n    /**\n     * Establishes and manages a lock on a container for delete operations, or on a blob\n     * for write and delete operations.\n     * The lock duration can be 15 to 60 seconds, or can be infinite.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param duration - Must be between 15 to 60 seconds, or infinite (-1)\n     * @param options - option to configure lease management operations.\n     * @returns Response data for acquire lease operation.\n     */\n    async acquireLease(duration, options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_2__.tracingClient.withSpan(\"BlobLeaseClient-acquireLease\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.assertResponse)(await this._containerOrBlobOperation.acquireLease({\n                abortSignal: options.abortSignal,\n                duration,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                proposedLeaseId: this._leaseId,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * To change the ID of the lease.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param proposedLeaseId - the proposed new lease Id.\n     * @param options - option to configure lease management operations.\n     * @returns Response data for change lease operation.\n     */\n    async changeLease(proposedLeaseId, options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_2__.tracingClient.withSpan(\"BlobLeaseClient-changeLease\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.assertResponse)(await this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            this._leaseId = proposedLeaseId;\n            return response;\n        });\n    }\n    /**\n     * To free the lease if it is no longer needed so that another client may\n     * immediately acquire a lease against the container or the blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param options - option to configure lease management operations.\n     * @returns Response data for release lease operation.\n     */\n    async releaseLease(options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_2__.tracingClient.withSpan(\"BlobLeaseClient-releaseLease\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.assertResponse)(await this._containerOrBlobOperation.releaseLease(this._leaseId, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * To renew the lease.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param options - Optional option to configure lease management operations.\n     * @returns Response data for renew lease operation.\n     */\n    async renewLease(options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_2__.tracingClient.withSpan(\"BlobLeaseClient-renewLease\", options, async (updatedOptions) => {\n            var _a;\n            return this._containerOrBlobOperation.renewLease(this._leaseId, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            });\n        });\n    }\n    /**\n     * To end the lease but ensure that another client cannot acquire a new lease\n     * until the current lease period has expired.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param breakPeriod - Break period\n     * @param options - Optional options to configure lease management operations.\n     * @returns Response data for break lease operation.\n     */\n    async breakLease(breakPeriod, options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_2__.tracingClient.withSpan(\"BlobLeaseClient-breakLease\", options, async (updatedOptions) => {\n            var _a;\n            const operationOptions = {\n                abortSignal: options.abortSignal,\n                breakPeriod,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            };\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.assertResponse)(await this._containerOrBlobOperation.breakLease(operationOptions));\n        });\n    }\n}\n//# sourceMappingURL=BlobLeaseClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobQueryResponse: () => (/* binding */ BlobQueryResponse)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _utils_BlobQuickQueryStream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/BlobQuickQueryStream */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/BlobQuickQueryStream.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * BlobQueryResponse implements BlobDownloadResponseModel interface, and in Node.js runtime it will\n * parse avor data returned by blob query.\n */\nclass BlobQueryResponse {\n    /**\n     * Indicates that the service supports\n     * requests for partial file content.\n     *\n     * @readonly\n     */\n    get acceptRanges() {\n        return this.originalResponse.acceptRanges;\n    }\n    /**\n     * Returns if it was previously specified\n     * for the file.\n     *\n     * @readonly\n     */\n    get cacheControl() {\n        return this.originalResponse.cacheControl;\n    }\n    /**\n     * Returns the value that was specified\n     * for the 'x-ms-content-disposition' header and specifies how to process the\n     * response.\n     *\n     * @readonly\n     */\n    get contentDisposition() {\n        return this.originalResponse.contentDisposition;\n    }\n    /**\n     * Returns the value that was specified\n     * for the Content-Encoding request header.\n     *\n     * @readonly\n     */\n    get contentEncoding() {\n        return this.originalResponse.contentEncoding;\n    }\n    /**\n     * Returns the value that was specified\n     * for the Content-Language request header.\n     *\n     * @readonly\n     */\n    get contentLanguage() {\n        return this.originalResponse.contentLanguage;\n    }\n    /**\n     * The current sequence number for a\n     * page blob. This header is not returned for block blobs or append blobs.\n     *\n     * @readonly\n     */\n    get blobSequenceNumber() {\n        return this.originalResponse.blobSequenceNumber;\n    }\n    /**\n     * The blob's type. Possible values include:\n     * 'BlockBlob', 'PageBlob', 'AppendBlob'.\n     *\n     * @readonly\n     */\n    get blobType() {\n        return this.originalResponse.blobType;\n    }\n    /**\n     * The number of bytes present in the\n     * response body.\n     *\n     * @readonly\n     */\n    get contentLength() {\n        return this.originalResponse.contentLength;\n    }\n    /**\n     * If the file has an MD5 hash and the\n     * request is to read the full file, this response header is returned so that\n     * the client can check for message content integrity. If the request is to\n     * read a specified range and the 'x-ms-range-get-content-md5' is set to\n     * true, then the request returns an MD5 hash for the range, as long as the\n     * range size is less than or equal to 4 MB. If neither of these sets of\n     * conditions is true, then no value is returned for the 'Content-MD5'\n     * header.\n     *\n     * @readonly\n     */\n    get contentMD5() {\n        return this.originalResponse.contentMD5;\n    }\n    /**\n     * Indicates the range of bytes returned if\n     * the client requested a subset of the file by setting the Range request\n     * header.\n     *\n     * @readonly\n     */\n    get contentRange() {\n        return this.originalResponse.contentRange;\n    }\n    /**\n     * The content type specified for the file.\n     * The default content type is 'application/octet-stream'\n     *\n     * @readonly\n     */\n    get contentType() {\n        return this.originalResponse.contentType;\n    }\n    /**\n     * Conclusion time of the last attempted\n     * Copy File operation where this file was the destination file. This value\n     * can specify the time of a completed, aborted, or failed copy attempt.\n     *\n     * @readonly\n     */\n    get copyCompletedOn() {\n        return undefined;\n    }\n    /**\n     * String identifier for the last attempted Copy\n     * File operation where this file was the destination file.\n     *\n     * @readonly\n     */\n    get copyId() {\n        return this.originalResponse.copyId;\n    }\n    /**\n     * Contains the number of bytes copied and\n     * the total bytes in the source in the last attempted Copy File operation\n     * where this file was the destination file. Can show between 0 and\n     * Content-Length bytes copied.\n     *\n     * @readonly\n     */\n    get copyProgress() {\n        return this.originalResponse.copyProgress;\n    }\n    /**\n     * URL up to 2KB in length that specifies the\n     * source file used in the last attempted Copy File operation where this file\n     * was the destination file.\n     *\n     * @readonly\n     */\n    get copySource() {\n        return this.originalResponse.copySource;\n    }\n    /**\n     * State of the copy operation\n     * identified by 'x-ms-copy-id'. Possible values include: 'pending',\n     * 'success', 'aborted', 'failed'\n     *\n     * @readonly\n     */\n    get copyStatus() {\n        return this.originalResponse.copyStatus;\n    }\n    /**\n     * Only appears when\n     * x-ms-copy-status is failed or pending. Describes cause of fatal or\n     * non-fatal copy operation failure.\n     *\n     * @readonly\n     */\n    get copyStatusDescription() {\n        return this.originalResponse.copyStatusDescription;\n    }\n    /**\n     * When a blob is leased,\n     * specifies whether the lease is of infinite or fixed duration. Possible\n     * values include: 'infinite', 'fixed'.\n     *\n     * @readonly\n     */\n    get leaseDuration() {\n        return this.originalResponse.leaseDuration;\n    }\n    /**\n     * Lease state of the blob. Possible\n     * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.\n     *\n     * @readonly\n     */\n    get leaseState() {\n        return this.originalResponse.leaseState;\n    }\n    /**\n     * The current lease status of the\n     * blob. Possible values include: 'locked', 'unlocked'.\n     *\n     * @readonly\n     */\n    get leaseStatus() {\n        return this.originalResponse.leaseStatus;\n    }\n    /**\n     * A UTC date/time value generated by the service that\n     * indicates the time at which the response was initiated.\n     *\n     * @readonly\n     */\n    get date() {\n        return this.originalResponse.date;\n    }\n    /**\n     * The number of committed blocks\n     * present in the blob. This header is returned only for append blobs.\n     *\n     * @readonly\n     */\n    get blobCommittedBlockCount() {\n        return this.originalResponse.blobCommittedBlockCount;\n    }\n    /**\n     * The ETag contains a value that you can use to\n     * perform operations conditionally, in quotes.\n     *\n     * @readonly\n     */\n    get etag() {\n        return this.originalResponse.etag;\n    }\n    /**\n     * The error code.\n     *\n     * @readonly\n     */\n    get errorCode() {\n        return this.originalResponse.errorCode;\n    }\n    /**\n     * The value of this header is set to\n     * true if the file data and application metadata are completely encrypted\n     * using the specified algorithm. Otherwise, the value is set to false (when\n     * the file is unencrypted, or if only parts of the file/application metadata\n     * are encrypted).\n     *\n     * @readonly\n     */\n    get isServerEncrypted() {\n        return this.originalResponse.isServerEncrypted;\n    }\n    /**\n     * If the blob has a MD5 hash, and if\n     * request contains range header (Range or x-ms-range), this response header\n     * is returned with the value of the whole blob's MD5 value. This value may\n     * or may not be equal to the value returned in Content-MD5 header, with the\n     * latter calculated from the requested range.\n     *\n     * @readonly\n     */\n    get blobContentMD5() {\n        return this.originalResponse.blobContentMD5;\n    }\n    /**\n     * Returns the date and time the file was last\n     * modified. Any operation that modifies the file or its properties updates\n     * the last modified time.\n     *\n     * @readonly\n     */\n    get lastModified() {\n        return this.originalResponse.lastModified;\n    }\n    /**\n     * A name-value pair\n     * to associate with a file storage object.\n     *\n     * @readonly\n     */\n    get metadata() {\n        return this.originalResponse.metadata;\n    }\n    /**\n     * This header uniquely identifies the request\n     * that was made and can be used for troubleshooting the request.\n     *\n     * @readonly\n     */\n    get requestId() {\n        return this.originalResponse.requestId;\n    }\n    /**\n     * If a client request id header is sent in the request, this header will be present in the\n     * response with the same value.\n     *\n     * @readonly\n     */\n    get clientRequestId() {\n        return this.originalResponse.clientRequestId;\n    }\n    /**\n     * Indicates the version of the File service used\n     * to execute the request.\n     *\n     * @readonly\n     */\n    get version() {\n        return this.originalResponse.version;\n    }\n    /**\n     * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned\n     * when the blob was encrypted with a customer-provided key.\n     *\n     * @readonly\n     */\n    get encryptionKeySha256() {\n        return this.originalResponse.encryptionKeySha256;\n    }\n    /**\n     * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to\n     * true, then the request returns a crc64 for the range, as long as the range size is less than\n     * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is\n     * specified in the same request, it will fail with 400(Bad Request)\n     */\n    get contentCrc64() {\n        return this.originalResponse.contentCrc64;\n    }\n    /**\n     * The response body as a browser Blob.\n     * Always undefined in node.js.\n     *\n     * @readonly\n     */\n    get blobBody() {\n        return undefined;\n    }\n    /**\n     * The response body as a node.js Readable stream.\n     * Always undefined in the browser.\n     *\n     * It will parse avor data returned by blob query.\n     *\n     * @readonly\n     */\n    get readableStreamBody() {\n        return _azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNode ? this.blobDownloadStream : undefined;\n    }\n    /**\n     * The HTTP response.\n     */\n    get _response() {\n        return this.originalResponse._response;\n    }\n    /**\n     * Creates an instance of BlobQueryResponse.\n     *\n     * @param originalResponse -\n     * @param options -\n     */\n    constructor(originalResponse, options = {}) {\n        this.originalResponse = originalResponse;\n        this.blobDownloadStream = new _utils_BlobQuickQueryStream__WEBPACK_IMPORTED_MODULE_1__.BlobQuickQueryStream(this.originalResponse.readableStreamBody, options);\n    }\n}\n//# sourceMappingURL=BlobQueryResponse.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobServiceClient: () => (/* binding */ BlobServiceClient)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _azure_core_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-auth */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/index.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Pipeline */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _ContainerClient__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ContainerClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/tracing */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _BlobBatchClient__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./BlobBatchClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js\");\n/* harmony import */ var _StorageClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StorageClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js\");\n/* harmony import */ var _sas_AccountSASPermissions__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./sas/AccountSASPermissions */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js\");\n/* harmony import */ var _sas_AccountSASSignatureValues__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./sas/AccountSASSignatureValues */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js\");\n/* harmony import */ var _sas_AccountSASServices__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./sas/AccountSASServices */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js\");\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A BlobServiceClient represents a Client to the Azure Storage Blob service allowing you\n * to manipulate blob containers.\n */\nclass BlobServiceClient extends _StorageClient__WEBPACK_IMPORTED_MODULE_3__.StorageClient {\n    /**\n     *\n     * Creates an instance of BlobServiceClient from connection string.\n     *\n     * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n     *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n     *                                  Account connection string example -\n     *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n     *                                  SAS connection string example -\n     *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n     * @param options - Optional. Options to configure the HTTP pipeline.\n     */\n    static fromConnectionString(connectionString, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        options = options || {};\n        const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.extractConnectionStringParts)(connectionString);\n        if (extractedCreds.kind === \"AccountConnString\") {\n            if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                if (!options.proxyOptions) {\n                    options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                }\n                const pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_6__.newPipeline)(sharedKeyCredential, options);\n                return new BlobServiceClient(extractedCreds.url, pipeline);\n            }\n            else {\n                throw new Error(\"Account connection string is only supported in Node.js environment\");\n            }\n        }\n        else if (extractedCreds.kind === \"SASConnString\") {\n            const pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_6__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__.AnonymousCredential(), options);\n            return new BlobServiceClient(extractedCreds.url + \"?\" + extractedCreds.accountSas, pipeline);\n        }\n        else {\n            throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n        }\n    }\n    constructor(url, credentialOrPipeline, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        let pipeline;\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_6__.isPipelineLike)(credentialOrPipeline)) {\n            pipeline = credentialOrPipeline;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode && credentialOrPipeline instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipeline instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_0__.isTokenCredential)(credentialOrPipeline)) {\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_6__.newPipeline)(credentialOrPipeline, options);\n        }\n        else {\n            // The second parameter is undefined. Use anonymous credential\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_6__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__.AnonymousCredential(), options);\n        }\n        super(url, pipeline);\n        this.serviceContext = this.storageClientContext.service;\n    }\n    /**\n     * Creates a {@link ContainerClient} object\n     *\n     * @param containerName - A container name\n     * @returns A new ContainerClient object for the given container name.\n     *\n     * Example usage:\n     *\n     * ```js\n     * const containerClient = blobServiceClient.getContainerClient(\"<container name>\");\n     * ```\n     */\n    getContainerClient(containerName) {\n        return new _ContainerClient__WEBPACK_IMPORTED_MODULE_8__.ContainerClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.appendToURLPath)(this.url, encodeURIComponent(containerName)), this.pipeline);\n    }\n    /**\n     * Create a Blob container. @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n     *\n     * @param containerName - Name of the container to create.\n     * @param options - Options to configure Container Create operation.\n     * @returns Container creation response and the corresponding container client.\n     */\n    async createContainer(containerName, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-createContainer\", options, async (updatedOptions) => {\n            const containerClient = this.getContainerClient(containerName);\n            const containerCreateResponse = await containerClient.create(updatedOptions);\n            return {\n                containerClient,\n                containerCreateResponse,\n            };\n        });\n    }\n    /**\n     * Deletes a Blob container.\n     *\n     * @param containerName - Name of the container to delete.\n     * @param options - Options to configure Container Delete operation.\n     * @returns Container deletion response.\n     */\n    async deleteContainer(containerName, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-deleteContainer\", options, async (updatedOptions) => {\n            const containerClient = this.getContainerClient(containerName);\n            return containerClient.delete(updatedOptions);\n        });\n    }\n    /**\n     * Restore a previously deleted Blob container.\n     * This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.\n     *\n     * @param deletedContainerName - Name of the previously deleted container.\n     * @param deletedContainerVersion - Version of the previously deleted container, used to uniquely identify the deleted container.\n     * @param options - Options to configure Container Restore operation.\n     * @returns Container deletion response.\n     */\n    async undeleteContainer(deletedContainerName, deletedContainerVersion, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-undeleteContainer\", options, async (updatedOptions) => {\n            const containerClient = this.getContainerClient(options.destinationContainerName || deletedContainerName);\n            // Hack to access a protected member.\n            const containerContext = containerClient[\"storageClientContext\"].container;\n            const containerUndeleteResponse = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await containerContext.restore({\n                deletedContainerName,\n                deletedContainerVersion,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return { containerClient, containerUndeleteResponse };\n        });\n    }\n    /**\n     * Rename an existing Blob Container.\n     *\n     * @param sourceContainerName - The name of the source container.\n     * @param destinationContainerName - The new name of the container.\n     * @param options - Options to configure Container Rename operation.\n     */\n    /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */\n    // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.\n    async renameContainer(sourceContainerName, destinationContainerName, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-renameContainer\", options, async (updatedOptions) => {\n            var _a;\n            const containerClient = this.getContainerClient(destinationContainerName);\n            // Hack to access a protected member.\n            const containerContext = containerClient[\"storageClientContext\"].container;\n            const containerRenameResponse = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await containerContext.rename(sourceContainerName, Object.assign(Object.assign({}, updatedOptions), { sourceLeaseId: (_a = options.sourceCondition) === null || _a === void 0 ? void 0 : _a.leaseId })));\n            return { containerClient, containerRenameResponse };\n        });\n    }\n    /**\n     * Gets the properties of a storage account’s Blob service, including properties\n     * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n     *\n     * @param options - Options to the Service Get Properties operation.\n     * @returns Response data for the Service Get Properties operation.\n     */\n    async getProperties(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-getProperties\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.getProperties({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets properties for a storage account’s Blob service endpoint, including properties\n     * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\n     *\n     * @param properties -\n     * @param options - Options to the Service Set Properties operation.\n     * @returns Response data for the Service Set Properties operation.\n     */\n    async setProperties(properties, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-setProperties\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.setProperties(properties, {\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Retrieves statistics related to replication for the Blob service. It is only\n     * available on the secondary location endpoint when read-access geo-redundant\n     * replication is enabled for the storage account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats\n     *\n     * @param options - Options to the Service Get Statistics operation.\n     * @returns Response data for the Service Get Statistics operation.\n     */\n    async getStatistics(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-getStatistics\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.getStatistics({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Get Account Information operation returns the sku name and account kind\n     * for the specified account.\n     * The Get Account Information operation is available on service versions beginning\n     * with version 2018-03-28.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n     *\n     * @param options - Options to the Service Get Account Info operation.\n     * @returns Response data for the Service Get Account Info operation.\n     */\n    async getAccountInfo(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-getAccountInfo\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.getAccountInfo({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns a list of the containers under the specified account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2\n     *\n     * @param marker - A string value that identifies the portion of\n     *                        the list of containers to be returned with the next listing operation. The\n     *                        operation returns the continuationToken value within the response body if the\n     *                        listing operation did not return all containers remaining to be listed\n     *                        with the current page. The continuationToken value can be used as the value for\n     *                        the marker parameter in a subsequent call to request the next page of list\n     *                        items. The marker value is opaque to the client.\n     * @param options - Options to the Service List Container Segment operation.\n     * @returns Response data for the Service List Container Segment operation.\n     */\n    async listContainersSegment(marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-listContainersSegment\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.listContainersSegment(Object.assign(Object.assign({ abortSignal: options.abortSignal, marker }, options), { include: typeof options.include === \"string\" ? [options.include] : options.include, tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs across all containers whose tags\n     * match a given search expression. Filter blobs searches across all containers within a\n     * storage account but can be scoped within the expression to a single container.\n     *\n     * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                        The given expression must evaluate to true for a blob to be returned in the results.\n     *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                        however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n    async findBlobsByTagsSegment(tagFilterSqlExpression, marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-findBlobsByTagsSegment\", options, async (updatedOptions) => {\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.filterBlobs({\n                abortSignal: options.abortSignal,\n                where: tagFilterSqlExpression,\n                marker,\n                maxPageSize: options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, blobs: response.blobs.map((blob) => {\n                    var _a;\n                    let tagValue = \"\";\n                    if (((_a = blob.tags) === null || _a === void 0 ? void 0 : _a.blobTagSet.length) === 1) {\n                        tagValue = blob.tags.blobTagSet[0].value;\n                    }\n                    return Object.assign(Object.assign({}, blob), { tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.toTags)(blob.tags), tagValue });\n                }) });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for ServiceFindBlobsByTagsSegmentResponse.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n    findBlobsByTagsSegments(tagFilterSqlExpression_1, marker_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncGenerator)(this, arguments, function* findBlobsByTagsSegments_1(tagFilterSqlExpression, marker, options = {}) {\n            let response;\n            if (!!marker || marker === undefined) {\n                do {\n                    response = yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options));\n                    response.blobs = response.blobs || [];\n                    marker = response.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(response);\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for blobs.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to findBlobsByTagsItems.\n     */\n    findBlobsByTagsItems(tagFilterSqlExpression_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncGenerator)(this, arguments, function* findBlobsByTagsItems_1(tagFilterSqlExpression, options = {}) {\n            var _a, e_1, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncValues)(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const segment = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncValues)(segment.blobs)));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(_b.call(_e));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to find all blobs with specified tag\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the blobs in pages.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * let i = 1;\n     * for await (const blob of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\")) {\n     *   console.log(`Blob ${i++}: ${container.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * const iter = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\");\n     * let blobItem = await iter.next();\n     * while (!blobItem.done) {\n     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n     *   blobItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 20 })) {\n     *   if (response.blobs) {\n     *     for (const blob of response.blobs) {\n     *       console.log(`Blob ${i++}: ${blob.name}`);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *     console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     * // Passing next marker as continuationToken\n     * iterator = blobServiceClient\n     *   .findBlobsByTags(\"tagkey='tagvalue'\")\n     *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *      console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to find blobs by tags.\n     */\n    findBlobsByTags(tagFilterSqlExpression, options = {}) {\n        // AsyncIterableIterator to iterate over blobs\n        const listSegmentOptions = Object.assign({}, options);\n        const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));\n            },\n        };\n    }\n    /**\n     * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses\n     *\n     * @param marker - A string value that identifies the portion of\n     *                        the list of containers to be returned with the next listing operation. The\n     *                        operation returns the continuationToken value within the response body if the\n     *                        listing operation did not return all containers remaining to be listed\n     *                        with the current page. The continuationToken value can be used as the value for\n     *                        the marker parameter in a subsequent call to request the next page of list\n     *                        items. The marker value is opaque to the client.\n     * @param options - Options to list containers operation.\n     */\n    listSegments(marker_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncGenerator)(this, arguments, function* listSegments_1(marker, options = {}) {\n            let listContainersSegmentResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    listContainersSegmentResponse = yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(this.listContainersSegment(marker, options));\n                    listContainersSegmentResponse.containerItems =\n                        listContainersSegmentResponse.containerItems || [];\n                    marker = listContainersSegmentResponse.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(listContainersSegmentResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for Container Items\n     *\n     * @param options - Options to list containers operation.\n     */\n    listItems() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncGenerator)(this, arguments, function* listItems_1(options = {}) {\n            var _a, e_2, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncValues)(this.listSegments(marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const segment = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncValues)(segment.containerItems)));\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(_b.call(_e));\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list all the containers\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the containers in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * let i = 1;\n     * for await (const container of blobServiceClient.listContainers()) {\n     *   console.log(`Container ${i++}: ${container.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * const iter = blobServiceClient.listContainers();\n     * let containerItem = await iter.next();\n     * while (!containerItem.done) {\n     *   console.log(`Container ${i++}: ${containerItem.value.name}`);\n     *   containerItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {\n     *   if (response.containerItems) {\n     *     for (const container of response.containerItems) {\n     *       console.log(`Container ${i++}: ${container.name}`);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 container names\n     * if (response.containerItems) {\n     *   for (const container of response.containerItems) {\n     *     console.log(`Container ${i++}: ${container.name}`);\n     *   }\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     * // Passing next marker as continuationToken\n     * iterator = blobServiceClient\n     *   .listContainers()\n     *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 container names\n     * if (response.containerItems) {\n     *   for (const container of response.containerItems) {\n     *      console.log(`Container ${i++}: ${container.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param options - Options to list containers.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listContainers(options = {}) {\n        if (options.prefix === \"\") {\n            options.prefix = undefined;\n        }\n        const include = [];\n        if (options.includeDeleted) {\n            include.push(\"deleted\");\n        }\n        if (options.includeMetadata) {\n            include.push(\"metadata\");\n        }\n        if (options.includeSystem) {\n            include.push(\"system\");\n        }\n        // AsyncIterableIterator to iterate over containers\n        const listSegmentOptions = Object.assign(Object.assign({}, options), (include.length > 0 ? { include } : {}));\n        const iter = this.listItems(listSegmentOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listSegments(settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));\n            },\n        };\n    }\n    /**\n     * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).\n     *\n     * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n     * bearer token authentication.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key\n     *\n     * @param startsOn -      The start time for the user delegation SAS. Must be within 7 days of the current time\n     * @param expiresOn -     The end time for the user delegation SAS. Must be within 7 days of the current time\n     */\n    async getUserDelegationKey(startsOn, expiresOn, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-getUserDelegationKey\", options, async (updatedOptions) => {\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.getUserDelegationKey({\n                startsOn: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(startsOn, false),\n                expiresOn: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(expiresOn, false),\n            }, {\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const userDelegationKey = {\n                signedObjectId: response.signedObjectId,\n                signedTenantId: response.signedTenantId,\n                signedStartsOn: new Date(response.signedStartsOn),\n                signedExpiresOn: new Date(response.signedExpiresOn),\n                signedService: response.signedService,\n                signedVersion: response.signedVersion,\n                value: response.value,\n            };\n            const res = Object.assign({ _response: response._response, requestId: response.requestId, clientRequestId: response.clientRequestId, version: response.version, date: response.date, errorCode: response.errorCode }, userDelegationKey);\n            return res;\n        });\n    }\n    /**\n     * Creates a BlobBatchClient object to conduct batch operations.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n     *\n     * @returns A new BlobBatchClient object for this service.\n     */\n    getBlobBatchClient() {\n        return new _BlobBatchClient__WEBPACK_IMPORTED_MODULE_11__.BlobBatchClient(this.url, this.pipeline);\n    }\n    /**\n     * Only available for BlobServiceClient constructed with a shared key credential.\n     *\n     * Generates a Blob account Shared Access Signature (SAS) URI based on the client properties\n     * and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n     *\n     * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.\n     * @param permissions - Specifies the list of permissions to be associated with the SAS.\n     * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n     * @param options - Optional parameters.\n     * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateAccountSasUrl(expiresOn, permissions = _sas_AccountSASPermissions__WEBPACK_IMPORTED_MODULE_12__.AccountSASPermissions.parse(\"r\"), resourceTypes = \"sco\", options = {}) {\n        if (!(this.credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential)) {\n            throw RangeError(\"Can only generate the account SAS when the client is initialized with a shared key credential\");\n        }\n        if (expiresOn === undefined) {\n            const now = new Date();\n            expiresOn = new Date(now.getTime() + 3600 * 1000);\n        }\n        const sas = (0,_sas_AccountSASSignatureValues__WEBPACK_IMPORTED_MODULE_13__.generateAccountSASQueryParameters)(Object.assign({ permissions,\n            expiresOn,\n            resourceTypes, services: _sas_AccountSASServices__WEBPACK_IMPORTED_MODULE_14__.AccountSASServices.parse(\"b\").toString() }, options), this.credential).toString();\n        return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.appendToURLQuery)(this.url, sas);\n    }\n}\n//# sourceMappingURL=BlobServiceClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL0Jsb2JTZXJ2aWNlQ2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBbUY7QUFDbkY7QUFDQTtBQUNxRDtBQUNlO0FBQzFCO0FBQ2U7QUFDSjtBQUMyRDtBQUMxQjtBQUNkO0FBQ0k7QUFDNUI7QUFDSTtBQUNKO0FBQ29CO0FBQ2dCO0FBQ3RCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ08sZ0NBQWdDLHlEQUFhO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLHNCQUFzQixzQkFBc0I7QUFDcEg7QUFDQSwrRkFBK0Ysd0RBQXdELHNEQUFzRCx3REFBd0Q7QUFDclE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUZBQTRCO0FBQzNEO0FBQ0EsZ0JBQWdCLG9EQUFNO0FBQ3RCLGdEQUFnRCwrRkFBMEI7QUFDMUU7QUFDQSwyQ0FBMkMsa0ZBQXVCO0FBQ2xFO0FBQ0EsaUNBQWlDLHNEQUFXO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHNEQUFXLEtBQUssaUZBQW1CO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHlEQUFjO0FBQzFCO0FBQ0E7QUFDQSxrQkFBa0Isb0RBQU0sb0NBQW9DLCtGQUEwQjtBQUN0Riw0Q0FBNEMsaUZBQW1CO0FBQy9ELFlBQVksbUVBQWlCO0FBQzdCLHVCQUF1QixzREFBVztBQUNsQztBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0RBQVcsS0FBSyxpRkFBbUI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix1QkFBdUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw2REFBZSxDQUFDLG9FQUFlO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQsZUFBZSx5REFBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRCxlQUFlLHlEQUFhO0FBQzVCO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RkFBdUY7QUFDdkYsZUFBZSx5REFBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsbUVBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLHFCQUFxQjtBQUNyQixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUY7QUFDckYsZUFBZSx5REFBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxtRUFBYyxrRkFBa0YscUJBQXFCLCtGQUErRjtBQUNoUSxxQkFBcUI7QUFDckIsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQyxlQUFlLHlEQUFhO0FBQzVCLG1CQUFtQixtRUFBYztBQUNqQztBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRCxlQUFlLHlEQUFhO0FBQzVCLG1CQUFtQixtRUFBYztBQUNqQztBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQyxlQUFlLHlEQUFhO0FBQzVCLG1CQUFtQixtRUFBYztBQUNqQztBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDLGVBQWUseURBQWE7QUFDNUIsbUJBQW1CLG1FQUFjO0FBQ2pDO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRCxlQUFlLHlEQUFhO0FBQzVCLG1CQUFtQixtRUFBYywrRUFBK0UsMENBQTBDLGNBQWMsbUlBQW1JO0FBQzNTLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RTtBQUM3RSxlQUFlLHlEQUFhO0FBQzVCLDZCQUE2QixtRUFBYztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLGtFQUFrRSxlQUFlO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsV0FBVyxNQUFNLDJEQUFNLHVCQUF1QjtBQUN2RyxpQkFBaUIsR0FBRztBQUNwQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHdEQUFnQixrR0FBa0c7QUFDakk7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLCtDQUFPO0FBQzVDO0FBQ0E7QUFDQSxnQ0FBZ0MsK0NBQU87QUFDdkMsa0JBQWtCO0FBQ2xCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHdEQUFnQix1RkFBdUY7QUFDdEg7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLHFEQUFhLDZFQUE2RSxXQUFXLCtDQUFPLGdDQUFnQztBQUNyTDtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsK0NBQU8sUUFBUSx3REFBZ0IsQ0FBQyxxREFBYTtBQUN2RTtBQUNBO0FBQ0EsNEJBQTRCLFFBQVE7QUFDcEM7QUFDQTtBQUNBLDhEQUE4RCwrQ0FBTztBQUNyRTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLElBQUksSUFBSSxlQUFlO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLElBQUksSUFBSSxvQkFBb0I7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0dBQW9HLGlCQUFpQjtBQUNySDtBQUNBO0FBQ0EsaUNBQWlDLElBQUksSUFBSSxVQUFVO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNGQUFzRixnQkFBZ0I7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixJQUFJLElBQUksVUFBVTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDRDQUE0QztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLElBQUksSUFBSSxVQUFVO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdEO0FBQ3hEO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLHdIQUF3SCxtQ0FBbUM7QUFDM0osYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsd0RBQWdCLCtEQUErRDtBQUM5RjtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsK0NBQU87QUFDakU7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLCtDQUFPLE9BQU8sK0NBQU87QUFDckQsa0JBQWtCO0FBQ2xCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx3REFBZ0Isb0RBQW9EO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxxREFBYSwwQ0FBMEMsV0FBVywrQ0FBTyxnQ0FBZ0M7QUFDbEo7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLCtDQUFPLFFBQVEsd0RBQWdCLENBQUMscURBQWE7QUFDdkU7QUFDQTtBQUNBLDRCQUE0QixRQUFRO0FBQ3BDO0FBQ0E7QUFDQSw4REFBOEQsK0NBQU87QUFDckU7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLElBQUksSUFBSSxlQUFlO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLElBQUksSUFBSSx5QkFBeUI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGLGlCQUFpQjtBQUNqRztBQUNBO0FBQ0Esc0NBQXNDLElBQUksSUFBSSxlQUFlO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxnQkFBZ0I7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxJQUFJLElBQUksZUFBZTtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDRDQUE0QztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLElBQUksSUFBSSxlQUFlO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsb0NBQW9DLFVBQVUsSUFBSTtBQUNuSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyxxRkFBcUYsbUNBQW1DO0FBQ3hILGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRTtBQUNoRSxlQUFlLHlEQUFhO0FBQzVCLDZCQUE2QixtRUFBYztBQUMzQywwQkFBMEIseUVBQW9CO0FBQzlDLDJCQUEyQix5RUFBb0I7QUFDL0MsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLHdMQUF3TDtBQUNoTztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsOERBQWU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELDhFQUFxQixnREFBZ0Q7QUFDeEgseUNBQXlDLCtGQUEwQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0dBQWlDLGlCQUFpQjtBQUN0RTtBQUNBLHFDQUFxQyx3RUFBa0Isd0JBQXdCO0FBQy9FLGVBQWUscUVBQWdCO0FBQy9CO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9CbG9iU2VydmljZUNsaWVudC5qcz8wYTI3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXN5bmNEZWxlZ2F0b3IsIF9fYXN5bmNHZW5lcmF0b3IsIF9fYXN5bmNWYWx1ZXMsIF9fYXdhaXQgfSBmcm9tIFwidHNsaWJcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgaXNUb2tlbkNyZWRlbnRpYWwgfSBmcm9tIFwiQGF6dXJlL2NvcmUtYXV0aFwiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdFByb3h5U2V0dGluZ3MgfSBmcm9tIFwiQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZVwiO1xuaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSBcIkBhenVyZS9jb3JlLXV0aWxcIjtcbmltcG9ydCB7IG5ld1BpcGVsaW5lLCBpc1BpcGVsaW5lTGlrZSB9IGZyb20gXCIuL1BpcGVsaW5lXCI7XG5pbXBvcnQgeyBDb250YWluZXJDbGllbnQsIH0gZnJvbSBcIi4vQ29udGFpbmVyQ2xpZW50XCI7XG5pbXBvcnQgeyBhcHBlbmRUb1VSTFBhdGgsIGFwcGVuZFRvVVJMUXVlcnksIGV4dHJhY3RDb25uZWN0aW9uU3RyaW5nUGFydHMsIHRvVGFncywgfSBmcm9tIFwiLi91dGlscy91dGlscy5jb21tb25cIjtcbmltcG9ydCB7IFN0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsIH0gZnJvbSBcIi4vY3JlZGVudGlhbHMvU3RvcmFnZVNoYXJlZEtleUNyZWRlbnRpYWxcIjtcbmltcG9ydCB7IEFub255bW91c0NyZWRlbnRpYWwgfSBmcm9tIFwiLi9jcmVkZW50aWFscy9Bbm9ueW1vdXNDcmVkZW50aWFsXCI7XG5pbXBvcnQgeyB0cnVuY2F0ZWRJU084MDYxRGF0ZSwgYXNzZXJ0UmVzcG9uc2UgfSBmcm9tIFwiLi91dGlscy91dGlscy5jb21tb25cIjtcbmltcG9ydCB7IHRyYWNpbmdDbGllbnQgfSBmcm9tIFwiLi91dGlscy90cmFjaW5nXCI7XG5pbXBvcnQgeyBCbG9iQmF0Y2hDbGllbnQgfSBmcm9tIFwiLi9CbG9iQmF0Y2hDbGllbnRcIjtcbmltcG9ydCB7IFN0b3JhZ2VDbGllbnQgfSBmcm9tIFwiLi9TdG9yYWdlQ2xpZW50XCI7XG5pbXBvcnQgeyBBY2NvdW50U0FTUGVybWlzc2lvbnMgfSBmcm9tIFwiLi9zYXMvQWNjb3VudFNBU1Blcm1pc3Npb25zXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZUFjY291bnRTQVNRdWVyeVBhcmFtZXRlcnMgfSBmcm9tIFwiLi9zYXMvQWNjb3VudFNBU1NpZ25hdHVyZVZhbHVlc1wiO1xuaW1wb3J0IHsgQWNjb3VudFNBU1NlcnZpY2VzIH0gZnJvbSBcIi4vc2FzL0FjY291bnRTQVNTZXJ2aWNlc1wiO1xuLyoqXG4gKiBBIEJsb2JTZXJ2aWNlQ2xpZW50IHJlcHJlc2VudHMgYSBDbGllbnQgdG8gdGhlIEF6dXJlIFN0b3JhZ2UgQmxvYiBzZXJ2aWNlIGFsbG93aW5nIHlvdVxuICogdG8gbWFuaXB1bGF0ZSBibG9iIGNvbnRhaW5lcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBCbG9iU2VydmljZUNsaWVudCBleHRlbmRzIFN0b3JhZ2VDbGllbnQge1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBCbG9iU2VydmljZUNsaWVudCBmcm9tIGNvbm5lY3Rpb24gc3RyaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbm5lY3Rpb25TdHJpbmcgLSBBY2NvdW50IGNvbm5lY3Rpb24gc3RyaW5nIG9yIGEgU0FTIGNvbm5lY3Rpb24gc3RyaW5nIG9mIGFuIEF6dXJlIHN0b3JhZ2UgYWNjb3VudC5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbIE5vdGUgLSBBY2NvdW50IGNvbm5lY3Rpb24gc3RyaW5nIGNhbiBvbmx5IGJlIHVzZWQgaW4gTk9ERS5KUyBydW50aW1lLiBdXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWNjb3VudCBjb25uZWN0aW9uIHN0cmluZyBleGFtcGxlIC1cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgRGVmYXVsdEVuZHBvaW50c1Byb3RvY29sPWh0dHBzO0FjY291bnROYW1lPW15YWNjb3VudDtBY2NvdW50S2V5PWFjY291bnRLZXk7RW5kcG9pbnRTdWZmaXg9Y29yZS53aW5kb3dzLm5ldGBcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTQVMgY29ubmVjdGlvbiBzdHJpbmcgZXhhbXBsZSAtXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYEJsb2JFbmRwb2ludD1odHRwczovL215YWNjb3VudC5ibG9iLmNvcmUud2luZG93cy5uZXQvO1F1ZXVlRW5kcG9pbnQ9aHR0cHM6Ly9teWFjY291bnQucXVldWUuY29yZS53aW5kb3dzLm5ldC87RmlsZUVuZHBvaW50PWh0dHBzOi8vbXlhY2NvdW50LmZpbGUuY29yZS53aW5kb3dzLm5ldC87VGFibGVFbmRwb2ludD1odHRwczovL215YWNjb3VudC50YWJsZS5jb3JlLndpbmRvd3MubmV0LztTaGFyZWRBY2Nlc3NTaWduYXR1cmU9c2FzU3RyaW5nYFxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwuIE9wdGlvbnMgdG8gY29uZmlndXJlIHRoZSBIVFRQIHBpcGVsaW5lLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tQ29ubmVjdGlvblN0cmluZyhjb25uZWN0aW9uU3RyaW5nLCBcbiAgICAvLyBMZWdhY3ksIG5vIGZpeCBmb3IgZXNsaW50IGVycm9yIHdpdGhvdXQgYnJlYWtpbmcuIERpc2FibGUgaXQgZm9yIHRoaXMgaW50ZXJmYWNlLlxuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYXp1cmUvYXp1cmUtc2RrL3RzLW5hbWluZy1vcHRpb25zKi9cbiAgICBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBjb25zdCBleHRyYWN0ZWRDcmVkcyA9IGV4dHJhY3RDb25uZWN0aW9uU3RyaW5nUGFydHMoY29ubmVjdGlvblN0cmluZyk7XG4gICAgICAgIGlmIChleHRyYWN0ZWRDcmVkcy5raW5kID09PSBcIkFjY291bnRDb25uU3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaGFyZWRLZXlDcmVkZW50aWFsID0gbmV3IFN0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsKGV4dHJhY3RlZENyZWRzLmFjY291bnROYW1lLCBleHRyYWN0ZWRDcmVkcy5hY2NvdW50S2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMucHJveHlPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucHJveHlPcHRpb25zID0gZ2V0RGVmYXVsdFByb3h5U2V0dGluZ3MoZXh0cmFjdGVkQ3JlZHMucHJveHlVcmkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBwaXBlbGluZSA9IG5ld1BpcGVsaW5lKHNoYXJlZEtleUNyZWRlbnRpYWwsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQmxvYlNlcnZpY2VDbGllbnQoZXh0cmFjdGVkQ3JlZHMudXJsLCBwaXBlbGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBY2NvdW50IGNvbm5lY3Rpb24gc3RyaW5nIGlzIG9ubHkgc3VwcG9ydGVkIGluIE5vZGUuanMgZW52aXJvbm1lbnRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXh0cmFjdGVkQ3JlZHMua2luZCA9PT0gXCJTQVNDb25uU3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHBpcGVsaW5lID0gbmV3UGlwZWxpbmUobmV3IEFub255bW91c0NyZWRlbnRpYWwoKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJsb2JTZXJ2aWNlQ2xpZW50KGV4dHJhY3RlZENyZWRzLnVybCArIFwiP1wiICsgZXh0cmFjdGVkQ3JlZHMuYWNjb3VudFNhcywgcGlwZWxpbmUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29ubmVjdGlvbiBzdHJpbmcgbXVzdCBiZSBlaXRoZXIgYW4gQWNjb3VudCBjb25uZWN0aW9uIHN0cmluZyBvciBhIFNBUyBjb25uZWN0aW9uIHN0cmluZ1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcih1cmwsIGNyZWRlbnRpYWxPclBpcGVsaW5lLCBcbiAgICAvLyBMZWdhY3ksIG5vIGZpeCBmb3IgZXNsaW50IGVycm9yIHdpdGhvdXQgYnJlYWtpbmcuIERpc2FibGUgaXQgZm9yIHRoaXMgaW50ZXJmYWNlLlxuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYXp1cmUvYXp1cmUtc2RrL3RzLW5hbWluZy1vcHRpb25zKi9cbiAgICBvcHRpb25zKSB7XG4gICAgICAgIGxldCBwaXBlbGluZTtcbiAgICAgICAgaWYgKGlzUGlwZWxpbmVMaWtlKGNyZWRlbnRpYWxPclBpcGVsaW5lKSkge1xuICAgICAgICAgICAgcGlwZWxpbmUgPSBjcmVkZW50aWFsT3JQaXBlbGluZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoaXNOb2RlICYmIGNyZWRlbnRpYWxPclBpcGVsaW5lIGluc3RhbmNlb2YgU3RvcmFnZVNoYXJlZEtleUNyZWRlbnRpYWwpIHx8XG4gICAgICAgICAgICBjcmVkZW50aWFsT3JQaXBlbGluZSBpbnN0YW5jZW9mIEFub255bW91c0NyZWRlbnRpYWwgfHxcbiAgICAgICAgICAgIGlzVG9rZW5DcmVkZW50aWFsKGNyZWRlbnRpYWxPclBpcGVsaW5lKSkge1xuICAgICAgICAgICAgcGlwZWxpbmUgPSBuZXdQaXBlbGluZShjcmVkZW50aWFsT3JQaXBlbGluZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGUgc2Vjb25kIHBhcmFtZXRlciBpcyB1bmRlZmluZWQuIFVzZSBhbm9ueW1vdXMgY3JlZGVudGlhbFxuICAgICAgICAgICAgcGlwZWxpbmUgPSBuZXdQaXBlbGluZShuZXcgQW5vbnltb3VzQ3JlZGVudGlhbCgpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcih1cmwsIHBpcGVsaW5lKTtcbiAgICAgICAgdGhpcy5zZXJ2aWNlQ29udGV4dCA9IHRoaXMuc3RvcmFnZUNsaWVudENvbnRleHQuc2VydmljZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHtAbGluayBDb250YWluZXJDbGllbnR9IG9iamVjdFxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnRhaW5lck5hbWUgLSBBIGNvbnRhaW5lciBuYW1lXG4gICAgICogQHJldHVybnMgQSBuZXcgQ29udGFpbmVyQ2xpZW50IG9iamVjdCBmb3IgdGhlIGdpdmVuIGNvbnRhaW5lciBuYW1lLlxuICAgICAqXG4gICAgICogRXhhbXBsZSB1c2FnZTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgY29udGFpbmVyQ2xpZW50ID0gYmxvYlNlcnZpY2VDbGllbnQuZ2V0Q29udGFpbmVyQ2xpZW50KFwiPGNvbnRhaW5lciBuYW1lPlwiKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXRDb250YWluZXJDbGllbnQoY29udGFpbmVyTmFtZSkge1xuICAgICAgICByZXR1cm4gbmV3IENvbnRhaW5lckNsaWVudChhcHBlbmRUb1VSTFBhdGgodGhpcy51cmwsIGVuY29kZVVSSUNvbXBvbmVudChjb250YWluZXJOYW1lKSksIHRoaXMucGlwZWxpbmUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBCbG9iIGNvbnRhaW5lci4gQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9yZXN0L2FwaS9zdG9yYWdlc2VydmljZXMvY3JlYXRlLWNvbnRhaW5lclxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnRhaW5lck5hbWUgLSBOYW1lIG9mIHRoZSBjb250YWluZXIgdG8gY3JlYXRlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBjb25maWd1cmUgQ29udGFpbmVyIENyZWF0ZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMgQ29udGFpbmVyIGNyZWF0aW9uIHJlc3BvbnNlIGFuZCB0aGUgY29ycmVzcG9uZGluZyBjb250YWluZXIgY2xpZW50LlxuICAgICAqL1xuICAgIGFzeW5jIGNyZWF0ZUNvbnRhaW5lcihjb250YWluZXJOYW1lLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJCbG9iU2VydmljZUNsaWVudC1jcmVhdGVDb250YWluZXJcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJDbGllbnQgPSB0aGlzLmdldENvbnRhaW5lckNsaWVudChjb250YWluZXJOYW1lKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lckNyZWF0ZVJlc3BvbnNlID0gYXdhaXQgY29udGFpbmVyQ2xpZW50LmNyZWF0ZSh1cGRhdGVkT3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lckNsaWVudCxcbiAgICAgICAgICAgICAgICBjb250YWluZXJDcmVhdGVSZXNwb25zZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIGEgQmxvYiBjb250YWluZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29udGFpbmVyTmFtZSAtIE5hbWUgb2YgdGhlIGNvbnRhaW5lciB0byBkZWxldGUuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGNvbmZpZ3VyZSBDb250YWluZXIgRGVsZXRlIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyBDb250YWluZXIgZGVsZXRpb24gcmVzcG9uc2UuXG4gICAgICovXG4gICAgYXN5bmMgZGVsZXRlQ29udGFpbmVyKGNvbnRhaW5lck5hbWUsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2JTZXJ2aWNlQ2xpZW50LWRlbGV0ZUNvbnRhaW5lclwiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lckNsaWVudCA9IHRoaXMuZ2V0Q29udGFpbmVyQ2xpZW50KGNvbnRhaW5lck5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lckNsaWVudC5kZWxldGUodXBkYXRlZE9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzdG9yZSBhIHByZXZpb3VzbHkgZGVsZXRlZCBCbG9iIGNvbnRhaW5lci5cbiAgICAgKiBUaGlzIEFQSSBpcyBvbmx5IGZ1bmN0aW9uYWwgaWYgQ29udGFpbmVyIFNvZnQgRGVsZXRlIGlzIGVuYWJsZWQgZm9yIHRoZSBzdG9yYWdlIGFjY291bnQgYXNzb2NpYXRlZCB3aXRoIHRoZSBjb250YWluZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGVsZXRlZENvbnRhaW5lck5hbWUgLSBOYW1lIG9mIHRoZSBwcmV2aW91c2x5IGRlbGV0ZWQgY29udGFpbmVyLlxuICAgICAqIEBwYXJhbSBkZWxldGVkQ29udGFpbmVyVmVyc2lvbiAtIFZlcnNpb24gb2YgdGhlIHByZXZpb3VzbHkgZGVsZXRlZCBjb250YWluZXIsIHVzZWQgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhlIGRlbGV0ZWQgY29udGFpbmVyLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBjb25maWd1cmUgQ29udGFpbmVyIFJlc3RvcmUgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIENvbnRhaW5lciBkZWxldGlvbiByZXNwb25zZS5cbiAgICAgKi9cbiAgICBhc3luYyB1bmRlbGV0ZUNvbnRhaW5lcihkZWxldGVkQ29udGFpbmVyTmFtZSwgZGVsZXRlZENvbnRhaW5lclZlcnNpb24sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2JTZXJ2aWNlQ2xpZW50LXVuZGVsZXRlQ29udGFpbmVyXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyQ2xpZW50ID0gdGhpcy5nZXRDb250YWluZXJDbGllbnQob3B0aW9ucy5kZXN0aW5hdGlvbkNvbnRhaW5lck5hbWUgfHwgZGVsZXRlZENvbnRhaW5lck5hbWUpO1xuICAgICAgICAgICAgLy8gSGFjayB0byBhY2Nlc3MgYSBwcm90ZWN0ZWQgbWVtYmVyLlxuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyQ29udGV4dCA9IGNvbnRhaW5lckNsaWVudFtcInN0b3JhZ2VDbGllbnRDb250ZXh0XCJdLmNvbnRhaW5lcjtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lclVuZGVsZXRlUmVzcG9uc2UgPSBhc3NlcnRSZXNwb25zZShhd2FpdCBjb250YWluZXJDb250ZXh0LnJlc3RvcmUoe1xuICAgICAgICAgICAgICAgIGRlbGV0ZWRDb250YWluZXJOYW1lLFxuICAgICAgICAgICAgICAgIGRlbGV0ZWRDb250YWluZXJWZXJzaW9uLFxuICAgICAgICAgICAgICAgIHRyYWNpbmdPcHRpb25zOiB1cGRhdGVkT3B0aW9ucy50cmFjaW5nT3B0aW9ucyxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHJldHVybiB7IGNvbnRhaW5lckNsaWVudCwgY29udGFpbmVyVW5kZWxldGVSZXNwb25zZSB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVuYW1lIGFuIGV4aXN0aW5nIEJsb2IgQ29udGFpbmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNvdXJjZUNvbnRhaW5lck5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgc291cmNlIGNvbnRhaW5lci5cbiAgICAgKiBAcGFyYW0gZGVzdGluYXRpb25Db250YWluZXJOYW1lIC0gVGhlIG5ldyBuYW1lIG9mIHRoZSBjb250YWluZXIuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGNvbmZpZ3VyZSBDb250YWluZXIgUmVuYW1lIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50ICovXG4gICAgLy8gQHRzLWlnbm9yZSBOZWVkIHRvIGhpZGUgdGhpcyBpbnRlcmZhY2UgZm9yIG5vdy4gTWFrZSBpdCBwdWJsaWMgYW5kIHR1cm4gb24gdGhlIGxpdmUgdGVzdHMgZm9yIGl0IHdoZW4gdGhlIHNlcnZpY2UgaXMgcmVhZHkuXG4gICAgYXN5bmMgcmVuYW1lQ29udGFpbmVyKHNvdXJjZUNvbnRhaW5lck5hbWUsIGRlc3RpbmF0aW9uQ29udGFpbmVyTmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKFwiQmxvYlNlcnZpY2VDbGllbnQtcmVuYW1lQ29udGFpbmVyXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyQ2xpZW50ID0gdGhpcy5nZXRDb250YWluZXJDbGllbnQoZGVzdGluYXRpb25Db250YWluZXJOYW1lKTtcbiAgICAgICAgICAgIC8vIEhhY2sgdG8gYWNjZXNzIGEgcHJvdGVjdGVkIG1lbWJlci5cbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lckNvbnRleHQgPSBjb250YWluZXJDbGllbnRbXCJzdG9yYWdlQ2xpZW50Q29udGV4dFwiXS5jb250YWluZXI7XG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJSZW5hbWVSZXNwb25zZSA9IGFzc2VydFJlc3BvbnNlKGF3YWl0IGNvbnRhaW5lckNvbnRleHQucmVuYW1lKHNvdXJjZUNvbnRhaW5lck5hbWUsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdXBkYXRlZE9wdGlvbnMpLCB7IHNvdXJjZUxlYXNlSWQ6IChfYSA9IG9wdGlvbnMuc291cmNlQ29uZGl0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVhc2VJZCB9KSkpO1xuICAgICAgICAgICAgcmV0dXJuIHsgY29udGFpbmVyQ2xpZW50LCBjb250YWluZXJSZW5hbWVSZXNwb25zZSB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcHJvcGVydGllcyBvZiBhIHN0b3JhZ2UgYWNjb3VudOKAmXMgQmxvYiBzZXJ2aWNlLCBpbmNsdWRpbmcgcHJvcGVydGllc1xuICAgICAqIGZvciBTdG9yYWdlIEFuYWx5dGljcyBhbmQgQ09SUyAoQ3Jvc3MtT3JpZ2luIFJlc291cmNlIFNoYXJpbmcpIHJ1bGVzLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL2dldC1ibG9iLXNlcnZpY2UtcHJvcGVydGllc1xuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIHRoZSBTZXJ2aWNlIEdldCBQcm9wZXJ0aWVzIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyBSZXNwb25zZSBkYXRhIGZvciB0aGUgU2VydmljZSBHZXQgUHJvcGVydGllcyBvcGVyYXRpb24uXG4gICAgICovXG4gICAgYXN5bmMgZ2V0UHJvcGVydGllcyhvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJCbG9iU2VydmljZUNsaWVudC1nZXRQcm9wZXJ0aWVzXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMuc2VydmljZUNvbnRleHQuZ2V0UHJvcGVydGllcyh7XG4gICAgICAgICAgICAgICAgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBwcm9wZXJ0aWVzIGZvciBhIHN0b3JhZ2UgYWNjb3VudOKAmXMgQmxvYiBzZXJ2aWNlIGVuZHBvaW50LCBpbmNsdWRpbmcgcHJvcGVydGllc1xuICAgICAqIGZvciBTdG9yYWdlIEFuYWx5dGljcywgQ09SUyAoQ3Jvc3MtT3JpZ2luIFJlc291cmNlIFNoYXJpbmcpIHJ1bGVzIGFuZCBzb2Z0IGRlbGV0ZSBzZXR0aW5ncy5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9zZXQtYmxvYi1zZXJ2aWNlLXByb3BlcnRpZXNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0aWVzIC1cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gdGhlIFNlcnZpY2UgU2V0IFByb3BlcnRpZXMgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIFJlc3BvbnNlIGRhdGEgZm9yIHRoZSBTZXJ2aWNlIFNldCBQcm9wZXJ0aWVzIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBzZXRQcm9wZXJ0aWVzKHByb3BlcnRpZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2JTZXJ2aWNlQ2xpZW50LXNldFByb3BlcnRpZXNcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYXNzZXJ0UmVzcG9uc2UoYXdhaXQgdGhpcy5zZXJ2aWNlQ29udGV4dC5zZXRQcm9wZXJ0aWVzKHByb3BlcnRpZXMsIHtcbiAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgICAgICAgICAgICB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgc3RhdGlzdGljcyByZWxhdGVkIHRvIHJlcGxpY2F0aW9uIGZvciB0aGUgQmxvYiBzZXJ2aWNlLiBJdCBpcyBvbmx5XG4gICAgICogYXZhaWxhYmxlIG9uIHRoZSBzZWNvbmRhcnkgbG9jYXRpb24gZW5kcG9pbnQgd2hlbiByZWFkLWFjY2VzcyBnZW8tcmVkdW5kYW50XG4gICAgICogcmVwbGljYXRpb24gaXMgZW5hYmxlZCBmb3IgdGhlIHN0b3JhZ2UgYWNjb3VudC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9nZXQtYmxvYi1zZXJ2aWNlLXN0YXRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gdGhlIFNlcnZpY2UgR2V0IFN0YXRpc3RpY3Mgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIFJlc3BvbnNlIGRhdGEgZm9yIHRoZSBTZXJ2aWNlIEdldCBTdGF0aXN0aWNzIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRTdGF0aXN0aWNzKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2JTZXJ2aWNlQ2xpZW50LWdldFN0YXRpc3RpY3NcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYXNzZXJ0UmVzcG9uc2UoYXdhaXQgdGhpcy5zZXJ2aWNlQ29udGV4dC5nZXRTdGF0aXN0aWNzKHtcbiAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgICAgICAgICAgICB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgR2V0IEFjY291bnQgSW5mb3JtYXRpb24gb3BlcmF0aW9uIHJldHVybnMgdGhlIHNrdSBuYW1lIGFuZCBhY2NvdW50IGtpbmRcbiAgICAgKiBmb3IgdGhlIHNwZWNpZmllZCBhY2NvdW50LlxuICAgICAqIFRoZSBHZXQgQWNjb3VudCBJbmZvcm1hdGlvbiBvcGVyYXRpb24gaXMgYXZhaWxhYmxlIG9uIHNlcnZpY2UgdmVyc2lvbnMgYmVnaW5uaW5nXG4gICAgICogd2l0aCB2ZXJzaW9uIDIwMTgtMDMtMjguXG4gICAgICogQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9yZXN0L2FwaS9zdG9yYWdlc2VydmljZXMvZ2V0LWFjY291bnQtaW5mb3JtYXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byB0aGUgU2VydmljZSBHZXQgQWNjb3VudCBJbmZvIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyBSZXNwb25zZSBkYXRhIGZvciB0aGUgU2VydmljZSBHZXQgQWNjb3VudCBJbmZvIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRBY2NvdW50SW5mbyhvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJCbG9iU2VydmljZUNsaWVudC1nZXRBY2NvdW50SW5mb1wiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhc3NlcnRSZXNwb25zZShhd2FpdCB0aGlzLnNlcnZpY2VDb250ZXh0LmdldEFjY291bnRJbmZvKHtcbiAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgICAgICAgICAgICB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiB0aGUgY29udGFpbmVycyB1bmRlciB0aGUgc3BlY2lmaWVkIGFjY291bnQuXG4gICAgICogQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9yZXN0L2FwaS9zdG9yYWdlc2VydmljZXMvbGlzdC1jb250YWluZXJzMlxuICAgICAqXG4gICAgICogQHBhcmFtIG1hcmtlciAtIEEgc3RyaW5nIHZhbHVlIHRoYXQgaWRlbnRpZmllcyB0aGUgcG9ydGlvbiBvZlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGxpc3Qgb2YgY29udGFpbmVycyB0byBiZSByZXR1cm5lZCB3aXRoIHRoZSBuZXh0IGxpc3Rpbmcgb3BlcmF0aW9uLiBUaGVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbiByZXR1cm5zIHRoZSBjb250aW51YXRpb25Ub2tlbiB2YWx1ZSB3aXRoaW4gdGhlIHJlc3BvbnNlIGJvZHkgaWYgdGhlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICBsaXN0aW5nIG9wZXJhdGlvbiBkaWQgbm90IHJldHVybiBhbGwgY29udGFpbmVycyByZW1haW5pbmcgdG8gYmUgbGlzdGVkXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBjdXJyZW50IHBhZ2UuIFRoZSBjb250aW51YXRpb25Ub2tlbiB2YWx1ZSBjYW4gYmUgdXNlZCBhcyB0aGUgdmFsdWUgZm9yXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICB0aGUgbWFya2VyIHBhcmFtZXRlciBpbiBhIHN1YnNlcXVlbnQgY2FsbCB0byByZXF1ZXN0IHRoZSBuZXh0IHBhZ2Ugb2YgbGlzdFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMuIFRoZSBtYXJrZXIgdmFsdWUgaXMgb3BhcXVlIHRvIHRoZSBjbGllbnQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIHRoZSBTZXJ2aWNlIExpc3QgQ29udGFpbmVyIFNlZ21lbnQgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIFJlc3BvbnNlIGRhdGEgZm9yIHRoZSBTZXJ2aWNlIExpc3QgQ29udGFpbmVyIFNlZ21lbnQgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIGxpc3RDb250YWluZXJzU2VnbWVudChtYXJrZXIsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2JTZXJ2aWNlQ2xpZW50LWxpc3RDb250YWluZXJzU2VnbWVudFwiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhc3NlcnRSZXNwb25zZShhd2FpdCB0aGlzLnNlcnZpY2VDb250ZXh0Lmxpc3RDb250YWluZXJzU2VnbWVudChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCwgbWFya2VyIH0sIG9wdGlvbnMpLCB7IGluY2x1ZGU6IHR5cGVvZiBvcHRpb25zLmluY2x1ZGUgPT09IFwic3RyaW5nXCIgPyBbb3B0aW9ucy5pbmNsdWRlXSA6IG9wdGlvbnMuaW5jbHVkZSwgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zIH0pKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgRmlsdGVyIEJsb2JzIG9wZXJhdGlvbiBlbmFibGVzIGNhbGxlcnMgdG8gbGlzdCBibG9icyBhY3Jvc3MgYWxsIGNvbnRhaW5lcnMgd2hvc2UgdGFnc1xuICAgICAqIG1hdGNoIGEgZ2l2ZW4gc2VhcmNoIGV4cHJlc3Npb24uIEZpbHRlciBibG9icyBzZWFyY2hlcyBhY3Jvc3MgYWxsIGNvbnRhaW5lcnMgd2l0aGluIGFcbiAgICAgKiBzdG9yYWdlIGFjY291bnQgYnV0IGNhbiBiZSBzY29wZWQgd2l0aGluIHRoZSBleHByZXNzaW9uIHRvIGEgc2luZ2xlIGNvbnRhaW5lci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YWdGaWx0ZXJTcWxFeHByZXNzaW9uIC0gVGhlIHdoZXJlIHBhcmFtZXRlciBlbmFibGVzIHRoZSBjYWxsZXIgdG8gcXVlcnkgYmxvYnMgd2hvc2UgdGFncyBtYXRjaCBhIGdpdmVuIGV4cHJlc3Npb24uXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGdpdmVuIGV4cHJlc3Npb24gbXVzdCBldmFsdWF0ZSB0byB0cnVlIGZvciBhIGJsb2IgdG8gYmUgcmV0dXJuZWQgaW4gdGhlIHJlc3VsdHMuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlW09EYXRhIC0gQUJORl0gZmlsdGVyIHN5bnRheCBydWxlIGRlZmluZXMgdGhlIGZvcm1hbCBncmFtbWFyIGZvciB0aGUgdmFsdWUgb2YgdGhlIHdoZXJlIHF1ZXJ5IHBhcmFtZXRlcjtcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3dldmVyLCBvbmx5IGEgc3Vic2V0IG9mIHRoZSBPRGF0YSBmaWx0ZXIgc3ludGF4IGlzIHN1cHBvcnRlZCBpbiB0aGUgQmxvYiBzZXJ2aWNlLlxuICAgICAqIEBwYXJhbSBtYXJrZXIgLSBBIHN0cmluZyB2YWx1ZSB0aGF0IGlkZW50aWZpZXMgdGhlIHBvcnRpb24gb2ZcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGxpc3Qgb2YgYmxvYnMgdG8gYmUgcmV0dXJuZWQgd2l0aCB0aGUgbmV4dCBsaXN0aW5nIG9wZXJhdGlvbi4gVGhlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbiByZXR1cm5zIHRoZSBjb250aW51YXRpb25Ub2tlbiB2YWx1ZSB3aXRoaW4gdGhlIHJlc3BvbnNlIGJvZHkgaWYgdGhlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3Rpbmcgb3BlcmF0aW9uIGRpZCBub3QgcmV0dXJuIGFsbCBibG9icyByZW1haW5pbmcgdG8gYmUgbGlzdGVkXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIGN1cnJlbnQgcGFnZS4gVGhlIGNvbnRpbnVhdGlvblRva2VuIHZhbHVlIGNhbiBiZSB1c2VkIGFzIHRoZSB2YWx1ZSBmb3JcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG1hcmtlciBwYXJhbWV0ZXIgaW4gYSBzdWJzZXF1ZW50IGNhbGwgdG8gcmVxdWVzdCB0aGUgbmV4dCBwYWdlIG9mIGxpc3RcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMuIFRoZSBtYXJrZXIgdmFsdWUgaXMgb3BhcXVlIHRvIHRoZSBjbGllbnQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGZpbmQgYmxvYnMgYnkgdGFncy5cbiAgICAgKi9cbiAgICBhc3luYyBmaW5kQmxvYnNCeVRhZ3NTZWdtZW50KHRhZ0ZpbHRlclNxbEV4cHJlc3Npb24sIG1hcmtlciwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKFwiQmxvYlNlcnZpY2VDbGllbnQtZmluZEJsb2JzQnlUYWdzU2VnbWVudFwiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXNzZXJ0UmVzcG9uc2UoYXdhaXQgdGhpcy5zZXJ2aWNlQ29udGV4dC5maWx0ZXJCbG9icyh7XG4gICAgICAgICAgICAgICAgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICAgICAgICAgICAgd2hlcmU6IHRhZ0ZpbHRlclNxbEV4cHJlc3Npb24sXG4gICAgICAgICAgICAgICAgbWFya2VyLFxuICAgICAgICAgICAgICAgIG1heFBhZ2VTaXplOiBvcHRpb25zLm1heFBhZ2VTaXplLFxuICAgICAgICAgICAgICAgIHRyYWNpbmdPcHRpb25zOiB1cGRhdGVkT3B0aW9ucy50cmFjaW5nT3B0aW9ucyxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGNvbnN0IHdyYXBwZWRSZXNwb25zZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UpLCB7IF9yZXNwb25zZTogcmVzcG9uc2UuX3Jlc3BvbnNlLCBibG9iczogcmVzcG9uc2UuYmxvYnMubWFwKChibG9iKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhZ1ZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCgoX2EgPSBibG9iLnRhZ3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ibG9iVGFnU2V0Lmxlbmd0aCkgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ1ZhbHVlID0gYmxvYi50YWdzLmJsb2JUYWdTZXRbMF0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYmxvYiksIHsgdGFnczogdG9UYWdzKGJsb2IudGFncyksIHRhZ1ZhbHVlIH0pO1xuICAgICAgICAgICAgICAgIH0pIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZWRSZXNwb25zZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gQXN5bmNJdGVyYWJsZUl0ZXJhdG9yIGZvciBTZXJ2aWNlRmluZEJsb2JzQnlUYWdzU2VnbWVudFJlc3BvbnNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhZ0ZpbHRlclNxbEV4cHJlc3Npb24gLSAgVGhlIHdoZXJlIHBhcmFtZXRlciBlbmFibGVzIHRoZSBjYWxsZXIgdG8gcXVlcnkgYmxvYnMgd2hvc2UgdGFncyBtYXRjaCBhIGdpdmVuIGV4cHJlc3Npb24uXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBnaXZlbiBleHByZXNzaW9uIG11c3QgZXZhbHVhdGUgdG8gdHJ1ZSBmb3IgYSBibG9iIHRvIGJlIHJldHVybmVkIGluIHRoZSByZXN1bHRzLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGVbT0RhdGEgLSBBQk5GXSBmaWx0ZXIgc3ludGF4IHJ1bGUgZGVmaW5lcyB0aGUgZm9ybWFsIGdyYW1tYXIgZm9yIHRoZSB2YWx1ZSBvZiB0aGUgd2hlcmUgcXVlcnkgcGFyYW1ldGVyO1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3dldmVyLCBvbmx5IGEgc3Vic2V0IG9mIHRoZSBPRGF0YSBmaWx0ZXIgc3ludGF4IGlzIHN1cHBvcnRlZCBpbiB0aGUgQmxvYiBzZXJ2aWNlLlxuICAgICAqIEBwYXJhbSBtYXJrZXIgLSBBIHN0cmluZyB2YWx1ZSB0aGF0IGlkZW50aWZpZXMgdGhlIHBvcnRpb24gb2ZcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGxpc3Qgb2YgYmxvYnMgdG8gYmUgcmV0dXJuZWQgd2l0aCB0aGUgbmV4dCBsaXN0aW5nIG9wZXJhdGlvbi4gVGhlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbiByZXR1cm5zIHRoZSBjb250aW51YXRpb25Ub2tlbiB2YWx1ZSB3aXRoaW4gdGhlIHJlc3BvbnNlIGJvZHkgaWYgdGhlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3Rpbmcgb3BlcmF0aW9uIGRpZCBub3QgcmV0dXJuIGFsbCBibG9icyByZW1haW5pbmcgdG8gYmUgbGlzdGVkXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIGN1cnJlbnQgcGFnZS4gVGhlIGNvbnRpbnVhdGlvblRva2VuIHZhbHVlIGNhbiBiZSB1c2VkIGFzIHRoZSB2YWx1ZSBmb3JcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG1hcmtlciBwYXJhbWV0ZXIgaW4gYSBzdWJzZXF1ZW50IGNhbGwgdG8gcmVxdWVzdCB0aGUgbmV4dCBwYWdlIG9mIGxpc3RcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMuIFRoZSBtYXJrZXIgdmFsdWUgaXMgb3BhcXVlIHRvIHRoZSBjbGllbnQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGZpbmQgYmxvYnMgYnkgdGFncy5cbiAgICAgKi9cbiAgICBmaW5kQmxvYnNCeVRhZ3NTZWdtZW50cyh0YWdGaWx0ZXJTcWxFeHByZXNzaW9uXzEsIG1hcmtlcl8xKSB7XG4gICAgICAgIHJldHVybiBfX2FzeW5jR2VuZXJhdG9yKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24qIGZpbmRCbG9ic0J5VGFnc1NlZ21lbnRzXzEodGFnRmlsdGVyU3FsRXhwcmVzc2lvbiwgbWFya2VyLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgICAgIGxldCByZXNwb25zZTtcbiAgICAgICAgICAgIGlmICghIW1hcmtlciB8fCBtYXJrZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSB5aWVsZCBfX2F3YWl0KHRoaXMuZmluZEJsb2JzQnlUYWdzU2VnbWVudCh0YWdGaWx0ZXJTcWxFeHByZXNzaW9uLCBtYXJrZXIsIG9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuYmxvYnMgPSByZXNwb25zZS5ibG9icyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyID0gcmVzcG9uc2UuY29udGludWF0aW9uVG9rZW47XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHlpZWxkIF9fYXdhaXQocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH0gd2hpbGUgKG1hcmtlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIEFzeW5jSXRlcmFibGVJdGVyYXRvciBmb3IgYmxvYnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFnRmlsdGVyU3FsRXhwcmVzc2lvbiAtICBUaGUgd2hlcmUgcGFyYW1ldGVyIGVuYWJsZXMgdGhlIGNhbGxlciB0byBxdWVyeSBibG9icyB3aG9zZSB0YWdzIG1hdGNoIGEgZ2l2ZW4gZXhwcmVzc2lvbi5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGdpdmVuIGV4cHJlc3Npb24gbXVzdCBldmFsdWF0ZSB0byB0cnVlIGZvciBhIGJsb2IgdG8gYmUgcmV0dXJuZWQgaW4gdGhlIHJlc3VsdHMuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZVtPRGF0YSAtIEFCTkZdIGZpbHRlciBzeW50YXggcnVsZSBkZWZpbmVzIHRoZSBmb3JtYWwgZ3JhbW1hciBmb3IgdGhlIHZhbHVlIG9mIHRoZSB3aGVyZSBxdWVyeSBwYXJhbWV0ZXI7XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIsIG9ubHkgYSBzdWJzZXQgb2YgdGhlIE9EYXRhIGZpbHRlciBzeW50YXggaXMgc3VwcG9ydGVkIGluIHRoZSBCbG9iIHNlcnZpY2UuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGZpbmRCbG9ic0J5VGFnc0l0ZW1zLlxuICAgICAqL1xuICAgIGZpbmRCbG9ic0J5VGFnc0l0ZW1zKHRhZ0ZpbHRlclNxbEV4cHJlc3Npb25fMSkge1xuICAgICAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKiBmaW5kQmxvYnNCeVRhZ3NJdGVtc18xKHRhZ0ZpbHRlclNxbEV4cHJlc3Npb24sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICAgICAgdmFyIF9hLCBlXzEsIF9iLCBfYztcbiAgICAgICAgICAgIGxldCBtYXJrZXI7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9kID0gdHJ1ZSwgX2UgPSBfX2FzeW5jVmFsdWVzKHRoaXMuZmluZEJsb2JzQnlUYWdzU2VnbWVudHModGFnRmlsdGVyU3FsRXhwcmVzc2lvbiwgbWFya2VyLCBvcHRpb25zKSksIF9mOyBfZiA9IHlpZWxkIF9fYXdhaXQoX2UubmV4dCgpKSwgX2EgPSBfZi5kb25lLCAhX2E7IF9kID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfYyA9IF9mLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBfZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWdtZW50ID0gX2M7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIF9fYXdhaXQoeWllbGQqIF9fYXN5bmNEZWxlZ2F0b3IoX19hc3luY1ZhbHVlcyhzZWdtZW50LmJsb2JzKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9kICYmICFfYSAmJiAoX2IgPSBfZS5yZXR1cm4pKSB5aWVsZCBfX2F3YWl0KF9iLmNhbGwoX2UpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhc3luYyBpdGVyYWJsZSBpdGVyYXRvciB0byBmaW5kIGFsbCBibG9icyB3aXRoIHNwZWNpZmllZCB0YWdcbiAgICAgKiB1bmRlciB0aGUgc3BlY2lmaWVkIGFjY291bnQuXG4gICAgICpcbiAgICAgKiAuYnlQYWdlKCkgcmV0dXJucyBhbiBhc3luYyBpdGVyYWJsZSBpdGVyYXRvciB0byBsaXN0IHRoZSBibG9icyBpbiBwYWdlcy5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL2dldC1ibG9iLXNlcnZpY2UtcHJvcGVydGllc1xuICAgICAqXG4gICAgICogRXhhbXBsZSB1c2luZyBgZm9yIGF3YWl0YCBzeW50YXg6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGxldCBpID0gMTtcbiAgICAgKiBmb3IgYXdhaXQgKGNvbnN0IGJsb2Igb2YgYmxvYlNlcnZpY2VDbGllbnQuZmluZEJsb2JzQnlUYWdzKFwidGFna2V5PSd0YWd2YWx1ZSdcIikpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGBCbG9iICR7aSsrfTogJHtjb250YWluZXIubmFtZX1gKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBFeGFtcGxlIHVzaW5nIGBpdGVyLm5leHQoKWA6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGxldCBpID0gMTtcbiAgICAgKiBjb25zdCBpdGVyID0gYmxvYlNlcnZpY2VDbGllbnQuZmluZEJsb2JzQnlUYWdzKFwidGFna2V5PSd0YWd2YWx1ZSdcIik7XG4gICAgICogbGV0IGJsb2JJdGVtID0gYXdhaXQgaXRlci5uZXh0KCk7XG4gICAgICogd2hpbGUgKCFibG9iSXRlbS5kb25lKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhgQmxvYiAke2krK306ICR7YmxvYkl0ZW0udmFsdWUubmFtZX1gKTtcbiAgICAgKiAgIGJsb2JJdGVtID0gYXdhaXQgaXRlci5uZXh0KCk7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogRXhhbXBsZSB1c2luZyBgYnlQYWdlKClgOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAvLyBwYXNzaW5nIG9wdGlvbmFsIG1heFBhZ2VTaXplIGluIHRoZSBwYWdlIHNldHRpbmdzXG4gICAgICogbGV0IGkgPSAxO1xuICAgICAqIGZvciBhd2FpdCAoY29uc3QgcmVzcG9uc2Ugb2YgYmxvYlNlcnZpY2VDbGllbnQuZmluZEJsb2JzQnlUYWdzKFwidGFna2V5PSd0YWd2YWx1ZSdcIikuYnlQYWdlKHsgbWF4UGFnZVNpemU6IDIwIH0pKSB7XG4gICAgICogICBpZiAocmVzcG9uc2UuYmxvYnMpIHtcbiAgICAgKiAgICAgZm9yIChjb25zdCBibG9iIG9mIHJlc3BvbnNlLmJsb2JzKSB7XG4gICAgICogICAgICAgY29uc29sZS5sb2coYEJsb2IgJHtpKyt9OiAke2Jsb2IubmFtZX1gKTtcbiAgICAgKiAgICAgfVxuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEV4YW1wbGUgdXNpbmcgcGFnaW5nIHdpdGggYSBtYXJrZXI6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGxldCBpID0gMTtcbiAgICAgKiBsZXQgaXRlcmF0b3IgPSBibG9iU2VydmljZUNsaWVudC5maW5kQmxvYnNCeVRhZ3MoXCJ0YWdrZXk9J3RhZ3ZhbHVlJ1wiKS5ieVBhZ2UoeyBtYXhQYWdlU2l6ZTogMiB9KTtcbiAgICAgKiBsZXQgcmVzcG9uc2UgPSAoYXdhaXQgaXRlcmF0b3IubmV4dCgpKS52YWx1ZTtcbiAgICAgKlxuICAgICAqIC8vIFByaW50cyAyIGJsb2IgbmFtZXNcbiAgICAgKiBpZiAocmVzcG9uc2UuYmxvYnMpIHtcbiAgICAgKiAgIGZvciAoY29uc3QgYmxvYiBvZiByZXNwb25zZS5ibG9icykge1xuICAgICAqICAgICBjb25zb2xlLmxvZyhgQmxvYiAke2krK306ICR7YmxvYi5uYW1lfWApO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIC8vIEdldHMgbmV4dCBtYXJrZXJcbiAgICAgKiBsZXQgbWFya2VyID0gcmVzcG9uc2UuY29udGludWF0aW9uVG9rZW47XG4gICAgICogLy8gUGFzc2luZyBuZXh0IG1hcmtlciBhcyBjb250aW51YXRpb25Ub2tlblxuICAgICAqIGl0ZXJhdG9yID0gYmxvYlNlcnZpY2VDbGllbnRcbiAgICAgKiAgIC5maW5kQmxvYnNCeVRhZ3MoXCJ0YWdrZXk9J3RhZ3ZhbHVlJ1wiKVxuICAgICAqICAgLmJ5UGFnZSh7IGNvbnRpbnVhdGlvblRva2VuOiBtYXJrZXIsIG1heFBhZ2VTaXplOiAxMCB9KTtcbiAgICAgKiByZXNwb25zZSA9IChhd2FpdCBpdGVyYXRvci5uZXh0KCkpLnZhbHVlO1xuICAgICAqXG4gICAgICogLy8gUHJpbnRzIGJsb2IgbmFtZXNcbiAgICAgKiBpZiAocmVzcG9uc2UuYmxvYnMpIHtcbiAgICAgKiAgIGZvciAoY29uc3QgYmxvYiBvZiByZXNwb25zZS5ibG9icykge1xuICAgICAqICAgICAgY29uc29sZS5sb2coYEJsb2IgJHtpKyt9OiAke2Jsb2IubmFtZX1gKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFnRmlsdGVyU3FsRXhwcmVzc2lvbiAtICBUaGUgd2hlcmUgcGFyYW1ldGVyIGVuYWJsZXMgdGhlIGNhbGxlciB0byBxdWVyeSBibG9icyB3aG9zZSB0YWdzIG1hdGNoIGEgZ2l2ZW4gZXhwcmVzc2lvbi5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGdpdmVuIGV4cHJlc3Npb24gbXVzdCBldmFsdWF0ZSB0byB0cnVlIGZvciBhIGJsb2IgdG8gYmUgcmV0dXJuZWQgaW4gdGhlIHJlc3VsdHMuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZVtPRGF0YSAtIEFCTkZdIGZpbHRlciBzeW50YXggcnVsZSBkZWZpbmVzIHRoZSBmb3JtYWwgZ3JhbW1hciBmb3IgdGhlIHZhbHVlIG9mIHRoZSB3aGVyZSBxdWVyeSBwYXJhbWV0ZXI7XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIsIG9ubHkgYSBzdWJzZXQgb2YgdGhlIE9EYXRhIGZpbHRlciBzeW50YXggaXMgc3VwcG9ydGVkIGluIHRoZSBCbG9iIHNlcnZpY2UuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGZpbmQgYmxvYnMgYnkgdGFncy5cbiAgICAgKi9cbiAgICBmaW5kQmxvYnNCeVRhZ3ModGFnRmlsdGVyU3FsRXhwcmVzc2lvbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIC8vIEFzeW5jSXRlcmFibGVJdGVyYXRvciB0byBpdGVyYXRlIG92ZXIgYmxvYnNcbiAgICAgICAgY29uc3QgbGlzdFNlZ21lbnRPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGl0ZXIgPSB0aGlzLmZpbmRCbG9ic0J5VGFnc0l0ZW1zKHRhZ0ZpbHRlclNxbEV4cHJlc3Npb24sIGxpc3RTZWdtZW50T3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSBuZXh0IG1ldGhvZCwgcGFydCBvZiB0aGUgaXRlcmF0aW9uIHByb3RvY29sXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZXIubmV4dCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIGNvbm5lY3Rpb24gdG8gdGhlIGFzeW5jIGl0ZXJhdG9yLCBwYXJ0IG9mIHRoZSBpdGVyYXRpb24gcHJvdG9jb2xcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJldHVybiBhbiBBc3luY0l0ZXJhYmxlSXRlcmF0b3IgdGhhdCB3b3JrcyBhIHBhZ2UgYXQgYSB0aW1lXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGJ5UGFnZTogKHNldHRpbmdzID0ge30pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maW5kQmxvYnNCeVRhZ3NTZWdtZW50cyh0YWdGaWx0ZXJTcWxFeHByZXNzaW9uLCBzZXR0aW5ncy5jb250aW51YXRpb25Ub2tlbiwgT2JqZWN0LmFzc2lnbih7IG1heFBhZ2VTaXplOiBzZXR0aW5ncy5tYXhQYWdlU2l6ZSB9LCBsaXN0U2VnbWVudE9wdGlvbnMpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gQXN5bmNJdGVyYWJsZUl0ZXJhdG9yIGZvciBTZXJ2aWNlTGlzdENvbnRhaW5lcnNTZWdtZW50UmVzcG9uc2VzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWFya2VyIC0gQSBzdHJpbmcgdmFsdWUgdGhhdCBpZGVudGlmaWVzIHRoZSBwb3J0aW9uIG9mXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICB0aGUgbGlzdCBvZiBjb250YWluZXJzIHRvIGJlIHJldHVybmVkIHdpdGggdGhlIG5leHQgbGlzdGluZyBvcGVyYXRpb24uIFRoZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uIHJldHVybnMgdGhlIGNvbnRpbnVhdGlvblRva2VuIHZhbHVlIHdpdGhpbiB0aGUgcmVzcG9uc2UgYm9keSBpZiB0aGVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3Rpbmcgb3BlcmF0aW9uIGRpZCBub3QgcmV0dXJuIGFsbCBjb250YWluZXJzIHJlbWFpbmluZyB0byBiZSBsaXN0ZWRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIGN1cnJlbnQgcGFnZS4gVGhlIGNvbnRpbnVhdGlvblRva2VuIHZhbHVlIGNhbiBiZSB1c2VkIGFzIHRoZSB2YWx1ZSBmb3JcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBtYXJrZXIgcGFyYW1ldGVyIGluIGEgc3Vic2VxdWVudCBjYWxsIHRvIHJlcXVlc3QgdGhlIG5leHQgcGFnZSBvZiBsaXN0XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy4gVGhlIG1hcmtlciB2YWx1ZSBpcyBvcGFxdWUgdG8gdGhlIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gbGlzdCBjb250YWluZXJzIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBsaXN0U2VnbWVudHMobWFya2VyXzEpIHtcbiAgICAgICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiogbGlzdFNlZ21lbnRzXzEobWFya2VyLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgICAgIGxldCBsaXN0Q29udGFpbmVyc1NlZ21lbnRSZXNwb25zZTtcbiAgICAgICAgICAgIGlmICghIW1hcmtlciB8fCBtYXJrZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdENvbnRhaW5lcnNTZWdtZW50UmVzcG9uc2UgPSB5aWVsZCBfX2F3YWl0KHRoaXMubGlzdENvbnRhaW5lcnNTZWdtZW50KG1hcmtlciwgb3B0aW9ucykpO1xuICAgICAgICAgICAgICAgICAgICBsaXN0Q29udGFpbmVyc1NlZ21lbnRSZXNwb25zZS5jb250YWluZXJJdGVtcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0Q29udGFpbmVyc1NlZ21lbnRSZXNwb25zZS5jb250YWluZXJJdGVtcyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyID0gbGlzdENvbnRhaW5lcnNTZWdtZW50UmVzcG9uc2UuY29udGludWF0aW9uVG9rZW47XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHlpZWxkIF9fYXdhaXQoeWllbGQgX19hd2FpdChsaXN0Q29udGFpbmVyc1NlZ21lbnRSZXNwb25zZSkpO1xuICAgICAgICAgICAgICAgIH0gd2hpbGUgKG1hcmtlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIEFzeW5jSXRlcmFibGVJdGVyYXRvciBmb3IgQ29udGFpbmVyIEl0ZW1zXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gbGlzdCBjb250YWluZXJzIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBsaXN0SXRlbXMoKSB7XG4gICAgICAgIHJldHVybiBfX2FzeW5jR2VuZXJhdG9yKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24qIGxpc3RJdGVtc18xKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICAgICAgdmFyIF9hLCBlXzIsIF9iLCBfYztcbiAgICAgICAgICAgIGxldCBtYXJrZXI7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9kID0gdHJ1ZSwgX2UgPSBfX2FzeW5jVmFsdWVzKHRoaXMubGlzdFNlZ21lbnRzKG1hcmtlciwgb3B0aW9ucykpLCBfZjsgX2YgPSB5aWVsZCBfX2F3YWl0KF9lLm5leHQoKSksIF9hID0gX2YuZG9uZSwgIV9hOyBfZCA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgX2MgPSBfZi52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VnbWVudCA9IF9jO1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCBfX2F3YWl0KHlpZWxkKiBfX2FzeW5jRGVsZWdhdG9yKF9fYXN5bmNWYWx1ZXMoc2VnbWVudC5jb250YWluZXJJdGVtcykpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfZCAmJiAhX2EgJiYgKF9iID0gX2UucmV0dXJuKSkgeWllbGQgX19hd2FpdChfYi5jYWxsKF9lKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXN5bmMgaXRlcmFibGUgaXRlcmF0b3IgdG8gbGlzdCBhbGwgdGhlIGNvbnRhaW5lcnNcbiAgICAgKiB1bmRlciB0aGUgc3BlY2lmaWVkIGFjY291bnQuXG4gICAgICpcbiAgICAgKiAuYnlQYWdlKCkgcmV0dXJucyBhbiBhc3luYyBpdGVyYWJsZSBpdGVyYXRvciB0byBsaXN0IHRoZSBjb250YWluZXJzIGluIHBhZ2VzLlxuICAgICAqXG4gICAgICogRXhhbXBsZSB1c2luZyBgZm9yIGF3YWl0YCBzeW50YXg6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGxldCBpID0gMTtcbiAgICAgKiBmb3IgYXdhaXQgKGNvbnN0IGNvbnRhaW5lciBvZiBibG9iU2VydmljZUNsaWVudC5saXN0Q29udGFpbmVycygpKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhgQ29udGFpbmVyICR7aSsrfTogJHtjb250YWluZXIubmFtZX1gKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBFeGFtcGxlIHVzaW5nIGBpdGVyLm5leHQoKWA6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGxldCBpID0gMTtcbiAgICAgKiBjb25zdCBpdGVyID0gYmxvYlNlcnZpY2VDbGllbnQubGlzdENvbnRhaW5lcnMoKTtcbiAgICAgKiBsZXQgY29udGFpbmVySXRlbSA9IGF3YWl0IGl0ZXIubmV4dCgpO1xuICAgICAqIHdoaWxlICghY29udGFpbmVySXRlbS5kb25lKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhgQ29udGFpbmVyICR7aSsrfTogJHtjb250YWluZXJJdGVtLnZhbHVlLm5hbWV9YCk7XG4gICAgICogICBjb250YWluZXJJdGVtID0gYXdhaXQgaXRlci5uZXh0KCk7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogRXhhbXBsZSB1c2luZyBgYnlQYWdlKClgOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAvLyBwYXNzaW5nIG9wdGlvbmFsIG1heFBhZ2VTaXplIGluIHRoZSBwYWdlIHNldHRpbmdzXG4gICAgICogbGV0IGkgPSAxO1xuICAgICAqIGZvciBhd2FpdCAoY29uc3QgcmVzcG9uc2Ugb2YgYmxvYlNlcnZpY2VDbGllbnQubGlzdENvbnRhaW5lcnMoKS5ieVBhZ2UoeyBtYXhQYWdlU2l6ZTogMjAgfSkpIHtcbiAgICAgKiAgIGlmIChyZXNwb25zZS5jb250YWluZXJJdGVtcykge1xuICAgICAqICAgICBmb3IgKGNvbnN0IGNvbnRhaW5lciBvZiByZXNwb25zZS5jb250YWluZXJJdGVtcykge1xuICAgICAqICAgICAgIGNvbnNvbGUubG9nKGBDb250YWluZXIgJHtpKyt9OiAke2NvbnRhaW5lci5uYW1lfWApO1xuICAgICAqICAgICB9XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogRXhhbXBsZSB1c2luZyBwYWdpbmcgd2l0aCBhIG1hcmtlcjpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogbGV0IGkgPSAxO1xuICAgICAqIGxldCBpdGVyYXRvciA9IGJsb2JTZXJ2aWNlQ2xpZW50Lmxpc3RDb250YWluZXJzKCkuYnlQYWdlKHsgbWF4UGFnZVNpemU6IDIgfSk7XG4gICAgICogbGV0IHJlc3BvbnNlID0gKGF3YWl0IGl0ZXJhdG9yLm5leHQoKSkudmFsdWU7XG4gICAgICpcbiAgICAgKiAvLyBQcmludHMgMiBjb250YWluZXIgbmFtZXNcbiAgICAgKiBpZiAocmVzcG9uc2UuY29udGFpbmVySXRlbXMpIHtcbiAgICAgKiAgIGZvciAoY29uc3QgY29udGFpbmVyIG9mIHJlc3BvbnNlLmNvbnRhaW5lckl0ZW1zKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKGBDb250YWluZXIgJHtpKyt9OiAke2NvbnRhaW5lci5uYW1lfWApO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIC8vIEdldHMgbmV4dCBtYXJrZXJcbiAgICAgKiBsZXQgbWFya2VyID0gcmVzcG9uc2UuY29udGludWF0aW9uVG9rZW47XG4gICAgICogLy8gUGFzc2luZyBuZXh0IG1hcmtlciBhcyBjb250aW51YXRpb25Ub2tlblxuICAgICAqIGl0ZXJhdG9yID0gYmxvYlNlcnZpY2VDbGllbnRcbiAgICAgKiAgIC5saXN0Q29udGFpbmVycygpXG4gICAgICogICAuYnlQYWdlKHsgY29udGludWF0aW9uVG9rZW46IG1hcmtlciwgbWF4UGFnZVNpemU6IDEwIH0pO1xuICAgICAqIHJlc3BvbnNlID0gKGF3YWl0IGl0ZXJhdG9yLm5leHQoKSkudmFsdWU7XG4gICAgICpcbiAgICAgKiAvLyBQcmludHMgMTAgY29udGFpbmVyIG5hbWVzXG4gICAgICogaWYgKHJlc3BvbnNlLmNvbnRhaW5lckl0ZW1zKSB7XG4gICAgICogICBmb3IgKGNvbnN0IGNvbnRhaW5lciBvZiByZXNwb25zZS5jb250YWluZXJJdGVtcykge1xuICAgICAqICAgICAgY29uc29sZS5sb2coYENvbnRhaW5lciAke2krK306ICR7Y29udGFpbmVyLm5hbWV9YCk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGxpc3QgY29udGFpbmVycy5cbiAgICAgKiBAcmV0dXJucyBBbiBhc3luY0l0ZXJhYmxlSXRlcmF0b3IgdGhhdCBzdXBwb3J0cyBwYWdpbmcuXG4gICAgICovXG4gICAgbGlzdENvbnRhaW5lcnMob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmIChvcHRpb25zLnByZWZpeCA9PT0gXCJcIikge1xuICAgICAgICAgICAgb3B0aW9ucy5wcmVmaXggPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5jbHVkZSA9IFtdO1xuICAgICAgICBpZiAob3B0aW9ucy5pbmNsdWRlRGVsZXRlZCkge1xuICAgICAgICAgICAgaW5jbHVkZS5wdXNoKFwiZGVsZXRlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5pbmNsdWRlTWV0YWRhdGEpIHtcbiAgICAgICAgICAgIGluY2x1ZGUucHVzaChcIm1ldGFkYXRhXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmluY2x1ZGVTeXN0ZW0pIHtcbiAgICAgICAgICAgIGluY2x1ZGUucHVzaChcInN5c3RlbVwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBc3luY0l0ZXJhYmxlSXRlcmF0b3IgdG8gaXRlcmF0ZSBvdmVyIGNvbnRhaW5lcnNcbiAgICAgICAgY29uc3QgbGlzdFNlZ21lbnRPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgKGluY2x1ZGUubGVuZ3RoID4gMCA/IHsgaW5jbHVkZSB9IDoge30pKTtcbiAgICAgICAgY29uc3QgaXRlciA9IHRoaXMubGlzdEl0ZW1zKGxpc3RTZWdtZW50T3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSBuZXh0IG1ldGhvZCwgcGFydCBvZiB0aGUgaXRlcmF0aW9uIHByb3RvY29sXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZXIubmV4dCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIGNvbm5lY3Rpb24gdG8gdGhlIGFzeW5jIGl0ZXJhdG9yLCBwYXJ0IG9mIHRoZSBpdGVyYXRpb24gcHJvdG9jb2xcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJldHVybiBhbiBBc3luY0l0ZXJhYmxlSXRlcmF0b3IgdGhhdCB3b3JrcyBhIHBhZ2UgYXQgYSB0aW1lXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGJ5UGFnZTogKHNldHRpbmdzID0ge30pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0U2VnbWVudHMoc2V0dGluZ3MuY29udGludWF0aW9uVG9rZW4sIE9iamVjdC5hc3NpZ24oeyBtYXhQYWdlU2l6ZTogc2V0dGluZ3MubWF4UGFnZVNpemUgfSwgbGlzdFNlZ21lbnRPcHRpb25zKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPTkxZIEFWQUlMQUJMRSBXSEVOIFVTSU5HIEJFQVJFUiBUT0tFTiBBVVRIRU5USUNBVElPTiAoVG9rZW5DcmVkZW50aWFsKS5cbiAgICAgKlxuICAgICAqIFJldHJpZXZlcyBhIHVzZXIgZGVsZWdhdGlvbiBrZXkgZm9yIHRoZSBCbG9iIHNlcnZpY2UuIFRoaXMgaXMgb25seSBhIHZhbGlkIG9wZXJhdGlvbiB3aGVuIHVzaW5nXG4gICAgICogYmVhcmVyIHRva2VuIGF1dGhlbnRpY2F0aW9uLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9yZXN0L2FwaS9zdG9yYWdlc2VydmljZXMvZ2V0LXVzZXItZGVsZWdhdGlvbi1rZXlcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdGFydHNPbiAtICAgICAgVGhlIHN0YXJ0IHRpbWUgZm9yIHRoZSB1c2VyIGRlbGVnYXRpb24gU0FTLiBNdXN0IGJlIHdpdGhpbiA3IGRheXMgb2YgdGhlIGN1cnJlbnQgdGltZVxuICAgICAqIEBwYXJhbSBleHBpcmVzT24gLSAgICAgVGhlIGVuZCB0aW1lIGZvciB0aGUgdXNlciBkZWxlZ2F0aW9uIFNBUy4gTXVzdCBiZSB3aXRoaW4gNyBkYXlzIG9mIHRoZSBjdXJyZW50IHRpbWVcbiAgICAgKi9cbiAgICBhc3luYyBnZXRVc2VyRGVsZWdhdGlvbktleShzdGFydHNPbiwgZXhwaXJlc09uLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJCbG9iU2VydmljZUNsaWVudC1nZXRVc2VyRGVsZWdhdGlvbktleVwiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXNzZXJ0UmVzcG9uc2UoYXdhaXQgdGhpcy5zZXJ2aWNlQ29udGV4dC5nZXRVc2VyRGVsZWdhdGlvbktleSh7XG4gICAgICAgICAgICAgICAgc3RhcnRzT246IHRydW5jYXRlZElTTzgwNjFEYXRlKHN0YXJ0c09uLCBmYWxzZSksXG4gICAgICAgICAgICAgICAgZXhwaXJlc09uOiB0cnVuY2F0ZWRJU084MDYxRGF0ZShleHBpcmVzT24sIGZhbHNlKSxcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgICAgICAgICAgICB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBjb25zdCB1c2VyRGVsZWdhdGlvbktleSA9IHtcbiAgICAgICAgICAgICAgICBzaWduZWRPYmplY3RJZDogcmVzcG9uc2Uuc2lnbmVkT2JqZWN0SWQsXG4gICAgICAgICAgICAgICAgc2lnbmVkVGVuYW50SWQ6IHJlc3BvbnNlLnNpZ25lZFRlbmFudElkLFxuICAgICAgICAgICAgICAgIHNpZ25lZFN0YXJ0c09uOiBuZXcgRGF0ZShyZXNwb25zZS5zaWduZWRTdGFydHNPbiksXG4gICAgICAgICAgICAgICAgc2lnbmVkRXhwaXJlc09uOiBuZXcgRGF0ZShyZXNwb25zZS5zaWduZWRFeHBpcmVzT24pLFxuICAgICAgICAgICAgICAgIHNpZ25lZFNlcnZpY2U6IHJlc3BvbnNlLnNpZ25lZFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgc2lnbmVkVmVyc2lvbjogcmVzcG9uc2Uuc2lnbmVkVmVyc2lvbixcbiAgICAgICAgICAgICAgICB2YWx1ZTogcmVzcG9uc2UudmFsdWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzID0gT2JqZWN0LmFzc2lnbih7IF9yZXNwb25zZTogcmVzcG9uc2UuX3Jlc3BvbnNlLCByZXF1ZXN0SWQ6IHJlc3BvbnNlLnJlcXVlc3RJZCwgY2xpZW50UmVxdWVzdElkOiByZXNwb25zZS5jbGllbnRSZXF1ZXN0SWQsIHZlcnNpb246IHJlc3BvbnNlLnZlcnNpb24sIGRhdGU6IHJlc3BvbnNlLmRhdGUsIGVycm9yQ29kZTogcmVzcG9uc2UuZXJyb3JDb2RlIH0sIHVzZXJEZWxlZ2F0aW9uS2V5KTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgQmxvYkJhdGNoQ2xpZW50IG9iamVjdCB0byBjb25kdWN0IGJhdGNoIG9wZXJhdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9ibG9iLWJhdGNoXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBIG5ldyBCbG9iQmF0Y2hDbGllbnQgb2JqZWN0IGZvciB0aGlzIHNlcnZpY2UuXG4gICAgICovXG4gICAgZ2V0QmxvYkJhdGNoQ2xpZW50KCkge1xuICAgICAgICByZXR1cm4gbmV3IEJsb2JCYXRjaENsaWVudCh0aGlzLnVybCwgdGhpcy5waXBlbGluZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9ubHkgYXZhaWxhYmxlIGZvciBCbG9iU2VydmljZUNsaWVudCBjb25zdHJ1Y3RlZCB3aXRoIGEgc2hhcmVkIGtleSBjcmVkZW50aWFsLlxuICAgICAqXG4gICAgICogR2VuZXJhdGVzIGEgQmxvYiBhY2NvdW50IFNoYXJlZCBBY2Nlc3MgU2lnbmF0dXJlIChTQVMpIFVSSSBiYXNlZCBvbiB0aGUgY2xpZW50IHByb3BlcnRpZXNcbiAgICAgKiBhbmQgcGFyYW1ldGVycyBwYXNzZWQgaW4uIFRoZSBTQVMgaXMgc2lnbmVkIGJ5IHRoZSBzaGFyZWQga2V5IGNyZWRlbnRpYWwgb2YgdGhlIGNsaWVudC5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL2NyZWF0ZS1hY2NvdW50LXNhc1xuICAgICAqXG4gICAgICogQHBhcmFtIGV4cGlyZXNPbiAtIE9wdGlvbmFsLiBUaGUgdGltZSBhdCB3aGljaCB0aGUgc2hhcmVkIGFjY2VzcyBzaWduYXR1cmUgYmVjb21lcyBpbnZhbGlkLiBEZWZhdWx0IHRvIGFuIGhvdXIgbGF0ZXIgaWYgbm90IHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSBwZXJtaXNzaW9ucyAtIFNwZWNpZmllcyB0aGUgbGlzdCBvZiBwZXJtaXNzaW9ucyB0byBiZSBhc3NvY2lhdGVkIHdpdGggdGhlIFNBUy5cbiAgICAgKiBAcGFyYW0gcmVzb3VyY2VUeXBlcyAtIFNwZWNpZmllcyB0aGUgcmVzb3VyY2UgdHlwZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBzaGFyZWQgYWNjZXNzIHNpZ25hdHVyZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHBhcmFtZXRlcnMuXG4gICAgICogQHJldHVybnMgQW4gYWNjb3VudCBTQVMgVVJJIGNvbnNpc3Rpbmcgb2YgdGhlIFVSSSB0byB0aGUgcmVzb3VyY2UgcmVwcmVzZW50ZWQgYnkgdGhpcyBjbGllbnQsIGZvbGxvd2VkIGJ5IHRoZSBnZW5lcmF0ZWQgU0FTIHRva2VuLlxuICAgICAqL1xuICAgIGdlbmVyYXRlQWNjb3VudFNhc1VybChleHBpcmVzT24sIHBlcm1pc3Npb25zID0gQWNjb3VudFNBU1Blcm1pc3Npb25zLnBhcnNlKFwiclwiKSwgcmVzb3VyY2VUeXBlcyA9IFwic2NvXCIsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAoISh0aGlzLmNyZWRlbnRpYWwgaW5zdGFuY2VvZiBTdG9yYWdlU2hhcmVkS2V5Q3JlZGVudGlhbCkpIHtcbiAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJDYW4gb25seSBnZW5lcmF0ZSB0aGUgYWNjb3VudCBTQVMgd2hlbiB0aGUgY2xpZW50IGlzIGluaXRpYWxpemVkIHdpdGggYSBzaGFyZWQga2V5IGNyZWRlbnRpYWxcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4cGlyZXNPbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgZXhwaXJlc09uID0gbmV3IERhdGUobm93LmdldFRpbWUoKSArIDM2MDAgKiAxMDAwKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzYXMgPSBnZW5lcmF0ZUFjY291bnRTQVNRdWVyeVBhcmFtZXRlcnMoT2JqZWN0LmFzc2lnbih7IHBlcm1pc3Npb25zLFxuICAgICAgICAgICAgZXhwaXJlc09uLFxuICAgICAgICAgICAgcmVzb3VyY2VUeXBlcywgc2VydmljZXM6IEFjY291bnRTQVNTZXJ2aWNlcy5wYXJzZShcImJcIikudG9TdHJpbmcoKSB9LCBvcHRpb25zKSwgdGhpcy5jcmVkZW50aWFsKS50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gYXBwZW5kVG9VUkxRdWVyeSh0aGlzLnVybCwgc2FzKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CbG9iU2VydmljZUNsaWVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppendBlobClient: () => (/* binding */ AppendBlobClient),\n/* harmony export */   BlobClient: () => (/* binding */ BlobClient),\n/* harmony export */   BlockBlobClient: () => (/* binding */ BlockBlobClient),\n/* harmony export */   PageBlobClient: () => (/* binding */ PageBlobClient)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _azure_core_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-auth */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/index.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _BlobDownloadResponse__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./BlobDownloadResponse */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.js\");\n/* harmony import */ var _BlobQueryResponse__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./BlobQueryResponse */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js\");\n/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./models */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js\");\n/* harmony import */ var _PageBlobRangeResponse__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./PageBlobRangeResponse */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Pipeline */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _pollers_BlobStartCopyFromUrlPoller__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./pollers/BlobStartCopyFromUrlPoller */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js\");\n/* harmony import */ var _Range__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Range */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js\");\n/* harmony import */ var _StorageClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StorageClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js\");\n/* harmony import */ var _utils_Batch__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/Batch */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js\");\n/* harmony import */ var _storage_common_src__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../storage-common/src */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/tracing */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _utils_utils_node__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/utils.node */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.node.js\");\n/* harmony import */ var _sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./sas/BlobSASSignatureValues */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js\");\n/* harmony import */ var _BlobLeaseClient__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./BlobLeaseClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A BlobClient represents a URL to an Azure Storage blob; the blob may be a block blob,\n * append blob, or page blob.\n */\nclass BlobClient extends _StorageClient__WEBPACK_IMPORTED_MODULE_3__.StorageClient {\n    /**\n     * The name of the blob.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The name of the storage container the blob is associated with.\n     */\n    get containerName() {\n        return this._containerName;\n    }\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        options = options || {};\n        let pipeline;\n        let url;\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.isPipelineLike)(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            if (blobNameOrOptions && typeof blobNameOrOptions !== \"string\") {\n                options = blobNameOrOptions;\n            }\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.extractConnectionStringParts)(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                    const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                    }\n                    pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        ({ blobName: this._name, containerName: this._containerName } =\n            this.getBlobAndContainerNamesFromUrl());\n        this.blobContext = this.storageClientContext.blob;\n        this._snapshot = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.getURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.SNAPSHOT);\n        this._versionId = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.getURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.VERSIONID);\n    }\n    /**\n     * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a Client to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new BlobClient object identical to the source but with the specified snapshot timestamp\n     */\n    withSnapshot(snapshot) {\n        return new BlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.setURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * Creates a new BlobClient object pointing to a version of this blob.\n     * Provide \"\" will remove the versionId and return a Client to the base blob.\n     *\n     * @param versionId - The versionId.\n     * @returns A new BlobClient object pointing to the version of this blob.\n     */\n    withVersion(versionId) {\n        return new BlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.setURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.VERSIONID, versionId.length === 0 ? undefined : versionId), this.pipeline);\n    }\n    /**\n     * Creates a AppendBlobClient object.\n     *\n     */\n    getAppendBlobClient() {\n        return new AppendBlobClient(this.url, this.pipeline);\n    }\n    /**\n     * Creates a BlockBlobClient object.\n     *\n     */\n    getBlockBlobClient() {\n        return new BlockBlobClient(this.url, this.pipeline);\n    }\n    /**\n     * Creates a PageBlobClient object.\n     *\n     */\n    getPageBlobClient() {\n        return new PageBlobClient(this.url, this.pipeline);\n    }\n    /**\n     * Reads or downloads a blob from the system, including its metadata and properties.\n     * You can also call Get Blob to read a snapshot.\n     *\n     * * In Node.js, data returns in a Readable stream readableStreamBody\n     * * In browsers, data returns in a promise blobBody\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\n     *\n     * @param offset - From which position of the blob to download, greater than or equal to 0\n     * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined\n     * @param options - Optional options to Blob Download operation.\n     *\n     *\n     * Example usage (Node.js):\n     *\n     * ```js\n     * // Download and convert a blob to a string\n     * const downloadBlockBlobResponse = await blobClient.download();\n     * const downloaded = await streamToBuffer(downloadBlockBlobResponse.readableStreamBody);\n     * console.log(\"Downloaded blob content:\", downloaded.toString());\n     *\n     * async function streamToBuffer(readableStream) {\n     * return new Promise((resolve, reject) => {\n     * const chunks = [];\n     * readableStream.on(\"data\", (data) => {\n     * chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n     * });\n     * readableStream.on(\"end\", () => {\n     * resolve(Buffer.concat(chunks));\n     * });\n     * readableStream.on(\"error\", reject);\n     * });\n     * }\n     * ```\n     *\n     * Example usage (browser):\n     *\n     * ```js\n     * // Download and convert a blob to a string\n     * const downloadBlockBlobResponse = await blobClient.download();\n     * const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);\n     * console.log(\n     *   \"Downloaded blob content\",\n     *   downloaded\n     * );\n     *\n     * async function blobToString(blob: Blob): Promise<string> {\n     *   const fileReader = new FileReader();\n     *   return new Promise<string>((resolve, reject) => {\n     *     fileReader.onloadend = (ev: any) => {\n     *       resolve(ev.target!.result);\n     *     };\n     *     fileReader.onerror = reject;\n     *     fileReader.readAsText(blob);\n     *   });\n     * }\n     * ```\n     */\n    async download(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-download\", options, async (updatedOptions) => {\n            var _a;\n            const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.download({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onDownloadProgress: _azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode ? undefined : options.onProgress, // for Node.js, progress is reported by RetriableReadableStream\n                },\n                range: offset === 0 && !count ? undefined : (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                rangeGetContentMD5: options.rangeGetContentMD5,\n                rangeGetContentCRC64: options.rangeGetContentCrc64,\n                snapshot: options.snapshot,\n                cpkInfo: options.customerProvidedKey,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedRes = Object.assign(Object.assign({}, res), { _response: res._response, objectReplicationDestinationPolicyId: res.objectReplicationPolicyId, objectReplicationSourceProperties: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.parseObjectReplicationRecord)(res.objectReplicationRules) });\n            // Return browser response immediately\n            if (!_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                return wrappedRes;\n            }\n            // We support retrying when download stream unexpected ends in Node.js runtime\n            // Following code shouldn't be bundled into browser build, however some\n            // bundlers may try to bundle following code and \"FileReadResponse.ts\".\n            // In this case, \"FileDownloadResponse.browser.ts\" will be used as a shim of \"FileDownloadResponse.ts\"\n            // The config is in package.json \"browser\" field\n            if (options.maxRetryRequests === undefined || options.maxRetryRequests < 0) {\n                // TODO: Default value or make it a required parameter?\n                options.maxRetryRequests = _utils_constants__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;\n            }\n            if (res.contentLength === undefined) {\n                throw new RangeError(`File download response doesn't contain valid content length header`);\n            }\n            if (!res.etag) {\n                throw new RangeError(`File download response doesn't contain valid etag header`);\n            }\n            return new _BlobDownloadResponse__WEBPACK_IMPORTED_MODULE_12__.BlobDownloadResponse(wrappedRes, async (start) => {\n                var _a;\n                const updatedDownloadOptions = {\n                    leaseAccessConditions: options.conditions,\n                    modifiedAccessConditions: {\n                        ifMatch: options.conditions.ifMatch || res.etag,\n                        ifModifiedSince: options.conditions.ifModifiedSince,\n                        ifNoneMatch: options.conditions.ifNoneMatch,\n                        ifUnmodifiedSince: options.conditions.ifUnmodifiedSince,\n                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions,\n                    },\n                    range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({\n                        count: offset + res.contentLength - start,\n                        offset: start,\n                    }),\n                    rangeGetContentMD5: options.rangeGetContentMD5,\n                    rangeGetContentCRC64: options.rangeGetContentCrc64,\n                    snapshot: options.snapshot,\n                    cpkInfo: options.customerProvidedKey,\n                };\n                // Debug purpose only\n                // console.log(\n                //   `Read from internal stream, range: ${\n                //     updatedOptions.range\n                //   }, options: ${JSON.stringify(updatedOptions)}`\n                // );\n                return (await this.blobContext.download(Object.assign({ abortSignal: options.abortSignal }, updatedDownloadOptions))).readableStreamBody;\n            }, offset, res.contentLength, {\n                maxRetryRequests: options.maxRetryRequests,\n                onProgress: options.onProgress,\n            });\n        });\n    }\n    /**\n     * Returns true if the Azure blob resource represented by this client exists; false otherwise.\n     *\n     * NOTE: use this function with care since an existing blob might be deleted by other clients or\n     * applications. Vice versa new blobs might be added by other clients or applications after this\n     * function completes.\n     *\n     * @param options - options to Exists operation.\n     */\n    async exists(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-exists\", options, async (updatedOptions) => {\n            try {\n                (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n                await this.getProperties({\n                    abortSignal: options.abortSignal,\n                    customerProvidedKey: options.customerProvidedKey,\n                    conditions: options.conditions,\n                    tracingOptions: updatedOptions.tracingOptions,\n                });\n                return true;\n            }\n            catch (e) {\n                if (e.statusCode === 404) {\n                    // Expected exception when checking blob existence\n                    return false;\n                }\n                else if (e.statusCode === 409 &&\n                    (e.details.errorCode === _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BlobUsesCustomerSpecifiedEncryptionMsg ||\n                        e.details.errorCode === _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BlobDoesNotUseCustomerSpecifiedEncryption)) {\n                    // Expected exception when checking blob existence\n                    return true;\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Returns all user-defined metadata, standard HTTP properties, and system properties\n     * for the blob. It does not return the content of the blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties\n     *\n     * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n     * they originally contained uppercase characters. This differs from the metadata keys returned by\n     * the methods of {@link ContainerClient} that list blobs using the `includeMetadata` option, which\n     * will retain their original casing.\n     *\n     * @param options - Optional options to Get Properties operation.\n     */\n    async getProperties(options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-getProperties\", options, async (updatedOptions) => {\n            var _a;\n            const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.getProperties({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return Object.assign(Object.assign({}, res), { _response: res._response, objectReplicationDestinationPolicyId: res.objectReplicationPolicyId, objectReplicationSourceProperties: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.parseObjectReplicationRecord)(res.objectReplicationRules) });\n        });\n    }\n    /**\n     * Marks the specified blob or snapshot for deletion. The blob is later deleted\n     * during garbage collection. Note that in order to delete a blob, you must delete\n     * all of its snapshots. You can delete both at the same time with the Delete\n     * Blob operation.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n     *\n     * @param options - Optional options to Blob Delete operation.\n     */\n    async delete(options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-delete\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.delete({\n                abortSignal: options.abortSignal,\n                deleteSnapshots: options.deleteSnapshots,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Marks the specified blob or snapshot for deletion if it exists. The blob is later deleted\n     * during garbage collection. Note that in order to delete a blob, you must delete\n     * all of its snapshots. You can delete both at the same time with the Delete\n     * Blob operation.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n     *\n     * @param options - Optional options to Blob Delete operation.\n     */\n    async deleteIfExists(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-deleteIfExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.delete(updatedOptions));\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobNotFound\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Restores the contents and metadata of soft deleted blob and any associated\n     * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29\n     * or later.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob\n     *\n     * @param options - Optional options to Blob Undelete operation.\n     */\n    async undelete(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-undelete\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.undelete({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets system properties on the blob.\n     *\n     * If no value provided, or no value provided for the specified blob HTTP headers,\n     * these blob HTTP headers without a value will be cleared.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n     *\n     * @param blobHTTPHeaders - If no value provided, or no value provided for\n     *                                                   the specified blob HTTP headers, these blob HTTP\n     *                                                   headers without a value will be cleared.\n     *                                                   A common header to set is `blobContentType`\n     *                                                   enabling the browser to provide functionality\n     *                                                   based on file type.\n     * @param options - Optional options to Blob Set HTTP Headers operation.\n     */\n    async setHTTPHeaders(blobHTTPHeaders, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setHTTPHeaders\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setHttpHeaders({\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                // cpkInfo: options.customerProvidedKey, // CPK is not included in Swagger, should change this back when this issue is fixed in Swagger.\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets user-defined metadata for the specified blob as one or more name-value pairs.\n     *\n     * If no option provided, or no metadata defined in the parameter, the blob\n     * metadata will be removed.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata\n     *\n     * @param metadata - Replace existing metadata with this value.\n     *                               If no value provided the existing metadata will be removed.\n     * @param options - Optional options to Set Metadata operation.\n     */\n    async setMetadata(metadata, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setMetadata\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setMetadata({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets tags on the underlying blob.\n     * A blob can have up to 10 tags. Tag keys must be between 1 and 128 characters.  Tag values must be between 0 and 256 characters.\n     * Valid tag key and value characters include lower and upper case letters, digits (0-9),\n     * space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'), colon (':'), equals ('='), and underscore ('_').\n     *\n     * @param tags -\n     * @param options -\n     */\n    async setTags(tags, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setTags\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setTags({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n                tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTags)(tags),\n            }));\n        });\n    }\n    /**\n     * Gets the tags associated with the underlying blob.\n     *\n     * @param options -\n     */\n    async getTags(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-getTags\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.getTags({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toTags)({ blobTagSet: response.blobTagSet }) || {} });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * Get a {@link BlobLeaseClient} that manages leases on the blob.\n     *\n     * @param proposeLeaseId - Initial proposed lease Id.\n     * @returns A new BlobLeaseClient object for managing leases on the blob.\n     */\n    getBlobLeaseClient(proposeLeaseId) {\n        return new _BlobLeaseClient__WEBPACK_IMPORTED_MODULE_13__.BlobLeaseClient(this, proposeLeaseId);\n    }\n    /**\n     * Creates a read-only snapshot of a blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob\n     *\n     * @param options - Optional options to the Blob Create Snapshot operation.\n     */\n    async createSnapshot(options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-createSnapshot\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.createSnapshot({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Asynchronously copies a blob to a destination within the storage account.\n     * This method returns a long running operation poller that allows you to wait\n     * indefinitely until the copy is completed.\n     * You can also cancel a copy before it is completed by calling `cancelOperation` on the poller.\n     * Note that the onProgress callback will not be invoked if the operation completes in the first\n     * request, and attempting to cancel a completed copy will result in an error being thrown.\n     *\n     * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n     * a committed blob in any Azure storage account.\n     * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n     * an Azure file in any Azure storage account.\n     * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n     * operation to copy from another storage account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n     *\n     * Example using automatic polling:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url');\n     * const result = await copyPoller.pollUntilDone();\n     * ```\n     *\n     * Example using manual polling:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url');\n     * while (!poller.isDone()) {\n     *    await poller.poll();\n     * }\n     * const result = copyPoller.getResult();\n     * ```\n     *\n     * Example using progress updates:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url', {\n     *   onProgress(state) {\n     *     console.log(`Progress: ${state.copyProgress}`);\n     *   }\n     * });\n     * const result = await copyPoller.pollUntilDone();\n     * ```\n     *\n     * Example using a changing polling interval (default 15 seconds):\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url', {\n     *   intervalInMs: 1000 // poll blob every 1 second for copy progress\n     * });\n     * const result = await copyPoller.pollUntilDone();\n     * ```\n     *\n     * Example using copy cancellation:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url');\n     * // cancel operation after starting it.\n     * try {\n     *   await copyPoller.cancelOperation();\n     *   // calls to get the result now throw PollerCancelledError\n     *   await copyPoller.getResult();\n     * } catch (err) {\n     *   if (err.name === 'PollerCancelledError') {\n     *     console.log('The copy was cancelled.');\n     *   }\n     * }\n     * ```\n     *\n     * @param copySource - url to the source Azure Blob/File.\n     * @param options - Optional options to the Blob Start Copy From URL operation.\n     */\n    async beginCopyFromURL(copySource, options = {}) {\n        const client = {\n            abortCopyFromURL: (...args) => this.abortCopyFromURL(...args),\n            getProperties: (...args) => this.getProperties(...args),\n            startCopyFromURL: (...args) => this.startCopyFromURL(...args),\n        };\n        const poller = new _pollers_BlobStartCopyFromUrlPoller__WEBPACK_IMPORTED_MODULE_14__.BlobBeginCopyFromUrlPoller({\n            blobClient: client,\n            copySource,\n            intervalInMs: options.intervalInMs,\n            onProgress: options.onProgress,\n            resumeFrom: options.resumeFrom,\n            startCopyFromURLOptions: options,\n        });\n        // Trigger the startCopyFromURL call by calling poll.\n        // Any errors from this method should be surfaced to the user.\n        await poller.poll();\n        return poller;\n    }\n    /**\n     * Aborts a pending asynchronous Copy Blob operation, and leaves a destination blob with zero\n     * length and full metadata. Version 2012-02-12 and newer.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob\n     *\n     * @param copyId - Id of the Copy From URL operation.\n     * @param options - Optional options to the Blob Abort Copy From URL operation.\n     */\n    async abortCopyFromURL(copyId, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-abortCopyFromURL\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.abortCopyFromURL(copyId, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The synchronous Copy From URL operation copies a blob or an internet resource to a new blob. It will not\n     * return a response until the copy is complete.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url\n     *\n     * @param copySource - The source URL to copy from, Shared Access Signature(SAS) maybe needed for authentication\n     * @param options -\n     */\n    async syncCopyFromURL(copySource, options = {}) {\n        options.conditions = options.conditions || {};\n        options.sourceConditions = options.sourceConditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-syncCopyFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.copyFromURL(copySource, {\n                abortSignal: options.abortSignal,\n                metadata: options.metadata,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                },\n                sourceContentMD5: options.sourceContentMD5,\n                copySourceAuthorization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.httpAuthorizationToString)(options.sourceAuthorization),\n                tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier),\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                immutabilityPolicyExpiry: (_f = options.immutabilityPolicy) === null || _f === void 0 ? void 0 : _f.expiriesOn,\n                immutabilityPolicyMode: (_g = options.immutabilityPolicy) === null || _g === void 0 ? void 0 : _g.policyMode,\n                legalHold: options.legalHold,\n                encryptionScope: options.encryptionScope,\n                copySourceTags: options.copySourceTags,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets the tier on a blob. The operation is allowed on a page blob in a premium\n     * storage account and on a block blob in a blob storage account (locally redundant\n     * storage only). A premium page blob's tier determines the allowed size, IOPS,\n     * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n     * storage type. This operation does not update the blob's ETag.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier\n     *\n     * @param tier - The tier to be set on the blob. Valid values are Hot, Cool, or Archive.\n     * @param options - Optional options to the Blob Set Tier operation.\n     */\n    async setAccessTier(tier, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setAccessTier\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setTier((0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(tier), {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                rehydratePriority: options.rehydratePriority,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    async downloadToBuffer(param1, param2, param3, param4 = {}) {\n        var _a;\n        let buffer;\n        let offset = 0;\n        let count = 0;\n        let options = param4;\n        if (param1 instanceof Buffer) {\n            buffer = param1;\n            offset = param2 || 0;\n            count = typeof param3 === \"number\" ? param3 : 0;\n        }\n        else {\n            offset = typeof param1 === \"number\" ? param1 : 0;\n            count = typeof param2 === \"number\" ? param2 : 0;\n            options = param3 || {};\n        }\n        let blockSize = (_a = options.blockSize) !== null && _a !== void 0 ? _a : 0;\n        if (blockSize < 0) {\n            throw new RangeError(\"blockSize option must be >= 0\");\n        }\n        if (blockSize === 0) {\n            blockSize = _utils_constants__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n        }\n        if (offset < 0) {\n            throw new RangeError(\"offset option must be >= 0\");\n        }\n        if (count && count <= 0) {\n            throw new RangeError(\"count option must be greater than 0\");\n        }\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-downloadToBuffer\", options, async (updatedOptions) => {\n            // Customer doesn't specify length, get it\n            if (!count) {\n                const response = await this.getProperties(Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));\n                count = response.contentLength - offset;\n                if (count < 0) {\n                    throw new RangeError(`offset ${offset} shouldn't be larger than blob size ${response.contentLength}`);\n                }\n            }\n            // Allocate the buffer of size = count if the buffer is not provided\n            if (!buffer) {\n                try {\n                    buffer = Buffer.alloc(count);\n                }\n                catch (error) {\n                    throw new Error(`Unable to allocate the buffer of size: ${count}(in bytes). Please try passing your own buffer to the \"downloadToBuffer\" method or try using other methods like \"download\" or \"downloadToFile\".\\t ${error.message}`);\n                }\n            }\n            if (buffer.length < count) {\n                throw new RangeError(`The buffer's size should be equal to or larger than the request count of bytes: ${count}`);\n            }\n            let transferProgress = 0;\n            const batch = new _utils_Batch__WEBPACK_IMPORTED_MODULE_15__.Batch(options.concurrency);\n            for (let off = offset; off < offset + count; off = off + blockSize) {\n                batch.addOperation(async () => {\n                    // Exclusive chunk end position\n                    let chunkEnd = offset + count;\n                    if (off + blockSize < chunkEnd) {\n                        chunkEnd = off + blockSize;\n                    }\n                    const response = await this.download(off, chunkEnd - off, {\n                        abortSignal: options.abortSignal,\n                        conditions: options.conditions,\n                        maxRetryRequests: options.maxRetryRequestsPerBlock,\n                        customerProvidedKey: options.customerProvidedKey,\n                        tracingOptions: updatedOptions.tracingOptions,\n                    });\n                    const stream = response.readableStreamBody;\n                    await (0,_utils_utils_node__WEBPACK_IMPORTED_MODULE_16__.streamToBuffer)(stream, buffer, off - offset, chunkEnd - offset);\n                    // Update progress after block is downloaded, in case of block trying\n                    // Could provide finer grained progress updating inside HTTP requests,\n                    // only if convenience layer download try is enabled\n                    transferProgress += chunkEnd - off;\n                    if (options.onProgress) {\n                        options.onProgress({ loadedBytes: transferProgress });\n                    }\n                });\n            }\n            await batch.do();\n            return buffer;\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Downloads an Azure Blob to a local file.\n     * Fails if the the given file path already exits.\n     * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.\n     *\n     * @param filePath -\n     * @param offset - From which position of the block blob to download.\n     * @param count - How much data to be downloaded. Will download to the end when passing undefined.\n     * @param options - Options to Blob download options.\n     * @returns The response data for blob download operation,\n     *                                                 but with readableStreamBody set to undefined since its\n     *                                                 content is already read and written into a local file\n     *                                                 at the specified path.\n     */\n    async downloadToFile(filePath, offset = 0, count, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-downloadToFile\", options, async (updatedOptions) => {\n            const response = await this.download(offset, count, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));\n            if (response.readableStreamBody) {\n                await (0,_utils_utils_node__WEBPACK_IMPORTED_MODULE_16__.readStreamToLocalFile)(response.readableStreamBody, filePath);\n            }\n            // The stream is no longer accessible so setting it to undefined.\n            response.blobDownloadStream = undefined;\n            return response;\n        });\n    }\n    getBlobAndContainerNamesFromUrl() {\n        let containerName;\n        let blobName;\n        try {\n            //  URL may look like the following\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob?sasString\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt?sasString\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt\";\n            // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername/blob`\n            // http://localhost:10001/devstoreaccount1/containername/blob\n            const parsedUrl = new URL(this.url);\n            if (parsedUrl.host.split(\".\")[1] === \"blob\") {\n                // \"https://myaccount.blob.core.windows.net/containername/blob\".\n                // .getPath() -> /containername/blob\n                const pathComponents = parsedUrl.pathname.match(\"/([^/]*)(/(.*))?\");\n                containerName = pathComponents[1];\n                blobName = pathComponents[3];\n            }\n            else if ((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.isIpEndpointStyle)(parsedUrl)) {\n                // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername/blob\n                // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername/blob\n                // .getPath() -> /devstoreaccount1/containername/blob\n                const pathComponents = parsedUrl.pathname.match(\"/([^/]*)/([^/]*)(/(.*))?\");\n                containerName = pathComponents[2];\n                blobName = pathComponents[4];\n            }\n            else {\n                // \"https://customdomain.com/containername/blob\".\n                // .getPath() -> /containername/blob\n                const pathComponents = parsedUrl.pathname.match(\"/([^/]*)(/(.*))?\");\n                containerName = pathComponents[1];\n                blobName = pathComponents[3];\n            }\n            // decode the encoded blobName, containerName - to get all the special characters that might be present in them\n            containerName = decodeURIComponent(containerName);\n            blobName = decodeURIComponent(blobName);\n            // Azure Storage Server will replace \"\\\" with \"/\" in the blob names\n            //   doing the same in the SDK side so that the user doesn't have to replace \"\\\" instances in the blobName\n            blobName = blobName.replace(/\\\\/g, \"/\");\n            if (!containerName) {\n                throw new Error(\"Provided containerName is invalid.\");\n            }\n            return { blobName, containerName };\n        }\n        catch (error) {\n            throw new Error(\"Unable to extract blobName and containerName with provided information.\");\n        }\n    }\n    /**\n     * Asynchronously copies a blob to a destination within the storage account.\n     * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n     * a committed blob in any Azure storage account.\n     * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n     * an Azure file in any Azure storage account.\n     * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n     * operation to copy from another storage account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n     *\n     * @param copySource - url to the source Azure Blob/File.\n     * @param options - Optional options to the Blob Start Copy From URL operation.\n     */\n    async startCopyFromURL(copySource, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-startCopyFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            options.conditions = options.conditions || {};\n            options.sourceConditions = options.sourceConditions || {};\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.startCopyFromURL(copySource, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: options.sourceConditions.ifMatch,\n                    sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,\n                    sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,\n                    sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,\n                    sourceIfTags: options.sourceConditions.tagConditions,\n                },\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                rehydratePriority: options.rehydratePriority,\n                tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier),\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                sealBlob: options.sealBlob,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Only available for BlobClient constructed with a shared key credential.\n     *\n     * Generates a Blob Service Shared Access Signature (SAS) URI based on the client properties\n     * and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateSasUrl(options) {\n        return new Promise((resolve) => {\n            if (!(this.credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential)) {\n                throw new RangeError(\"Can only generate the SAS when the client is initialized with a shared key credential\");\n            }\n            const sas = (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_17__.generateBlobSASQueryParameters)(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), this.credential).toString();\n            resolve((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLQuery)(this.url, sas));\n        });\n    }\n    /**\n     * Delete the immutablility policy on the blob.\n     *\n     * @param options - Optional options to delete immutability policy on the blob.\n     */\n    async deleteImmutabilityPolicy(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-deleteImmutabilityPolicy\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.deleteImmutabilityPolicy({\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Set immutability policy on the blob.\n     *\n     * @param options - Optional options to set immutability policy on the blob.\n     */\n    async setImmutabilityPolicy(immutabilityPolicy, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setImmutabilityPolicy\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setImmutabilityPolicy({\n                immutabilityPolicyExpiry: immutabilityPolicy.expiriesOn,\n                immutabilityPolicyMode: immutabilityPolicy.policyMode,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Set legal hold on the blob.\n     *\n     * @param options - Optional options to set legal hold on the blob.\n     */\n    async setLegalHold(legalHoldEnabled, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setLegalHold\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setLegalHold(legalHoldEnabled, {\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n}\n/**\n * AppendBlobClient defines a set of operations applicable to append blobs.\n */\nclass AppendBlobClient extends BlobClient {\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n        let pipeline;\n        let url;\n        options = options || {};\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.isPipelineLike)(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)      url = urlOrConnectionString;\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            // The second parameter is undefined. Use anonymous credential.\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.extractConnectionStringParts)(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                    const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                    }\n                    pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        this.appendBlobContext = this.storageClientContext.appendBlob;\n    }\n    /**\n     * Creates a new AppendBlobClient object identical to the source but with the\n     * specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a Client to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new AppendBlobClient object identical to the source but with the specified snapshot timestamp.\n     */\n    withSnapshot(snapshot) {\n        return new AppendBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.setURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param options - Options to the Append Block Create operation.\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const appendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n     * await appendBlobClient.create();\n     * ```\n     */\n    async create(options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"AppendBlobClient-create\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.appendBlobContext.create(0, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n     * If the blob with the same name already exists, the content of the existing blob will remain unchanged.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param options -\n     */\n    async createIfNotExists(options = {}) {\n        const conditions = { ifNoneMatch: _utils_constants__WEBPACK_IMPORTED_MODULE_8__.ETagAny };\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"AppendBlobClient-createIfNotExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.create(Object.assign(Object.assign({}, updatedOptions), { conditions })));\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobAlreadyExists\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Seals the append blob, making it read only.\n     *\n     * @param options -\n     */\n    async seal(options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"AppendBlobClient-seal\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.appendBlobContext.seal({\n                abortSignal: options.abortSignal,\n                appendPositionAccessConditions: options.conditions,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Commits a new block of data to the end of the existing append blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/append-block\n     *\n     * @param body - Data to be appended.\n     * @param contentLength - Length of the body in bytes.\n     * @param options - Options to the Append Block operation.\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const content = \"Hello World!\";\n     *\n     * // Create a new append blob and append data to the blob.\n     * const newAppendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n     * await newAppendBlobClient.create();\n     * await newAppendBlobClient.appendBlock(content, content.length);\n     *\n     * // Append data to an existing append blob.\n     * const existingAppendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n     * await existingAppendBlobClient.appendBlock(content, content.length);\n     * ```\n     */\n    async appendBlock(body, contentLength, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"AppendBlobClient-appendBlock\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.appendBlobContext.appendBlock(contentLength, body, {\n                abortSignal: options.abortSignal,\n                appendPositionAccessConditions: options.conditions,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                transactionalContentMD5: options.transactionalContentMD5,\n                transactionalContentCrc64: options.transactionalContentCrc64,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Append Block operation commits a new block of data to the end of an existing append blob\n     * where the contents are read from a source url.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url\n     *\n     * @param sourceURL -\n     *                 The url to the blob that will be the source of the copy. A source blob in the same storage account can\n     *                 be authenticated via Shared Key. However, if the source is a blob in another account, the source blob\n     *                 must either be public or must be authenticated via a shared access signature. If the source blob is\n     *                 public, no authentication is required to perform the operation.\n     * @param sourceOffset - Offset in source to be appended\n     * @param count - Number of bytes to be appended as a block\n     * @param options -\n     */\n    async appendBlockFromURL(sourceURL, sourceOffset, count, options = {}) {\n        options.conditions = options.conditions || {};\n        options.sourceConditions = options.sourceConditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"AppendBlobClient-appendBlockFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.appendBlobContext.appendBlockFromUrl(sourceURL, 0, {\n                abortSignal: options.abortSignal,\n                sourceRange: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset: sourceOffset, count }),\n                sourceContentMD5: options.sourceContentMD5,\n                sourceContentCrc64: options.sourceContentCrc64,\n                leaseAccessConditions: options.conditions,\n                appendPositionAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                },\n                copySourceAuthorization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.httpAuthorizationToString)(options.sourceAuthorization),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n}\n/**\n * BlockBlobClient defines a set of operations applicable to block blobs.\n */\nclass BlockBlobClient extends BlobClient {\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n        let pipeline;\n        let url;\n        options = options || {};\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.isPipelineLike)(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            if (blobNameOrOptions && typeof blobNameOrOptions !== \"string\") {\n                options = blobNameOrOptions;\n            }\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.extractConnectionStringParts)(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                    const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                    }\n                    pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        this.blockBlobContext = this.storageClientContext.blockBlob;\n        this._blobContext = this.storageClientContext.blob;\n    }\n    /**\n     * Creates a new BlockBlobClient object identical to the source but with the\n     * specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a URL to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new BlockBlobClient object identical to the source but with the specified snapshot timestamp.\n     */\n    withSnapshot(snapshot) {\n        return new BlockBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.setURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Quick query for a JSON or CSV formatted blob.\n     *\n     * Example usage (Node.js):\n     *\n     * ```js\n     * // Query and convert a blob to a string\n     * const queryBlockBlobResponse = await blockBlobClient.query(\"select * from BlobStorage\");\n     * const downloaded = (await streamToBuffer(queryBlockBlobResponse.readableStreamBody)).toString();\n     * console.log(\"Query blob content:\", downloaded);\n     *\n     * async function streamToBuffer(readableStream) {\n     *   return new Promise((resolve, reject) => {\n     *     const chunks = [];\n     *     readableStream.on(\"data\", (data) => {\n     *       chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n     *     });\n     *     readableStream.on(\"end\", () => {\n     *       resolve(Buffer.concat(chunks));\n     *     });\n     *     readableStream.on(\"error\", reject);\n     *   });\n     * }\n     * ```\n     *\n     * @param query -\n     * @param options -\n     */\n    async query(query, options = {}) {\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        if (!_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n            throw new Error(\"This operation currently is only supported in Node.js.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-query\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this._blobContext.query({\n                abortSignal: options.abortSignal,\n                queryRequest: {\n                    queryType: \"SQL\",\n                    expression: query,\n                    inputSerialization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toQuerySerialization)(options.inputTextConfiguration),\n                    outputSerialization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toQuerySerialization)(options.outputTextConfiguration),\n                },\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return new _BlobQueryResponse__WEBPACK_IMPORTED_MODULE_18__.BlobQueryResponse(response, {\n                abortSignal: options.abortSignal,\n                onProgress: options.onProgress,\n                onError: options.onError,\n            });\n        });\n    }\n    /**\n     * Creates a new block blob, or updates the content of an existing block blob.\n     * Updating an existing block blob overwrites any existing metadata on the blob.\n     * Partial updates are not supported; the content of the existing blob is\n     * overwritten with the new content. To perform a partial update of a block blob's,\n     * use {@link stageBlock} and {@link commitBlockList}.\n     *\n     * This is a non-parallel uploading method, please use {@link uploadFile},\n     * {@link uploadStream} or {@link uploadBrowserData} for better performance\n     * with concurrency uploading.\n     *\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function\n     *                               which returns a new Readable stream whose offset is from data source beginning.\n     * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n     *                               string including non non-Base64/Hex-encoded characters.\n     * @param options - Options to the Block Blob Upload operation.\n     * @returns Response data for the Block Blob Upload operation.\n     *\n     * Example usage:\n     *\n     * ```js\n     * const content = \"Hello world!\";\n     * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);\n     * ```\n     */\n    async upload(body, contentLength, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-upload\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.upload(contentLength, body, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier),\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Creates a new Block Blob where the contents of the blob are read from a given URL.\n     * This API is supported beginning with the 2020-04-08 version. Partial updates\n     * are not supported with Put Blob from URL; the content of an existing blob is overwritten with\n     * the content of the new blob.  To perform partial updates to a block blob’s contents using a\n     * source URL, use {@link stageBlockFromURL} and {@link commitBlockList}.\n     *\n     * @param sourceURL - Specifies the URL of the blob. The value\n     *                           may be a URL of up to 2 KB in length that specifies a blob.\n     *                           The value should be URL-encoded as it would appear\n     *                           in a request URI. The source blob must either be public\n     *                           or must be authenticated via a shared access signature.\n     *                           If the source blob is public, no authentication is required\n     *                           to perform the operation. Here are some examples of source object URLs:\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n     * @param options - Optional parameters.\n     */\n    async syncUploadFromURL(sourceURL, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-syncUploadFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e, _f;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.putBlobFromUrl(0, sourceURL, Object.assign(Object.assign({}, options), { blobHttpHeaders: options.blobHTTPHeaders, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }), sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                    sourceIfTags: (_f = options.sourceConditions) === null || _f === void 0 ? void 0 : _f.tagConditions,\n                }, cpkInfo: options.customerProvidedKey, copySourceAuthorization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.httpAuthorizationToString)(options.sourceAuthorization), tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier), blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags), copySourceTags: options.copySourceTags, tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n    /**\n     * Uploads the specified block to the block blob's \"staging area\" to be later\n     * committed by a call to commitBlockList.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-block\n     *\n     * @param blockId - A 64-byte value that is base64-encoded\n     * @param body - Data to upload to the staging area.\n     * @param contentLength - Number of bytes to upload.\n     * @param options - Options to the Block Blob Stage Block operation.\n     * @returns Response data for the Block Blob Stage Block operation.\n     */\n    async stageBlock(blockId, body, contentLength, options = {}) {\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-stageBlock\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.stageBlock(blockId, contentLength, body, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                transactionalContentMD5: options.transactionalContentMD5,\n                transactionalContentCrc64: options.transactionalContentCrc64,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Stage Block From URL operation creates a new block to be committed as part\n     * of a blob where the contents are read from a URL.\n     * This API is available starting in version 2018-03-28.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url\n     *\n     * @param blockId - A 64-byte value that is base64-encoded\n     * @param sourceURL - Specifies the URL of the blob. The value\n     *                           may be a URL of up to 2 KB in length that specifies a blob.\n     *                           The value should be URL-encoded as it would appear\n     *                           in a request URI. The source blob must either be public\n     *                           or must be authenticated via a shared access signature.\n     *                           If the source blob is public, no authentication is required\n     *                           to perform the operation. Here are some examples of source object URLs:\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n     * @param offset - From which position of the blob to download, greater than or equal to 0\n     * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined\n     * @param options - Options to the Block Blob Stage Block From URL operation.\n     * @returns Response data for the Block Blob Stage Block From URL operation.\n     */\n    async stageBlockFromURL(blockId, sourceURL, offset = 0, count, options = {}) {\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-stageBlockFromURL\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.stageBlockFromURL(blockId, 0, sourceURL, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                sourceContentMD5: options.sourceContentMD5,\n                sourceContentCrc64: options.sourceContentCrc64,\n                sourceRange: offset === 0 && !count ? undefined : (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                copySourceAuthorization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.httpAuthorizationToString)(options.sourceAuthorization),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Writes a blob by specifying the list of block IDs that make up the blob.\n     * In order to be written as part of a blob, a block must have been successfully written\n     * to the server in a prior {@link stageBlock} operation. You can call {@link commitBlockList} to\n     * update a blob by uploading only those blocks that have changed, then committing the new and existing\n     * blocks together. Any blocks not specified in the block list and permanently deleted.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-block-list\n     *\n     * @param blocks -  Array of 64-byte value that is base64-encoded\n     * @param options - Options to the Block Blob Commit Block List operation.\n     * @returns Response data for the Block Blob Commit Block List operation.\n     */\n    async commitBlockList(blocks, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-commitBlockList\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.commitBlockList({ latest: blocks }, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier),\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns the list of blocks that have been uploaded as part of a block blob\n     * using the specified block list filter.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-block-list\n     *\n     * @param listType - Specifies whether to return the list of committed blocks,\n     *                                        the list of uncommitted blocks, or both lists together.\n     * @param options - Options to the Block Blob Get Block List operation.\n     * @returns Response data for the Block Blob Get Block List operation.\n     */\n    async getBlockList(listType, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-getBlockList\", options, async (updatedOptions) => {\n            var _a;\n            const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.getBlockList(listType, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            if (!res.committedBlocks) {\n                res.committedBlocks = [];\n            }\n            if (!res.uncommittedBlocks) {\n                res.uncommittedBlocks = [];\n            }\n            return res;\n        });\n    }\n    // High level functions\n    /**\n     * Uploads a Buffer(Node.js)/Blob(browsers)/ArrayBuffer/ArrayBufferView object to a BlockBlob.\n     *\n     * When data length is no more than the specifiled {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is\n     * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.\n     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}\n     * to commit the block list.\n     *\n     * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is\n     * `blobContentType`, enabling the browser to provide\n     * functionality based on file type.\n     *\n     * @param data - Buffer(Node.js), Blob, ArrayBuffer or ArrayBufferView\n     * @param options -\n     */\n    async uploadData(data, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-uploadData\", options, async (updatedOptions) => {\n            if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                let buffer;\n                if (data instanceof Buffer) {\n                    buffer = data;\n                }\n                else if (data instanceof ArrayBuffer) {\n                    buffer = Buffer.from(data);\n                }\n                else {\n                    data = data;\n                    buffer = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n                }\n                return this.uploadSeekableInternal((offset, size) => buffer.slice(offset, offset + size), buffer.byteLength, updatedOptions);\n            }\n            else {\n                const browserBlob = new Blob([data]);\n                return this.uploadSeekableInternal((offset, size) => browserBlob.slice(offset, offset + size), browserBlob.size, updatedOptions);\n            }\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN BROWSERS.\n     *\n     * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.\n     *\n     * When buffer length lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.\n     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call\n     * {@link commitBlockList} to commit the block list.\n     *\n     * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is\n     * `blobContentType`, enabling the browser to provide\n     * functionality based on file type.\n     *\n     * @deprecated Use {@link uploadData} instead.\n     *\n     * @param browserData - Blob, File, ArrayBuffer or ArrayBufferView\n     * @param options - Options to upload browser data.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadBrowserData(browserData, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-uploadBrowserData\", options, async (updatedOptions) => {\n            const browserBlob = new Blob([browserData]);\n            return this.uploadSeekableInternal((offset, size) => browserBlob.slice(offset, offset + size), browserBlob.size, updatedOptions);\n        });\n    }\n    /**\n     *\n     * Uploads data to block blob. Requires a bodyFactory as the data source,\n     * which need to return a {@link HttpRequestBody} object with the offset and size provided.\n     *\n     * When data length is no more than the specified {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is\n     * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.\n     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}\n     * to commit the block list.\n     *\n     * @param bodyFactory -\n     * @param size - size of the data to upload.\n     * @param options - Options to Upload to Block Blob operation.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadSeekableInternal(bodyFactory, size, options = {}) {\n        var _a, _b;\n        let blockSize = (_a = options.blockSize) !== null && _a !== void 0 ? _a : 0;\n        if (blockSize < 0 || blockSize > _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {\n            throw new RangeError(`blockSize option must be >= 0 and <= ${_utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES}`);\n        }\n        const maxSingleShotSize = (_b = options.maxSingleShotSize) !== null && _b !== void 0 ? _b : _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;\n        if (maxSingleShotSize < 0 || maxSingleShotSize > _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES) {\n            throw new RangeError(`maxSingleShotSize option must be >= 0 and <= ${_utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}`);\n        }\n        if (blockSize === 0) {\n            if (size > _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES * _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_BLOCKS) {\n                throw new RangeError(`${size} is too larger to upload to a block blob.`);\n            }\n            if (size > maxSingleShotSize) {\n                blockSize = Math.ceil(size / _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_BLOCKS);\n                if (blockSize < _utils_constants__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {\n                    blockSize = _utils_constants__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n                }\n            }\n        }\n        if (!options.blobHTTPHeaders) {\n            options.blobHTTPHeaders = {};\n        }\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-uploadSeekableInternal\", options, async (updatedOptions) => {\n            if (size <= maxSingleShotSize) {\n                return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.upload(bodyFactory(0, size), size, updatedOptions));\n            }\n            const numBlocks = Math.floor((size - 1) / blockSize) + 1;\n            if (numBlocks > _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_BLOCKS) {\n                throw new RangeError(`The buffer's size is too big or the BlockSize is too small;` +\n                    `the number of blocks must be <= ${_utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_BLOCKS}`);\n            }\n            const blockList = [];\n            const blockIDPrefix = (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.randomUUID)();\n            let transferProgress = 0;\n            const batch = new _utils_Batch__WEBPACK_IMPORTED_MODULE_15__.Batch(options.concurrency);\n            for (let i = 0; i < numBlocks; i++) {\n                batch.addOperation(async () => {\n                    const blockID = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.generateBlockID)(blockIDPrefix, i);\n                    const start = blockSize * i;\n                    const end = i === numBlocks - 1 ? size : start + blockSize;\n                    const contentLength = end - start;\n                    blockList.push(blockID);\n                    await this.stageBlock(blockID, bodyFactory(start, contentLength), contentLength, {\n                        abortSignal: options.abortSignal,\n                        conditions: options.conditions,\n                        encryptionScope: options.encryptionScope,\n                        tracingOptions: updatedOptions.tracingOptions,\n                    });\n                    // Update progress after block is successfully uploaded to server, in case of block trying\n                    // TODO: Hook with convenience layer progress event in finer level\n                    transferProgress += contentLength;\n                    if (options.onProgress) {\n                        options.onProgress({\n                            loadedBytes: transferProgress,\n                        });\n                    }\n                });\n            }\n            await batch.do();\n            return this.commitBlockList(blockList, updatedOptions);\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Uploads a local file in blocks to a block blob.\n     *\n     * When file size lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.\n     * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList\n     * to commit the block list.\n     *\n     * @param filePath - Full path of local file\n     * @param options - Options to Upload to Block Blob operation.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadFile(filePath, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-uploadFile\", options, async (updatedOptions) => {\n            const size = (await (0,_utils_utils_node__WEBPACK_IMPORTED_MODULE_16__.fsStat)(filePath)).size;\n            return this.uploadSeekableInternal((offset, count) => {\n                return () => (0,_utils_utils_node__WEBPACK_IMPORTED_MODULE_16__.fsCreateReadStream)(filePath, {\n                    autoClose: true,\n                    end: count ? offset + count - 1 : Infinity,\n                    start: offset,\n                });\n            }, size, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Uploads a Node.js Readable stream into block blob.\n     *\n     * PERFORMANCE IMPROVEMENT TIPS:\n     * * Input stream highWaterMark is better to set a same value with bufferSize\n     *    parameter, which will avoid Buffer.concat() operations.\n     *\n     * @param stream - Node.js Readable stream\n     * @param bufferSize - Size of every buffer allocated, also the block size in the uploaded block blob. Default value is 8MB\n     * @param maxConcurrency -  Max concurrency indicates the max number of buffers that can be allocated,\n     *                                 positive correlation with max uploading concurrency. Default value is 5\n     * @param options - Options to Upload Stream to Block Blob operation.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadStream(stream, bufferSize = _utils_constants__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_BLOCK_BUFFER_SIZE_BYTES, maxConcurrency = 5, options = {}) {\n        if (!options.blobHTTPHeaders) {\n            options.blobHTTPHeaders = {};\n        }\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-uploadStream\", options, async (updatedOptions) => {\n            let blockNum = 0;\n            const blockIDPrefix = (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.randomUUID)();\n            let transferProgress = 0;\n            const blockList = [];\n            const scheduler = new _storage_common_src__WEBPACK_IMPORTED_MODULE_19__.BufferScheduler(stream, bufferSize, maxConcurrency, async (body, length) => {\n                const blockID = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.generateBlockID)(blockIDPrefix, blockNum);\n                blockList.push(blockID);\n                blockNum++;\n                await this.stageBlock(blockID, body, length, {\n                    conditions: options.conditions,\n                    encryptionScope: options.encryptionScope,\n                    tracingOptions: updatedOptions.tracingOptions,\n                });\n                // Update progress after block is successfully uploaded to server, in case of block trying\n                transferProgress += length;\n                if (options.onProgress) {\n                    options.onProgress({ loadedBytes: transferProgress });\n                }\n            }, \n            // concurrency should set a smaller value than maxConcurrency, which is helpful to\n            // reduce the possibility when a outgoing handler waits for stream data, in\n            // this situation, outgoing handlers are blocked.\n            // Outgoing queue shouldn't be empty.\n            Math.ceil((maxConcurrency / 4) * 3));\n            await scheduler.do();\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.commitBlockList(blockList, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n}\n/**\n * PageBlobClient defines a set of operations applicable to page blobs.\n */\nclass PageBlobClient extends BlobClient {\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n        let pipeline;\n        let url;\n        options = options || {};\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.isPipelineLike)(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.extractConnectionStringParts)(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                    const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                    }\n                    pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        this.pageBlobContext = this.storageClientContext.pageBlob;\n    }\n    /**\n     * Creates a new PageBlobClient object identical to the source but with the\n     * specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a Client to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new PageBlobClient object identical to the source but with the specified snapshot timestamp.\n     */\n    withSnapshot(snapshot) {\n        return new PageBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.setURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * Creates a page blob of the specified length. Call uploadPages to upload data\n     * data to a page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param size - size of the page blob.\n     * @param options - Options to the Page Blob Create operation.\n     * @returns Response data for the Page Blob Create operation.\n     */\n    async create(size, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-create\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.create(0, size, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                blobSequenceNumber: options.blobSequenceNumber,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier),\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Creates a page blob of the specified length. Call uploadPages to upload data\n     * data to a page blob. If the blob with the same name already exists, the content\n     * of the existing blob will remain unchanged.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param size - size of the page blob.\n     * @param options -\n     */\n    async createIfNotExists(size, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-createIfNotExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const conditions = { ifNoneMatch: _utils_constants__WEBPACK_IMPORTED_MODULE_8__.ETagAny };\n                const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.create(size, Object.assign(Object.assign({}, options), { conditions, tracingOptions: updatedOptions.tracingOptions })));\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobAlreadyExists\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n     *\n     * @param body - Data to upload\n     * @param offset - Offset of destination page blob\n     * @param count - Content length of the body, also number of bytes to be uploaded\n     * @param options - Options to the Page Blob Upload Pages operation.\n     * @returns Response data for the Page Blob Upload Pages operation.\n     */\n    async uploadPages(body, offset, count, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-uploadPages\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.uploadPages(count, body, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                sequenceNumberAccessConditions: options.conditions,\n                transactionalContentMD5: options.transactionalContentMD5,\n                transactionalContentCrc64: options.transactionalContentCrc64,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Upload Pages operation writes a range of pages to a page blob where the\n     * contents are read from a URL.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-page-from-url\n     *\n     * @param sourceURL - Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication\n     * @param sourceOffset - The source offset to copy from. Pass 0 to copy from the beginning of source page blob\n     * @param destOffset - Offset of destination page blob\n     * @param count - Number of bytes to be uploaded from source page blob\n     * @param options -\n     */\n    async uploadPagesFromURL(sourceURL, sourceOffset, destOffset, count, options = {}) {\n        options.conditions = options.conditions || {};\n        options.sourceConditions = options.sourceConditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-uploadPagesFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.uploadPagesFromURL(sourceURL, (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset: sourceOffset, count }), 0, (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset: destOffset, count }), {\n                abortSignal: options.abortSignal,\n                sourceContentMD5: options.sourceContentMD5,\n                sourceContentCrc64: options.sourceContentCrc64,\n                leaseAccessConditions: options.conditions,\n                sequenceNumberAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                },\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                copySourceAuthorization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.httpAuthorizationToString)(options.sourceAuthorization),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Frees the specified pages from the page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n     *\n     * @param offset - Starting byte position of the pages to clear.\n     * @param count - Number of bytes to clear.\n     * @param options - Options to the Page Blob Clear Pages operation.\n     * @returns Response data for the Page Blob Clear Pages operation.\n     */\n    async clearPages(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-clearPages\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.clearPages(0, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                sequenceNumberAccessConditions: options.conditions,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns the list of valid page ranges for a page blob or snapshot of a page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param options - Options to the Page Blob Get Ranges operation.\n     * @returns Response data for the Page Blob Get Ranges operation.\n     */\n    async getPageRanges(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-getPageRanges\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.getPageRanges({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return (0,_PageBlobRangeResponse__WEBPACK_IMPORTED_MODULE_20__.rangeResponseFromModel)(response);\n        });\n    }\n    /**\n     * getPageRangesSegment returns a single segment of page ranges starting from the\n     * specified Marker. Use an empty Marker to start enumeration from the beginning.\n     * After getting a segment, process it, and then call getPageRangesSegment again\n     * (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.\n     * @param options - Options to PageBlob Get Page Ranges Segment operation.\n     */\n    async listPageRangesSegment(offset = 0, count, marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-getPageRangesSegment\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.getPageRanges({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                marker: marker,\n                maxPageSize: options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesResponseModel}\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param marker - A string value that identifies the portion of\n     *                          the get of page ranges to be returned with the next getting operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          getting operation did not return all page ranges remaining within the current page.\n     *                          The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of get\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to List Page Ranges operation.\n     */\n    listPageRangeItemSegments() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncGenerator)(this, arguments, function* listPageRangeItemSegments_1(offset = 0, count, marker, options = {}) {\n            let getPageRangeItemSegmentsResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    getPageRangeItemSegmentsResponse = yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(this.listPageRangesSegment(offset, count, marker, options));\n                    marker = getPageRangeItemSegmentsResponse.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(getPageRangeItemSegmentsResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param options - Options to List Page Ranges operation.\n     */\n    listPageRangeItems() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncGenerator)(this, arguments, function* listPageRangeItems_1(offset = 0, count, options = {}) {\n            var _a, e_1, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncValues)(this.listPageRangeItemSegments(offset, count, marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const getPageRangesSegment = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncValues)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.ExtractPageRangeInfoItems)(getPageRangesSegment))));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(_b.call(_e));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list of page ranges for a page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     *  .byPage() returns an async iterable iterator to list of page ranges for a page blob.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * // Get the pageBlobClient before you run these snippets,\n     * // Can be obtained from `blobServiceClient.getContainerClient(\"<your-container-name>\").getPageBlobClient(\"<your-blob-name>\");`\n     * let i = 1;\n     * for await (const pageRange of pageBlobClient.listPageRanges()) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * let iter = pageBlobClient.listPageRanges();\n     * let pageRangeItem = await iter.next();\n     * while (!pageRangeItem.done) {\n     *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);\n     *   pageRangeItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of pageBlobClient.listPageRanges().byPage({ maxPageSize: 20 })) {\n     *   for (const pageRange of response) {\n     *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = pageBlobClient.listPageRanges().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 page ranges\n     * for (const pageRange of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     *\n     * // Passing next marker as continuationToken\n     *\n     * iterator = pageBlobClient.listPageRanges().byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 page ranges\n     * for (const blob of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param options - Options to the Page Blob Get Ranges operation.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listPageRanges(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        // AsyncIterableIterator to iterate over blobs\n        const iter = this.listPageRangeItems(offset, count, options);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listPageRangeItemSegments(offset, count, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, options));\n            },\n        };\n    }\n    /**\n     * Gets the collection of page ranges that differ between a specified snapshot and this page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page blob\n     * @param count - Number of bytes to get ranges diff.\n     * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     * @returns Response data for the Page Blob Get Page Range Diff operation.\n     */\n    async getPageRangesDiff(offset, count, prevSnapshot, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-getPageRangesDiff\", options, async (updatedOptions) => {\n            var _a;\n            const result = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.getPageRangesDiff({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                prevsnapshot: prevSnapshot,\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return (0,_PageBlobRangeResponse__WEBPACK_IMPORTED_MODULE_20__.rangeResponseFromModel)(result);\n        });\n    }\n    /**\n     * getPageRangesDiffSegment returns a single segment of page ranges starting from the\n     * specified Marker for difference between previous snapshot and the target page blob.\n     * Use an empty Marker to start enumeration from the beginning.\n     * After getting a segment, process it, and then call getPageRangesDiffSegment again\n     * (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.\n     * @param marker - A string value that identifies the portion of the get to be returned with the next get operation.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     */\n    async listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-getPageRangesDiffSegment\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.getPageRangesDiff({\n                abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n                leaseAccessConditions: options === null || options === void 0 ? void 0 : options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.conditions), { ifTags: (_a = options === null || options === void 0 ? void 0 : options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                prevsnapshot: prevSnapshotOrUrl,\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({\n                    offset: offset,\n                    count: count,\n                }),\n                marker: marker,\n                maxPageSize: options === null || options === void 0 ? void 0 : options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesDiffResponseModel}\n     *\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.\n     * @param marker - A string value that identifies the portion of\n     *                          the get of page ranges to be returned with the next getting operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          getting operation did not return all page ranges remaining within the current page.\n     *                          The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of get\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     */\n    listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker, options) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncGenerator)(this, arguments, function* listPageRangeDiffItemSegments_1() {\n            let getPageRangeItemSegmentsResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    getPageRangeItemSegmentsResponse = yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(this.listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker, options));\n                    marker = getPageRangeItemSegmentsResponse.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(getPageRangeItemSegmentsResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     */\n    listPageRangeDiffItems(offset, count, prevSnapshotOrUrl, options) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncGenerator)(this, arguments, function* listPageRangeDiffItems_1() {\n            var _a, e_2, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncValues)(this.listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const getPageRangesSegment = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncValues)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.ExtractPageRangeInfoItems)(getPageRangesSegment))));\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(_b.call(_e));\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     *  .byPage() returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * // Get the pageBlobClient before you run these snippets,\n     * // Can be obtained from `blobServiceClient.getContainerClient(\"<your-container-name>\").getPageBlobClient(\"<your-blob-name>\");`\n     * let i = 1;\n     * for await (const pageRange of pageBlobClient.listPageRangesDiff()) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * let iter = pageBlobClient.listPageRangesDiff();\n     * let pageRangeItem = await iter.next();\n     * while (!pageRangeItem.done) {\n     *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);\n     *   pageRangeItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 20 })) {\n     *   for (const pageRange of response) {\n     *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 page ranges\n     * for (const pageRange of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     *\n     * // Passing next marker as continuationToken\n     *\n     * iterator = pageBlobClient.listPageRangesDiff().byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 page ranges\n     * for (const blob of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Ranges operation.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listPageRangesDiff(offset, count, prevSnapshot, options = {}) {\n        options.conditions = options.conditions || {};\n        // AsyncIterableIterator to iterate over blobs\n        const iter = this.listPageRangeDiffItems(offset, count, prevSnapshot, Object.assign({}, options));\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listPageRangeDiffItemSegments(offset, count, prevSnapshot, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, options));\n            },\n        };\n    }\n    /**\n     * Gets the collection of page ranges that differ between a specified snapshot and this page blob for managed disks.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page blob\n     * @param count - Number of bytes to get ranges diff.\n     * @param prevSnapshotUrl - URL of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     * @returns Response data for the Page Blob Get Page Range Diff operation.\n     */\n    async getPageRangesDiffForManagedDisks(offset, count, prevSnapshotUrl, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-GetPageRangesDiffForManagedDisks\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.getPageRangesDiff({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                prevSnapshotUrl,\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return (0,_PageBlobRangeResponse__WEBPACK_IMPORTED_MODULE_20__.rangeResponseFromModel)(response);\n        });\n    }\n    /**\n     * Resizes the page blob to the specified size (which must be a multiple of 512).\n     * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties\n     *\n     * @param size - Target size\n     * @param options - Options to the Page Blob Resize operation.\n     * @returns Response data for the Page Blob Resize operation.\n     */\n    async resize(size, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-resize\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.resize(size, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets a page blob's sequence number.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n     *\n     * @param sequenceNumberAction - Indicates how the service should modify the blob's sequence number.\n     * @param sequenceNumber - Required if sequenceNumberAction is max or update\n     * @param options - Options to the Page Blob Update Sequence Number operation.\n     * @returns Response data for the Page Blob Update Sequence Number operation.\n     */\n    async updateSequenceNumber(sequenceNumberAction, sequenceNumber, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-updateSequenceNumber\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.updateSequenceNumber(sequenceNumberAction, {\n                abortSignal: options.abortSignal,\n                blobSequenceNumber: sequenceNumber,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.\n     * The snapshot is copied such that only the differential changes between the previously\n     * copied snapshot are transferred to the destination.\n     * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.\n     * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n     * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots\n     *\n     * @param copySource - Specifies the name of the source page blob snapshot. For example,\n     *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n     * @param options - Options to the Page Blob Copy Incremental operation.\n     * @returns Response data for the Page Blob Copy Incremental operation.\n     */\n    async startCopyIncremental(copySource, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-startCopyIncremental\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.copyIncremental(copySource, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n}\n//# sourceMappingURL=Clients.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL0NsaWVudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ21GO0FBQ2Q7QUFDaEI7QUFDWDtBQUNJO0FBQ2dCO0FBQ047QUFDZ0I7QUFDYztBQUN2QjtBQUNHO0FBQ1Q7QUFDMEI7QUFDM0M7QUFDUTtBQUNWO0FBQ3FCO0FBQ3VSO0FBQ2xTO0FBQzhSO0FBQ3RPO0FBQzFCO0FBQzFCO0FBQ3BEO0FBQ0EsMkRBQTJEO0FBQzNEO0FBQ0E7QUFDTyx5QkFBeUIseURBQWE7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHlEQUFjO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9EQUFNLG1EQUFtRCwrRkFBMEI7QUFDckcsMkRBQTJELGlGQUFtQjtBQUM5RSxZQUFZLG1FQUFpQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0RBQVc7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNEQUFXLEtBQUssaUZBQW1CO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsaUZBQTRCO0FBQy9EO0FBQ0Esb0JBQW9CLG9EQUFNO0FBQzFCLG9EQUFvRCwrRkFBMEI7QUFDOUUsMEJBQTBCLG9FQUFlLENBQUMsb0VBQWU7QUFDekQ7QUFDQSwrQ0FBK0Msa0ZBQXVCO0FBQ3RFO0FBQ0EsK0JBQStCLHNEQUFXO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9FQUFlLENBQUMsb0VBQWU7QUFDbkQ7QUFDQTtBQUNBLDJCQUEyQixzREFBVyxLQUFLLGlGQUFtQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDJEQUEyRDtBQUN0RTtBQUNBO0FBQ0EseUJBQXlCLG9FQUFlLFdBQVcsMERBQVk7QUFDL0QsMEJBQTBCLG9FQUFlLFdBQVcsMERBQVk7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLG9FQUFlLFdBQVcsMERBQVk7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLG9FQUFlLFdBQVcsMERBQVk7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBLFFBQVEsNkRBQW9CO0FBQzVCLGVBQWUsMERBQWE7QUFDNUI7QUFDQSx3QkFBd0IsbUVBQWM7QUFDdEM7QUFDQTtBQUNBLHdFQUF3RSx5QkFBeUIseUZBQXlGO0FBQzFMO0FBQ0Esd0NBQXdDLG9EQUFNO0FBQzlDLGlCQUFpQjtBQUNqQiw0REFBNEQsc0RBQWEsR0FBRyxlQUFlO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsNkRBQTZELFVBQVUsa0lBQWtJLGlGQUE0Qiw4QkFBOEI7QUFDblE7QUFDQSxpQkFBaUIsb0RBQU07QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGlGQUFtQztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix3RUFBb0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLDJCQUEyQixzREFBYTtBQUN4QztBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixhQUFhLCtCQUErQjtBQUNsRTtBQUNBLHdFQUF3RSxrQ0FBa0M7QUFDMUcsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQSxrRkFBa0Y7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IsZUFBZSwwREFBYTtBQUM1QjtBQUNBLGdCQUFnQiw2REFBb0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLG9GQUFzQztBQUNuRixnREFBZ0QsdUZBQXlDO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix1QkFBdUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQSxRQUFRLDZEQUFvQjtBQUM1QixlQUFlLDBEQUFhO0FBQzVCO0FBQ0Esd0JBQXdCLG1FQUFjO0FBQ3RDO0FBQ0E7QUFDQSx3RUFBd0UseUJBQXlCLHlGQUF5RjtBQUMxTDtBQUNBO0FBQ0EsYUFBYTtBQUNiLGlEQUFpRCxVQUFVLGtJQUFrSSxpRkFBNEIsOEJBQThCO0FBQ3ZQLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBLGVBQWUsMERBQWE7QUFDNUI7QUFDQSxtQkFBbUIsbUVBQWM7QUFDakM7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLHlCQUF5Qix5RkFBeUY7QUFDMUw7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDLGVBQWUsMERBQWE7QUFDNUI7QUFDQTtBQUNBLDRCQUE0QixtRUFBYztBQUMxQyxxREFBcUQsaUJBQWlCLFVBQVUsMEJBQTBCO0FBQzFHO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxrQkFBa0IsOEVBQThFLHVCQUF1QjtBQUNoTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLGVBQWUsMERBQWE7QUFDNUIsbUJBQW1CLG1FQUFjO0FBQ2pDO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0EsUUFBUSw2REFBb0I7QUFDNUIsZUFBZSwwREFBYTtBQUM1QjtBQUNBLG1CQUFtQixtRUFBYztBQUNqQztBQUNBO0FBQ0E7QUFDQSx3RUFBd0UseUJBQXlCLHlGQUF5RjtBQUMxTDtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQSxRQUFRLDZEQUFvQjtBQUM1QixlQUFlLDBEQUFhO0FBQzVCO0FBQ0EsbUJBQW1CLG1FQUFjO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSx5QkFBeUIseUZBQXlGO0FBQzFMO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEMsZUFBZSwwREFBYTtBQUM1QjtBQUNBLG1CQUFtQixtRUFBYztBQUNqQztBQUNBO0FBQ0Esd0VBQXdFLHlCQUF5Qix5RkFBeUY7QUFDMUw7QUFDQSxzQkFBc0IsK0RBQVU7QUFDaEMsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIsZUFBZSwwREFBYTtBQUM1QjtBQUNBLDZCQUE2QixtRUFBYztBQUMzQztBQUNBO0FBQ0Esd0VBQXdFLHlCQUF5Qix5RkFBeUY7QUFDMUw7QUFDQSxhQUFhO0FBQ2Isa0VBQWtFLGVBQWUscUNBQXFDLDJEQUFNLEdBQUcsaUNBQWlDLFNBQVM7QUFDeks7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGNBQWMsdUJBQXVCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsOERBQWU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQSxRQUFRLDZEQUFvQjtBQUM1QixlQUFlLDBEQUFhO0FBQzVCO0FBQ0EsbUJBQW1CLG1FQUFjO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSx5QkFBeUIseUZBQXlGO0FBQzFMO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLG1CQUFtQjtBQUN2RDtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw0RkFBMEI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DLGVBQWUsMERBQWE7QUFDNUIsbUJBQW1CLG1FQUFjO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSxlQUFlLDBEQUFhO0FBQzVCO0FBQ0EsbUJBQW1CLG1FQUFjO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSx5QkFBeUIseUZBQXlGO0FBQzFMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSx5Q0FBeUMsOEVBQXlCO0FBQ2xFLHNCQUFzQixxREFBWTtBQUNsQyxnQ0FBZ0MscUVBQWdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDLGVBQWUsMERBQWE7QUFDNUI7QUFDQSxtQkFBbUIsbUVBQWMsZ0NBQWdDLHFEQUFZO0FBQzdFO0FBQ0E7QUFDQSx3RUFBd0UseUJBQXlCLHlGQUF5RjtBQUMxTDtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBLDhEQUE4RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLCtFQUFpQztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMERBQWE7QUFDNUI7QUFDQTtBQUNBLHdGQUF3RixjQUFjLCtDQUErQztBQUNySjtBQUNBO0FBQ0EsbURBQW1ELFFBQVEscUNBQXFDLHVCQUF1QjtBQUN2SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLE1BQU0sb0pBQW9KLGNBQWM7QUFDdFA7QUFDQTtBQUNBO0FBQ0Esd0hBQXdILE1BQU07QUFDOUg7QUFDQTtBQUNBLDhCQUE4QixnREFBSztBQUNuQyxtQ0FBbUMsc0JBQXNCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLDBCQUEwQixrRUFBYztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLCtCQUErQjtBQUM1RTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRTtBQUNsRSxlQUFlLDBEQUFhO0FBQzVCLDhGQUE4RixjQUFjLCtDQUErQztBQUMzSjtBQUNBLHNCQUFzQix5RUFBcUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixzRUFBaUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQsZUFBZSwwREFBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsbUVBQWM7QUFDakM7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLHlCQUF5Qix5RkFBeUY7QUFDMUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHFEQUFZO0FBQ2xDLGdDQUFnQyxxRUFBZ0I7QUFDaEQ7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QywrRkFBMEI7QUFDdkU7QUFDQTtBQUNBLHdCQUF3Qiw0RkFBOEIsaUJBQWlCLG9IQUFvSDtBQUMzTCxvQkFBb0IscUVBQWdCO0FBQ3BDLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0MsZUFBZSwwREFBYTtBQUM1QixtQkFBbUIsbUVBQWM7QUFDakM7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRTtBQUNoRSxlQUFlLDBEQUFhO0FBQzVCLG1CQUFtQixtRUFBYztBQUNqQztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRCxlQUFlLDBEQUFhO0FBQzVCLG1CQUFtQixtRUFBYztBQUNqQztBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx5REFBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixvREFBTSxtREFBbUQsK0ZBQTBCO0FBQ3JHLDJEQUEyRCxpRkFBbUI7QUFDOUUsWUFBWSxtRUFBaUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNEQUFXO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzREFBVyxLQUFLLGlGQUFtQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGlGQUE0QjtBQUMvRDtBQUNBLG9CQUFvQixvREFBTTtBQUMxQixvREFBb0QsK0ZBQTBCO0FBQzlFLDBCQUEwQixvRUFBZSxDQUFDLG9FQUFlO0FBQ3pEO0FBQ0EsK0NBQStDLGtGQUF1QjtBQUN0RTtBQUNBLCtCQUErQixzREFBVztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvRUFBZSxDQUFDLG9FQUFlO0FBQ25EO0FBQ0E7QUFDQSwyQkFBMkIsc0RBQVcsS0FBSyxpRkFBbUI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxvRUFBZSxXQUFXLDBEQUFZO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBLFFBQVEsNkRBQW9CO0FBQzVCLGVBQWUsMERBQWE7QUFDNUI7QUFDQSxtQkFBbUIsbUVBQWM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UseUJBQXlCLHlGQUF5RjtBQUMxTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHFFQUFnQjtBQUNoRDtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4Qyw2QkFBNkIsYUFBYSxxREFBTztBQUNqRCxlQUFlLDBEQUFhO0FBQzVCO0FBQ0E7QUFDQSw0QkFBNEIsbUVBQWMsaURBQWlELHFCQUFxQixZQUFZO0FBQzVILHFEQUFxRCxpQkFBaUIsVUFBVSwwQkFBMEI7QUFDMUc7QUFDQTtBQUNBO0FBQ0EseURBQXlELGtCQUFrQiw4RUFBOEUsdUJBQXVCO0FBQ2hMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSxlQUFlLDBEQUFhO0FBQzVCO0FBQ0EsbUJBQW1CLG1FQUFjO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSx5QkFBeUIseUZBQXlGO0FBQzFMO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBLFFBQVEsNkRBQW9CO0FBQzVCLGVBQWUsMERBQWE7QUFDNUI7QUFDQSxtQkFBbUIsbUVBQWM7QUFDakM7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLHlCQUF5Qix5RkFBeUY7QUFDMUw7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekU7QUFDQTtBQUNBLFFBQVEsNkRBQW9CO0FBQzVCLGVBQWUsMERBQWE7QUFDNUI7QUFDQSxtQkFBbUIsbUVBQWM7QUFDakM7QUFDQSw2QkFBNkIsc0RBQWEsR0FBRyw2QkFBNkI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UseUJBQXlCLHlGQUF5RjtBQUMxTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLHlDQUF5Qyw4RUFBeUI7QUFDbEU7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHlEQUFjO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9EQUFNLG1EQUFtRCwrRkFBMEI7QUFDckcsMkRBQTJELGlGQUFtQjtBQUM5RSxZQUFZLG1FQUFpQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0RBQVc7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNEQUFXLEtBQUssaUZBQW1CO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsaUZBQTRCO0FBQy9EO0FBQ0Esb0JBQW9CLG9EQUFNO0FBQzFCLG9EQUFvRCwrRkFBMEI7QUFDOUUsMEJBQTBCLG9FQUFlLENBQUMsb0VBQWU7QUFDekQ7QUFDQSwrQ0FBK0Msa0ZBQXVCO0FBQ3RFO0FBQ0EsK0JBQStCLHNEQUFXO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9FQUFlLENBQUMsb0VBQWU7QUFDbkQ7QUFDQTtBQUNBLDJCQUEyQixzREFBVyxLQUFLLGlGQUFtQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsb0VBQWUsV0FBVywwREFBWTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyxRQUFRLDZEQUFvQjtBQUM1QixhQUFhLG9EQUFNO0FBQ25CO0FBQ0E7QUFDQSxlQUFlLDBEQUFhO0FBQzVCO0FBQ0EsNkJBQTZCLG1FQUFjO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLHlFQUFvQjtBQUM1RCx5Q0FBeUMseUVBQW9CO0FBQzdELGlCQUFpQjtBQUNqQjtBQUNBLHdFQUF3RSx5QkFBeUIseUZBQXlGO0FBQzFMO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsdUJBQXVCLGtFQUFpQjtBQUN4QztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0EsWUFBWSxrQkFBa0IsS0FBSyxzQkFBc0I7QUFDekQ7QUFDQSw0REFBNEQsaUJBQWlCO0FBQzdFLFFBQVEsb0JBQW9CLElBQUkseUJBQXlCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBLFFBQVEsNkRBQW9CO0FBQzVCLGVBQWUsMERBQWE7QUFDNUI7QUFDQSxtQkFBbUIsbUVBQWM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UseUJBQXlCLHlGQUF5RjtBQUMxTDtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IscURBQVk7QUFDbEMsZ0NBQWdDLHFFQUFnQjtBQUNoRDtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQSx3QkFBd0IseUJBQXlCLEtBQUssc0JBQXNCO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBLFFBQVEsNkRBQW9CO0FBQzVCLGVBQWUsMERBQWE7QUFDNUI7QUFDQSxtQkFBbUIsbUVBQWMsd0ZBQXdGLGNBQWMsNklBQTZJLHlCQUF5Qix5RkFBeUY7QUFDdFk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixpRUFBaUUsOEVBQXlCLHFDQUFxQyxxREFBWSxnQ0FBZ0MscUVBQWdCLHVHQUF1RztBQUNuVCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStEO0FBQy9ELFFBQVEsNkRBQW9CO0FBQzVCLGVBQWUsMERBQWE7QUFDNUIsbUJBQW1CLG1FQUFjO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFO0FBQy9FLFFBQVEsNkRBQW9CO0FBQzVCLGVBQWUsMERBQWE7QUFDNUIsbUJBQW1CLG1FQUFjO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLHNEQUFhLEdBQUcsZUFBZTtBQUNqRztBQUNBO0FBQ0EseUNBQXlDLDhFQUF5QjtBQUNsRTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsa0JBQWtCLHlCQUF5Qix1QkFBdUI7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBLFFBQVEsNkRBQW9CO0FBQzVCLGVBQWUsMERBQWE7QUFDNUI7QUFDQSxtQkFBbUIsbUVBQWMsK0NBQStDLGdCQUFnQjtBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSx5QkFBeUIseUZBQXlGO0FBQzFMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IscURBQVk7QUFDbEMsZ0NBQWdDLHFFQUFnQjtBQUNoRDtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QyxlQUFlLDBEQUFhO0FBQzVCO0FBQ0Esd0JBQXdCLG1FQUFjO0FBQ3RDO0FBQ0E7QUFDQSx3RUFBd0UseUJBQXlCLHlGQUF5RjtBQUMxTDtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELHdEQUF3RDtBQUNoSCxRQUFRLHVDQUF1QywyQkFBMkIsY0FBYztBQUN4Rix5Q0FBeUMsa0JBQWtCLG9DQUFvQztBQUMvRjtBQUNBO0FBQ0EsaUJBQWlCLHNEQUFzRDtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkMsZUFBZSwwREFBYTtBQUM1QixnQkFBZ0Isb0RBQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxrQkFBa0I7QUFDM0QsUUFBUSx1QkFBdUI7QUFDL0I7QUFDQSxpQkFBaUIsc0RBQXNEO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRCxlQUFlLDBEQUFhO0FBQzVCO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsdUJBQXVCO0FBQ3REO0FBQ0EsdURBQXVELHdEQUF3RDtBQUMvRyxRQUFRLHVDQUF1QywyQkFBMkIsY0FBYztBQUN4Rix5Q0FBeUMsa0JBQWtCLG9DQUFvQztBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRTtBQUNoRTtBQUNBO0FBQ0EseUNBQXlDLDhFQUFnQztBQUN6RSx5RUFBeUUsOEVBQWdDLENBQUM7QUFDMUc7QUFDQSxvR0FBb0csOEVBQWdDO0FBQ3BJLHlEQUF5RCw4RUFBZ0M7QUFDekYsaUZBQWlGLDhFQUFnQyxDQUFDO0FBQ2xIO0FBQ0E7QUFDQSx1QkFBdUIsOEVBQWdDLEdBQUcsbUVBQXFCO0FBQy9FLHdDQUF3QyxNQUFNO0FBQzlDO0FBQ0E7QUFDQSw2Q0FBNkMsbUVBQXFCO0FBQ2xFLGdDQUFnQywrRUFBaUM7QUFDakUsZ0NBQWdDLCtFQUFpQztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDBEQUFhO0FBQzVCO0FBQ0EsdUJBQXVCLG1FQUFjO0FBQ3JDO0FBQ0E7QUFDQSw0QkFBNEIsbUVBQXFCO0FBQ2pELGlHQUFpRztBQUNqRyx1REFBdUQsbUVBQXFCLENBQUM7QUFDN0U7QUFDQTtBQUNBLGtDQUFrQyw0REFBVTtBQUM1QztBQUNBLDhCQUE4QixnREFBSztBQUNuQyw0QkFBNEIsZUFBZTtBQUMzQztBQUNBLG9DQUFvQyxvRUFBZTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDLGVBQWUsMERBQWE7QUFDNUIsZ0NBQWdDLDBEQUFNO0FBQ3RDO0FBQ0EsNkJBQTZCLHNFQUFrQjtBQUMvQztBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYSxzQ0FBc0MsY0FBYywrQ0FBK0M7QUFDaEgsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsNkVBQStCLGtDQUFrQztBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDBEQUFhO0FBQzVCO0FBQ0Esa0NBQWtDLDREQUFVO0FBQzVDO0FBQ0E7QUFDQSxrQ0FBa0MsaUVBQWU7QUFDakQsZ0NBQWdDLG9FQUFlO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsK0JBQStCO0FBQ3hFO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixtRUFBYyxxRUFBcUUsY0FBYywrQ0FBK0M7QUFDbkssU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkseURBQWM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0RBQU0sbURBQW1ELCtGQUEwQjtBQUNyRywyREFBMkQsaUZBQW1CO0FBQzlFLFlBQVksbUVBQWlCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzREFBVztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0RBQVcsS0FBSyxpRkFBbUI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxpRkFBNEI7QUFDL0Q7QUFDQSxvQkFBb0Isb0RBQU07QUFDMUIsb0RBQW9ELCtGQUEwQjtBQUM5RSwwQkFBMEIsb0VBQWUsQ0FBQyxvRUFBZTtBQUN6RDtBQUNBLCtDQUErQyxrRkFBdUI7QUFDdEU7QUFDQSwrQkFBK0Isc0RBQVc7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isb0VBQWUsQ0FBQyxvRUFBZTtBQUNuRDtBQUNBO0FBQ0EsMkJBQTJCLHNEQUFXLEtBQUssaUZBQW1CO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0Msb0VBQWUsV0FBVywwREFBWTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBLFFBQVEsNkRBQW9CO0FBQzVCLGVBQWUsMERBQWE7QUFDNUI7QUFDQSxtQkFBbUIsbUVBQWM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSx5QkFBeUIseUZBQXlGO0FBQzFMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IscURBQVk7QUFDbEMsZ0NBQWdDLHFFQUFnQjtBQUNoRDtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUMsZUFBZSwwREFBYTtBQUM1QjtBQUNBO0FBQ0EscUNBQXFDLGFBQWEscURBQU87QUFDekQsNEJBQTRCLG1FQUFjLHVEQUF1RCxjQUFjLDJEQUEyRDtBQUMxSyxxREFBcUQsaUJBQWlCLFVBQVUsMEJBQTBCO0FBQzFHO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxrQkFBa0IsOEVBQThFLHVCQUF1QjtBQUNoTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBLFFBQVEsNkRBQW9CO0FBQzVCLGVBQWUsMERBQWE7QUFDNUI7QUFDQSxtQkFBbUIsbUVBQWM7QUFDakM7QUFDQTtBQUNBLHdFQUF3RSx5QkFBeUIseUZBQXlGO0FBQzFMO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsdUJBQXVCLHNEQUFhLEdBQUcsZUFBZTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFGQUFxRjtBQUNyRjtBQUNBO0FBQ0EsUUFBUSw2REFBb0I7QUFDNUIsZUFBZSwwREFBYTtBQUM1QjtBQUNBLG1CQUFtQixtRUFBYywwREFBMEQsc0RBQWEsR0FBRyw2QkFBNkIsTUFBTSxzREFBYSxHQUFHLDJCQUEyQjtBQUN6TDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLHlCQUF5Qix5RkFBeUY7QUFDMUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EseUNBQXlDLDhFQUF5QjtBQUNsRTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQSxlQUFlLDBEQUFhO0FBQzVCO0FBQ0EsbUJBQW1CLG1FQUFjO0FBQ2pDO0FBQ0E7QUFDQSx3RUFBd0UseUJBQXlCLHlGQUF5RjtBQUMxTCx1QkFBdUIsc0RBQWEsR0FBRyxlQUFlO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBLGVBQWUsMERBQWE7QUFDNUI7QUFDQSw2QkFBNkIsbUVBQWM7QUFDM0M7QUFDQTtBQUNBLHdFQUF3RSx5QkFBeUIseUZBQXlGO0FBQzFMLHVCQUF1QixzREFBYSxHQUFHLGVBQWU7QUFDdEQ7QUFDQSxhQUFhO0FBQ2IsbUJBQW1CLCtFQUFzQjtBQUN6QyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUU7QUFDdkUsZUFBZSwwREFBYTtBQUM1QjtBQUNBLG1CQUFtQixtRUFBYztBQUNqQztBQUNBO0FBQ0Esd0VBQXdFLHlCQUF5Qix5RkFBeUY7QUFDMUwsdUJBQXVCLHNEQUFhLEdBQUcsZUFBZTtBQUN0RDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHdEQUFnQiwrRkFBK0Y7QUFDOUg7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELCtDQUFPO0FBQ3BFO0FBQ0EsZ0NBQWdDLCtDQUFPLE9BQU8sK0NBQU87QUFDckQsa0JBQWtCO0FBQ2xCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSw0Q0FBNEMscUJBQXFCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsd0RBQWdCLGdGQUFnRjtBQUMvRztBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMscURBQWEsc0VBQXNFLFdBQVcsK0NBQU8sZ0NBQWdDO0FBQzlLO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiwrQ0FBTyxRQUFRLHdEQUFnQixDQUFDLHFEQUFhLENBQUMsOEVBQXlCO0FBQ2pHO0FBQ0E7QUFDQSw0QkFBNEIsUUFBUTtBQUNwQztBQUNBO0FBQ0EsOERBQThELCtDQUFPO0FBQ3JFO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvSUFBb0k7QUFDcEk7QUFDQTtBQUNBLG1DQUFtQyxJQUFJLElBQUksaUJBQWlCLElBQUksY0FBYztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxJQUFJLElBQUksMkJBQTJCLElBQUksd0JBQXdCLGFBQWEsNEJBQTRCO0FBQzNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RSxpQkFBaUI7QUFDOUY7QUFDQSxxQ0FBcUMsSUFBSSxJQUFJLGlCQUFpQixJQUFJLGNBQWM7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxnQkFBZ0I7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsSUFBSSxJQUFJLGlCQUFpQixJQUFJLGNBQWM7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsNENBQTRDO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLElBQUksSUFBSSxpQkFBaUIsSUFBSSxjQUFjO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyxpSEFBaUgsbUNBQW1DO0FBQ3BKLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUU7QUFDckU7QUFDQSxlQUFlLDBEQUFhO0FBQzVCO0FBQ0EsMkJBQTJCLG1FQUFjO0FBQ3pDO0FBQ0E7QUFDQSx3RUFBd0UseUJBQXlCLHlGQUF5RjtBQUMxTDtBQUNBLHVCQUF1QixzREFBYSxHQUFHLGVBQWU7QUFDdEQ7QUFDQSxhQUFhO0FBQ2IsbUJBQW1CLCtFQUFzQjtBQUN6QyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEZBQTBGO0FBQzFGLGVBQWUsMERBQWE7QUFDNUI7QUFDQSxtQkFBbUIsbUVBQWM7QUFDakM7QUFDQTtBQUNBLHdFQUF3RSwyRUFBMkUsMklBQTJJO0FBQzlSO0FBQ0EsdUJBQXVCLHNEQUFhO0FBQ3BDO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsd0RBQWdCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCwrQ0FBTztBQUNwRTtBQUNBLGdDQUFnQywrQ0FBTyxPQUFPLCtDQUFPO0FBQ3JELGtCQUFrQjtBQUNsQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsNENBQTRDLHFCQUFxQjtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsd0RBQWdCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxxREFBYSw2RkFBNkYsV0FBVywrQ0FBTyxnQ0FBZ0M7QUFDck07QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLCtDQUFPLFFBQVEsd0RBQWdCLENBQUMscURBQWEsQ0FBQyw4RUFBeUI7QUFDakc7QUFDQTtBQUNBLDRCQUE0QixRQUFRO0FBQ3BDO0FBQ0E7QUFDQSw4REFBOEQsK0NBQU87QUFDckU7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9JQUFvSTtBQUNwSTtBQUNBO0FBQ0EsbUNBQW1DLElBQUksSUFBSSxpQkFBaUIsSUFBSSxjQUFjO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLElBQUksSUFBSSwyQkFBMkIsSUFBSSx3QkFBd0IsYUFBYSw0QkFBNEI7QUFDM0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLGlCQUFpQjtBQUNsRztBQUNBLHFDQUFxQyxJQUFJLElBQUksaUJBQWlCLElBQUksY0FBYztBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLGdCQUFnQjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxJQUFJLElBQUksaUJBQWlCLElBQUksY0FBYztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCw0Q0FBNEM7QUFDM0c7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsSUFBSSxJQUFJLGlCQUFpQixJQUFJLGNBQWM7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRTtBQUNoRTtBQUNBO0FBQ0EsOEZBQThGO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyxtSUFBbUksbUNBQW1DO0FBQ3RLLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RkFBdUY7QUFDdkY7QUFDQSxlQUFlLDBEQUFhO0FBQzVCO0FBQ0EsNkJBQTZCLG1FQUFjO0FBQzNDO0FBQ0E7QUFDQSx3RUFBd0UseUJBQXlCLHlGQUF5RjtBQUMxTDtBQUNBLHVCQUF1QixzREFBYSxHQUFHLGVBQWU7QUFDdEQ7QUFDQSxhQUFhO0FBQ2IsbUJBQW1CLCtFQUFzQjtBQUN6QyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0EsZUFBZSwwREFBYTtBQUM1QjtBQUNBLG1CQUFtQixtRUFBYztBQUNqQztBQUNBO0FBQ0Esd0VBQXdFLHlCQUF5Qix5RkFBeUY7QUFDMUw7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUY7QUFDakY7QUFDQSxlQUFlLDBEQUFhO0FBQzVCO0FBQ0EsbUJBQW1CLG1FQUFjO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSx5QkFBeUIseUZBQXlGO0FBQzFMO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZELGVBQWUsMERBQWE7QUFDNUI7QUFDQSxtQkFBbUIsbUVBQWM7QUFDakM7QUFDQSx3RUFBd0UseUJBQXlCLHlGQUF5RjtBQUMxTDtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL0NsaWVudHMuanM/YzkwMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IF9fYXN5bmNEZWxlZ2F0b3IsIF9fYXN5bmNHZW5lcmF0b3IsIF9fYXN5bmNWYWx1ZXMsIF9fYXdhaXQgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGdldERlZmF1bHRQcm94eVNldHRpbmdzLCB9IGZyb20gXCJAYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lXCI7XG5pbXBvcnQgeyBpc1Rva2VuQ3JlZGVudGlhbCB9IGZyb20gXCJAYXp1cmUvY29yZS1hdXRoXCI7XG5pbXBvcnQgeyBpc05vZGUgfSBmcm9tIFwiQGF6dXJlL2NvcmUtdXRpbFwiO1xuaW1wb3J0IHsgcmFuZG9tVVVJRCB9IGZyb20gXCJAYXp1cmUvY29yZS11dGlsXCI7XG5pbXBvcnQgeyBCbG9iRG93bmxvYWRSZXNwb25zZSB9IGZyb20gXCIuL0Jsb2JEb3dubG9hZFJlc3BvbnNlXCI7XG5pbXBvcnQgeyBCbG9iUXVlcnlSZXNwb25zZSB9IGZyb20gXCIuL0Jsb2JRdWVyeVJlc3BvbnNlXCI7XG5pbXBvcnQgeyBBbm9ueW1vdXNDcmVkZW50aWFsIH0gZnJvbSBcIi4vY3JlZGVudGlhbHMvQW5vbnltb3VzQ3JlZGVudGlhbFwiO1xuaW1wb3J0IHsgU3RvcmFnZVNoYXJlZEtleUNyZWRlbnRpYWwgfSBmcm9tIFwiLi9jcmVkZW50aWFscy9TdG9yYWdlU2hhcmVkS2V5Q3JlZGVudGlhbFwiO1xuaW1wb3J0IHsgZW5zdXJlQ3BrSWZTcGVjaWZpZWQsIHRvQWNjZXNzVGllciwgfSBmcm9tIFwiLi9tb2RlbHNcIjtcbmltcG9ydCB7IHJhbmdlUmVzcG9uc2VGcm9tTW9kZWwsIH0gZnJvbSBcIi4vUGFnZUJsb2JSYW5nZVJlc3BvbnNlXCI7XG5pbXBvcnQgeyBuZXdQaXBlbGluZSwgaXNQaXBlbGluZUxpa2UgfSBmcm9tIFwiLi9QaXBlbGluZVwiO1xuaW1wb3J0IHsgQmxvYkJlZ2luQ29weUZyb21VcmxQb2xsZXIsIH0gZnJvbSBcIi4vcG9sbGVycy9CbG9iU3RhcnRDb3B5RnJvbVVybFBvbGxlclwiO1xuaW1wb3J0IHsgcmFuZ2VUb1N0cmluZyB9IGZyb20gXCIuL1JhbmdlXCI7XG5pbXBvcnQgeyBTdG9yYWdlQ2xpZW50IH0gZnJvbSBcIi4vU3RvcmFnZUNsaWVudFwiO1xuaW1wb3J0IHsgQmF0Y2ggfSBmcm9tIFwiLi91dGlscy9CYXRjaFwiO1xuaW1wb3J0IHsgQnVmZmVyU2NoZWR1bGVyIH0gZnJvbSBcIi4uLy4uL3N0b3JhZ2UtY29tbW9uL3NyY1wiO1xuaW1wb3J0IHsgQmxvYkRvZXNOb3RVc2VDdXN0b21lclNwZWNpZmllZEVuY3J5cHRpb24sIEJsb2JVc2VzQ3VzdG9tZXJTcGVjaWZpZWRFbmNyeXB0aW9uTXNnLCBCTE9DS19CTE9CX01BWF9CTE9DS1MsIEJMT0NLX0JMT0JfTUFYX1NUQUdFX0JMT0NLX0JZVEVTLCBCTE9DS19CTE9CX01BWF9VUExPQURfQkxPQl9CWVRFUywgREVGQVVMVF9CTE9CX0RPV05MT0FEX0JMT0NLX0JZVEVTLCBERUZBVUxUX0JMT0NLX0JVRkZFUl9TSVpFX0JZVEVTLCBERUZBVUxUX01BWF9ET1dOTE9BRF9SRVRSWV9SRVFVRVNUUywgRVRhZ0FueSwgVVJMQ29uc3RhbnRzLCB9IGZyb20gXCIuL3V0aWxzL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgdHJhY2luZ0NsaWVudCB9IGZyb20gXCIuL3V0aWxzL3RyYWNpbmdcIjtcbmltcG9ydCB7IGFwcGVuZFRvVVJMUGF0aCwgYXBwZW5kVG9VUkxRdWVyeSwgYXNzZXJ0UmVzcG9uc2UsIGV4dHJhY3RDb25uZWN0aW9uU3RyaW5nUGFydHMsIEV4dHJhY3RQYWdlUmFuZ2VJbmZvSXRlbXMsIGdlbmVyYXRlQmxvY2tJRCwgZ2V0VVJMUGFyYW1ldGVyLCBodHRwQXV0aG9yaXphdGlvblRvU3RyaW5nLCBpc0lwRW5kcG9pbnRTdHlsZSwgcGFyc2VPYmplY3RSZXBsaWNhdGlvblJlY29yZCwgc2V0VVJMUGFyYW1ldGVyLCB0b0Jsb2JUYWdzLCB0b0Jsb2JUYWdzU3RyaW5nLCB0b1F1ZXJ5U2VyaWFsaXphdGlvbiwgdG9UYWdzLCB9IGZyb20gXCIuL3V0aWxzL3V0aWxzLmNvbW1vblwiO1xuaW1wb3J0IHsgZnNDcmVhdGVSZWFkU3RyZWFtLCBmc1N0YXQsIHJlYWRTdHJlYW1Ub0xvY2FsRmlsZSwgc3RyZWFtVG9CdWZmZXIsIH0gZnJvbSBcIi4vdXRpbHMvdXRpbHMubm9kZVwiO1xuaW1wb3J0IHsgZ2VuZXJhdGVCbG9iU0FTUXVlcnlQYXJhbWV0ZXJzIH0gZnJvbSBcIi4vc2FzL0Jsb2JTQVNTaWduYXR1cmVWYWx1ZXNcIjtcbmltcG9ydCB7IEJsb2JMZWFzZUNsaWVudCB9IGZyb20gXCIuL0Jsb2JMZWFzZUNsaWVudFwiO1xuLyoqXG4gKiBBIEJsb2JDbGllbnQgcmVwcmVzZW50cyBhIFVSTCB0byBhbiBBenVyZSBTdG9yYWdlIGJsb2I7IHRoZSBibG9iIG1heSBiZSBhIGJsb2NrIGJsb2IsXG4gKiBhcHBlbmQgYmxvYiwgb3IgcGFnZSBibG9iLlxuICovXG5leHBvcnQgY2xhc3MgQmxvYkNsaWVudCBleHRlbmRzIFN0b3JhZ2VDbGllbnQge1xuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBibG9iLlxuICAgICAqL1xuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIHN0b3JhZ2UgY29udGFpbmVyIHRoZSBibG9iIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAgICAgKi9cbiAgICBnZXQgY29udGFpbmVyTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lck5hbWU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHVybE9yQ29ubmVjdGlvblN0cmluZywgY3JlZGVudGlhbE9yUGlwZWxpbmVPckNvbnRhaW5lck5hbWUsIGJsb2JOYW1lT3JPcHRpb25zLCBcbiAgICAvLyBMZWdhY3ksIG5vIGZpeCBmb3IgZXNsaW50IGVycm9yIHdpdGhvdXQgYnJlYWtpbmcuIERpc2FibGUgaXQgZm9yIHRoaXMgaW50ZXJmYWNlLlxuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYXp1cmUvYXp1cmUtc2RrL3RzLW5hbWluZy1vcHRpb25zKi9cbiAgICBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBsZXQgcGlwZWxpbmU7XG4gICAgICAgIGxldCB1cmw7XG4gICAgICAgIGlmIChpc1BpcGVsaW5lTGlrZShjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZSkpIHtcbiAgICAgICAgICAgIC8vICh1cmw6IHN0cmluZywgcGlwZWxpbmU6IFBpcGVsaW5lKVxuICAgICAgICAgICAgdXJsID0gdXJsT3JDb25uZWN0aW9uU3RyaW5nO1xuICAgICAgICAgICAgcGlwZWxpbmUgPSBjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoaXNOb2RlICYmIGNyZWRlbnRpYWxPclBpcGVsaW5lT3JDb250YWluZXJOYW1lIGluc3RhbmNlb2YgU3RvcmFnZVNoYXJlZEtleUNyZWRlbnRpYWwpIHx8XG4gICAgICAgICAgICBjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZSBpbnN0YW5jZW9mIEFub255bW91c0NyZWRlbnRpYWwgfHxcbiAgICAgICAgICAgIGlzVG9rZW5DcmVkZW50aWFsKGNyZWRlbnRpYWxPclBpcGVsaW5lT3JDb250YWluZXJOYW1lKSkge1xuICAgICAgICAgICAgLy8gKHVybDogc3RyaW5nLCBjcmVkZW50aWFsPzogU3RvcmFnZVNoYXJlZEtleUNyZWRlbnRpYWwgfCBBbm9ueW1vdXNDcmVkZW50aWFsIHwgVG9rZW5DcmVkZW50aWFsLCBvcHRpb25zPzogU3RvcmFnZVBpcGVsaW5lT3B0aW9ucylcbiAgICAgICAgICAgIHVybCA9IHVybE9yQ29ubmVjdGlvblN0cmluZztcbiAgICAgICAgICAgIG9wdGlvbnMgPSBibG9iTmFtZU9yT3B0aW9ucztcbiAgICAgICAgICAgIHBpcGVsaW5lID0gbmV3UGlwZWxpbmUoY3JlZGVudGlhbE9yUGlwZWxpbmVPckNvbnRhaW5lck5hbWUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZSAmJlxuICAgICAgICAgICAgdHlwZW9mIGNyZWRlbnRpYWxPclBpcGVsaW5lT3JDb250YWluZXJOYW1lICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAvLyAodXJsOiBzdHJpbmcsIGNyZWRlbnRpYWw/OiBTdG9yYWdlU2hhcmVkS2V5Q3JlZGVudGlhbCB8IEFub255bW91c0NyZWRlbnRpYWwgfCBUb2tlbkNyZWRlbnRpYWwsIG9wdGlvbnM/OiBTdG9yYWdlUGlwZWxpbmVPcHRpb25zKVxuICAgICAgICAgICAgLy8gVGhlIHNlY29uZCBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkLiBVc2UgYW5vbnltb3VzIGNyZWRlbnRpYWwuXG4gICAgICAgICAgICB1cmwgPSB1cmxPckNvbm5lY3Rpb25TdHJpbmc7XG4gICAgICAgICAgICBpZiAoYmxvYk5hbWVPck9wdGlvbnMgJiYgdHlwZW9mIGJsb2JOYW1lT3JPcHRpb25zICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IGJsb2JOYW1lT3JPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGlwZWxpbmUgPSBuZXdQaXBlbGluZShuZXcgQW5vbnltb3VzQ3JlZGVudGlhbCgpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZSAmJlxuICAgICAgICAgICAgdHlwZW9mIGNyZWRlbnRpYWxPclBpcGVsaW5lT3JDb250YWluZXJOYW1lID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICBibG9iTmFtZU9yT3B0aW9ucyAmJlxuICAgICAgICAgICAgdHlwZW9mIGJsb2JOYW1lT3JPcHRpb25zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAvLyAoY29ubmVjdGlvblN0cmluZzogc3RyaW5nLCBjb250YWluZXJOYW1lOiBzdHJpbmcsIGJsb2JOYW1lOiBzdHJpbmcsIG9wdGlvbnM/OiBTdG9yYWdlUGlwZWxpbmVPcHRpb25zKVxuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyTmFtZSA9IGNyZWRlbnRpYWxPclBpcGVsaW5lT3JDb250YWluZXJOYW1lO1xuICAgICAgICAgICAgY29uc3QgYmxvYk5hbWUgPSBibG9iTmFtZU9yT3B0aW9ucztcbiAgICAgICAgICAgIGNvbnN0IGV4dHJhY3RlZENyZWRzID0gZXh0cmFjdENvbm5lY3Rpb25TdHJpbmdQYXJ0cyh1cmxPckNvbm5lY3Rpb25TdHJpbmcpO1xuICAgICAgICAgICAgaWYgKGV4dHJhY3RlZENyZWRzLmtpbmQgPT09IFwiQWNjb3VudENvbm5TdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2hhcmVkS2V5Q3JlZGVudGlhbCA9IG5ldyBTdG9yYWdlU2hhcmVkS2V5Q3JlZGVudGlhbChleHRyYWN0ZWRDcmVkcy5hY2NvdW50TmFtZSwgZXh0cmFjdGVkQ3JlZHMuYWNjb3VudEtleSk7XG4gICAgICAgICAgICAgICAgICAgIHVybCA9IGFwcGVuZFRvVVJMUGF0aChhcHBlbmRUb1VSTFBhdGgoZXh0cmFjdGVkQ3JlZHMudXJsLCBlbmNvZGVVUklDb21wb25lbnQoY29udGFpbmVyTmFtZSkpLCBlbmNvZGVVUklDb21wb25lbnQoYmxvYk5hbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLnByb3h5T3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wcm94eU9wdGlvbnMgPSBnZXREZWZhdWx0UHJveHlTZXR0aW5ncyhleHRyYWN0ZWRDcmVkcy5wcm94eVVyaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcGlwZWxpbmUgPSBuZXdQaXBlbGluZShzaGFyZWRLZXlDcmVkZW50aWFsLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFjY291bnQgY29ubmVjdGlvbiBzdHJpbmcgaXMgb25seSBzdXBwb3J0ZWQgaW4gTm9kZS5qcyBlbnZpcm9ubWVudFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChleHRyYWN0ZWRDcmVkcy5raW5kID09PSBcIlNBU0Nvbm5TdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHVybCA9XG4gICAgICAgICAgICAgICAgICAgIGFwcGVuZFRvVVJMUGF0aChhcHBlbmRUb1VSTFBhdGgoZXh0cmFjdGVkQ3JlZHMudXJsLCBlbmNvZGVVUklDb21wb25lbnQoY29udGFpbmVyTmFtZSkpLCBlbmNvZGVVUklDb21wb25lbnQoYmxvYk5hbWUpKSArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIj9cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRyYWN0ZWRDcmVkcy5hY2NvdW50U2FzO1xuICAgICAgICAgICAgICAgIHBpcGVsaW5lID0gbmV3UGlwZWxpbmUobmV3IEFub255bW91c0NyZWRlbnRpYWwoKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb25uZWN0aW9uIHN0cmluZyBtdXN0IGJlIGVpdGhlciBhbiBBY2NvdW50IGNvbm5lY3Rpb24gc3RyaW5nIG9yIGEgU0FTIGNvbm5lY3Rpb24gc3RyaW5nXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0aW5nIG5vbi1lbXB0eSBzdHJpbmdzIGZvciBjb250YWluZXJOYW1lIGFuZCBibG9iTmFtZSBwYXJhbWV0ZXJzXCIpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKHVybCwgcGlwZWxpbmUpO1xuICAgICAgICAoeyBibG9iTmFtZTogdGhpcy5fbmFtZSwgY29udGFpbmVyTmFtZTogdGhpcy5fY29udGFpbmVyTmFtZSB9ID1cbiAgICAgICAgICAgIHRoaXMuZ2V0QmxvYkFuZENvbnRhaW5lck5hbWVzRnJvbVVybCgpKTtcbiAgICAgICAgdGhpcy5ibG9iQ29udGV4dCA9IHRoaXMuc3RvcmFnZUNsaWVudENvbnRleHQuYmxvYjtcbiAgICAgICAgdGhpcy5fc25hcHNob3QgPSBnZXRVUkxQYXJhbWV0ZXIodGhpcy51cmwsIFVSTENvbnN0YW50cy5QYXJhbWV0ZXJzLlNOQVBTSE9UKTtcbiAgICAgICAgdGhpcy5fdmVyc2lvbklkID0gZ2V0VVJMUGFyYW1ldGVyKHRoaXMudXJsLCBVUkxDb25zdGFudHMuUGFyYW1ldGVycy5WRVJTSU9OSUQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEJsb2JDbGllbnQgb2JqZWN0IGlkZW50aWNhbCB0byB0aGUgc291cmNlIGJ1dCB3aXRoIHRoZSBzcGVjaWZpZWQgc25hcHNob3QgdGltZXN0YW1wLlxuICAgICAqIFByb3ZpZGUgXCJcIiB3aWxsIHJlbW92ZSB0aGUgc25hcHNob3QgYW5kIHJldHVybiBhIENsaWVudCB0byB0aGUgYmFzZSBibG9iLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNuYXBzaG90IC0gVGhlIHNuYXBzaG90IHRpbWVzdGFtcC5cbiAgICAgKiBAcmV0dXJucyBBIG5ldyBCbG9iQ2xpZW50IG9iamVjdCBpZGVudGljYWwgdG8gdGhlIHNvdXJjZSBidXQgd2l0aCB0aGUgc3BlY2lmaWVkIHNuYXBzaG90IHRpbWVzdGFtcFxuICAgICAqL1xuICAgIHdpdGhTbmFwc2hvdChzbmFwc2hvdCkge1xuICAgICAgICByZXR1cm4gbmV3IEJsb2JDbGllbnQoc2V0VVJMUGFyYW1ldGVyKHRoaXMudXJsLCBVUkxDb25zdGFudHMuUGFyYW1ldGVycy5TTkFQU0hPVCwgc25hcHNob3QubGVuZ3RoID09PSAwID8gdW5kZWZpbmVkIDogc25hcHNob3QpLCB0aGlzLnBpcGVsaW5lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBCbG9iQ2xpZW50IG9iamVjdCBwb2ludGluZyB0byBhIHZlcnNpb24gb2YgdGhpcyBibG9iLlxuICAgICAqIFByb3ZpZGUgXCJcIiB3aWxsIHJlbW92ZSB0aGUgdmVyc2lvbklkIGFuZCByZXR1cm4gYSBDbGllbnQgdG8gdGhlIGJhc2UgYmxvYi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2ZXJzaW9uSWQgLSBUaGUgdmVyc2lvbklkLlxuICAgICAqIEByZXR1cm5zIEEgbmV3IEJsb2JDbGllbnQgb2JqZWN0IHBvaW50aW5nIHRvIHRoZSB2ZXJzaW9uIG9mIHRoaXMgYmxvYi5cbiAgICAgKi9cbiAgICB3aXRoVmVyc2lvbih2ZXJzaW9uSWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCbG9iQ2xpZW50KHNldFVSTFBhcmFtZXRlcih0aGlzLnVybCwgVVJMQ29uc3RhbnRzLlBhcmFtZXRlcnMuVkVSU0lPTklELCB2ZXJzaW9uSWQubGVuZ3RoID09PSAwID8gdW5kZWZpbmVkIDogdmVyc2lvbklkKSwgdGhpcy5waXBlbGluZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBBcHBlbmRCbG9iQ2xpZW50IG9iamVjdC5cbiAgICAgKlxuICAgICAqL1xuICAgIGdldEFwcGVuZEJsb2JDbGllbnQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXBwZW5kQmxvYkNsaWVudCh0aGlzLnVybCwgdGhpcy5waXBlbGluZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBCbG9ja0Jsb2JDbGllbnQgb2JqZWN0LlxuICAgICAqXG4gICAgICovXG4gICAgZ2V0QmxvY2tCbG9iQ2xpZW50KCkge1xuICAgICAgICByZXR1cm4gbmV3IEJsb2NrQmxvYkNsaWVudCh0aGlzLnVybCwgdGhpcy5waXBlbGluZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBQYWdlQmxvYkNsaWVudCBvYmplY3QuXG4gICAgICpcbiAgICAgKi9cbiAgICBnZXRQYWdlQmxvYkNsaWVudCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYWdlQmxvYkNsaWVudCh0aGlzLnVybCwgdGhpcy5waXBlbGluZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWRzIG9yIGRvd25sb2FkcyBhIGJsb2IgZnJvbSB0aGUgc3lzdGVtLCBpbmNsdWRpbmcgaXRzIG1ldGFkYXRhIGFuZCBwcm9wZXJ0aWVzLlxuICAgICAqIFlvdSBjYW4gYWxzbyBjYWxsIEdldCBCbG9iIHRvIHJlYWQgYSBzbmFwc2hvdC5cbiAgICAgKlxuICAgICAqICogSW4gTm9kZS5qcywgZGF0YSByZXR1cm5zIGluIGEgUmVhZGFibGUgc3RyZWFtIHJlYWRhYmxlU3RyZWFtQm9keVxuICAgICAqICogSW4gYnJvd3NlcnMsIGRhdGEgcmV0dXJucyBpbiBhIHByb21pc2UgYmxvYkJvZHlcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL2dldC1ibG9iXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gRnJvbSB3aGljaCBwb3NpdGlvbiBvZiB0aGUgYmxvYiB0byBkb3dubG9hZCwgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDBcbiAgICAgKiBAcGFyYW0gY291bnQgLSBIb3cgbXVjaCBkYXRhIHRvIGJlIGRvd25sb2FkZWQsIGdyZWF0ZXIgdGhhbiAwLiBXaWxsIGRvd25sb2FkIHRvIHRoZSBlbmQgd2hlbiB1bmRlZmluZWRcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIG9wdGlvbnMgdG8gQmxvYiBEb3dubG9hZCBvcGVyYXRpb24uXG4gICAgICpcbiAgICAgKlxuICAgICAqIEV4YW1wbGUgdXNhZ2UgKE5vZGUuanMpOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAvLyBEb3dubG9hZCBhbmQgY29udmVydCBhIGJsb2IgdG8gYSBzdHJpbmdcbiAgICAgKiBjb25zdCBkb3dubG9hZEJsb2NrQmxvYlJlc3BvbnNlID0gYXdhaXQgYmxvYkNsaWVudC5kb3dubG9hZCgpO1xuICAgICAqIGNvbnN0IGRvd25sb2FkZWQgPSBhd2FpdCBzdHJlYW1Ub0J1ZmZlcihkb3dubG9hZEJsb2NrQmxvYlJlc3BvbnNlLnJlYWRhYmxlU3RyZWFtQm9keSk7XG4gICAgICogY29uc29sZS5sb2coXCJEb3dubG9hZGVkIGJsb2IgY29udGVudDpcIiwgZG93bmxvYWRlZC50b1N0cmluZygpKTtcbiAgICAgKlxuICAgICAqIGFzeW5jIGZ1bmN0aW9uIHN0cmVhbVRvQnVmZmVyKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgICogcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgKiBjb25zdCBjaHVua3MgPSBbXTtcbiAgICAgKiByZWFkYWJsZVN0cmVhbS5vbihcImRhdGFcIiwgKGRhdGEpID0+IHtcbiAgICAgKiBjaHVua3MucHVzaChkYXRhIGluc3RhbmNlb2YgQnVmZmVyID8gZGF0YSA6IEJ1ZmZlci5mcm9tKGRhdGEpKTtcbiAgICAgKiB9KTtcbiAgICAgKiByZWFkYWJsZVN0cmVhbS5vbihcImVuZFwiLCAoKSA9PiB7XG4gICAgICogcmVzb2x2ZShCdWZmZXIuY29uY2F0KGNodW5rcykpO1xuICAgICAqIH0pO1xuICAgICAqIHJlYWRhYmxlU3RyZWFtLm9uKFwiZXJyb3JcIiwgcmVqZWN0KTtcbiAgICAgKiB9KTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBFeGFtcGxlIHVzYWdlIChicm93c2VyKTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogLy8gRG93bmxvYWQgYW5kIGNvbnZlcnQgYSBibG9iIHRvIGEgc3RyaW5nXG4gICAgICogY29uc3QgZG93bmxvYWRCbG9ja0Jsb2JSZXNwb25zZSA9IGF3YWl0IGJsb2JDbGllbnQuZG93bmxvYWQoKTtcbiAgICAgKiBjb25zdCBkb3dubG9hZGVkID0gYXdhaXQgYmxvYlRvU3RyaW5nKGF3YWl0IGRvd25sb2FkQmxvY2tCbG9iUmVzcG9uc2UuYmxvYkJvZHkpO1xuICAgICAqIGNvbnNvbGUubG9nKFxuICAgICAqICAgXCJEb3dubG9hZGVkIGJsb2IgY29udGVudFwiLFxuICAgICAqICAgZG93bmxvYWRlZFxuICAgICAqICk7XG4gICAgICpcbiAgICAgKiBhc3luYyBmdW5jdGlvbiBibG9iVG9TdHJpbmcoYmxvYjogQmxvYik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICogICBjb25zdCBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgKiAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgKiAgICAgZmlsZVJlYWRlci5vbmxvYWRlbmQgPSAoZXY6IGFueSkgPT4ge1xuICAgICAqICAgICAgIHJlc29sdmUoZXYudGFyZ2V0IS5yZXN1bHQpO1xuICAgICAqICAgICB9O1xuICAgICAqICAgICBmaWxlUmVhZGVyLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICogICAgIGZpbGVSZWFkZXIucmVhZEFzVGV4dChibG9iKTtcbiAgICAgKiAgIH0pO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBhc3luYyBkb3dubG9hZChvZmZzZXQgPSAwLCBjb3VudCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIG9wdGlvbnMuY29uZGl0aW9ucyA9IG9wdGlvbnMuY29uZGl0aW9ucyB8fCB7fTtcbiAgICAgICAgb3B0aW9ucy5jb25kaXRpb25zID0gb3B0aW9ucy5jb25kaXRpb25zIHx8IHt9O1xuICAgICAgICBlbnN1cmVDcGtJZlNwZWNpZmllZChvcHRpb25zLmN1c3RvbWVyUHJvdmlkZWRLZXksIHRoaXMuaXNIdHRwcyk7XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKFwiQmxvYkNsaWVudC1kb3dubG9hZFwiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMuYmxvYkNvbnRleHQuZG93bmxvYWQoe1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgIGxlYXNlQWNjZXNzQ29uZGl0aW9uczogb3B0aW9ucy5jb25kaXRpb25zLFxuICAgICAgICAgICAgICAgIG1vZGlmaWVkQWNjZXNzQ29uZGl0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmNvbmRpdGlvbnMpLCB7IGlmVGFnczogKF9hID0gb3B0aW9ucy5jb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGFnQ29uZGl0aW9ucyB9KSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0T3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICBvbkRvd25sb2FkUHJvZ3Jlc3M6IGlzTm9kZSA/IHVuZGVmaW5lZCA6IG9wdGlvbnMub25Qcm9ncmVzcywgLy8gZm9yIE5vZGUuanMsIHByb2dyZXNzIGlzIHJlcG9ydGVkIGJ5IFJldHJpYWJsZVJlYWRhYmxlU3RyZWFtXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByYW5nZTogb2Zmc2V0ID09PSAwICYmICFjb3VudCA/IHVuZGVmaW5lZCA6IHJhbmdlVG9TdHJpbmcoeyBvZmZzZXQsIGNvdW50IH0pLFxuICAgICAgICAgICAgICAgIHJhbmdlR2V0Q29udGVudE1ENTogb3B0aW9ucy5yYW5nZUdldENvbnRlbnRNRDUsXG4gICAgICAgICAgICAgICAgcmFuZ2VHZXRDb250ZW50Q1JDNjQ6IG9wdGlvbnMucmFuZ2VHZXRDb250ZW50Q3JjNjQsXG4gICAgICAgICAgICAgICAgc25hcHNob3Q6IG9wdGlvbnMuc25hcHNob3QsXG4gICAgICAgICAgICAgICAgY3BrSW5mbzogb3B0aW9ucy5jdXN0b21lclByb3ZpZGVkS2V5LFxuICAgICAgICAgICAgICAgIHRyYWNpbmdPcHRpb25zOiB1cGRhdGVkT3B0aW9ucy50cmFjaW5nT3B0aW9ucyxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGNvbnN0IHdyYXBwZWRSZXMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlcyksIHsgX3Jlc3BvbnNlOiByZXMuX3Jlc3BvbnNlLCBvYmplY3RSZXBsaWNhdGlvbkRlc3RpbmF0aW9uUG9saWN5SWQ6IHJlcy5vYmplY3RSZXBsaWNhdGlvblBvbGljeUlkLCBvYmplY3RSZXBsaWNhdGlvblNvdXJjZVByb3BlcnRpZXM6IHBhcnNlT2JqZWN0UmVwbGljYXRpb25SZWNvcmQocmVzLm9iamVjdFJlcGxpY2F0aW9uUnVsZXMpIH0pO1xuICAgICAgICAgICAgLy8gUmV0dXJuIGJyb3dzZXIgcmVzcG9uc2UgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIGlmICghaXNOb2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdyYXBwZWRSZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSBzdXBwb3J0IHJldHJ5aW5nIHdoZW4gZG93bmxvYWQgc3RyZWFtIHVuZXhwZWN0ZWQgZW5kcyBpbiBOb2RlLmpzIHJ1bnRpbWVcbiAgICAgICAgICAgIC8vIEZvbGxvd2luZyBjb2RlIHNob3VsZG4ndCBiZSBidW5kbGVkIGludG8gYnJvd3NlciBidWlsZCwgaG93ZXZlciBzb21lXG4gICAgICAgICAgICAvLyBidW5kbGVycyBtYXkgdHJ5IHRvIGJ1bmRsZSBmb2xsb3dpbmcgY29kZSBhbmQgXCJGaWxlUmVhZFJlc3BvbnNlLnRzXCIuXG4gICAgICAgICAgICAvLyBJbiB0aGlzIGNhc2UsIFwiRmlsZURvd25sb2FkUmVzcG9uc2UuYnJvd3Nlci50c1wiIHdpbGwgYmUgdXNlZCBhcyBhIHNoaW0gb2YgXCJGaWxlRG93bmxvYWRSZXNwb25zZS50c1wiXG4gICAgICAgICAgICAvLyBUaGUgY29uZmlnIGlzIGluIHBhY2thZ2UuanNvbiBcImJyb3dzZXJcIiBmaWVsZFxuICAgICAgICAgICAgaWYgKG9wdGlvbnMubWF4UmV0cnlSZXF1ZXN0cyA9PT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMubWF4UmV0cnlSZXF1ZXN0cyA8IDApIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBEZWZhdWx0IHZhbHVlIG9yIG1ha2UgaXQgYSByZXF1aXJlZCBwYXJhbWV0ZXI/XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5tYXhSZXRyeVJlcXVlc3RzID0gREVGQVVMVF9NQVhfRE9XTkxPQURfUkVUUllfUkVRVUVTVFM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzLmNvbnRlbnRMZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBGaWxlIGRvd25sb2FkIHJlc3BvbnNlIGRvZXNuJ3QgY29udGFpbiB2YWxpZCBjb250ZW50IGxlbmd0aCBoZWFkZXJgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcmVzLmV0YWcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgRmlsZSBkb3dubG9hZCByZXNwb25zZSBkb2Vzbid0IGNvbnRhaW4gdmFsaWQgZXRhZyBoZWFkZXJgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgQmxvYkRvd25sb2FkUmVzcG9uc2Uod3JhcHBlZFJlcywgYXN5bmMgKHN0YXJ0KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWREb3dubG9hZE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxlYXNlQWNjZXNzQ29uZGl0aW9uczogb3B0aW9ucy5jb25kaXRpb25zLFxuICAgICAgICAgICAgICAgICAgICBtb2RpZmllZEFjY2Vzc0NvbmRpdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmTWF0Y2g6IG9wdGlvbnMuY29uZGl0aW9ucy5pZk1hdGNoIHx8IHJlcy5ldGFnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWZNb2RpZmllZFNpbmNlOiBvcHRpb25zLmNvbmRpdGlvbnMuaWZNb2RpZmllZFNpbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWZOb25lTWF0Y2g6IG9wdGlvbnMuY29uZGl0aW9ucy5pZk5vbmVNYXRjaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmVW5tb2RpZmllZFNpbmNlOiBvcHRpb25zLmNvbmRpdGlvbnMuaWZVbm1vZGlmaWVkU2luY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZlRhZ3M6IChfYSA9IG9wdGlvbnMuY29uZGl0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRhZ0NvbmRpdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiByYW5nZVRvU3RyaW5nKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiBvZmZzZXQgKyByZXMuY29udGVudExlbmd0aCAtIHN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBzdGFydCxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlR2V0Q29udGVudE1ENTogb3B0aW9ucy5yYW5nZUdldENvbnRlbnRNRDUsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlR2V0Q29udGVudENSQzY0OiBvcHRpb25zLnJhbmdlR2V0Q29udGVudENyYzY0LFxuICAgICAgICAgICAgICAgICAgICBzbmFwc2hvdDogb3B0aW9ucy5zbmFwc2hvdCxcbiAgICAgICAgICAgICAgICAgICAgY3BrSW5mbzogb3B0aW9ucy5jdXN0b21lclByb3ZpZGVkS2V5LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gRGVidWcgcHVycG9zZSBvbmx5XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgLy8gICBgUmVhZCBmcm9tIGludGVybmFsIHN0cmVhbSwgcmFuZ2U6ICR7XG4gICAgICAgICAgICAgICAgLy8gICAgIHVwZGF0ZWRPcHRpb25zLnJhbmdlXG4gICAgICAgICAgICAgICAgLy8gICB9LCBvcHRpb25zOiAke0pTT04uc3RyaW5naWZ5KHVwZGF0ZWRPcHRpb25zKX1gXG4gICAgICAgICAgICAgICAgLy8gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGF3YWl0IHRoaXMuYmxvYkNvbnRleHQuZG93bmxvYWQoT2JqZWN0LmFzc2lnbih7IGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsIH0sIHVwZGF0ZWREb3dubG9hZE9wdGlvbnMpKSkucmVhZGFibGVTdHJlYW1Cb2R5O1xuICAgICAgICAgICAgfSwgb2Zmc2V0LCByZXMuY29udGVudExlbmd0aCwge1xuICAgICAgICAgICAgICAgIG1heFJldHJ5UmVxdWVzdHM6IG9wdGlvbnMubWF4UmV0cnlSZXF1ZXN0cyxcbiAgICAgICAgICAgICAgICBvblByb2dyZXNzOiBvcHRpb25zLm9uUHJvZ3Jlc3MsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgQXp1cmUgYmxvYiByZXNvdXJjZSByZXByZXNlbnRlZCBieSB0aGlzIGNsaWVudCBleGlzdHM7IGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKlxuICAgICAqIE5PVEU6IHVzZSB0aGlzIGZ1bmN0aW9uIHdpdGggY2FyZSBzaW5jZSBhbiBleGlzdGluZyBibG9iIG1pZ2h0IGJlIGRlbGV0ZWQgYnkgb3RoZXIgY2xpZW50cyBvclxuICAgICAqIGFwcGxpY2F0aW9ucy4gVmljZSB2ZXJzYSBuZXcgYmxvYnMgbWlnaHQgYmUgYWRkZWQgYnkgb3RoZXIgY2xpZW50cyBvciBhcHBsaWNhdGlvbnMgYWZ0ZXIgdGhpc1xuICAgICAqIGZ1bmN0aW9uIGNvbXBsZXRlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gb3B0aW9ucyB0byBFeGlzdHMgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIGV4aXN0cyhvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJCbG9iQ2xpZW50LWV4aXN0c1wiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZW5zdXJlQ3BrSWZTcGVjaWZpZWQob3B0aW9ucy5jdXN0b21lclByb3ZpZGVkS2V5LCB0aGlzLmlzSHR0cHMpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZ2V0UHJvcGVydGllcyh7XG4gICAgICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgICAgICBjdXN0b21lclByb3ZpZGVkS2V5OiBvcHRpb25zLmN1c3RvbWVyUHJvdmlkZWRLZXksXG4gICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnM6IG9wdGlvbnMuY29uZGl0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5zdGF0dXNDb2RlID09PSA0MDQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRXhwZWN0ZWQgZXhjZXB0aW9uIHdoZW4gY2hlY2tpbmcgYmxvYiBleGlzdGVuY2VcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChlLnN0YXR1c0NvZGUgPT09IDQwOSAmJlxuICAgICAgICAgICAgICAgICAgICAoZS5kZXRhaWxzLmVycm9yQ29kZSA9PT0gQmxvYlVzZXNDdXN0b21lclNwZWNpZmllZEVuY3J5cHRpb25Nc2cgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZGV0YWlscy5lcnJvckNvZGUgPT09IEJsb2JEb2VzTm90VXNlQ3VzdG9tZXJTcGVjaWZpZWRFbmNyeXB0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBFeHBlY3RlZCBleGNlcHRpb24gd2hlbiBjaGVja2luZyBibG9iIGV4aXN0ZW5jZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWxsIHVzZXItZGVmaW5lZCBtZXRhZGF0YSwgc3RhbmRhcmQgSFRUUCBwcm9wZXJ0aWVzLCBhbmQgc3lzdGVtIHByb3BlcnRpZXNcbiAgICAgKiBmb3IgdGhlIGJsb2IuIEl0IGRvZXMgbm90IHJldHVybiB0aGUgY29udGVudCBvZiB0aGUgYmxvYi5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9nZXQtYmxvYi1wcm9wZXJ0aWVzXG4gICAgICpcbiAgICAgKiBXQVJOSU5HOiBUaGUgYG1ldGFkYXRhYCBvYmplY3QgcmV0dXJuZWQgaW4gdGhlIHJlc3BvbnNlIHdpbGwgaGF2ZSBpdHMga2V5cyBpbiBsb3dlcmNhc2UsIGV2ZW4gaWZcbiAgICAgKiB0aGV5IG9yaWdpbmFsbHkgY29udGFpbmVkIHVwcGVyY2FzZSBjaGFyYWN0ZXJzLiBUaGlzIGRpZmZlcnMgZnJvbSB0aGUgbWV0YWRhdGEga2V5cyByZXR1cm5lZCBieVxuICAgICAqIHRoZSBtZXRob2RzIG9mIHtAbGluayBDb250YWluZXJDbGllbnR9IHRoYXQgbGlzdCBibG9icyB1c2luZyB0aGUgYGluY2x1ZGVNZXRhZGF0YWAgb3B0aW9uLCB3aGljaFxuICAgICAqIHdpbGwgcmV0YWluIHRoZWlyIG9yaWdpbmFsIGNhc2luZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgb3B0aW9ucyB0byBHZXQgUHJvcGVydGllcyBvcGVyYXRpb24uXG4gICAgICovXG4gICAgYXN5bmMgZ2V0UHJvcGVydGllcyhvcHRpb25zID0ge30pIHtcbiAgICAgICAgb3B0aW9ucy5jb25kaXRpb25zID0gb3B0aW9ucy5jb25kaXRpb25zIHx8IHt9O1xuICAgICAgICBlbnN1cmVDcGtJZlNwZWNpZmllZChvcHRpb25zLmN1c3RvbWVyUHJvdmlkZWRLZXksIHRoaXMuaXNIdHRwcyk7XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKFwiQmxvYkNsaWVudC1nZXRQcm9wZXJ0aWVzXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXNzZXJ0UmVzcG9uc2UoYXdhaXQgdGhpcy5ibG9iQ29udGV4dC5nZXRQcm9wZXJ0aWVzKHtcbiAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgICAgICAgICAgICBsZWFzZUFjY2Vzc0NvbmRpdGlvbnM6IG9wdGlvbnMuY29uZGl0aW9ucyxcbiAgICAgICAgICAgICAgICBtb2RpZmllZEFjY2Vzc0NvbmRpdGlvbnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucy5jb25kaXRpb25zKSwgeyBpZlRhZ3M6IChfYSA9IG9wdGlvbnMuY29uZGl0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRhZ0NvbmRpdGlvbnMgfSksXG4gICAgICAgICAgICAgICAgY3BrSW5mbzogb3B0aW9ucy5jdXN0b21lclByb3ZpZGVkS2V5LFxuICAgICAgICAgICAgICAgIHRyYWNpbmdPcHRpb25zOiB1cGRhdGVkT3B0aW9ucy50cmFjaW5nT3B0aW9ucyxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlcyksIHsgX3Jlc3BvbnNlOiByZXMuX3Jlc3BvbnNlLCBvYmplY3RSZXBsaWNhdGlvbkRlc3RpbmF0aW9uUG9saWN5SWQ6IHJlcy5vYmplY3RSZXBsaWNhdGlvblBvbGljeUlkLCBvYmplY3RSZXBsaWNhdGlvblNvdXJjZVByb3BlcnRpZXM6IHBhcnNlT2JqZWN0UmVwbGljYXRpb25SZWNvcmQocmVzLm9iamVjdFJlcGxpY2F0aW9uUnVsZXMpIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFya3MgdGhlIHNwZWNpZmllZCBibG9iIG9yIHNuYXBzaG90IGZvciBkZWxldGlvbi4gVGhlIGJsb2IgaXMgbGF0ZXIgZGVsZXRlZFxuICAgICAqIGR1cmluZyBnYXJiYWdlIGNvbGxlY3Rpb24uIE5vdGUgdGhhdCBpbiBvcmRlciB0byBkZWxldGUgYSBibG9iLCB5b3UgbXVzdCBkZWxldGVcbiAgICAgKiBhbGwgb2YgaXRzIHNuYXBzaG90cy4gWW91IGNhbiBkZWxldGUgYm90aCBhdCB0aGUgc2FtZSB0aW1lIHdpdGggdGhlIERlbGV0ZVxuICAgICAqIEJsb2Igb3BlcmF0aW9uLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL2RlbGV0ZS1ibG9iXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIG9wdGlvbnMgdG8gQmxvYiBEZWxldGUgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIGRlbGV0ZShvcHRpb25zID0ge30pIHtcbiAgICAgICAgb3B0aW9ucy5jb25kaXRpb25zID0gb3B0aW9ucy5jb25kaXRpb25zIHx8IHt9O1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2JDbGllbnQtZGVsZXRlXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMuYmxvYkNvbnRleHQuZGVsZXRlKHtcbiAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgICAgICAgICAgICBkZWxldGVTbmFwc2hvdHM6IG9wdGlvbnMuZGVsZXRlU25hcHNob3RzLFxuICAgICAgICAgICAgICAgIGxlYXNlQWNjZXNzQ29uZGl0aW9uczogb3B0aW9ucy5jb25kaXRpb25zLFxuICAgICAgICAgICAgICAgIG1vZGlmaWVkQWNjZXNzQ29uZGl0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmNvbmRpdGlvbnMpLCB7IGlmVGFnczogKF9hID0gb3B0aW9ucy5jb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGFnQ29uZGl0aW9ucyB9KSxcbiAgICAgICAgICAgICAgICB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXJrcyB0aGUgc3BlY2lmaWVkIGJsb2Igb3Igc25hcHNob3QgZm9yIGRlbGV0aW9uIGlmIGl0IGV4aXN0cy4gVGhlIGJsb2IgaXMgbGF0ZXIgZGVsZXRlZFxuICAgICAqIGR1cmluZyBnYXJiYWdlIGNvbGxlY3Rpb24uIE5vdGUgdGhhdCBpbiBvcmRlciB0byBkZWxldGUgYSBibG9iLCB5b3UgbXVzdCBkZWxldGVcbiAgICAgKiBhbGwgb2YgaXRzIHNuYXBzaG90cy4gWW91IGNhbiBkZWxldGUgYm90aCBhdCB0aGUgc2FtZSB0aW1lIHdpdGggdGhlIERlbGV0ZVxuICAgICAqIEJsb2Igb3BlcmF0aW9uLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL2RlbGV0ZS1ibG9iXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIG9wdGlvbnMgdG8gQmxvYiBEZWxldGUgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIGRlbGV0ZUlmRXhpc3RzKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2JDbGllbnQtZGVsZXRlSWZFeGlzdHNcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhc3NlcnRSZXNwb25zZShhd2FpdCB0aGlzLmRlbGV0ZSh1cGRhdGVkT3B0aW9ucykpO1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBzdWNjZWVkZWQ6IHRydWUgfSwgcmVzKSwgeyBfcmVzcG9uc2U6IHJlcy5fcmVzcG9uc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGlmICgoKF9hID0gZS5kZXRhaWxzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZXJyb3JDb2RlKSA9PT0gXCJCbG9iTm90Rm91bmRcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgc3VjY2VlZGVkOiBmYWxzZSB9LCAoX2IgPSBlLnJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucGFyc2VkSGVhZGVycyksIHsgX3Jlc3BvbnNlOiBlLnJlc3BvbnNlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzdG9yZXMgdGhlIGNvbnRlbnRzIGFuZCBtZXRhZGF0YSBvZiBzb2Z0IGRlbGV0ZWQgYmxvYiBhbmQgYW55IGFzc29jaWF0ZWRcbiAgICAgKiBzb2Z0IGRlbGV0ZWQgc25hcHNob3RzLiBVbmRlbGV0ZSBCbG9iIGlzIHN1cHBvcnRlZCBvbmx5IG9uIHZlcnNpb24gMjAxNy0wNy0yOVxuICAgICAqIG9yIGxhdGVyLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL3VuZGVsZXRlLWJsb2JcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgb3B0aW9ucyB0byBCbG9iIFVuZGVsZXRlIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyB1bmRlbGV0ZShvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJCbG9iQ2xpZW50LXVuZGVsZXRlXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMuYmxvYkNvbnRleHQudW5kZWxldGUoe1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgIHRyYWNpbmdPcHRpb25zOiB1cGRhdGVkT3B0aW9ucy50cmFjaW5nT3B0aW9ucyxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgc3lzdGVtIHByb3BlcnRpZXMgb24gdGhlIGJsb2IuXG4gICAgICpcbiAgICAgKiBJZiBubyB2YWx1ZSBwcm92aWRlZCwgb3Igbm8gdmFsdWUgcHJvdmlkZWQgZm9yIHRoZSBzcGVjaWZpZWQgYmxvYiBIVFRQIGhlYWRlcnMsXG4gICAgICogdGhlc2UgYmxvYiBIVFRQIGhlYWRlcnMgd2l0aG91dCBhIHZhbHVlIHdpbGwgYmUgY2xlYXJlZC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9zZXQtYmxvYi1wcm9wZXJ0aWVzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYmxvYkhUVFBIZWFkZXJzIC0gSWYgbm8gdmFsdWUgcHJvdmlkZWQsIG9yIG5vIHZhbHVlIHByb3ZpZGVkIGZvclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNwZWNpZmllZCBibG9iIEhUVFAgaGVhZGVycywgdGhlc2UgYmxvYiBIVFRQXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzIHdpdGhvdXQgYSB2YWx1ZSB3aWxsIGJlIGNsZWFyZWQuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBIGNvbW1vbiBoZWFkZXIgdG8gc2V0IGlzIGBibG9iQ29udGVudFR5cGVgXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGluZyB0aGUgYnJvd3NlciB0byBwcm92aWRlIGZ1bmN0aW9uYWxpdHlcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VkIG9uIGZpbGUgdHlwZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIG9wdGlvbnMgdG8gQmxvYiBTZXQgSFRUUCBIZWFkZXJzIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBzZXRIVFRQSGVhZGVycyhibG9iSFRUUEhlYWRlcnMsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBvcHRpb25zLmNvbmRpdGlvbnMgPSBvcHRpb25zLmNvbmRpdGlvbnMgfHwge307XG4gICAgICAgIGVuc3VyZUNwa0lmU3BlY2lmaWVkKG9wdGlvbnMuY3VzdG9tZXJQcm92aWRlZEtleSwgdGhpcy5pc0h0dHBzKTtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJCbG9iQ2xpZW50LXNldEhUVFBIZWFkZXJzXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMuYmxvYkNvbnRleHQuc2V0SHR0cEhlYWRlcnMoe1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgIGJsb2JIdHRwSGVhZGVyczogYmxvYkhUVFBIZWFkZXJzLFxuICAgICAgICAgICAgICAgIGxlYXNlQWNjZXNzQ29uZGl0aW9uczogb3B0aW9ucy5jb25kaXRpb25zLFxuICAgICAgICAgICAgICAgIG1vZGlmaWVkQWNjZXNzQ29uZGl0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmNvbmRpdGlvbnMpLCB7IGlmVGFnczogKF9hID0gb3B0aW9ucy5jb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGFnQ29uZGl0aW9ucyB9KSxcbiAgICAgICAgICAgICAgICAvLyBjcGtJbmZvOiBvcHRpb25zLmN1c3RvbWVyUHJvdmlkZWRLZXksIC8vIENQSyBpcyBub3QgaW5jbHVkZWQgaW4gU3dhZ2dlciwgc2hvdWxkIGNoYW5nZSB0aGlzIGJhY2sgd2hlbiB0aGlzIGlzc3VlIGlzIGZpeGVkIGluIFN3YWdnZXIuXG4gICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB1c2VyLWRlZmluZWQgbWV0YWRhdGEgZm9yIHRoZSBzcGVjaWZpZWQgYmxvYiBhcyBvbmUgb3IgbW9yZSBuYW1lLXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogSWYgbm8gb3B0aW9uIHByb3ZpZGVkLCBvciBubyBtZXRhZGF0YSBkZWZpbmVkIGluIHRoZSBwYXJhbWV0ZXIsIHRoZSBibG9iXG4gICAgICogbWV0YWRhdGEgd2lsbCBiZSByZW1vdmVkLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL3NldC1ibG9iLW1ldGFkYXRhXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWV0YWRhdGEgLSBSZXBsYWNlIGV4aXN0aW5nIG1ldGFkYXRhIHdpdGggdGhpcyB2YWx1ZS5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBubyB2YWx1ZSBwcm92aWRlZCB0aGUgZXhpc3RpbmcgbWV0YWRhdGEgd2lsbCBiZSByZW1vdmVkLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgb3B0aW9ucyB0byBTZXQgTWV0YWRhdGEgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIHNldE1ldGFkYXRhKG1ldGFkYXRhLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgb3B0aW9ucy5jb25kaXRpb25zID0gb3B0aW9ucy5jb25kaXRpb25zIHx8IHt9O1xuICAgICAgICBlbnN1cmVDcGtJZlNwZWNpZmllZChvcHRpb25zLmN1c3RvbWVyUHJvdmlkZWRLZXksIHRoaXMuaXNIdHRwcyk7XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKFwiQmxvYkNsaWVudC1zZXRNZXRhZGF0YVwiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiBhc3NlcnRSZXNwb25zZShhd2FpdCB0aGlzLmJsb2JDb250ZXh0LnNldE1ldGFkYXRhKHtcbiAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgICAgICAgICAgICBsZWFzZUFjY2Vzc0NvbmRpdGlvbnM6IG9wdGlvbnMuY29uZGl0aW9ucyxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAgICAgICAgICBtb2RpZmllZEFjY2Vzc0NvbmRpdGlvbnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucy5jb25kaXRpb25zKSwgeyBpZlRhZ3M6IChfYSA9IG9wdGlvbnMuY29uZGl0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRhZ0NvbmRpdGlvbnMgfSksXG4gICAgICAgICAgICAgICAgY3BrSW5mbzogb3B0aW9ucy5jdXN0b21lclByb3ZpZGVkS2V5LFxuICAgICAgICAgICAgICAgIGVuY3J5cHRpb25TY29wZTogb3B0aW9ucy5lbmNyeXB0aW9uU2NvcGUsXG4gICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0YWdzIG9uIHRoZSB1bmRlcmx5aW5nIGJsb2IuXG4gICAgICogQSBibG9iIGNhbiBoYXZlIHVwIHRvIDEwIHRhZ3MuIFRhZyBrZXlzIG11c3QgYmUgYmV0d2VlbiAxIGFuZCAxMjggY2hhcmFjdGVycy4gIFRhZyB2YWx1ZXMgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDI1NiBjaGFyYWN0ZXJzLlxuICAgICAqIFZhbGlkIHRhZyBrZXkgYW5kIHZhbHVlIGNoYXJhY3RlcnMgaW5jbHVkZSBsb3dlciBhbmQgdXBwZXIgY2FzZSBsZXR0ZXJzLCBkaWdpdHMgKDAtOSksXG4gICAgICogc3BhY2UgKCcgJyksIHBsdXMgKCcrJyksIG1pbnVzICgnLScpLCBwZXJpb2QgKCcuJyksIGZvd2FyZCBzbGFzaCAoJy8nKSwgY29sb24gKCc6JyksIGVxdWFscyAoJz0nKSwgYW5kIHVuZGVyc2NvcmUgKCdfJykuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFncyAtXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLVxuICAgICAqL1xuICAgIGFzeW5jIHNldFRhZ3ModGFncywgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKFwiQmxvYkNsaWVudC1zZXRUYWdzXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMuYmxvYkNvbnRleHQuc2V0VGFncyh7XG4gICAgICAgICAgICAgICAgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICAgICAgICAgICAgbGVhc2VBY2Nlc3NDb25kaXRpb25zOiBvcHRpb25zLmNvbmRpdGlvbnMsXG4gICAgICAgICAgICAgICAgbW9kaWZpZWRBY2Nlc3NDb25kaXRpb25zOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMuY29uZGl0aW9ucyksIHsgaWZUYWdzOiAoX2EgPSBvcHRpb25zLmNvbmRpdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50YWdDb25kaXRpb25zIH0pLFxuICAgICAgICAgICAgICAgIHRyYWNpbmdPcHRpb25zOiB1cGRhdGVkT3B0aW9ucy50cmFjaW5nT3B0aW9ucyxcbiAgICAgICAgICAgICAgICB0YWdzOiB0b0Jsb2JUYWdzKHRhZ3MpLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGFncyBhc3NvY2lhdGVkIHdpdGggdGhlIHVuZGVybHlpbmcgYmxvYi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC1cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUYWdzKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2JDbGllbnQtZ2V0VGFnc1wiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXNzZXJ0UmVzcG9uc2UoYXdhaXQgdGhpcy5ibG9iQ29udGV4dC5nZXRUYWdzKHtcbiAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgICAgICAgICAgICBsZWFzZUFjY2Vzc0NvbmRpdGlvbnM6IG9wdGlvbnMuY29uZGl0aW9ucyxcbiAgICAgICAgICAgICAgICBtb2RpZmllZEFjY2Vzc0NvbmRpdGlvbnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucy5jb25kaXRpb25zKSwgeyBpZlRhZ3M6IChfYSA9IG9wdGlvbnMuY29uZGl0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRhZ0NvbmRpdGlvbnMgfSksXG4gICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgY29uc3Qgd3JhcHBlZFJlc3BvbnNlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZSksIHsgX3Jlc3BvbnNlOiByZXNwb25zZS5fcmVzcG9uc2UsIHRhZ3M6IHRvVGFncyh7IGJsb2JUYWdTZXQ6IHJlc3BvbnNlLmJsb2JUYWdTZXQgfSkgfHwge30gfSk7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlZFJlc3BvbnNlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGEge0BsaW5rIEJsb2JMZWFzZUNsaWVudH0gdGhhdCBtYW5hZ2VzIGxlYXNlcyBvbiB0aGUgYmxvYi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9wb3NlTGVhc2VJZCAtIEluaXRpYWwgcHJvcG9zZWQgbGVhc2UgSWQuXG4gICAgICogQHJldHVybnMgQSBuZXcgQmxvYkxlYXNlQ2xpZW50IG9iamVjdCBmb3IgbWFuYWdpbmcgbGVhc2VzIG9uIHRoZSBibG9iLlxuICAgICAqL1xuICAgIGdldEJsb2JMZWFzZUNsaWVudChwcm9wb3NlTGVhc2VJZCkge1xuICAgICAgICByZXR1cm4gbmV3IEJsb2JMZWFzZUNsaWVudCh0aGlzLCBwcm9wb3NlTGVhc2VJZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByZWFkLW9ubHkgc25hcHNob3Qgb2YgYSBibG9iLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL3NuYXBzaG90LWJsb2JcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgb3B0aW9ucyB0byB0aGUgQmxvYiBDcmVhdGUgU25hcHNob3Qgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIGNyZWF0ZVNuYXBzaG90KG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBvcHRpb25zLmNvbmRpdGlvbnMgPSBvcHRpb25zLmNvbmRpdGlvbnMgfHwge307XG4gICAgICAgIGVuc3VyZUNwa0lmU3BlY2lmaWVkKG9wdGlvbnMuY3VzdG9tZXJQcm92aWRlZEtleSwgdGhpcy5pc0h0dHBzKTtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJCbG9iQ2xpZW50LWNyZWF0ZVNuYXBzaG90XCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMuYmxvYkNvbnRleHQuY3JlYXRlU25hcHNob3Qoe1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgIGxlYXNlQWNjZXNzQ29uZGl0aW9uczogb3B0aW9ucy5jb25kaXRpb25zLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBvcHRpb25zLm1ldGFkYXRhLFxuICAgICAgICAgICAgICAgIG1vZGlmaWVkQWNjZXNzQ29uZGl0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmNvbmRpdGlvbnMpLCB7IGlmVGFnczogKF9hID0gb3B0aW9ucy5jb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGFnQ29uZGl0aW9ucyB9KSxcbiAgICAgICAgICAgICAgICBjcGtJbmZvOiBvcHRpb25zLmN1c3RvbWVyUHJvdmlkZWRLZXksXG4gICAgICAgICAgICAgICAgZW5jcnlwdGlvblNjb3BlOiBvcHRpb25zLmVuY3J5cHRpb25TY29wZSxcbiAgICAgICAgICAgICAgICB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBc3luY2hyb25vdXNseSBjb3BpZXMgYSBibG9iIHRvIGEgZGVzdGluYXRpb24gd2l0aGluIHRoZSBzdG9yYWdlIGFjY291bnQuXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIGxvbmcgcnVubmluZyBvcGVyYXRpb24gcG9sbGVyIHRoYXQgYWxsb3dzIHlvdSB0byB3YWl0XG4gICAgICogaW5kZWZpbml0ZWx5IHVudGlsIHRoZSBjb3B5IGlzIGNvbXBsZXRlZC5cbiAgICAgKiBZb3UgY2FuIGFsc28gY2FuY2VsIGEgY29weSBiZWZvcmUgaXQgaXMgY29tcGxldGVkIGJ5IGNhbGxpbmcgYGNhbmNlbE9wZXJhdGlvbmAgb24gdGhlIHBvbGxlci5cbiAgICAgKiBOb3RlIHRoYXQgdGhlIG9uUHJvZ3Jlc3MgY2FsbGJhY2sgd2lsbCBub3QgYmUgaW52b2tlZCBpZiB0aGUgb3BlcmF0aW9uIGNvbXBsZXRlcyBpbiB0aGUgZmlyc3RcbiAgICAgKiByZXF1ZXN0LCBhbmQgYXR0ZW1wdGluZyB0byBjYW5jZWwgYSBjb21wbGV0ZWQgY29weSB3aWxsIHJlc3VsdCBpbiBhbiBlcnJvciBiZWluZyB0aHJvd24uXG4gICAgICpcbiAgICAgKiBJbiB2ZXJzaW9uIDIwMTItMDItMTIgYW5kIGxhdGVyLCB0aGUgc291cmNlIGZvciBhIENvcHkgQmxvYiBvcGVyYXRpb24gY2FuIGJlXG4gICAgICogYSBjb21taXR0ZWQgYmxvYiBpbiBhbnkgQXp1cmUgc3RvcmFnZSBhY2NvdW50LlxuICAgICAqIEJlZ2lubmluZyB3aXRoIHZlcnNpb24gMjAxNS0wMi0yMSwgdGhlIHNvdXJjZSBmb3IgYSBDb3B5IEJsb2Igb3BlcmF0aW9uIGNhbiBiZVxuICAgICAqIGFuIEF6dXJlIGZpbGUgaW4gYW55IEF6dXJlIHN0b3JhZ2UgYWNjb3VudC5cbiAgICAgKiBPbmx5IHN0b3JhZ2UgYWNjb3VudHMgY3JlYXRlZCBvbiBvciBhZnRlciBKdW5lIDd0aCwgMjAxMiBhbGxvdyB0aGUgQ29weSBCbG9iXG4gICAgICogb3BlcmF0aW9uIHRvIGNvcHkgZnJvbSBhbm90aGVyIHN0b3JhZ2UgYWNjb3VudC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9jb3B5LWJsb2JcbiAgICAgKlxuICAgICAqIEV4YW1wbGUgdXNpbmcgYXV0b21hdGljIHBvbGxpbmc6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGNvcHlQb2xsZXIgPSBhd2FpdCBibG9iQ2xpZW50LmJlZ2luQ29weUZyb21VUkwoJ3VybCcpO1xuICAgICAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvcHlQb2xsZXIucG9sbFVudGlsRG9uZSgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogRXhhbXBsZSB1c2luZyBtYW51YWwgcG9sbGluZzpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgY29weVBvbGxlciA9IGF3YWl0IGJsb2JDbGllbnQuYmVnaW5Db3B5RnJvbVVSTCgndXJsJyk7XG4gICAgICogd2hpbGUgKCFwb2xsZXIuaXNEb25lKCkpIHtcbiAgICAgKiAgICBhd2FpdCBwb2xsZXIucG9sbCgpO1xuICAgICAqIH1cbiAgICAgKiBjb25zdCByZXN1bHQgPSBjb3B5UG9sbGVyLmdldFJlc3VsdCgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogRXhhbXBsZSB1c2luZyBwcm9ncmVzcyB1cGRhdGVzOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBjb3B5UG9sbGVyID0gYXdhaXQgYmxvYkNsaWVudC5iZWdpbkNvcHlGcm9tVVJMKCd1cmwnLCB7XG4gICAgICogICBvblByb2dyZXNzKHN0YXRlKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKGBQcm9ncmVzczogJHtzdGF0ZS5jb3B5UHJvZ3Jlc3N9YCk7XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICogY29uc3QgcmVzdWx0ID0gYXdhaXQgY29weVBvbGxlci5wb2xsVW50aWxEb25lKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBFeGFtcGxlIHVzaW5nIGEgY2hhbmdpbmcgcG9sbGluZyBpbnRlcnZhbCAoZGVmYXVsdCAxNSBzZWNvbmRzKTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgY29weVBvbGxlciA9IGF3YWl0IGJsb2JDbGllbnQuYmVnaW5Db3B5RnJvbVVSTCgndXJsJywge1xuICAgICAqICAgaW50ZXJ2YWxJbk1zOiAxMDAwIC8vIHBvbGwgYmxvYiBldmVyeSAxIHNlY29uZCBmb3IgY29weSBwcm9ncmVzc1xuICAgICAqIH0pO1xuICAgICAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvcHlQb2xsZXIucG9sbFVudGlsRG9uZSgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogRXhhbXBsZSB1c2luZyBjb3B5IGNhbmNlbGxhdGlvbjpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgY29weVBvbGxlciA9IGF3YWl0IGJsb2JDbGllbnQuYmVnaW5Db3B5RnJvbVVSTCgndXJsJyk7XG4gICAgICogLy8gY2FuY2VsIG9wZXJhdGlvbiBhZnRlciBzdGFydGluZyBpdC5cbiAgICAgKiB0cnkge1xuICAgICAqICAgYXdhaXQgY29weVBvbGxlci5jYW5jZWxPcGVyYXRpb24oKTtcbiAgICAgKiAgIC8vIGNhbGxzIHRvIGdldCB0aGUgcmVzdWx0IG5vdyB0aHJvdyBQb2xsZXJDYW5jZWxsZWRFcnJvclxuICAgICAqICAgYXdhaXQgY29weVBvbGxlci5nZXRSZXN1bHQoKTtcbiAgICAgKiB9IGNhdGNoIChlcnIpIHtcbiAgICAgKiAgIGlmIChlcnIubmFtZSA9PT0gJ1BvbGxlckNhbmNlbGxlZEVycm9yJykge1xuICAgICAqICAgICBjb25zb2xlLmxvZygnVGhlIGNvcHkgd2FzIGNhbmNlbGxlZC4nKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29weVNvdXJjZSAtIHVybCB0byB0aGUgc291cmNlIEF6dXJlIEJsb2IvRmlsZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIG9wdGlvbnMgdG8gdGhlIEJsb2IgU3RhcnQgQ29weSBGcm9tIFVSTCBvcGVyYXRpb24uXG4gICAgICovXG4gICAgYXN5bmMgYmVnaW5Db3B5RnJvbVVSTChjb3B5U291cmNlLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgY2xpZW50ID0ge1xuICAgICAgICAgICAgYWJvcnRDb3B5RnJvbVVSTDogKC4uLmFyZ3MpID0+IHRoaXMuYWJvcnRDb3B5RnJvbVVSTCguLi5hcmdzKSxcbiAgICAgICAgICAgIGdldFByb3BlcnRpZXM6ICguLi5hcmdzKSA9PiB0aGlzLmdldFByb3BlcnRpZXMoLi4uYXJncyksXG4gICAgICAgICAgICBzdGFydENvcHlGcm9tVVJMOiAoLi4uYXJncykgPT4gdGhpcy5zdGFydENvcHlGcm9tVVJMKC4uLmFyZ3MpLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwb2xsZXIgPSBuZXcgQmxvYkJlZ2luQ29weUZyb21VcmxQb2xsZXIoe1xuICAgICAgICAgICAgYmxvYkNsaWVudDogY2xpZW50LFxuICAgICAgICAgICAgY29weVNvdXJjZSxcbiAgICAgICAgICAgIGludGVydmFsSW5Nczogb3B0aW9ucy5pbnRlcnZhbEluTXMsXG4gICAgICAgICAgICBvblByb2dyZXNzOiBvcHRpb25zLm9uUHJvZ3Jlc3MsXG4gICAgICAgICAgICByZXN1bWVGcm9tOiBvcHRpb25zLnJlc3VtZUZyb20sXG4gICAgICAgICAgICBzdGFydENvcHlGcm9tVVJMT3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFRyaWdnZXIgdGhlIHN0YXJ0Q29weUZyb21VUkwgY2FsbCBieSBjYWxsaW5nIHBvbGwuXG4gICAgICAgIC8vIEFueSBlcnJvcnMgZnJvbSB0aGlzIG1ldGhvZCBzaG91bGQgYmUgc3VyZmFjZWQgdG8gdGhlIHVzZXIuXG4gICAgICAgIGF3YWl0IHBvbGxlci5wb2xsKCk7XG4gICAgICAgIHJldHVybiBwb2xsZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFib3J0cyBhIHBlbmRpbmcgYXN5bmNocm9ub3VzIENvcHkgQmxvYiBvcGVyYXRpb24sIGFuZCBsZWF2ZXMgYSBkZXN0aW5hdGlvbiBibG9iIHdpdGggemVyb1xuICAgICAqIGxlbmd0aCBhbmQgZnVsbCBtZXRhZGF0YS4gVmVyc2lvbiAyMDEyLTAyLTEyIGFuZCBuZXdlci5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9hYm9ydC1jb3B5LWJsb2JcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb3B5SWQgLSBJZCBvZiB0aGUgQ29weSBGcm9tIFVSTCBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBvcHRpb25zIHRvIHRoZSBCbG9iIEFib3J0IENvcHkgRnJvbSBVUkwgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIGFib3J0Q29weUZyb21VUkwoY29weUlkLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJCbG9iQ2xpZW50LWFib3J0Q29weUZyb21VUkxcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYXNzZXJ0UmVzcG9uc2UoYXdhaXQgdGhpcy5ibG9iQ29udGV4dC5hYm9ydENvcHlGcm9tVVJMKGNvcHlJZCwge1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgIGxlYXNlQWNjZXNzQ29uZGl0aW9uczogb3B0aW9ucy5jb25kaXRpb25zLFxuICAgICAgICAgICAgICAgIHRyYWNpbmdPcHRpb25zOiB1cGRhdGVkT3B0aW9ucy50cmFjaW5nT3B0aW9ucyxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBzeW5jaHJvbm91cyBDb3B5IEZyb20gVVJMIG9wZXJhdGlvbiBjb3BpZXMgYSBibG9iIG9yIGFuIGludGVybmV0IHJlc291cmNlIHRvIGEgbmV3IGJsb2IuIEl0IHdpbGwgbm90XG4gICAgICogcmV0dXJuIGEgcmVzcG9uc2UgdW50aWwgdGhlIGNvcHkgaXMgY29tcGxldGUuXG4gICAgICogQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9yZXN0L2FwaS9zdG9yYWdlc2VydmljZXMvY29weS1ibG9iLWZyb20tdXJsXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29weVNvdXJjZSAtIFRoZSBzb3VyY2UgVVJMIHRvIGNvcHkgZnJvbSwgU2hhcmVkIEFjY2VzcyBTaWduYXR1cmUoU0FTKSBtYXliZSBuZWVkZWQgZm9yIGF1dGhlbnRpY2F0aW9uXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLVxuICAgICAqL1xuICAgIGFzeW5jIHN5bmNDb3B5RnJvbVVSTChjb3B5U291cmNlLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgb3B0aW9ucy5jb25kaXRpb25zID0gb3B0aW9ucy5jb25kaXRpb25zIHx8IHt9O1xuICAgICAgICBvcHRpb25zLnNvdXJjZUNvbmRpdGlvbnMgPSBvcHRpb25zLnNvdXJjZUNvbmRpdGlvbnMgfHwge307XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKFwiQmxvYkNsaWVudC1zeW5jQ29weUZyb21VUkxcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2c7XG4gICAgICAgICAgICByZXR1cm4gYXNzZXJ0UmVzcG9uc2UoYXdhaXQgdGhpcy5ibG9iQ29udGV4dC5jb3B5RnJvbVVSTChjb3B5U291cmNlLCB7XG4gICAgICAgICAgICAgICAgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IG9wdGlvbnMubWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgbGVhc2VBY2Nlc3NDb25kaXRpb25zOiBvcHRpb25zLmNvbmRpdGlvbnMsXG4gICAgICAgICAgICAgICAgbW9kaWZpZWRBY2Nlc3NDb25kaXRpb25zOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMuY29uZGl0aW9ucyksIHsgaWZUYWdzOiAoX2EgPSBvcHRpb25zLmNvbmRpdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50YWdDb25kaXRpb25zIH0pLFxuICAgICAgICAgICAgICAgIHNvdXJjZU1vZGlmaWVkQWNjZXNzQ29uZGl0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VJZk1hdGNoOiAoX2IgPSBvcHRpb25zLnNvdXJjZUNvbmRpdGlvbnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5pZk1hdGNoLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VJZk1vZGlmaWVkU2luY2U6IChfYyA9IG9wdGlvbnMuc291cmNlQ29uZGl0aW9ucykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmlmTW9kaWZpZWRTaW5jZSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlSWZOb25lTWF0Y2g6IChfZCA9IG9wdGlvbnMuc291cmNlQ29uZGl0aW9ucykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmlmTm9uZU1hdGNoLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VJZlVubW9kaWZpZWRTaW5jZTogKF9lID0gb3B0aW9ucy5zb3VyY2VDb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UuaWZVbm1vZGlmaWVkU2luY2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzb3VyY2VDb250ZW50TUQ1OiBvcHRpb25zLnNvdXJjZUNvbnRlbnRNRDUsXG4gICAgICAgICAgICAgICAgY29weVNvdXJjZUF1dGhvcml6YXRpb246IGh0dHBBdXRob3JpemF0aW9uVG9TdHJpbmcob3B0aW9ucy5zb3VyY2VBdXRob3JpemF0aW9uKSxcbiAgICAgICAgICAgICAgICB0aWVyOiB0b0FjY2Vzc1RpZXIob3B0aW9ucy50aWVyKSxcbiAgICAgICAgICAgICAgICBibG9iVGFnc1N0cmluZzogdG9CbG9iVGFnc1N0cmluZyhvcHRpb25zLnRhZ3MpLFxuICAgICAgICAgICAgICAgIGltbXV0YWJpbGl0eVBvbGljeUV4cGlyeTogKF9mID0gb3B0aW9ucy5pbW11dGFiaWxpdHlQb2xpY3kpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5leHBpcmllc09uLFxuICAgICAgICAgICAgICAgIGltbXV0YWJpbGl0eVBvbGljeU1vZGU6IChfZyA9IG9wdGlvbnMuaW1tdXRhYmlsaXR5UG9saWN5KSA9PT0gbnVsbCB8fCBfZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2cucG9saWN5TW9kZSxcbiAgICAgICAgICAgICAgICBsZWdhbEhvbGQ6IG9wdGlvbnMubGVnYWxIb2xkLFxuICAgICAgICAgICAgICAgIGVuY3J5cHRpb25TY29wZTogb3B0aW9ucy5lbmNyeXB0aW9uU2NvcGUsXG4gICAgICAgICAgICAgICAgY29weVNvdXJjZVRhZ3M6IG9wdGlvbnMuY29weVNvdXJjZVRhZ3MsXG4gICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGllciBvbiBhIGJsb2IuIFRoZSBvcGVyYXRpb24gaXMgYWxsb3dlZCBvbiBhIHBhZ2UgYmxvYiBpbiBhIHByZW1pdW1cbiAgICAgKiBzdG9yYWdlIGFjY291bnQgYW5kIG9uIGEgYmxvY2sgYmxvYiBpbiBhIGJsb2Igc3RvcmFnZSBhY2NvdW50IChsb2NhbGx5IHJlZHVuZGFudFxuICAgICAqIHN0b3JhZ2Ugb25seSkuIEEgcHJlbWl1bSBwYWdlIGJsb2IncyB0aWVyIGRldGVybWluZXMgdGhlIGFsbG93ZWQgc2l6ZSwgSU9QUyxcbiAgICAgKiBhbmQgYmFuZHdpZHRoIG9mIHRoZSBibG9iLiBBIGJsb2NrIGJsb2IncyB0aWVyIGRldGVybWluZXMgSG90L0Nvb2wvQXJjaGl2ZVxuICAgICAqIHN0b3JhZ2UgdHlwZS4gVGhpcyBvcGVyYXRpb24gZG9lcyBub3QgdXBkYXRlIHRoZSBibG9iJ3MgRVRhZy5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9zZXQtYmxvYi10aWVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGllciAtIFRoZSB0aWVyIHRvIGJlIHNldCBvbiB0aGUgYmxvYi4gVmFsaWQgdmFsdWVzIGFyZSBIb3QsIENvb2wsIG9yIEFyY2hpdmUuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBvcHRpb25zIHRvIHRoZSBCbG9iIFNldCBUaWVyIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBzZXRBY2Nlc3NUaWVyKHRpZXIsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2JDbGllbnQtc2V0QWNjZXNzVGllclwiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiBhc3NlcnRSZXNwb25zZShhd2FpdCB0aGlzLmJsb2JDb250ZXh0LnNldFRpZXIodG9BY2Nlc3NUaWVyKHRpZXIpLCB7XG4gICAgICAgICAgICAgICAgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICAgICAgICAgICAgbGVhc2VBY2Nlc3NDb25kaXRpb25zOiBvcHRpb25zLmNvbmRpdGlvbnMsXG4gICAgICAgICAgICAgICAgbW9kaWZpZWRBY2Nlc3NDb25kaXRpb25zOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMuY29uZGl0aW9ucyksIHsgaWZUYWdzOiAoX2EgPSBvcHRpb25zLmNvbmRpdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50YWdDb25kaXRpb25zIH0pLFxuICAgICAgICAgICAgICAgIHJlaHlkcmF0ZVByaW9yaXR5OiBvcHRpb25zLnJlaHlkcmF0ZVByaW9yaXR5LFxuICAgICAgICAgICAgICAgIHRyYWNpbmdPcHRpb25zOiB1cGRhdGVkT3B0aW9ucy50cmFjaW5nT3B0aW9ucyxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGRvd25sb2FkVG9CdWZmZXIocGFyYW0xLCBwYXJhbTIsIHBhcmFtMywgcGFyYW00ID0ge30pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBsZXQgYnVmZmVyO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgbGV0IG9wdGlvbnMgPSBwYXJhbTQ7XG4gICAgICAgIGlmIChwYXJhbTEgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IHBhcmFtMTtcbiAgICAgICAgICAgIG9mZnNldCA9IHBhcmFtMiB8fCAwO1xuICAgICAgICAgICAgY291bnQgPSB0eXBlb2YgcGFyYW0zID09PSBcIm51bWJlclwiID8gcGFyYW0zIDogMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9mZnNldCA9IHR5cGVvZiBwYXJhbTEgPT09IFwibnVtYmVyXCIgPyBwYXJhbTEgOiAwO1xuICAgICAgICAgICAgY291bnQgPSB0eXBlb2YgcGFyYW0yID09PSBcIm51bWJlclwiID8gcGFyYW0yIDogMDtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBwYXJhbTMgfHwge307XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGJsb2NrU2l6ZSA9IChfYSA9IG9wdGlvbnMuYmxvY2tTaXplKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwO1xuICAgICAgICBpZiAoYmxvY2tTaXplIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJibG9ja1NpemUgb3B0aW9uIG11c3QgYmUgPj0gMFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmxvY2tTaXplID09PSAwKSB7XG4gICAgICAgICAgICBibG9ja1NpemUgPSBERUZBVUxUX0JMT0JfRE9XTkxPQURfQkxPQ0tfQllURVM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwib2Zmc2V0IG9wdGlvbiBtdXN0IGJlID49IDBcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvdW50ICYmIGNvdW50IDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiY291bnQgb3B0aW9uIG11c3QgYmUgZ3JlYXRlciB0aGFuIDBcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRpb25zLmNvbmRpdGlvbnMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuY29uZGl0aW9ucyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKFwiQmxvYkNsaWVudC1kb3dubG9hZFRvQnVmZmVyXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgLy8gQ3VzdG9tZXIgZG9lc24ndCBzcGVjaWZ5IGxlbmd0aCwgZ2V0IGl0XG4gICAgICAgICAgICBpZiAoIWNvdW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldFByb3BlcnRpZXMoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMgfSkpO1xuICAgICAgICAgICAgICAgIGNvdW50ID0gcmVzcG9uc2UuY29udGVudExlbmd0aCAtIG9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAoY291bnQgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBvZmZzZXQgJHtvZmZzZXR9IHNob3VsZG4ndCBiZSBsYXJnZXIgdGhhbiBibG9iIHNpemUgJHtyZXNwb25zZS5jb250ZW50TGVuZ3RofWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFsbG9jYXRlIHRoZSBidWZmZXIgb2Ygc2l6ZSA9IGNvdW50IGlmIHRoZSBidWZmZXIgaXMgbm90IHByb3ZpZGVkXG4gICAgICAgICAgICBpZiAoIWJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyhjb3VudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBhbGxvY2F0ZSB0aGUgYnVmZmVyIG9mIHNpemU6ICR7Y291bnR9KGluIGJ5dGVzKS4gUGxlYXNlIHRyeSBwYXNzaW5nIHlvdXIgb3duIGJ1ZmZlciB0byB0aGUgXCJkb3dubG9hZFRvQnVmZmVyXCIgbWV0aG9kIG9yIHRyeSB1c2luZyBvdGhlciBtZXRob2RzIGxpa2UgXCJkb3dubG9hZFwiIG9yIFwiZG93bmxvYWRUb0ZpbGVcIi5cXHQgJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChidWZmZXIubGVuZ3RoIDwgY291bnQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgVGhlIGJ1ZmZlcidzIHNpemUgc2hvdWxkIGJlIGVxdWFsIHRvIG9yIGxhcmdlciB0aGFuIHRoZSByZXF1ZXN0IGNvdW50IG9mIGJ5dGVzOiAke2NvdW50fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHRyYW5zZmVyUHJvZ3Jlc3MgPSAwO1xuICAgICAgICAgICAgY29uc3QgYmF0Y2ggPSBuZXcgQmF0Y2gob3B0aW9ucy5jb25jdXJyZW5jeSk7XG4gICAgICAgICAgICBmb3IgKGxldCBvZmYgPSBvZmZzZXQ7IG9mZiA8IG9mZnNldCArIGNvdW50OyBvZmYgPSBvZmYgKyBibG9ja1NpemUpIHtcbiAgICAgICAgICAgICAgICBiYXRjaC5hZGRPcGVyYXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBFeGNsdXNpdmUgY2h1bmsgZW5kIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgIGxldCBjaHVua0VuZCA9IG9mZnNldCArIGNvdW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAob2ZmICsgYmxvY2tTaXplIDwgY2h1bmtFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rRW5kID0gb2ZmICsgYmxvY2tTaXplO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5kb3dubG9hZChvZmYsIGNodW5rRW5kIC0gb2ZmLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnM6IG9wdGlvbnMuY29uZGl0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heFJldHJ5UmVxdWVzdHM6IG9wdGlvbnMubWF4UmV0cnlSZXF1ZXN0c1BlckJsb2NrLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tZXJQcm92aWRlZEtleTogb3B0aW9ucy5jdXN0b21lclByb3ZpZGVkS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyZWFtID0gcmVzcG9uc2UucmVhZGFibGVTdHJlYW1Cb2R5O1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzdHJlYW1Ub0J1ZmZlcihzdHJlYW0sIGJ1ZmZlciwgb2ZmIC0gb2Zmc2V0LCBjaHVua0VuZCAtIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBwcm9ncmVzcyBhZnRlciBibG9jayBpcyBkb3dubG9hZGVkLCBpbiBjYXNlIG9mIGJsb2NrIHRyeWluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBDb3VsZCBwcm92aWRlIGZpbmVyIGdyYWluZWQgcHJvZ3Jlc3MgdXBkYXRpbmcgaW5zaWRlIEhUVFAgcmVxdWVzdHMsXG4gICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgaWYgY29udmVuaWVuY2UgbGF5ZXIgZG93bmxvYWQgdHJ5IGlzIGVuYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmZXJQcm9ncmVzcyArPSBjaHVua0VuZCAtIG9mZjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMub25Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vblByb2dyZXNzKHsgbG9hZGVkQnl0ZXM6IHRyYW5zZmVyUHJvZ3Jlc3MgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IGJhdGNoLmRvKCk7XG4gICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT05MWSBBVkFJTEFCTEUgSU4gTk9ERS5KUyBSVU5USU1FLlxuICAgICAqXG4gICAgICogRG93bmxvYWRzIGFuIEF6dXJlIEJsb2IgdG8gYSBsb2NhbCBmaWxlLlxuICAgICAqIEZhaWxzIGlmIHRoZSB0aGUgZ2l2ZW4gZmlsZSBwYXRoIGFscmVhZHkgZXhpdHMuXG4gICAgICogT2Zmc2V0IGFuZCBjb3VudCBhcmUgb3B0aW9uYWwsIHBhc3MgMCBhbmQgdW5kZWZpbmVkIHJlc3BlY3RpdmVseSB0byBkb3dubG9hZCB0aGUgZW50aXJlIGJsb2IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZmlsZVBhdGggLVxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBGcm9tIHdoaWNoIHBvc2l0aW9uIG9mIHRoZSBibG9jayBibG9iIHRvIGRvd25sb2FkLlxuICAgICAqIEBwYXJhbSBjb3VudCAtIEhvdyBtdWNoIGRhdGEgdG8gYmUgZG93bmxvYWRlZC4gV2lsbCBkb3dubG9hZCB0byB0aGUgZW5kIHdoZW4gcGFzc2luZyB1bmRlZmluZWQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIEJsb2IgZG93bmxvYWQgb3B0aW9ucy5cbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzcG9uc2UgZGF0YSBmb3IgYmxvYiBkb3dubG9hZCBvcGVyYXRpb24sXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0IHdpdGggcmVhZGFibGVTdHJlYW1Cb2R5IHNldCB0byB1bmRlZmluZWQgc2luY2UgaXRzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCBpcyBhbHJlYWR5IHJlYWQgYW5kIHdyaXR0ZW4gaW50byBhIGxvY2FsIGZpbGVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdCB0aGUgc3BlY2lmaWVkIHBhdGguXG4gICAgICovXG4gICAgYXN5bmMgZG93bmxvYWRUb0ZpbGUoZmlsZVBhdGgsIG9mZnNldCA9IDAsIGNvdW50LCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJCbG9iQ2xpZW50LWRvd25sb2FkVG9GaWxlXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmRvd25sb2FkKG9mZnNldCwgY291bnQsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zIH0pKTtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5yZWFkYWJsZVN0cmVhbUJvZHkpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCByZWFkU3RyZWFtVG9Mb2NhbEZpbGUocmVzcG9uc2UucmVhZGFibGVTdHJlYW1Cb2R5LCBmaWxlUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGUgc3RyZWFtIGlzIG5vIGxvbmdlciBhY2Nlc3NpYmxlIHNvIHNldHRpbmcgaXQgdG8gdW5kZWZpbmVkLlxuICAgICAgICAgICAgcmVzcG9uc2UuYmxvYkRvd25sb2FkU3RyZWFtID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0QmxvYkFuZENvbnRhaW5lck5hbWVzRnJvbVVybCgpIHtcbiAgICAgICAgbGV0IGNvbnRhaW5lck5hbWU7XG4gICAgICAgIGxldCBibG9iTmFtZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vICBVUkwgbWF5IGxvb2sgbGlrZSB0aGUgZm9sbG93aW5nXG4gICAgICAgICAgICAvLyBcImh0dHBzOi8vbXlhY2NvdW50LmJsb2IuY29yZS53aW5kb3dzLm5ldC9teWNvbnRhaW5lci9ibG9iP3Nhc1N0cmluZ1wiO1xuICAgICAgICAgICAgLy8gXCJodHRwczovL215YWNjb3VudC5ibG9iLmNvcmUud2luZG93cy5uZXQvbXljb250YWluZXIvYmxvYlwiO1xuICAgICAgICAgICAgLy8gXCJodHRwczovL215YWNjb3VudC5ibG9iLmNvcmUud2luZG93cy5uZXQvbXljb250YWluZXIvYmxvYi9hLnR4dD9zYXNTdHJpbmdcIjtcbiAgICAgICAgICAgIC8vIFwiaHR0cHM6Ly9teWFjY291bnQuYmxvYi5jb3JlLndpbmRvd3MubmV0L215Y29udGFpbmVyL2Jsb2IvYS50eHRcIjtcbiAgICAgICAgICAgIC8vIElQdjQvSVB2NiBhZGRyZXNzIGhvc3RzLCBFbmRwb2ludHMgLSBgaHR0cDovLzEyNy4wLjAuMToxMDAwMC9kZXZzdG9yZWFjY291bnQxL2NvbnRhaW5lcm5hbWUvYmxvYmBcbiAgICAgICAgICAgIC8vIGh0dHA6Ly9sb2NhbGhvc3Q6MTAwMDEvZGV2c3RvcmVhY2NvdW50MS9jb250YWluZXJuYW1lL2Jsb2JcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZFVybCA9IG5ldyBVUkwodGhpcy51cmwpO1xuICAgICAgICAgICAgaWYgKHBhcnNlZFVybC5ob3N0LnNwbGl0KFwiLlwiKVsxXSA9PT0gXCJibG9iXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBcImh0dHBzOi8vbXlhY2NvdW50LmJsb2IuY29yZS53aW5kb3dzLm5ldC9jb250YWluZXJuYW1lL2Jsb2JcIi5cbiAgICAgICAgICAgICAgICAvLyAuZ2V0UGF0aCgpIC0+IC9jb250YWluZXJuYW1lL2Jsb2JcbiAgICAgICAgICAgICAgICBjb25zdCBwYXRoQ29tcG9uZW50cyA9IHBhcnNlZFVybC5wYXRobmFtZS5tYXRjaChcIi8oW14vXSopKC8oLiopKT9cIik7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyTmFtZSA9IHBhdGhDb21wb25lbnRzWzFdO1xuICAgICAgICAgICAgICAgIGJsb2JOYW1lID0gcGF0aENvbXBvbmVudHNbM107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0lwRW5kcG9pbnRTdHlsZShwYXJzZWRVcmwpKSB7XG4gICAgICAgICAgICAgICAgLy8gSVB2NC9JUHY2IGFkZHJlc3MgaG9zdHMuLi4gRXhhbXBsZSAtIGh0dHA6Ly8xOTIuMC4wLjEwOjEwMDAxL2RldnN0b3JlYWNjb3VudDEvY29udGFpbmVybmFtZS9ibG9iXG4gICAgICAgICAgICAgICAgLy8gU2luZ2xlIHdvcmQgZG9tYWluIHdpdGhvdXQgYSBbZG90XSBpbiB0aGUgZW5kcG9pbnQuLi4gRXhhbXBsZSAtIGh0dHA6Ly9sb2NhbGhvc3Q6MTAwMDEvZGV2c3RvcmVhY2NvdW50MS9jb250YWluZXJuYW1lL2Jsb2JcbiAgICAgICAgICAgICAgICAvLyAuZ2V0UGF0aCgpIC0+IC9kZXZzdG9yZWFjY291bnQxL2NvbnRhaW5lcm5hbWUvYmxvYlxuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGhDb21wb25lbnRzID0gcGFyc2VkVXJsLnBhdGhuYW1lLm1hdGNoKFwiLyhbXi9dKikvKFteL10qKSgvKC4qKSk/XCIpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lck5hbWUgPSBwYXRoQ29tcG9uZW50c1syXTtcbiAgICAgICAgICAgICAgICBibG9iTmFtZSA9IHBhdGhDb21wb25lbnRzWzRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gXCJodHRwczovL2N1c3RvbWRvbWFpbi5jb20vY29udGFpbmVybmFtZS9ibG9iXCIuXG4gICAgICAgICAgICAgICAgLy8gLmdldFBhdGgoKSAtPiAvY29udGFpbmVybmFtZS9ibG9iXG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aENvbXBvbmVudHMgPSBwYXJzZWRVcmwucGF0aG5hbWUubWF0Y2goXCIvKFteL10qKSgvKC4qKSk/XCIpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lck5hbWUgPSBwYXRoQ29tcG9uZW50c1sxXTtcbiAgICAgICAgICAgICAgICBibG9iTmFtZSA9IHBhdGhDb21wb25lbnRzWzNdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZGVjb2RlIHRoZSBlbmNvZGVkIGJsb2JOYW1lLCBjb250YWluZXJOYW1lIC0gdG8gZ2V0IGFsbCB0aGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgbWlnaHQgYmUgcHJlc2VudCBpbiB0aGVtXG4gICAgICAgICAgICBjb250YWluZXJOYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KGNvbnRhaW5lck5hbWUpO1xuICAgICAgICAgICAgYmxvYk5hbWUgPSBkZWNvZGVVUklDb21wb25lbnQoYmxvYk5hbWUpO1xuICAgICAgICAgICAgLy8gQXp1cmUgU3RvcmFnZSBTZXJ2ZXIgd2lsbCByZXBsYWNlIFwiXFxcIiB3aXRoIFwiL1wiIGluIHRoZSBibG9iIG5hbWVzXG4gICAgICAgICAgICAvLyAgIGRvaW5nIHRoZSBzYW1lIGluIHRoZSBTREsgc2lkZSBzbyB0aGF0IHRoZSB1c2VyIGRvZXNuJ3QgaGF2ZSB0byByZXBsYWNlIFwiXFxcIiBpbnN0YW5jZXMgaW4gdGhlIGJsb2JOYW1lXG4gICAgICAgICAgICBibG9iTmFtZSA9IGJsb2JOYW1lLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpO1xuICAgICAgICAgICAgaWYgKCFjb250YWluZXJOYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvdmlkZWQgY29udGFpbmVyTmFtZSBpcyBpbnZhbGlkLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGJsb2JOYW1lLCBjb250YWluZXJOYW1lIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gZXh0cmFjdCBibG9iTmFtZSBhbmQgY29udGFpbmVyTmFtZSB3aXRoIHByb3ZpZGVkIGluZm9ybWF0aW9uLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBc3luY2hyb25vdXNseSBjb3BpZXMgYSBibG9iIHRvIGEgZGVzdGluYXRpb24gd2l0aGluIHRoZSBzdG9yYWdlIGFjY291bnQuXG4gICAgICogSW4gdmVyc2lvbiAyMDEyLTAyLTEyIGFuZCBsYXRlciwgdGhlIHNvdXJjZSBmb3IgYSBDb3B5IEJsb2Igb3BlcmF0aW9uIGNhbiBiZVxuICAgICAqIGEgY29tbWl0dGVkIGJsb2IgaW4gYW55IEF6dXJlIHN0b3JhZ2UgYWNjb3VudC5cbiAgICAgKiBCZWdpbm5pbmcgd2l0aCB2ZXJzaW9uIDIwMTUtMDItMjEsIHRoZSBzb3VyY2UgZm9yIGEgQ29weSBCbG9iIG9wZXJhdGlvbiBjYW4gYmVcbiAgICAgKiBhbiBBenVyZSBmaWxlIGluIGFueSBBenVyZSBzdG9yYWdlIGFjY291bnQuXG4gICAgICogT25seSBzdG9yYWdlIGFjY291bnRzIGNyZWF0ZWQgb24gb3IgYWZ0ZXIgSnVuZSA3dGgsIDIwMTIgYWxsb3cgdGhlIENvcHkgQmxvYlxuICAgICAqIG9wZXJhdGlvbiB0byBjb3B5IGZyb20gYW5vdGhlciBzdG9yYWdlIGFjY291bnQuXG4gICAgICogQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9yZXN0L2FwaS9zdG9yYWdlc2VydmljZXMvY29weS1ibG9iXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29weVNvdXJjZSAtIHVybCB0byB0aGUgc291cmNlIEF6dXJlIEJsb2IvRmlsZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIG9wdGlvbnMgdG8gdGhlIEJsb2IgU3RhcnQgQ29weSBGcm9tIFVSTCBvcGVyYXRpb24uXG4gICAgICovXG4gICAgYXN5bmMgc3RhcnRDb3B5RnJvbVVSTChjb3B5U291cmNlLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJCbG9iQ2xpZW50LXN0YXJ0Q29weUZyb21VUkxcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgICAgIG9wdGlvbnMuY29uZGl0aW9ucyA9IG9wdGlvbnMuY29uZGl0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgIG9wdGlvbnMuc291cmNlQ29uZGl0aW9ucyA9IG9wdGlvbnMuc291cmNlQ29uZGl0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgIHJldHVybiBhc3NlcnRSZXNwb25zZShhd2FpdCB0aGlzLmJsb2JDb250ZXh0LnN0YXJ0Q29weUZyb21VUkwoY29weVNvdXJjZSwge1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgIGxlYXNlQWNjZXNzQ29uZGl0aW9uczogb3B0aW9ucy5jb25kaXRpb25zLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBvcHRpb25zLm1ldGFkYXRhLFxuICAgICAgICAgICAgICAgIG1vZGlmaWVkQWNjZXNzQ29uZGl0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmNvbmRpdGlvbnMpLCB7IGlmVGFnczogKF9hID0gb3B0aW9ucy5jb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGFnQ29uZGl0aW9ucyB9KSxcbiAgICAgICAgICAgICAgICBzb3VyY2VNb2RpZmllZEFjY2Vzc0NvbmRpdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlSWZNYXRjaDogb3B0aW9ucy5zb3VyY2VDb25kaXRpb25zLmlmTWF0Y2gsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUlmTW9kaWZpZWRTaW5jZTogb3B0aW9ucy5zb3VyY2VDb25kaXRpb25zLmlmTW9kaWZpZWRTaW5jZSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlSWZOb25lTWF0Y2g6IG9wdGlvbnMuc291cmNlQ29uZGl0aW9ucy5pZk5vbmVNYXRjaCxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlSWZVbm1vZGlmaWVkU2luY2U6IG9wdGlvbnMuc291cmNlQ29uZGl0aW9ucy5pZlVubW9kaWZpZWRTaW5jZSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlSWZUYWdzOiBvcHRpb25zLnNvdXJjZUNvbmRpdGlvbnMudGFnQ29uZGl0aW9ucyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGltbXV0YWJpbGl0eVBvbGljeUV4cGlyeTogKF9iID0gb3B0aW9ucy5pbW11dGFiaWxpdHlQb2xpY3kpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5leHBpcmllc09uLFxuICAgICAgICAgICAgICAgIGltbXV0YWJpbGl0eVBvbGljeU1vZGU6IChfYyA9IG9wdGlvbnMuaW1tdXRhYmlsaXR5UG9saWN5KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MucG9saWN5TW9kZSxcbiAgICAgICAgICAgICAgICBsZWdhbEhvbGQ6IG9wdGlvbnMubGVnYWxIb2xkLFxuICAgICAgICAgICAgICAgIHJlaHlkcmF0ZVByaW9yaXR5OiBvcHRpb25zLnJlaHlkcmF0ZVByaW9yaXR5LFxuICAgICAgICAgICAgICAgIHRpZXI6IHRvQWNjZXNzVGllcihvcHRpb25zLnRpZXIpLFxuICAgICAgICAgICAgICAgIGJsb2JUYWdzU3RyaW5nOiB0b0Jsb2JUYWdzU3RyaW5nKG9wdGlvbnMudGFncyksXG4gICAgICAgICAgICAgICAgc2VhbEJsb2I6IG9wdGlvbnMuc2VhbEJsb2IsXG4gICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT25seSBhdmFpbGFibGUgZm9yIEJsb2JDbGllbnQgY29uc3RydWN0ZWQgd2l0aCBhIHNoYXJlZCBrZXkgY3JlZGVudGlhbC5cbiAgICAgKlxuICAgICAqIEdlbmVyYXRlcyBhIEJsb2IgU2VydmljZSBTaGFyZWQgQWNjZXNzIFNpZ25hdHVyZSAoU0FTKSBVUkkgYmFzZWQgb24gdGhlIGNsaWVudCBwcm9wZXJ0aWVzXG4gICAgICogYW5kIHBhcmFtZXRlcnMgcGFzc2VkIGluLiBUaGUgU0FTIGlzIHNpZ25lZCBieSB0aGUgc2hhcmVkIGtleSBjcmVkZW50aWFsIG9mIHRoZSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9jb25zdHJ1Y3RpbmctYS1zZXJ2aWNlLXNhc1xuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBwYXJhbWV0ZXJzLlxuICAgICAqIEByZXR1cm5zIFRoZSBTQVMgVVJJIGNvbnNpc3Rpbmcgb2YgdGhlIFVSSSB0byB0aGUgcmVzb3VyY2UgcmVwcmVzZW50ZWQgYnkgdGhpcyBjbGllbnQsIGZvbGxvd2VkIGJ5IHRoZSBnZW5lcmF0ZWQgU0FTIHRva2VuLlxuICAgICAqL1xuICAgIGdlbmVyYXRlU2FzVXJsKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBpZiAoISh0aGlzLmNyZWRlbnRpYWwgaW5zdGFuY2VvZiBTdG9yYWdlU2hhcmVkS2V5Q3JlZGVudGlhbCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkNhbiBvbmx5IGdlbmVyYXRlIHRoZSBTQVMgd2hlbiB0aGUgY2xpZW50IGlzIGluaXRpYWxpemVkIHdpdGggYSBzaGFyZWQga2V5IGNyZWRlbnRpYWxcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzYXMgPSBnZW5lcmF0ZUJsb2JTQVNRdWVyeVBhcmFtZXRlcnMoT2JqZWN0LmFzc2lnbih7IGNvbnRhaW5lck5hbWU6IHRoaXMuX2NvbnRhaW5lck5hbWUsIGJsb2JOYW1lOiB0aGlzLl9uYW1lLCBzbmFwc2hvdFRpbWU6IHRoaXMuX3NuYXBzaG90LCB2ZXJzaW9uSWQ6IHRoaXMuX3ZlcnNpb25JZCB9LCBvcHRpb25zKSwgdGhpcy5jcmVkZW50aWFsKS50b1N0cmluZygpO1xuICAgICAgICAgICAgcmVzb2x2ZShhcHBlbmRUb1VSTFF1ZXJ5KHRoaXMudXJsLCBzYXMpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSB0aGUgaW1tdXRhYmxpbGl0eSBwb2xpY3kgb24gdGhlIGJsb2IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIG9wdGlvbnMgdG8gZGVsZXRlIGltbXV0YWJpbGl0eSBwb2xpY3kgb24gdGhlIGJsb2IuXG4gICAgICovXG4gICAgYXN5bmMgZGVsZXRlSW1tdXRhYmlsaXR5UG9saWN5KG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2JDbGllbnQtZGVsZXRlSW1tdXRhYmlsaXR5UG9saWN5XCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMuYmxvYkNvbnRleHQuZGVsZXRlSW1tdXRhYmlsaXR5UG9saWN5KHtcbiAgICAgICAgICAgICAgICB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgaW1tdXRhYmlsaXR5IHBvbGljeSBvbiB0aGUgYmxvYi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgb3B0aW9ucyB0byBzZXQgaW1tdXRhYmlsaXR5IHBvbGljeSBvbiB0aGUgYmxvYi5cbiAgICAgKi9cbiAgICBhc3luYyBzZXRJbW11dGFiaWxpdHlQb2xpY3koaW1tdXRhYmlsaXR5UG9saWN5LCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJCbG9iQ2xpZW50LXNldEltbXV0YWJpbGl0eVBvbGljeVwiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhc3NlcnRSZXNwb25zZShhd2FpdCB0aGlzLmJsb2JDb250ZXh0LnNldEltbXV0YWJpbGl0eVBvbGljeSh7XG4gICAgICAgICAgICAgICAgaW1tdXRhYmlsaXR5UG9saWN5RXhwaXJ5OiBpbW11dGFiaWxpdHlQb2xpY3kuZXhwaXJpZXNPbixcbiAgICAgICAgICAgICAgICBpbW11dGFiaWxpdHlQb2xpY3lNb2RlOiBpbW11dGFiaWxpdHlQb2xpY3kucG9saWN5TW9kZSxcbiAgICAgICAgICAgICAgICB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgbGVnYWwgaG9sZCBvbiB0aGUgYmxvYi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgb3B0aW9ucyB0byBzZXQgbGVnYWwgaG9sZCBvbiB0aGUgYmxvYi5cbiAgICAgKi9cbiAgICBhc3luYyBzZXRMZWdhbEhvbGQobGVnYWxIb2xkRW5hYmxlZCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKFwiQmxvYkNsaWVudC1zZXRMZWdhbEhvbGRcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYXNzZXJ0UmVzcG9uc2UoYXdhaXQgdGhpcy5ibG9iQ29udGV4dC5zZXRMZWdhbEhvbGQobGVnYWxIb2xkRW5hYmxlZCwge1xuICAgICAgICAgICAgICAgIHRyYWNpbmdPcHRpb25zOiB1cGRhdGVkT3B0aW9ucy50cmFjaW5nT3B0aW9ucyxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLyoqXG4gKiBBcHBlbmRCbG9iQ2xpZW50IGRlZmluZXMgYSBzZXQgb2Ygb3BlcmF0aW9ucyBhcHBsaWNhYmxlIHRvIGFwcGVuZCBibG9icy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFwcGVuZEJsb2JDbGllbnQgZXh0ZW5kcyBCbG9iQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih1cmxPckNvbm5lY3Rpb25TdHJpbmcsIGNyZWRlbnRpYWxPclBpcGVsaW5lT3JDb250YWluZXJOYW1lLCBibG9iTmFtZU9yT3B0aW9ucywgXG4gICAgLy8gTGVnYWN5LCBubyBmaXggZm9yIGVzbGludCBlcnJvciB3aXRob3V0IGJyZWFraW5nLiBEaXNhYmxlIGl0IGZvciB0aGlzIGludGVyZmFjZS5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGF6dXJlL2F6dXJlLXNkay90cy1uYW1pbmctb3B0aW9ucyovXG4gICAgb3B0aW9ucykge1xuICAgICAgICAvLyBJbiBUeXBlU2NyaXB0IHdlIGNhbm5vdCBzaW1wbHkgcGFzcyBhbGwgcGFyYW1ldGVycyB0byBzdXBlcigpIGxpa2UgYmVsb3cgc28gaGF2ZSB0byBkdXBsaWNhdGUgdGhlIGNvZGUgaW5zdGVhZC5cbiAgICAgICAgLy8gICBzdXBlcihzLCBjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZU9yT3B0aW9ucywgYmxvYk5hbWVPck9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICBsZXQgcGlwZWxpbmU7XG4gICAgICAgIGxldCB1cmw7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBpZiAoaXNQaXBlbGluZUxpa2UoY3JlZGVudGlhbE9yUGlwZWxpbmVPckNvbnRhaW5lck5hbWUpKSB7XG4gICAgICAgICAgICAvLyAodXJsOiBzdHJpbmcsIHBpcGVsaW5lOiBQaXBlbGluZSlcbiAgICAgICAgICAgIHVybCA9IHVybE9yQ29ubmVjdGlvblN0cmluZztcbiAgICAgICAgICAgIHBpcGVsaW5lID0gY3JlZGVudGlhbE9yUGlwZWxpbmVPckNvbnRhaW5lck5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGlzTm9kZSAmJiBjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZSBpbnN0YW5jZW9mIFN0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsKSB8fFxuICAgICAgICAgICAgY3JlZGVudGlhbE9yUGlwZWxpbmVPckNvbnRhaW5lck5hbWUgaW5zdGFuY2VvZiBBbm9ueW1vdXNDcmVkZW50aWFsIHx8XG4gICAgICAgICAgICBpc1Rva2VuQ3JlZGVudGlhbChjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZSkpIHtcbiAgICAgICAgICAgIC8vICh1cmw6IHN0cmluZywgY3JlZGVudGlhbD86IFN0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsIHwgQW5vbnltb3VzQ3JlZGVudGlhbCB8IFRva2VuQ3JlZGVudGlhbCwgb3B0aW9ucz86IFN0b3JhZ2VQaXBlbGluZU9wdGlvbnMpICAgICAgdXJsID0gdXJsT3JDb25uZWN0aW9uU3RyaW5nO1xuICAgICAgICAgICAgdXJsID0gdXJsT3JDb25uZWN0aW9uU3RyaW5nO1xuICAgICAgICAgICAgb3B0aW9ucyA9IGJsb2JOYW1lT3JPcHRpb25zO1xuICAgICAgICAgICAgcGlwZWxpbmUgPSBuZXdQaXBlbGluZShjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWNyZWRlbnRpYWxPclBpcGVsaW5lT3JDb250YWluZXJOYW1lICYmXG4gICAgICAgICAgICB0eXBlb2YgY3JlZGVudGlhbE9yUGlwZWxpbmVPckNvbnRhaW5lck5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIC8vICh1cmw6IHN0cmluZywgY3JlZGVudGlhbD86IFN0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsIHwgQW5vbnltb3VzQ3JlZGVudGlhbCB8IFRva2VuQ3JlZGVudGlhbCwgb3B0aW9ucz86IFN0b3JhZ2VQaXBlbGluZU9wdGlvbnMpXG4gICAgICAgICAgICB1cmwgPSB1cmxPckNvbm5lY3Rpb25TdHJpbmc7XG4gICAgICAgICAgICAvLyBUaGUgc2Vjb25kIHBhcmFtZXRlciBpcyB1bmRlZmluZWQuIFVzZSBhbm9ueW1vdXMgY3JlZGVudGlhbC5cbiAgICAgICAgICAgIHBpcGVsaW5lID0gbmV3UGlwZWxpbmUobmV3IEFub255bW91c0NyZWRlbnRpYWwoKSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY3JlZGVudGlhbE9yUGlwZWxpbmVPckNvbnRhaW5lck5hbWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiBjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgYmxvYk5hbWVPck9wdGlvbnMgJiZcbiAgICAgICAgICAgIHR5cGVvZiBibG9iTmFtZU9yT3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgLy8gKGNvbm5lY3Rpb25TdHJpbmc6IHN0cmluZywgY29udGFpbmVyTmFtZTogc3RyaW5nLCBibG9iTmFtZTogc3RyaW5nLCBvcHRpb25zPzogU3RvcmFnZVBpcGVsaW5lT3B0aW9ucylcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lck5hbWUgPSBjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZTtcbiAgICAgICAgICAgIGNvbnN0IGJsb2JOYW1lID0gYmxvYk5hbWVPck9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCBleHRyYWN0ZWRDcmVkcyA9IGV4dHJhY3RDb25uZWN0aW9uU3RyaW5nUGFydHModXJsT3JDb25uZWN0aW9uU3RyaW5nKTtcbiAgICAgICAgICAgIGlmIChleHRyYWN0ZWRDcmVkcy5raW5kID09PSBcIkFjY291bnRDb25uU3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNoYXJlZEtleUNyZWRlbnRpYWwgPSBuZXcgU3RvcmFnZVNoYXJlZEtleUNyZWRlbnRpYWwoZXh0cmFjdGVkQ3JlZHMuYWNjb3VudE5hbWUsIGV4dHJhY3RlZENyZWRzLmFjY291bnRLZXkpO1xuICAgICAgICAgICAgICAgICAgICB1cmwgPSBhcHBlbmRUb1VSTFBhdGgoYXBwZW5kVG9VUkxQYXRoKGV4dHJhY3RlZENyZWRzLnVybCwgZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRhaW5lck5hbWUpKSwgZW5jb2RlVVJJQ29tcG9uZW50KGJsb2JOYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5wcm94eU9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucHJveHlPcHRpb25zID0gZ2V0RGVmYXVsdFByb3h5U2V0dGluZ3MoZXh0cmFjdGVkQ3JlZHMucHJveHlVcmkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lID0gbmV3UGlwZWxpbmUoc2hhcmVkS2V5Q3JlZGVudGlhbCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBY2NvdW50IGNvbm5lY3Rpb24gc3RyaW5nIGlzIG9ubHkgc3VwcG9ydGVkIGluIE5vZGUuanMgZW52aXJvbm1lbnRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXh0cmFjdGVkQ3JlZHMua2luZCA9PT0gXCJTQVNDb25uU3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB1cmwgPVxuICAgICAgICAgICAgICAgICAgICBhcHBlbmRUb1VSTFBhdGgoYXBwZW5kVG9VUkxQYXRoKGV4dHJhY3RlZENyZWRzLnVybCwgZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRhaW5lck5hbWUpKSwgZW5jb2RlVVJJQ29tcG9uZW50KGJsb2JOYW1lKSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCI/XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFjdGVkQ3JlZHMuYWNjb3VudFNhcztcbiAgICAgICAgICAgICAgICBwaXBlbGluZSA9IG5ld1BpcGVsaW5lKG5ldyBBbm9ueW1vdXNDcmVkZW50aWFsKCksIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29ubmVjdGlvbiBzdHJpbmcgbXVzdCBiZSBlaXRoZXIgYW4gQWNjb3VudCBjb25uZWN0aW9uIHN0cmluZyBvciBhIFNBUyBjb25uZWN0aW9uIHN0cmluZ1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGluZyBub24tZW1wdHkgc3RyaW5ncyBmb3IgY29udGFpbmVyTmFtZSBhbmQgYmxvYk5hbWUgcGFyYW1ldGVyc1wiKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcih1cmwsIHBpcGVsaW5lKTtcbiAgICAgICAgdGhpcy5hcHBlbmRCbG9iQ29udGV4dCA9IHRoaXMuc3RvcmFnZUNsaWVudENvbnRleHQuYXBwZW5kQmxvYjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBBcHBlbmRCbG9iQ2xpZW50IG9iamVjdCBpZGVudGljYWwgdG8gdGhlIHNvdXJjZSBidXQgd2l0aCB0aGVcbiAgICAgKiBzcGVjaWZpZWQgc25hcHNob3QgdGltZXN0YW1wLlxuICAgICAqIFByb3ZpZGUgXCJcIiB3aWxsIHJlbW92ZSB0aGUgc25hcHNob3QgYW5kIHJldHVybiBhIENsaWVudCB0byB0aGUgYmFzZSBibG9iLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNuYXBzaG90IC0gVGhlIHNuYXBzaG90IHRpbWVzdGFtcC5cbiAgICAgKiBAcmV0dXJucyBBIG5ldyBBcHBlbmRCbG9iQ2xpZW50IG9iamVjdCBpZGVudGljYWwgdG8gdGhlIHNvdXJjZSBidXQgd2l0aCB0aGUgc3BlY2lmaWVkIHNuYXBzaG90IHRpbWVzdGFtcC5cbiAgICAgKi9cbiAgICB3aXRoU25hcHNob3Qoc25hcHNob3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBcHBlbmRCbG9iQ2xpZW50KHNldFVSTFBhcmFtZXRlcih0aGlzLnVybCwgVVJMQ29uc3RhbnRzLlBhcmFtZXRlcnMuU05BUFNIT1QsIHNuYXBzaG90Lmxlbmd0aCA9PT0gMCA/IHVuZGVmaW5lZCA6IHNuYXBzaG90KSwgdGhpcy5waXBlbGluZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSAwLWxlbmd0aCBhcHBlbmQgYmxvYi4gQ2FsbCBBcHBlbmRCbG9jayB0byBhcHBlbmQgZGF0YSB0byBhbiBhcHBlbmQgYmxvYi5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9wdXQtYmxvYlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIHRoZSBBcHBlbmQgQmxvY2sgQ3JlYXRlIG9wZXJhdGlvbi5cbiAgICAgKlxuICAgICAqXG4gICAgICogRXhhbXBsZSB1c2FnZTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgYXBwZW5kQmxvYkNsaWVudCA9IGNvbnRhaW5lckNsaWVudC5nZXRBcHBlbmRCbG9iQ2xpZW50KFwiPGJsb2IgbmFtZT5cIik7XG4gICAgICogYXdhaXQgYXBwZW5kQmxvYkNsaWVudC5jcmVhdGUoKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGUob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIG9wdGlvbnMuY29uZGl0aW9ucyA9IG9wdGlvbnMuY29uZGl0aW9ucyB8fCB7fTtcbiAgICAgICAgZW5zdXJlQ3BrSWZTcGVjaWZpZWQob3B0aW9ucy5jdXN0b21lclByb3ZpZGVkS2V5LCB0aGlzLmlzSHR0cHMpO1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkFwcGVuZEJsb2JDbGllbnQtY3JlYXRlXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICByZXR1cm4gYXNzZXJ0UmVzcG9uc2UoYXdhaXQgdGhpcy5hcHBlbmRCbG9iQ29udGV4dC5jcmVhdGUoMCwge1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgIGJsb2JIdHRwSGVhZGVyczogb3B0aW9ucy5ibG9iSFRUUEhlYWRlcnMsXG4gICAgICAgICAgICAgICAgbGVhc2VBY2Nlc3NDb25kaXRpb25zOiBvcHRpb25zLmNvbmRpdGlvbnMsXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IG9wdGlvbnMubWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgbW9kaWZpZWRBY2Nlc3NDb25kaXRpb25zOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMuY29uZGl0aW9ucyksIHsgaWZUYWdzOiAoX2EgPSBvcHRpb25zLmNvbmRpdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50YWdDb25kaXRpb25zIH0pLFxuICAgICAgICAgICAgICAgIGNwa0luZm86IG9wdGlvbnMuY3VzdG9tZXJQcm92aWRlZEtleSxcbiAgICAgICAgICAgICAgICBlbmNyeXB0aW9uU2NvcGU6IG9wdGlvbnMuZW5jcnlwdGlvblNjb3BlLFxuICAgICAgICAgICAgICAgIGltbXV0YWJpbGl0eVBvbGljeUV4cGlyeTogKF9iID0gb3B0aW9ucy5pbW11dGFiaWxpdHlQb2xpY3kpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5leHBpcmllc09uLFxuICAgICAgICAgICAgICAgIGltbXV0YWJpbGl0eVBvbGljeU1vZGU6IChfYyA9IG9wdGlvbnMuaW1tdXRhYmlsaXR5UG9saWN5KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MucG9saWN5TW9kZSxcbiAgICAgICAgICAgICAgICBsZWdhbEhvbGQ6IG9wdGlvbnMubGVnYWxIb2xkLFxuICAgICAgICAgICAgICAgIGJsb2JUYWdzU3RyaW5nOiB0b0Jsb2JUYWdzU3RyaW5nKG9wdGlvbnMudGFncyksXG4gICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIDAtbGVuZ3RoIGFwcGVuZCBibG9iLiBDYWxsIEFwcGVuZEJsb2NrIHRvIGFwcGVuZCBkYXRhIHRvIGFuIGFwcGVuZCBibG9iLlxuICAgICAqIElmIHRoZSBibG9iIHdpdGggdGhlIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0cywgdGhlIGNvbnRlbnQgb2YgdGhlIGV4aXN0aW5nIGJsb2Igd2lsbCByZW1haW4gdW5jaGFuZ2VkLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL3B1dC1ibG9iXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtXG4gICAgICovXG4gICAgYXN5bmMgY3JlYXRlSWZOb3RFeGlzdHMob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGNvbmRpdGlvbnMgPSB7IGlmTm9uZU1hdGNoOiBFVGFnQW55IH07XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKFwiQXBwZW5kQmxvYkNsaWVudC1jcmVhdGVJZk5vdEV4aXN0c1wiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMuY3JlYXRlKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdXBkYXRlZE9wdGlvbnMpLCB7IGNvbmRpdGlvbnMgfSkpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgc3VjY2VlZGVkOiB0cnVlIH0sIHJlcyksIHsgX3Jlc3BvbnNlOiByZXMuX3Jlc3BvbnNlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoKChfYSA9IGUuZGV0YWlscykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmVycm9yQ29kZSkgPT09IFwiQmxvYkFscmVhZHlFeGlzdHNcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgc3VjY2VlZGVkOiBmYWxzZSB9LCAoX2IgPSBlLnJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucGFyc2VkSGVhZGVycyksIHsgX3Jlc3BvbnNlOiBlLnJlc3BvbnNlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VhbHMgdGhlIGFwcGVuZCBibG9iLCBtYWtpbmcgaXQgcmVhZCBvbmx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLVxuICAgICAqL1xuICAgIGFzeW5jIHNlYWwob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIG9wdGlvbnMuY29uZGl0aW9ucyA9IG9wdGlvbnMuY29uZGl0aW9ucyB8fCB7fTtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJBcHBlbmRCbG9iQ2xpZW50LXNlYWxcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gYXNzZXJ0UmVzcG9uc2UoYXdhaXQgdGhpcy5hcHBlbmRCbG9iQ29udGV4dC5zZWFsKHtcbiAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgICAgICAgICAgICBhcHBlbmRQb3NpdGlvbkFjY2Vzc0NvbmRpdGlvbnM6IG9wdGlvbnMuY29uZGl0aW9ucyxcbiAgICAgICAgICAgICAgICBsZWFzZUFjY2Vzc0NvbmRpdGlvbnM6IG9wdGlvbnMuY29uZGl0aW9ucyxcbiAgICAgICAgICAgICAgICBtb2RpZmllZEFjY2Vzc0NvbmRpdGlvbnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucy5jb25kaXRpb25zKSwgeyBpZlRhZ3M6IChfYSA9IG9wdGlvbnMuY29uZGl0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRhZ0NvbmRpdGlvbnMgfSksXG4gICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tbWl0cyBhIG5ldyBibG9jayBvZiBkYXRhIHRvIHRoZSBlbmQgb2YgdGhlIGV4aXN0aW5nIGFwcGVuZCBibG9iLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL2FwcGVuZC1ibG9ja1xuICAgICAqXG4gICAgICogQHBhcmFtIGJvZHkgLSBEYXRhIHRvIGJlIGFwcGVuZGVkLlxuICAgICAqIEBwYXJhbSBjb250ZW50TGVuZ3RoIC0gTGVuZ3RoIG9mIHRoZSBib2R5IGluIGJ5dGVzLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byB0aGUgQXBwZW5kIEJsb2NrIG9wZXJhdGlvbi5cbiAgICAgKlxuICAgICAqXG4gICAgICogRXhhbXBsZSB1c2FnZTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgY29udGVudCA9IFwiSGVsbG8gV29ybGQhXCI7XG4gICAgICpcbiAgICAgKiAvLyBDcmVhdGUgYSBuZXcgYXBwZW5kIGJsb2IgYW5kIGFwcGVuZCBkYXRhIHRvIHRoZSBibG9iLlxuICAgICAqIGNvbnN0IG5ld0FwcGVuZEJsb2JDbGllbnQgPSBjb250YWluZXJDbGllbnQuZ2V0QXBwZW5kQmxvYkNsaWVudChcIjxibG9iIG5hbWU+XCIpO1xuICAgICAqIGF3YWl0IG5ld0FwcGVuZEJsb2JDbGllbnQuY3JlYXRlKCk7XG4gICAgICogYXdhaXQgbmV3QXBwZW5kQmxvYkNsaWVudC5hcHBlbmRCbG9jayhjb250ZW50LCBjb250ZW50Lmxlbmd0aCk7XG4gICAgICpcbiAgICAgKiAvLyBBcHBlbmQgZGF0YSB0byBhbiBleGlzdGluZyBhcHBlbmQgYmxvYi5cbiAgICAgKiBjb25zdCBleGlzdGluZ0FwcGVuZEJsb2JDbGllbnQgPSBjb250YWluZXJDbGllbnQuZ2V0QXBwZW5kQmxvYkNsaWVudChcIjxibG9iIG5hbWU+XCIpO1xuICAgICAqIGF3YWl0IGV4aXN0aW5nQXBwZW5kQmxvYkNsaWVudC5hcHBlbmRCbG9jayhjb250ZW50LCBjb250ZW50Lmxlbmd0aCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgYXN5bmMgYXBwZW5kQmxvY2soYm9keSwgY29udGVudExlbmd0aCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIG9wdGlvbnMuY29uZGl0aW9ucyA9IG9wdGlvbnMuY29uZGl0aW9ucyB8fCB7fTtcbiAgICAgICAgZW5zdXJlQ3BrSWZTcGVjaWZpZWQob3B0aW9ucy5jdXN0b21lclByb3ZpZGVkS2V5LCB0aGlzLmlzSHR0cHMpO1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkFwcGVuZEJsb2JDbGllbnQtYXBwZW5kQmxvY2tcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gYXNzZXJ0UmVzcG9uc2UoYXdhaXQgdGhpcy5hcHBlbmRCbG9iQ29udGV4dC5hcHBlbmRCbG9jayhjb250ZW50TGVuZ3RoLCBib2R5LCB7XG4gICAgICAgICAgICAgICAgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICAgICAgICAgICAgYXBwZW5kUG9zaXRpb25BY2Nlc3NDb25kaXRpb25zOiBvcHRpb25zLmNvbmRpdGlvbnMsXG4gICAgICAgICAgICAgICAgbGVhc2VBY2Nlc3NDb25kaXRpb25zOiBvcHRpb25zLmNvbmRpdGlvbnMsXG4gICAgICAgICAgICAgICAgbW9kaWZpZWRBY2Nlc3NDb25kaXRpb25zOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMuY29uZGl0aW9ucyksIHsgaWZUYWdzOiAoX2EgPSBvcHRpb25zLmNvbmRpdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50YWdDb25kaXRpb25zIH0pLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIG9uVXBsb2FkUHJvZ3Jlc3M6IG9wdGlvbnMub25Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uYWxDb250ZW50TUQ1OiBvcHRpb25zLnRyYW5zYWN0aW9uYWxDb250ZW50TUQ1LFxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uYWxDb250ZW50Q3JjNjQ6IG9wdGlvbnMudHJhbnNhY3Rpb25hbENvbnRlbnRDcmM2NCxcbiAgICAgICAgICAgICAgICBjcGtJbmZvOiBvcHRpb25zLmN1c3RvbWVyUHJvdmlkZWRLZXksXG4gICAgICAgICAgICAgICAgZW5jcnlwdGlvblNjb3BlOiBvcHRpb25zLmVuY3J5cHRpb25TY29wZSxcbiAgICAgICAgICAgICAgICB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgQXBwZW5kIEJsb2NrIG9wZXJhdGlvbiBjb21taXRzIGEgbmV3IGJsb2NrIG9mIGRhdGEgdG8gdGhlIGVuZCBvZiBhbiBleGlzdGluZyBhcHBlbmQgYmxvYlxuICAgICAqIHdoZXJlIHRoZSBjb250ZW50cyBhcmUgcmVhZCBmcm9tIGEgc291cmNlIHVybC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9hcHBlbmQtYmxvY2stZnJvbS11cmxcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzb3VyY2VVUkwgLVxuICAgICAqICAgICAgICAgICAgICAgICBUaGUgdXJsIHRvIHRoZSBibG9iIHRoYXQgd2lsbCBiZSB0aGUgc291cmNlIG9mIHRoZSBjb3B5LiBBIHNvdXJjZSBibG9iIGluIHRoZSBzYW1lIHN0b3JhZ2UgYWNjb3VudCBjYW5cbiAgICAgKiAgICAgICAgICAgICAgICAgYmUgYXV0aGVudGljYXRlZCB2aWEgU2hhcmVkIEtleS4gSG93ZXZlciwgaWYgdGhlIHNvdXJjZSBpcyBhIGJsb2IgaW4gYW5vdGhlciBhY2NvdW50LCB0aGUgc291cmNlIGJsb2JcbiAgICAgKiAgICAgICAgICAgICAgICAgbXVzdCBlaXRoZXIgYmUgcHVibGljIG9yIG11c3QgYmUgYXV0aGVudGljYXRlZCB2aWEgYSBzaGFyZWQgYWNjZXNzIHNpZ25hdHVyZS4gSWYgdGhlIHNvdXJjZSBibG9iIGlzXG4gICAgICogICAgICAgICAgICAgICAgIHB1YmxpYywgbm8gYXV0aGVudGljYXRpb24gaXMgcmVxdWlyZWQgdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSBzb3VyY2VPZmZzZXQgLSBPZmZzZXQgaW4gc291cmNlIHRvIGJlIGFwcGVuZGVkXG4gICAgICogQHBhcmFtIGNvdW50IC0gTnVtYmVyIG9mIGJ5dGVzIHRvIGJlIGFwcGVuZGVkIGFzIGEgYmxvY2tcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtXG4gICAgICovXG4gICAgYXN5bmMgYXBwZW5kQmxvY2tGcm9tVVJMKHNvdXJjZVVSTCwgc291cmNlT2Zmc2V0LCBjb3VudCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIG9wdGlvbnMuY29uZGl0aW9ucyA9IG9wdGlvbnMuY29uZGl0aW9ucyB8fCB7fTtcbiAgICAgICAgb3B0aW9ucy5zb3VyY2VDb25kaXRpb25zID0gb3B0aW9ucy5zb3VyY2VDb25kaXRpb25zIHx8IHt9O1xuICAgICAgICBlbnN1cmVDcGtJZlNwZWNpZmllZChvcHRpb25zLmN1c3RvbWVyUHJvdmlkZWRLZXksIHRoaXMuaXNIdHRwcyk7XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKFwiQXBwZW5kQmxvYkNsaWVudC1hcHBlbmRCbG9ja0Zyb21VUkxcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMuYXBwZW5kQmxvYkNvbnRleHQuYXBwZW5kQmxvY2tGcm9tVXJsKHNvdXJjZVVSTCwgMCwge1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgIHNvdXJjZVJhbmdlOiByYW5nZVRvU3RyaW5nKHsgb2Zmc2V0OiBzb3VyY2VPZmZzZXQsIGNvdW50IH0pLFxuICAgICAgICAgICAgICAgIHNvdXJjZUNvbnRlbnRNRDU6IG9wdGlvbnMuc291cmNlQ29udGVudE1ENSxcbiAgICAgICAgICAgICAgICBzb3VyY2VDb250ZW50Q3JjNjQ6IG9wdGlvbnMuc291cmNlQ29udGVudENyYzY0LFxuICAgICAgICAgICAgICAgIGxlYXNlQWNjZXNzQ29uZGl0aW9uczogb3B0aW9ucy5jb25kaXRpb25zLFxuICAgICAgICAgICAgICAgIGFwcGVuZFBvc2l0aW9uQWNjZXNzQ29uZGl0aW9uczogb3B0aW9ucy5jb25kaXRpb25zLFxuICAgICAgICAgICAgICAgIG1vZGlmaWVkQWNjZXNzQ29uZGl0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmNvbmRpdGlvbnMpLCB7IGlmVGFnczogKF9hID0gb3B0aW9ucy5jb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGFnQ29uZGl0aW9ucyB9KSxcbiAgICAgICAgICAgICAgICBzb3VyY2VNb2RpZmllZEFjY2Vzc0NvbmRpdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlSWZNYXRjaDogKF9iID0gb3B0aW9ucy5zb3VyY2VDb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuaWZNYXRjaCxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlSWZNb2RpZmllZFNpbmNlOiAoX2MgPSBvcHRpb25zLnNvdXJjZUNvbmRpdGlvbnMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5pZk1vZGlmaWVkU2luY2UsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUlmTm9uZU1hdGNoOiAoX2QgPSBvcHRpb25zLnNvdXJjZUNvbmRpdGlvbnMpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5pZk5vbmVNYXRjaCxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlSWZVbm1vZGlmaWVkU2luY2U6IChfZSA9IG9wdGlvbnMuc291cmNlQ29uZGl0aW9ucykgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLmlmVW5tb2RpZmllZFNpbmNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29weVNvdXJjZUF1dGhvcml6YXRpb246IGh0dHBBdXRob3JpemF0aW9uVG9TdHJpbmcob3B0aW9ucy5zb3VyY2VBdXRob3JpemF0aW9uKSxcbiAgICAgICAgICAgICAgICBjcGtJbmZvOiBvcHRpb25zLmN1c3RvbWVyUHJvdmlkZWRLZXksXG4gICAgICAgICAgICAgICAgZW5jcnlwdGlvblNjb3BlOiBvcHRpb25zLmVuY3J5cHRpb25TY29wZSxcbiAgICAgICAgICAgICAgICB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8qKlxuICogQmxvY2tCbG9iQ2xpZW50IGRlZmluZXMgYSBzZXQgb2Ygb3BlcmF0aW9ucyBhcHBsaWNhYmxlIHRvIGJsb2NrIGJsb2JzLlxuICovXG5leHBvcnQgY2xhc3MgQmxvY2tCbG9iQ2xpZW50IGV4dGVuZHMgQmxvYkNsaWVudCB7XG4gICAgY29uc3RydWN0b3IodXJsT3JDb25uZWN0aW9uU3RyaW5nLCBjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZSwgYmxvYk5hbWVPck9wdGlvbnMsIFxuICAgIC8vIExlZ2FjeSwgbm8gZml4IGZvciBlc2xpbnQgZXJyb3Igd2l0aG91dCBicmVha2luZy4gRGlzYWJsZSBpdCBmb3IgdGhpcyBpbnRlcmZhY2UuXG4gICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhenVyZS9henVyZS1zZGsvdHMtbmFtaW5nLW9wdGlvbnMqL1xuICAgIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gSW4gVHlwZVNjcmlwdCB3ZSBjYW5ub3Qgc2ltcGx5IHBhc3MgYWxsIHBhcmFtZXRlcnMgdG8gc3VwZXIoKSBsaWtlIGJlbG93IHNvIGhhdmUgdG8gZHVwbGljYXRlIHRoZSBjb2RlIGluc3RlYWQuXG4gICAgICAgIC8vICAgc3VwZXIocywgY3JlZGVudGlhbE9yUGlwZWxpbmVPckNvbnRhaW5lck5hbWVPck9wdGlvbnMsIGJsb2JOYW1lT3JPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgbGV0IHBpcGVsaW5lO1xuICAgICAgICBsZXQgdXJsO1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgaWYgKGlzUGlwZWxpbmVMaWtlKGNyZWRlbnRpYWxPclBpcGVsaW5lT3JDb250YWluZXJOYW1lKSkge1xuICAgICAgICAgICAgLy8gKHVybDogc3RyaW5nLCBwaXBlbGluZTogUGlwZWxpbmUpXG4gICAgICAgICAgICB1cmwgPSB1cmxPckNvbm5lY3Rpb25TdHJpbmc7XG4gICAgICAgICAgICBwaXBlbGluZSA9IGNyZWRlbnRpYWxPclBpcGVsaW5lT3JDb250YWluZXJOYW1lO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChpc05vZGUgJiYgY3JlZGVudGlhbE9yUGlwZWxpbmVPckNvbnRhaW5lck5hbWUgaW5zdGFuY2VvZiBTdG9yYWdlU2hhcmVkS2V5Q3JlZGVudGlhbCkgfHxcbiAgICAgICAgICAgIGNyZWRlbnRpYWxPclBpcGVsaW5lT3JDb250YWluZXJOYW1lIGluc3RhbmNlb2YgQW5vbnltb3VzQ3JlZGVudGlhbCB8fFxuICAgICAgICAgICAgaXNUb2tlbkNyZWRlbnRpYWwoY3JlZGVudGlhbE9yUGlwZWxpbmVPckNvbnRhaW5lck5hbWUpKSB7XG4gICAgICAgICAgICAvLyAodXJsOiBzdHJpbmcsIGNyZWRlbnRpYWw/OiBTdG9yYWdlU2hhcmVkS2V5Q3JlZGVudGlhbCB8IEFub255bW91c0NyZWRlbnRpYWwgfCBUb2tlbkNyZWRlbnRpYWwsIG9wdGlvbnM/OiBTdG9yYWdlUGlwZWxpbmVPcHRpb25zKVxuICAgICAgICAgICAgdXJsID0gdXJsT3JDb25uZWN0aW9uU3RyaW5nO1xuICAgICAgICAgICAgb3B0aW9ucyA9IGJsb2JOYW1lT3JPcHRpb25zO1xuICAgICAgICAgICAgcGlwZWxpbmUgPSBuZXdQaXBlbGluZShjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWNyZWRlbnRpYWxPclBpcGVsaW5lT3JDb250YWluZXJOYW1lICYmXG4gICAgICAgICAgICB0eXBlb2YgY3JlZGVudGlhbE9yUGlwZWxpbmVPckNvbnRhaW5lck5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIC8vICh1cmw6IHN0cmluZywgY3JlZGVudGlhbD86IFN0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsIHwgQW5vbnltb3VzQ3JlZGVudGlhbCB8IFRva2VuQ3JlZGVudGlhbCwgb3B0aW9ucz86IFN0b3JhZ2VQaXBlbGluZU9wdGlvbnMpXG4gICAgICAgICAgICAvLyBUaGUgc2Vjb25kIHBhcmFtZXRlciBpcyB1bmRlZmluZWQuIFVzZSBhbm9ueW1vdXMgY3JlZGVudGlhbC5cbiAgICAgICAgICAgIHVybCA9IHVybE9yQ29ubmVjdGlvblN0cmluZztcbiAgICAgICAgICAgIGlmIChibG9iTmFtZU9yT3B0aW9ucyAmJiB0eXBlb2YgYmxvYk5hbWVPck9wdGlvbnMgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gYmxvYk5hbWVPck9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwaXBlbGluZSA9IG5ld1BpcGVsaW5lKG5ldyBBbm9ueW1vdXNDcmVkZW50aWFsKCksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNyZWRlbnRpYWxPclBpcGVsaW5lT3JDb250YWluZXJOYW1lICYmXG4gICAgICAgICAgICB0eXBlb2YgY3JlZGVudGlhbE9yUGlwZWxpbmVPckNvbnRhaW5lck5hbWUgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgIGJsb2JOYW1lT3JPcHRpb25zICYmXG4gICAgICAgICAgICB0eXBlb2YgYmxvYk5hbWVPck9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIC8vIChjb25uZWN0aW9uU3RyaW5nOiBzdHJpbmcsIGNvbnRhaW5lck5hbWU6IHN0cmluZywgYmxvYk5hbWU6IHN0cmluZywgb3B0aW9ucz86IFN0b3JhZ2VQaXBlbGluZU9wdGlvbnMpXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJOYW1lID0gY3JlZGVudGlhbE9yUGlwZWxpbmVPckNvbnRhaW5lck5hbWU7XG4gICAgICAgICAgICBjb25zdCBibG9iTmFtZSA9IGJsb2JOYW1lT3JPcHRpb25zO1xuICAgICAgICAgICAgY29uc3QgZXh0cmFjdGVkQ3JlZHMgPSBleHRyYWN0Q29ubmVjdGlvblN0cmluZ1BhcnRzKHVybE9yQ29ubmVjdGlvblN0cmluZyk7XG4gICAgICAgICAgICBpZiAoZXh0cmFjdGVkQ3JlZHMua2luZCA9PT0gXCJBY2NvdW50Q29ublN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzaGFyZWRLZXlDcmVkZW50aWFsID0gbmV3IFN0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsKGV4dHJhY3RlZENyZWRzLmFjY291bnROYW1lLCBleHRyYWN0ZWRDcmVkcy5hY2NvdW50S2V5KTtcbiAgICAgICAgICAgICAgICAgICAgdXJsID0gYXBwZW5kVG9VUkxQYXRoKGFwcGVuZFRvVVJMUGF0aChleHRyYWN0ZWRDcmVkcy51cmwsIGVuY29kZVVSSUNvbXBvbmVudChjb250YWluZXJOYW1lKSksIGVuY29kZVVSSUNvbXBvbmVudChibG9iTmFtZSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMucHJveHlPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnByb3h5T3B0aW9ucyA9IGdldERlZmF1bHRQcm94eVNldHRpbmdzKGV4dHJhY3RlZENyZWRzLnByb3h5VXJpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwaXBlbGluZSA9IG5ld1BpcGVsaW5lKHNoYXJlZEtleUNyZWRlbnRpYWwsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWNjb3VudCBjb25uZWN0aW9uIHN0cmluZyBpcyBvbmx5IHN1cHBvcnRlZCBpbiBOb2RlLmpzIGVudmlyb25tZW50XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV4dHJhY3RlZENyZWRzLmtpbmQgPT09IFwiU0FTQ29ublN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdXJsID1cbiAgICAgICAgICAgICAgICAgICAgYXBwZW5kVG9VUkxQYXRoKGFwcGVuZFRvVVJMUGF0aChleHRyYWN0ZWRDcmVkcy51cmwsIGVuY29kZVVSSUNvbXBvbmVudChjb250YWluZXJOYW1lKSksIGVuY29kZVVSSUNvbXBvbmVudChibG9iTmFtZSkpICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiP1wiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3RlZENyZWRzLmFjY291bnRTYXM7XG4gICAgICAgICAgICAgICAgcGlwZWxpbmUgPSBuZXdQaXBlbGluZShuZXcgQW5vbnltb3VzQ3JlZGVudGlhbCgpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbm5lY3Rpb24gc3RyaW5nIG11c3QgYmUgZWl0aGVyIGFuIEFjY291bnQgY29ubmVjdGlvbiBzdHJpbmcgb3IgYSBTQVMgY29ubmVjdGlvbiBzdHJpbmdcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3Rpbmcgbm9uLWVtcHR5IHN0cmluZ3MgZm9yIGNvbnRhaW5lck5hbWUgYW5kIGJsb2JOYW1lIHBhcmFtZXRlcnNcIik7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIodXJsLCBwaXBlbGluZSk7XG4gICAgICAgIHRoaXMuYmxvY2tCbG9iQ29udGV4dCA9IHRoaXMuc3RvcmFnZUNsaWVudENvbnRleHQuYmxvY2tCbG9iO1xuICAgICAgICB0aGlzLl9ibG9iQ29udGV4dCA9IHRoaXMuc3RvcmFnZUNsaWVudENvbnRleHQuYmxvYjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBCbG9ja0Jsb2JDbGllbnQgb2JqZWN0IGlkZW50aWNhbCB0byB0aGUgc291cmNlIGJ1dCB3aXRoIHRoZVxuICAgICAqIHNwZWNpZmllZCBzbmFwc2hvdCB0aW1lc3RhbXAuXG4gICAgICogUHJvdmlkZSBcIlwiIHdpbGwgcmVtb3ZlIHRoZSBzbmFwc2hvdCBhbmQgcmV0dXJuIGEgVVJMIHRvIHRoZSBiYXNlIGJsb2IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc25hcHNob3QgLSBUaGUgc25hcHNob3QgdGltZXN0YW1wLlxuICAgICAqIEByZXR1cm5zIEEgbmV3IEJsb2NrQmxvYkNsaWVudCBvYmplY3QgaWRlbnRpY2FsIHRvIHRoZSBzb3VyY2UgYnV0IHdpdGggdGhlIHNwZWNpZmllZCBzbmFwc2hvdCB0aW1lc3RhbXAuXG4gICAgICovXG4gICAgd2l0aFNuYXBzaG90KHNuYXBzaG90KSB7XG4gICAgICAgIHJldHVybiBuZXcgQmxvY2tCbG9iQ2xpZW50KHNldFVSTFBhcmFtZXRlcih0aGlzLnVybCwgVVJMQ29uc3RhbnRzLlBhcmFtZXRlcnMuU05BUFNIT1QsIHNuYXBzaG90Lmxlbmd0aCA9PT0gMCA/IHVuZGVmaW5lZCA6IHNuYXBzaG90KSwgdGhpcy5waXBlbGluZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9OTFkgQVZBSUxBQkxFIElOIE5PREUuSlMgUlVOVElNRS5cbiAgICAgKlxuICAgICAqIFF1aWNrIHF1ZXJ5IGZvciBhIEpTT04gb3IgQ1NWIGZvcm1hdHRlZCBibG9iLlxuICAgICAqXG4gICAgICogRXhhbXBsZSB1c2FnZSAoTm9kZS5qcyk6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIC8vIFF1ZXJ5IGFuZCBjb252ZXJ0IGEgYmxvYiB0byBhIHN0cmluZ1xuICAgICAqIGNvbnN0IHF1ZXJ5QmxvY2tCbG9iUmVzcG9uc2UgPSBhd2FpdCBibG9ja0Jsb2JDbGllbnQucXVlcnkoXCJzZWxlY3QgKiBmcm9tIEJsb2JTdG9yYWdlXCIpO1xuICAgICAqIGNvbnN0IGRvd25sb2FkZWQgPSAoYXdhaXQgc3RyZWFtVG9CdWZmZXIocXVlcnlCbG9ja0Jsb2JSZXNwb25zZS5yZWFkYWJsZVN0cmVhbUJvZHkpKS50b1N0cmluZygpO1xuICAgICAqIGNvbnNvbGUubG9nKFwiUXVlcnkgYmxvYiBjb250ZW50OlwiLCBkb3dubG9hZGVkKTtcbiAgICAgKlxuICAgICAqIGFzeW5jIGZ1bmN0aW9uIHN0cmVhbVRvQnVmZmVyKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgICogICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAqICAgICBjb25zdCBjaHVua3MgPSBbXTtcbiAgICAgKiAgICAgcmVhZGFibGVTdHJlYW0ub24oXCJkYXRhXCIsIChkYXRhKSA9PiB7XG4gICAgICogICAgICAgY2h1bmtzLnB1c2goZGF0YSBpbnN0YW5jZW9mIEJ1ZmZlciA/IGRhdGEgOiBCdWZmZXIuZnJvbShkYXRhKSk7XG4gICAgICogICAgIH0pO1xuICAgICAqICAgICByZWFkYWJsZVN0cmVhbS5vbihcImVuZFwiLCAoKSA9PiB7XG4gICAgICogICAgICAgcmVzb2x2ZShCdWZmZXIuY29uY2F0KGNodW5rcykpO1xuICAgICAqICAgICB9KTtcbiAgICAgKiAgICAgcmVhZGFibGVTdHJlYW0ub24oXCJlcnJvclwiLCByZWplY3QpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHF1ZXJ5IC1cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtXG4gICAgICovXG4gICAgYXN5bmMgcXVlcnkocXVlcnksIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBlbnN1cmVDcGtJZlNwZWNpZmllZChvcHRpb25zLmN1c3RvbWVyUHJvdmlkZWRLZXksIHRoaXMuaXNIdHRwcyk7XG4gICAgICAgIGlmICghaXNOb2RlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG9wZXJhdGlvbiBjdXJyZW50bHkgaXMgb25seSBzdXBwb3J0ZWQgaW4gTm9kZS5qcy5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJCbG9ja0Jsb2JDbGllbnQtcXVlcnlcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMuX2Jsb2JDb250ZXh0LnF1ZXJ5KHtcbiAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgICAgICAgICAgICBxdWVyeVJlcXVlc3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlUeXBlOiBcIlNRTFwiLFxuICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBxdWVyeSxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRTZXJpYWxpemF0aW9uOiB0b1F1ZXJ5U2VyaWFsaXphdGlvbihvcHRpb25zLmlucHV0VGV4dENvbmZpZ3VyYXRpb24pLFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRTZXJpYWxpemF0aW9uOiB0b1F1ZXJ5U2VyaWFsaXphdGlvbihvcHRpb25zLm91dHB1dFRleHRDb25maWd1cmF0aW9uKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxlYXNlQWNjZXNzQ29uZGl0aW9uczogb3B0aW9ucy5jb25kaXRpb25zLFxuICAgICAgICAgICAgICAgIG1vZGlmaWVkQWNjZXNzQ29uZGl0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmNvbmRpdGlvbnMpLCB7IGlmVGFnczogKF9hID0gb3B0aW9ucy5jb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGFnQ29uZGl0aW9ucyB9KSxcbiAgICAgICAgICAgICAgICBjcGtJbmZvOiBvcHRpb25zLmN1c3RvbWVyUHJvdmlkZWRLZXksXG4gICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCbG9iUXVlcnlSZXNwb25zZShyZXNwb25zZSwge1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgIG9uUHJvZ3Jlc3M6IG9wdGlvbnMub25Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBvbkVycm9yOiBvcHRpb25zLm9uRXJyb3IsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYmxvY2sgYmxvYiwgb3IgdXBkYXRlcyB0aGUgY29udGVudCBvZiBhbiBleGlzdGluZyBibG9jayBibG9iLlxuICAgICAqIFVwZGF0aW5nIGFuIGV4aXN0aW5nIGJsb2NrIGJsb2Igb3ZlcndyaXRlcyBhbnkgZXhpc3RpbmcgbWV0YWRhdGEgb24gdGhlIGJsb2IuXG4gICAgICogUGFydGlhbCB1cGRhdGVzIGFyZSBub3Qgc3VwcG9ydGVkOyB0aGUgY29udGVudCBvZiB0aGUgZXhpc3RpbmcgYmxvYiBpc1xuICAgICAqIG92ZXJ3cml0dGVuIHdpdGggdGhlIG5ldyBjb250ZW50LiBUbyBwZXJmb3JtIGEgcGFydGlhbCB1cGRhdGUgb2YgYSBibG9jayBibG9iJ3MsXG4gICAgICogdXNlIHtAbGluayBzdGFnZUJsb2NrfSBhbmQge0BsaW5rIGNvbW1pdEJsb2NrTGlzdH0uXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIGEgbm9uLXBhcmFsbGVsIHVwbG9hZGluZyBtZXRob2QsIHBsZWFzZSB1c2Uge0BsaW5rIHVwbG9hZEZpbGV9LFxuICAgICAqIHtAbGluayB1cGxvYWRTdHJlYW19IG9yIHtAbGluayB1cGxvYWRCcm93c2VyRGF0YX0gZm9yIGJldHRlciBwZXJmb3JtYW5jZVxuICAgICAqIHdpdGggY29uY3VycmVuY3kgdXBsb2FkaW5nLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9yZXN0L2FwaS9zdG9yYWdlc2VydmljZXMvcHV0LWJsb2JcbiAgICAgKlxuICAgICAqIEBwYXJhbSBib2R5IC0gQmxvYiwgc3RyaW5nLCBBcnJheUJ1ZmZlciwgQXJyYXlCdWZmZXJWaWV3IG9yIGEgZnVuY3Rpb25cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGljaCByZXR1cm5zIGEgbmV3IFJlYWRhYmxlIHN0cmVhbSB3aG9zZSBvZmZzZXQgaXMgZnJvbSBkYXRhIHNvdXJjZSBiZWdpbm5pbmcuXG4gICAgICogQHBhcmFtIGNvbnRlbnRMZW5ndGggLSBMZW5ndGggb2YgYm9keSBpbiBieXRlcy4gVXNlIEJ1ZmZlci5ieXRlTGVuZ3RoKCkgdG8gY2FsY3VsYXRlIGJvZHkgbGVuZ3RoIGZvciBhXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIGluY2x1ZGluZyBub24gbm9uLUJhc2U2NC9IZXgtZW5jb2RlZCBjaGFyYWN0ZXJzLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byB0aGUgQmxvY2sgQmxvYiBVcGxvYWQgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIFJlc3BvbnNlIGRhdGEgZm9yIHRoZSBCbG9jayBCbG9iIFVwbG9hZCBvcGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBFeGFtcGxlIHVzYWdlOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBjb250ZW50ID0gXCJIZWxsbyB3b3JsZCFcIjtcbiAgICAgKiBjb25zdCB1cGxvYWRCbG9iUmVzcG9uc2UgPSBhd2FpdCBibG9ja0Jsb2JDbGllbnQudXBsb2FkKGNvbnRlbnQsIGNvbnRlbnQubGVuZ3RoKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBhc3luYyB1cGxvYWQoYm9keSwgY29udGVudExlbmd0aCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIG9wdGlvbnMuY29uZGl0aW9ucyA9IG9wdGlvbnMuY29uZGl0aW9ucyB8fCB7fTtcbiAgICAgICAgZW5zdXJlQ3BrSWZTcGVjaWZpZWQob3B0aW9ucy5jdXN0b21lclByb3ZpZGVkS2V5LCB0aGlzLmlzSHR0cHMpO1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2NrQmxvYkNsaWVudC11cGxvYWRcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgICAgIHJldHVybiBhc3NlcnRSZXNwb25zZShhd2FpdCB0aGlzLmJsb2NrQmxvYkNvbnRleHQudXBsb2FkKGNvbnRlbnRMZW5ndGgsIGJvZHksIHtcbiAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgICAgICAgICAgICBibG9iSHR0cEhlYWRlcnM6IG9wdGlvbnMuYmxvYkhUVFBIZWFkZXJzLFxuICAgICAgICAgICAgICAgIGxlYXNlQWNjZXNzQ29uZGl0aW9uczogb3B0aW9ucy5jb25kaXRpb25zLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBvcHRpb25zLm1ldGFkYXRhLFxuICAgICAgICAgICAgICAgIG1vZGlmaWVkQWNjZXNzQ29uZGl0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmNvbmRpdGlvbnMpLCB7IGlmVGFnczogKF9hID0gb3B0aW9ucy5jb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGFnQ29uZGl0aW9ucyB9KSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0T3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICBvblVwbG9hZFByb2dyZXNzOiBvcHRpb25zLm9uUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjcGtJbmZvOiBvcHRpb25zLmN1c3RvbWVyUHJvdmlkZWRLZXksXG4gICAgICAgICAgICAgICAgZW5jcnlwdGlvblNjb3BlOiBvcHRpb25zLmVuY3J5cHRpb25TY29wZSxcbiAgICAgICAgICAgICAgICBpbW11dGFiaWxpdHlQb2xpY3lFeHBpcnk6IChfYiA9IG9wdGlvbnMuaW1tdXRhYmlsaXR5UG9saWN5KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZXhwaXJpZXNPbixcbiAgICAgICAgICAgICAgICBpbW11dGFiaWxpdHlQb2xpY3lNb2RlOiAoX2MgPSBvcHRpb25zLmltbXV0YWJpbGl0eVBvbGljeSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnBvbGljeU1vZGUsXG4gICAgICAgICAgICAgICAgbGVnYWxIb2xkOiBvcHRpb25zLmxlZ2FsSG9sZCxcbiAgICAgICAgICAgICAgICB0aWVyOiB0b0FjY2Vzc1RpZXIob3B0aW9ucy50aWVyKSxcbiAgICAgICAgICAgICAgICBibG9iVGFnc1N0cmluZzogdG9CbG9iVGFnc1N0cmluZyhvcHRpb25zLnRhZ3MpLFxuICAgICAgICAgICAgICAgIHRyYWNpbmdPcHRpb25zOiB1cGRhdGVkT3B0aW9ucy50cmFjaW5nT3B0aW9ucyxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQmxvY2sgQmxvYiB3aGVyZSB0aGUgY29udGVudHMgb2YgdGhlIGJsb2IgYXJlIHJlYWQgZnJvbSBhIGdpdmVuIFVSTC5cbiAgICAgKiBUaGlzIEFQSSBpcyBzdXBwb3J0ZWQgYmVnaW5uaW5nIHdpdGggdGhlIDIwMjAtMDQtMDggdmVyc2lvbi4gUGFydGlhbCB1cGRhdGVzXG4gICAgICogYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCBQdXQgQmxvYiBmcm9tIFVSTDsgdGhlIGNvbnRlbnQgb2YgYW4gZXhpc3RpbmcgYmxvYiBpcyBvdmVyd3JpdHRlbiB3aXRoXG4gICAgICogdGhlIGNvbnRlbnQgb2YgdGhlIG5ldyBibG9iLiAgVG8gcGVyZm9ybSBwYXJ0aWFsIHVwZGF0ZXMgdG8gYSBibG9jayBibG9i4oCZcyBjb250ZW50cyB1c2luZyBhXG4gICAgICogc291cmNlIFVSTCwgdXNlIHtAbGluayBzdGFnZUJsb2NrRnJvbVVSTH0gYW5kIHtAbGluayBjb21taXRCbG9ja0xpc3R9LlxuICAgICAqXG4gICAgICogQHBhcmFtIHNvdXJjZVVSTCAtIFNwZWNpZmllcyB0aGUgVVJMIG9mIHRoZSBibG9iLiBUaGUgdmFsdWVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heSBiZSBhIFVSTCBvZiB1cCB0byAyIEtCIGluIGxlbmd0aCB0aGF0IHNwZWNpZmllcyBhIGJsb2IuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgdmFsdWUgc2hvdWxkIGJlIFVSTC1lbmNvZGVkIGFzIGl0IHdvdWxkIGFwcGVhclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gYSByZXF1ZXN0IFVSSS4gVGhlIHNvdXJjZSBibG9iIG11c3QgZWl0aGVyIGJlIHB1YmxpY1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgbXVzdCBiZSBhdXRoZW50aWNhdGVkIHZpYSBhIHNoYXJlZCBhY2Nlc3Mgc2lnbmF0dXJlLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgdGhlIHNvdXJjZSBibG9iIGlzIHB1YmxpYywgbm8gYXV0aGVudGljYXRpb24gaXMgcmVxdWlyZWRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi4gSGVyZSBhcmUgc29tZSBleGFtcGxlcyBvZiBzb3VyY2Ugb2JqZWN0IFVSTHM6XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAtIGh0dHBzOi8vbXlhY2NvdW50LmJsb2IuY29yZS53aW5kb3dzLm5ldC9teWNvbnRhaW5lci9teWJsb2JcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gaHR0cHM6Ly9teWFjY291bnQuYmxvYi5jb3JlLndpbmRvd3MubmV0L215Y29udGFpbmVyL215YmxvYj9zbmFwc2hvdD08RGF0ZVRpbWU+XG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIGFzeW5jIHN5bmNVcGxvYWRGcm9tVVJMKHNvdXJjZVVSTCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIG9wdGlvbnMuY29uZGl0aW9ucyA9IG9wdGlvbnMuY29uZGl0aW9ucyB8fCB7fTtcbiAgICAgICAgZW5zdXJlQ3BrSWZTcGVjaWZpZWQob3B0aW9ucy5jdXN0b21lclByb3ZpZGVkS2V5LCB0aGlzLmlzSHR0cHMpO1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2NrQmxvYkNsaWVudC1zeW5jVXBsb2FkRnJvbVVSTFwiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMuYmxvY2tCbG9iQ29udGV4dC5wdXRCbG9iRnJvbVVybCgwLCBzb3VyY2VVUkwsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgYmxvYkh0dHBIZWFkZXJzOiBvcHRpb25zLmJsb2JIVFRQSGVhZGVycywgbGVhc2VBY2Nlc3NDb25kaXRpb25zOiBvcHRpb25zLmNvbmRpdGlvbnMsIG1vZGlmaWVkQWNjZXNzQ29uZGl0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmNvbmRpdGlvbnMpLCB7IGlmVGFnczogKF9hID0gb3B0aW9ucy5jb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGFnQ29uZGl0aW9ucyB9KSwgc291cmNlTW9kaWZpZWRBY2Nlc3NDb25kaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUlmTWF0Y2g6IChfYiA9IG9wdGlvbnMuc291cmNlQ29uZGl0aW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmlmTWF0Y2gsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUlmTW9kaWZpZWRTaW5jZTogKF9jID0gb3B0aW9ucy5zb3VyY2VDb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuaWZNb2RpZmllZFNpbmNlLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VJZk5vbmVNYXRjaDogKF9kID0gb3B0aW9ucy5zb3VyY2VDb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuaWZOb25lTWF0Y2gsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUlmVW5tb2RpZmllZFNpbmNlOiAoX2UgPSBvcHRpb25zLnNvdXJjZUNvbmRpdGlvbnMpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5pZlVubW9kaWZpZWRTaW5jZSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlSWZUYWdzOiAoX2YgPSBvcHRpb25zLnNvdXJjZUNvbmRpdGlvbnMpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi50YWdDb25kaXRpb25zLFxuICAgICAgICAgICAgICAgIH0sIGNwa0luZm86IG9wdGlvbnMuY3VzdG9tZXJQcm92aWRlZEtleSwgY29weVNvdXJjZUF1dGhvcml6YXRpb246IGh0dHBBdXRob3JpemF0aW9uVG9TdHJpbmcob3B0aW9ucy5zb3VyY2VBdXRob3JpemF0aW9uKSwgdGllcjogdG9BY2Nlc3NUaWVyKG9wdGlvbnMudGllciksIGJsb2JUYWdzU3RyaW5nOiB0b0Jsb2JUYWdzU3RyaW5nKG9wdGlvbnMudGFncyksIGNvcHlTb3VyY2VUYWdzOiBvcHRpb25zLmNvcHlTb3VyY2VUYWdzLCB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMgfSkpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwbG9hZHMgdGhlIHNwZWNpZmllZCBibG9jayB0byB0aGUgYmxvY2sgYmxvYidzIFwic3RhZ2luZyBhcmVhXCIgdG8gYmUgbGF0ZXJcbiAgICAgKiBjb21taXR0ZWQgYnkgYSBjYWxsIHRvIGNvbW1pdEJsb2NrTGlzdC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9wdXQtYmxvY2tcbiAgICAgKlxuICAgICAqIEBwYXJhbSBibG9ja0lkIC0gQSA2NC1ieXRlIHZhbHVlIHRoYXQgaXMgYmFzZTY0LWVuY29kZWRcbiAgICAgKiBAcGFyYW0gYm9keSAtIERhdGEgdG8gdXBsb2FkIHRvIHRoZSBzdGFnaW5nIGFyZWEuXG4gICAgICogQHBhcmFtIGNvbnRlbnRMZW5ndGggLSBOdW1iZXIgb2YgYnl0ZXMgdG8gdXBsb2FkLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byB0aGUgQmxvY2sgQmxvYiBTdGFnZSBCbG9jayBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMgUmVzcG9uc2UgZGF0YSBmb3IgdGhlIEJsb2NrIEJsb2IgU3RhZ2UgQmxvY2sgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIHN0YWdlQmxvY2soYmxvY2tJZCwgYm9keSwgY29udGVudExlbmd0aCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGVuc3VyZUNwa0lmU3BlY2lmaWVkKG9wdGlvbnMuY3VzdG9tZXJQcm92aWRlZEtleSwgdGhpcy5pc0h0dHBzKTtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJCbG9ja0Jsb2JDbGllbnQtc3RhZ2VCbG9ja1wiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhc3NlcnRSZXNwb25zZShhd2FpdCB0aGlzLmJsb2NrQmxvYkNvbnRleHQuc3RhZ2VCbG9jayhibG9ja0lkLCBjb250ZW50TGVuZ3RoLCBib2R5LCB7XG4gICAgICAgICAgICAgICAgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICAgICAgICAgICAgbGVhc2VBY2Nlc3NDb25kaXRpb25zOiBvcHRpb25zLmNvbmRpdGlvbnMsXG4gICAgICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgb25VcGxvYWRQcm9ncmVzczogb3B0aW9ucy5vblByb2dyZXNzLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25hbENvbnRlbnRNRDU6IG9wdGlvbnMudHJhbnNhY3Rpb25hbENvbnRlbnRNRDUsXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25hbENvbnRlbnRDcmM2NDogb3B0aW9ucy50cmFuc2FjdGlvbmFsQ29udGVudENyYzY0LFxuICAgICAgICAgICAgICAgIGNwa0luZm86IG9wdGlvbnMuY3VzdG9tZXJQcm92aWRlZEtleSxcbiAgICAgICAgICAgICAgICBlbmNyeXB0aW9uU2NvcGU6IG9wdGlvbnMuZW5jcnlwdGlvblNjb3BlLFxuICAgICAgICAgICAgICAgIHRyYWNpbmdPcHRpb25zOiB1cGRhdGVkT3B0aW9ucy50cmFjaW5nT3B0aW9ucyxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBTdGFnZSBCbG9jayBGcm9tIFVSTCBvcGVyYXRpb24gY3JlYXRlcyBhIG5ldyBibG9jayB0byBiZSBjb21taXR0ZWQgYXMgcGFydFxuICAgICAqIG9mIGEgYmxvYiB3aGVyZSB0aGUgY29udGVudHMgYXJlIHJlYWQgZnJvbSBhIFVSTC5cbiAgICAgKiBUaGlzIEFQSSBpcyBhdmFpbGFibGUgc3RhcnRpbmcgaW4gdmVyc2lvbiAyMDE4LTAzLTI4LlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL3B1dC1ibG9jay1mcm9tLXVybFxuICAgICAqXG4gICAgICogQHBhcmFtIGJsb2NrSWQgLSBBIDY0LWJ5dGUgdmFsdWUgdGhhdCBpcyBiYXNlNjQtZW5jb2RlZFxuICAgICAqIEBwYXJhbSBzb3VyY2VVUkwgLSBTcGVjaWZpZXMgdGhlIFVSTCBvZiB0aGUgYmxvYi4gVGhlIHZhbHVlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBtYXkgYmUgYSBVUkwgb2YgdXAgdG8gMiBLQiBpbiBsZW5ndGggdGhhdCBzcGVjaWZpZXMgYSBibG9iLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHZhbHVlIHNob3VsZCBiZSBVUkwtZW5jb2RlZCBhcyBpdCB3b3VsZCBhcHBlYXJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIGEgcmVxdWVzdCBVUkkuIFRoZSBzb3VyY2UgYmxvYiBtdXN0IGVpdGhlciBiZSBwdWJsaWNcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIG11c3QgYmUgYXV0aGVudGljYXRlZCB2aWEgYSBzaGFyZWQgYWNjZXNzIHNpZ25hdHVyZS5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHRoZSBzb3VyY2UgYmxvYiBpcyBwdWJsaWMsIG5vIGF1dGhlbnRpY2F0aW9uIGlzIHJlcXVpcmVkXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uIEhlcmUgYXJlIHNvbWUgZXhhbXBsZXMgb2Ygc291cmNlIG9iamVjdCBVUkxzOlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBodHRwczovL215YWNjb3VudC5ibG9iLmNvcmUud2luZG93cy5uZXQvbXljb250YWluZXIvbXlibG9iXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAtIGh0dHBzOi8vbXlhY2NvdW50LmJsb2IuY29yZS53aW5kb3dzLm5ldC9teWNvbnRhaW5lci9teWJsb2I/c25hcHNob3Q9PERhdGVUaW1lPlxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBGcm9tIHdoaWNoIHBvc2l0aW9uIG9mIHRoZSBibG9iIHRvIGRvd25sb2FkLCBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMFxuICAgICAqIEBwYXJhbSBjb3VudCAtIEhvdyBtdWNoIGRhdGEgdG8gYmUgZG93bmxvYWRlZCwgZ3JlYXRlciB0aGFuIDAuIFdpbGwgZG93bmxvYWQgdG8gdGhlIGVuZCB3aGVuIHVuZGVmaW5lZFxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byB0aGUgQmxvY2sgQmxvYiBTdGFnZSBCbG9jayBGcm9tIFVSTCBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMgUmVzcG9uc2UgZGF0YSBmb3IgdGhlIEJsb2NrIEJsb2IgU3RhZ2UgQmxvY2sgRnJvbSBVUkwgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIHN0YWdlQmxvY2tGcm9tVVJMKGJsb2NrSWQsIHNvdXJjZVVSTCwgb2Zmc2V0ID0gMCwgY291bnQsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBlbnN1cmVDcGtJZlNwZWNpZmllZChvcHRpb25zLmN1c3RvbWVyUHJvdmlkZWRLZXksIHRoaXMuaXNIdHRwcyk7XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKFwiQmxvY2tCbG9iQ2xpZW50LXN0YWdlQmxvY2tGcm9tVVJMXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMuYmxvY2tCbG9iQ29udGV4dC5zdGFnZUJsb2NrRnJvbVVSTChibG9ja0lkLCAwLCBzb3VyY2VVUkwsIHtcbiAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgICAgICAgICAgICBsZWFzZUFjY2Vzc0NvbmRpdGlvbnM6IG9wdGlvbnMuY29uZGl0aW9ucyxcbiAgICAgICAgICAgICAgICBzb3VyY2VDb250ZW50TUQ1OiBvcHRpb25zLnNvdXJjZUNvbnRlbnRNRDUsXG4gICAgICAgICAgICAgICAgc291cmNlQ29udGVudENyYzY0OiBvcHRpb25zLnNvdXJjZUNvbnRlbnRDcmM2NCxcbiAgICAgICAgICAgICAgICBzb3VyY2VSYW5nZTogb2Zmc2V0ID09PSAwICYmICFjb3VudCA/IHVuZGVmaW5lZCA6IHJhbmdlVG9TdHJpbmcoeyBvZmZzZXQsIGNvdW50IH0pLFxuICAgICAgICAgICAgICAgIGNwa0luZm86IG9wdGlvbnMuY3VzdG9tZXJQcm92aWRlZEtleSxcbiAgICAgICAgICAgICAgICBlbmNyeXB0aW9uU2NvcGU6IG9wdGlvbnMuZW5jcnlwdGlvblNjb3BlLFxuICAgICAgICAgICAgICAgIGNvcHlTb3VyY2VBdXRob3JpemF0aW9uOiBodHRwQXV0aG9yaXphdGlvblRvU3RyaW5nKG9wdGlvbnMuc291cmNlQXV0aG9yaXphdGlvbiksXG4gICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGVzIGEgYmxvYiBieSBzcGVjaWZ5aW5nIHRoZSBsaXN0IG9mIGJsb2NrIElEcyB0aGF0IG1ha2UgdXAgdGhlIGJsb2IuXG4gICAgICogSW4gb3JkZXIgdG8gYmUgd3JpdHRlbiBhcyBwYXJ0IG9mIGEgYmxvYiwgYSBibG9jayBtdXN0IGhhdmUgYmVlbiBzdWNjZXNzZnVsbHkgd3JpdHRlblxuICAgICAqIHRvIHRoZSBzZXJ2ZXIgaW4gYSBwcmlvciB7QGxpbmsgc3RhZ2VCbG9ja30gb3BlcmF0aW9uLiBZb3UgY2FuIGNhbGwge0BsaW5rIGNvbW1pdEJsb2NrTGlzdH0gdG9cbiAgICAgKiB1cGRhdGUgYSBibG9iIGJ5IHVwbG9hZGluZyBvbmx5IHRob3NlIGJsb2NrcyB0aGF0IGhhdmUgY2hhbmdlZCwgdGhlbiBjb21taXR0aW5nIHRoZSBuZXcgYW5kIGV4aXN0aW5nXG4gICAgICogYmxvY2tzIHRvZ2V0aGVyLiBBbnkgYmxvY2tzIG5vdCBzcGVjaWZpZWQgaW4gdGhlIGJsb2NrIGxpc3QgYW5kIHBlcm1hbmVudGx5IGRlbGV0ZWQuXG4gICAgICogQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9yZXN0L2FwaS9zdG9yYWdlc2VydmljZXMvcHV0LWJsb2NrLWxpc3RcbiAgICAgKlxuICAgICAqIEBwYXJhbSBibG9ja3MgLSAgQXJyYXkgb2YgNjQtYnl0ZSB2YWx1ZSB0aGF0IGlzIGJhc2U2NC1lbmNvZGVkXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIHRoZSBCbG9jayBCbG9iIENvbW1pdCBCbG9jayBMaXN0IG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyBSZXNwb25zZSBkYXRhIGZvciB0aGUgQmxvY2sgQmxvYiBDb21taXQgQmxvY2sgTGlzdCBvcGVyYXRpb24uXG4gICAgICovXG4gICAgYXN5bmMgY29tbWl0QmxvY2tMaXN0KGJsb2Nrcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIG9wdGlvbnMuY29uZGl0aW9ucyA9IG9wdGlvbnMuY29uZGl0aW9ucyB8fCB7fTtcbiAgICAgICAgZW5zdXJlQ3BrSWZTcGVjaWZpZWQob3B0aW9ucy5jdXN0b21lclByb3ZpZGVkS2V5LCB0aGlzLmlzSHR0cHMpO1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2NrQmxvYkNsaWVudC1jb21taXRCbG9ja0xpc3RcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgICAgIHJldHVybiBhc3NlcnRSZXNwb25zZShhd2FpdCB0aGlzLmJsb2NrQmxvYkNvbnRleHQuY29tbWl0QmxvY2tMaXN0KHsgbGF0ZXN0OiBibG9ja3MgfSwge1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgIGJsb2JIdHRwSGVhZGVyczogb3B0aW9ucy5ibG9iSFRUUEhlYWRlcnMsXG4gICAgICAgICAgICAgICAgbGVhc2VBY2Nlc3NDb25kaXRpb25zOiBvcHRpb25zLmNvbmRpdGlvbnMsXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IG9wdGlvbnMubWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgbW9kaWZpZWRBY2Nlc3NDb25kaXRpb25zOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMuY29uZGl0aW9ucyksIHsgaWZUYWdzOiAoX2EgPSBvcHRpb25zLmNvbmRpdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50YWdDb25kaXRpb25zIH0pLFxuICAgICAgICAgICAgICAgIGNwa0luZm86IG9wdGlvbnMuY3VzdG9tZXJQcm92aWRlZEtleSxcbiAgICAgICAgICAgICAgICBlbmNyeXB0aW9uU2NvcGU6IG9wdGlvbnMuZW5jcnlwdGlvblNjb3BlLFxuICAgICAgICAgICAgICAgIGltbXV0YWJpbGl0eVBvbGljeUV4cGlyeTogKF9iID0gb3B0aW9ucy5pbW11dGFiaWxpdHlQb2xpY3kpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5leHBpcmllc09uLFxuICAgICAgICAgICAgICAgIGltbXV0YWJpbGl0eVBvbGljeU1vZGU6IChfYyA9IG9wdGlvbnMuaW1tdXRhYmlsaXR5UG9saWN5KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MucG9saWN5TW9kZSxcbiAgICAgICAgICAgICAgICBsZWdhbEhvbGQ6IG9wdGlvbnMubGVnYWxIb2xkLFxuICAgICAgICAgICAgICAgIHRpZXI6IHRvQWNjZXNzVGllcihvcHRpb25zLnRpZXIpLFxuICAgICAgICAgICAgICAgIGJsb2JUYWdzU3RyaW5nOiB0b0Jsb2JUYWdzU3RyaW5nKG9wdGlvbnMudGFncyksXG4gICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGlzdCBvZiBibG9ja3MgdGhhdCBoYXZlIGJlZW4gdXBsb2FkZWQgYXMgcGFydCBvZiBhIGJsb2NrIGJsb2JcbiAgICAgKiB1c2luZyB0aGUgc3BlY2lmaWVkIGJsb2NrIGxpc3QgZmlsdGVyLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL2dldC1ibG9jay1saXN0XG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdFR5cGUgLSBTcGVjaWZpZXMgd2hldGhlciB0byByZXR1cm4gdGhlIGxpc3Qgb2YgY29tbWl0dGVkIGJsb2NrcyxcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgbGlzdCBvZiB1bmNvbW1pdHRlZCBibG9ja3MsIG9yIGJvdGggbGlzdHMgdG9nZXRoZXIuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIHRoZSBCbG9jayBCbG9iIEdldCBCbG9jayBMaXN0IG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyBSZXNwb25zZSBkYXRhIGZvciB0aGUgQmxvY2sgQmxvYiBHZXQgQmxvY2sgTGlzdCBvcGVyYXRpb24uXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QmxvY2tMaXN0KGxpc3RUeXBlLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJCbG9ja0Jsb2JDbGllbnQtZ2V0QmxvY2tMaXN0XCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXNzZXJ0UmVzcG9uc2UoYXdhaXQgdGhpcy5ibG9ja0Jsb2JDb250ZXh0LmdldEJsb2NrTGlzdChsaXN0VHlwZSwge1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgIGxlYXNlQWNjZXNzQ29uZGl0aW9uczogb3B0aW9ucy5jb25kaXRpb25zLFxuICAgICAgICAgICAgICAgIG1vZGlmaWVkQWNjZXNzQ29uZGl0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmNvbmRpdGlvbnMpLCB7IGlmVGFnczogKF9hID0gb3B0aW9ucy5jb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGFnQ29uZGl0aW9ucyB9KSxcbiAgICAgICAgICAgICAgICB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBpZiAoIXJlcy5jb21taXR0ZWRCbG9ja3MpIHtcbiAgICAgICAgICAgICAgICByZXMuY29tbWl0dGVkQmxvY2tzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXJlcy51bmNvbW1pdHRlZEJsb2Nrcykge1xuICAgICAgICAgICAgICAgIHJlcy51bmNvbW1pdHRlZEJsb2NrcyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIEhpZ2ggbGV2ZWwgZnVuY3Rpb25zXG4gICAgLyoqXG4gICAgICogVXBsb2FkcyBhIEJ1ZmZlcihOb2RlLmpzKS9CbG9iKGJyb3dzZXJzKS9BcnJheUJ1ZmZlci9BcnJheUJ1ZmZlclZpZXcgb2JqZWN0IHRvIGEgQmxvY2tCbG9iLlxuICAgICAqXG4gICAgICogV2hlbiBkYXRhIGxlbmd0aCBpcyBubyBtb3JlIHRoYW4gdGhlIHNwZWNpZmlsZWQge0BsaW5rIEJsb2NrQmxvYlBhcmFsbGVsVXBsb2FkT3B0aW9ucy5tYXhTaW5nbGVTaG90U2l6ZX0gKGRlZmF1bHQgaXNcbiAgICAgKiB7QGxpbmsgQkxPQ0tfQkxPQl9NQVhfVVBMT0FEX0JMT0JfQllURVN9KSwgdGhpcyBtZXRob2Qgd2lsbCB1c2UgMSB7QGxpbmsgdXBsb2FkfSBjYWxsIHRvIGZpbmlzaCB0aGUgdXBsb2FkLlxuICAgICAqIE90aGVyd2lzZSwgdGhpcyBtZXRob2Qgd2lsbCBjYWxsIHtAbGluayBzdGFnZUJsb2NrfSB0byB1cGxvYWQgYmxvY2tzLCBhbmQgZmluYWxseSBjYWxsIHtAbGluayBjb21taXRCbG9ja0xpc3R9XG4gICAgICogdG8gY29tbWl0IHRoZSBibG9jayBsaXN0LlxuICAgICAqXG4gICAgICogQSBjb21tb24ge0BsaW5rIEJsb2NrQmxvYlBhcmFsbGVsVXBsb2FkT3B0aW9ucy5ibG9iSFRUUEhlYWRlcnN9IG9wdGlvbiB0byBzZXQgaXNcbiAgICAgKiBgYmxvYkNvbnRlbnRUeXBlYCwgZW5hYmxpbmcgdGhlIGJyb3dzZXIgdG8gcHJvdmlkZVxuICAgICAqIGZ1bmN0aW9uYWxpdHkgYmFzZWQgb24gZmlsZSB0eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGEgLSBCdWZmZXIoTm9kZS5qcyksIEJsb2IsIEFycmF5QnVmZmVyIG9yIEFycmF5QnVmZmVyVmlld1xuICAgICAqIEBwYXJhbSBvcHRpb25zIC1cbiAgICAgKi9cbiAgICBhc3luYyB1cGxvYWREYXRhKGRhdGEsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2NrQmxvYkNsaWVudC11cGxvYWREYXRhXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgICAgICAgIGxldCBidWZmZXI7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnVwbG9hZFNlZWthYmxlSW50ZXJuYWwoKG9mZnNldCwgc2l6ZSkgPT4gYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgc2l6ZSksIGJ1ZmZlci5ieXRlTGVuZ3RoLCB1cGRhdGVkT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBicm93c2VyQmxvYiA9IG5ldyBCbG9iKFtkYXRhXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBsb2FkU2Vla2FibGVJbnRlcm5hbCgob2Zmc2V0LCBzaXplKSA9PiBicm93c2VyQmxvYi5zbGljZShvZmZzZXQsIG9mZnNldCArIHNpemUpLCBicm93c2VyQmxvYi5zaXplLCB1cGRhdGVkT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPTkxZIEFWQUlMQUJMRSBJTiBCUk9XU0VSUy5cbiAgICAgKlxuICAgICAqIFVwbG9hZHMgYSBicm93c2VyIEJsb2IvRmlsZS9BcnJheUJ1ZmZlci9BcnJheUJ1ZmZlclZpZXcgb2JqZWN0IHRvIGJsb2NrIGJsb2IuXG4gICAgICpcbiAgICAgKiBXaGVuIGJ1ZmZlciBsZW5ndGggbGVzc2VyIHRoYW4gb3IgZXF1YWwgdG8gMjU2TUIsIHRoaXMgbWV0aG9kIHdpbGwgdXNlIDEgdXBsb2FkIGNhbGwgdG8gZmluaXNoIHRoZSB1cGxvYWQuXG4gICAgICogT3RoZXJ3aXNlLCB0aGlzIG1ldGhvZCB3aWxsIGNhbGwge0BsaW5rIHN0YWdlQmxvY2t9IHRvIHVwbG9hZCBibG9ja3MsIGFuZCBmaW5hbGx5IGNhbGxcbiAgICAgKiB7QGxpbmsgY29tbWl0QmxvY2tMaXN0fSB0byBjb21taXQgdGhlIGJsb2NrIGxpc3QuXG4gICAgICpcbiAgICAgKiBBIGNvbW1vbiB7QGxpbmsgQmxvY2tCbG9iUGFyYWxsZWxVcGxvYWRPcHRpb25zLmJsb2JIVFRQSGVhZGVyc30gb3B0aW9uIHRvIHNldCBpc1xuICAgICAqIGBibG9iQ29udGVudFR5cGVgLCBlbmFibGluZyB0aGUgYnJvd3NlciB0byBwcm92aWRlXG4gICAgICogZnVuY3Rpb25hbGl0eSBiYXNlZCBvbiBmaWxlIHR5cGUuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIHVwbG9hZERhdGF9IGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYnJvd3NlckRhdGEgLSBCbG9iLCBGaWxlLCBBcnJheUJ1ZmZlciBvciBBcnJheUJ1ZmZlclZpZXdcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gdXBsb2FkIGJyb3dzZXIgZGF0YS5cbiAgICAgKiBAcmV0dXJucyBSZXNwb25zZSBkYXRhIGZvciB0aGUgQmxvYiBVcGxvYWQgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIHVwbG9hZEJyb3dzZXJEYXRhKGJyb3dzZXJEYXRhLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJCbG9ja0Jsb2JDbGllbnQtdXBsb2FkQnJvd3NlckRhdGFcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBicm93c2VyQmxvYiA9IG5ldyBCbG9iKFticm93c2VyRGF0YV0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBsb2FkU2Vla2FibGVJbnRlcm5hbCgob2Zmc2V0LCBzaXplKSA9PiBicm93c2VyQmxvYi5zbGljZShvZmZzZXQsIG9mZnNldCArIHNpemUpLCBicm93c2VyQmxvYi5zaXplLCB1cGRhdGVkT3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFVwbG9hZHMgZGF0YSB0byBibG9jayBibG9iLiBSZXF1aXJlcyBhIGJvZHlGYWN0b3J5IGFzIHRoZSBkYXRhIHNvdXJjZSxcbiAgICAgKiB3aGljaCBuZWVkIHRvIHJldHVybiBhIHtAbGluayBIdHRwUmVxdWVzdEJvZHl9IG9iamVjdCB3aXRoIHRoZSBvZmZzZXQgYW5kIHNpemUgcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiBXaGVuIGRhdGEgbGVuZ3RoIGlzIG5vIG1vcmUgdGhhbiB0aGUgc3BlY2lmaWVkIHtAbGluayBCbG9ja0Jsb2JQYXJhbGxlbFVwbG9hZE9wdGlvbnMubWF4U2luZ2xlU2hvdFNpemV9IChkZWZhdWx0IGlzXG4gICAgICoge0BsaW5rIEJMT0NLX0JMT0JfTUFYX1VQTE9BRF9CTE9CX0JZVEVTfSksIHRoaXMgbWV0aG9kIHdpbGwgdXNlIDEge0BsaW5rIHVwbG9hZH0gY2FsbCB0byBmaW5pc2ggdGhlIHVwbG9hZC5cbiAgICAgKiBPdGhlcndpc2UsIHRoaXMgbWV0aG9kIHdpbGwgY2FsbCB7QGxpbmsgc3RhZ2VCbG9ja30gdG8gdXBsb2FkIGJsb2NrcywgYW5kIGZpbmFsbHkgY2FsbCB7QGxpbmsgY29tbWl0QmxvY2tMaXN0fVxuICAgICAqIHRvIGNvbW1pdCB0aGUgYmxvY2sgbGlzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBib2R5RmFjdG9yeSAtXG4gICAgICogQHBhcmFtIHNpemUgLSBzaXplIG9mIHRoZSBkYXRhIHRvIHVwbG9hZC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gVXBsb2FkIHRvIEJsb2NrIEJsb2Igb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIFJlc3BvbnNlIGRhdGEgZm9yIHRoZSBCbG9iIFVwbG9hZCBvcGVyYXRpb24uXG4gICAgICovXG4gICAgYXN5bmMgdXBsb2FkU2Vla2FibGVJbnRlcm5hbChib2R5RmFjdG9yeSwgc2l6ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGxldCBibG9ja1NpemUgPSAoX2EgPSBvcHRpb25zLmJsb2NrU2l6ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICAgICAgaWYgKGJsb2NrU2l6ZSA8IDAgfHwgYmxvY2tTaXplID4gQkxPQ0tfQkxPQl9NQVhfU1RBR0VfQkxPQ0tfQllURVMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBibG9ja1NpemUgb3B0aW9uIG11c3QgYmUgPj0gMCBhbmQgPD0gJHtCTE9DS19CTE9CX01BWF9TVEFHRV9CTE9DS19CWVRFU31gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtYXhTaW5nbGVTaG90U2l6ZSA9IChfYiA9IG9wdGlvbnMubWF4U2luZ2xlU2hvdFNpemUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IEJMT0NLX0JMT0JfTUFYX1VQTE9BRF9CTE9CX0JZVEVTO1xuICAgICAgICBpZiAobWF4U2luZ2xlU2hvdFNpemUgPCAwIHx8IG1heFNpbmdsZVNob3RTaXplID4gQkxPQ0tfQkxPQl9NQVhfVVBMT0FEX0JMT0JfQllURVMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBtYXhTaW5nbGVTaG90U2l6ZSBvcHRpb24gbXVzdCBiZSA+PSAwIGFuZCA8PSAke0JMT0NLX0JMT0JfTUFYX1VQTE9BRF9CTE9CX0JZVEVTfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChibG9ja1NpemUgPT09IDApIHtcbiAgICAgICAgICAgIGlmIChzaXplID4gQkxPQ0tfQkxPQl9NQVhfU1RBR0VfQkxPQ0tfQllURVMgKiBCTE9DS19CTE9CX01BWF9CTE9DS1MpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgJHtzaXplfSBpcyB0b28gbGFyZ2VyIHRvIHVwbG9hZCB0byBhIGJsb2NrIGJsb2IuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2l6ZSA+IG1heFNpbmdsZVNob3RTaXplKSB7XG4gICAgICAgICAgICAgICAgYmxvY2tTaXplID0gTWF0aC5jZWlsKHNpemUgLyBCTE9DS19CTE9CX01BWF9CTE9DS1MpO1xuICAgICAgICAgICAgICAgIGlmIChibG9ja1NpemUgPCBERUZBVUxUX0JMT0JfRE9XTkxPQURfQkxPQ0tfQllURVMpIHtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tTaXplID0gREVGQVVMVF9CTE9CX0RPV05MT0FEX0JMT0NLX0JZVEVTO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMuYmxvYkhUVFBIZWFkZXJzKSB7XG4gICAgICAgICAgICBvcHRpb25zLmJsb2JIVFRQSGVhZGVycyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9ucy5jb25kaXRpb25zKSB7XG4gICAgICAgICAgICBvcHRpb25zLmNvbmRpdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2NrQmxvYkNsaWVudC11cGxvYWRTZWVrYWJsZUludGVybmFsXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgaWYgKHNpemUgPD0gbWF4U2luZ2xlU2hvdFNpemUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXNzZXJ0UmVzcG9uc2UoYXdhaXQgdGhpcy51cGxvYWQoYm9keUZhY3RvcnkoMCwgc2l6ZSksIHNpemUsIHVwZGF0ZWRPcHRpb25zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBudW1CbG9ja3MgPSBNYXRoLmZsb29yKChzaXplIC0gMSkgLyBibG9ja1NpemUpICsgMTtcbiAgICAgICAgICAgIGlmIChudW1CbG9ja3MgPiBCTE9DS19CTE9CX01BWF9CTE9DS1MpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgVGhlIGJ1ZmZlcidzIHNpemUgaXMgdG9vIGJpZyBvciB0aGUgQmxvY2tTaXplIGlzIHRvbyBzbWFsbDtgICtcbiAgICAgICAgICAgICAgICAgICAgYHRoZSBudW1iZXIgb2YgYmxvY2tzIG11c3QgYmUgPD0gJHtCTE9DS19CTE9CX01BWF9CTE9DS1N9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBibG9ja0xpc3QgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrSURQcmVmaXggPSByYW5kb21VVUlEKCk7XG4gICAgICAgICAgICBsZXQgdHJhbnNmZXJQcm9ncmVzcyA9IDA7XG4gICAgICAgICAgICBjb25zdCBiYXRjaCA9IG5ldyBCYXRjaChvcHRpb25zLmNvbmN1cnJlbmN5KTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQmxvY2tzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBiYXRjaC5hZGRPcGVyYXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBibG9ja0lEID0gZ2VuZXJhdGVCbG9ja0lEKGJsb2NrSURQcmVmaXgsIGkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGJsb2NrU2l6ZSAqIGk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9IGkgPT09IG51bUJsb2NrcyAtIDEgPyBzaXplIDogc3RhcnQgKyBibG9ja1NpemU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRMZW5ndGggPSBlbmQgLSBzdGFydDtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tMaXN0LnB1c2goYmxvY2tJRCk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc3RhZ2VCbG9jayhibG9ja0lELCBib2R5RmFjdG9yeShzdGFydCwgY29udGVudExlbmd0aCksIGNvbnRlbnRMZW5ndGgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uczogb3B0aW9ucy5jb25kaXRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5jcnlwdGlvblNjb3BlOiBvcHRpb25zLmVuY3J5cHRpb25TY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNpbmdPcHRpb25zOiB1cGRhdGVkT3B0aW9ucy50cmFjaW5nT3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBwcm9ncmVzcyBhZnRlciBibG9jayBpcyBzdWNjZXNzZnVsbHkgdXBsb2FkZWQgdG8gc2VydmVyLCBpbiBjYXNlIG9mIGJsb2NrIHRyeWluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBIb29rIHdpdGggY29udmVuaWVuY2UgbGF5ZXIgcHJvZ3Jlc3MgZXZlbnQgaW4gZmluZXIgbGV2ZWxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmZXJQcm9ncmVzcyArPSBjb250ZW50TGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uUHJvZ3Jlc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRlZEJ5dGVzOiB0cmFuc2ZlclByb2dyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IGJhdGNoLmRvKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21taXRCbG9ja0xpc3QoYmxvY2tMaXN0LCB1cGRhdGVkT3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPTkxZIEFWQUlMQUJMRSBJTiBOT0RFLkpTIFJVTlRJTUUuXG4gICAgICpcbiAgICAgKiBVcGxvYWRzIGEgbG9jYWwgZmlsZSBpbiBibG9ja3MgdG8gYSBibG9jayBibG9iLlxuICAgICAqXG4gICAgICogV2hlbiBmaWxlIHNpemUgbGVzc2VyIHRoYW4gb3IgZXF1YWwgdG8gMjU2TUIsIHRoaXMgbWV0aG9kIHdpbGwgdXNlIDEgdXBsb2FkIGNhbGwgdG8gZmluaXNoIHRoZSB1cGxvYWQuXG4gICAgICogT3RoZXJ3aXNlLCB0aGlzIG1ldGhvZCB3aWxsIGNhbGwgc3RhZ2VCbG9jayB0byB1cGxvYWQgYmxvY2tzLCBhbmQgZmluYWxseSBjYWxsIGNvbW1pdEJsb2NrTGlzdFxuICAgICAqIHRvIGNvbW1pdCB0aGUgYmxvY2sgbGlzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmaWxlUGF0aCAtIEZ1bGwgcGF0aCBvZiBsb2NhbCBmaWxlXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIFVwbG9hZCB0byBCbG9jayBCbG9iIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyBSZXNwb25zZSBkYXRhIGZvciB0aGUgQmxvYiBVcGxvYWQgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIHVwbG9hZEZpbGUoZmlsZVBhdGgsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2NrQmxvYkNsaWVudC11cGxvYWRGaWxlXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IChhd2FpdCBmc1N0YXQoZmlsZVBhdGgpKS5zaXplO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBsb2FkU2Vla2FibGVJbnRlcm5hbCgob2Zmc2V0LCBjb3VudCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBmc0NyZWF0ZVJlYWRTdHJlYW0oZmlsZVBhdGgsIHtcbiAgICAgICAgICAgICAgICAgICAgYXV0b0Nsb3NlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IGNvdW50ID8gb2Zmc2V0ICsgY291bnQgLSAxIDogSW5maW5pdHksXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBvZmZzZXQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBzaXplLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IHRyYWNpbmdPcHRpb25zOiB1cGRhdGVkT3B0aW9ucy50cmFjaW5nT3B0aW9ucyB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPTkxZIEFWQUlMQUJMRSBJTiBOT0RFLkpTIFJVTlRJTUUuXG4gICAgICpcbiAgICAgKiBVcGxvYWRzIGEgTm9kZS5qcyBSZWFkYWJsZSBzdHJlYW0gaW50byBibG9jayBibG9iLlxuICAgICAqXG4gICAgICogUEVSRk9STUFOQ0UgSU1QUk9WRU1FTlQgVElQUzpcbiAgICAgKiAqIElucHV0IHN0cmVhbSBoaWdoV2F0ZXJNYXJrIGlzIGJldHRlciB0byBzZXQgYSBzYW1lIHZhbHVlIHdpdGggYnVmZmVyU2l6ZVxuICAgICAqICAgIHBhcmFtZXRlciwgd2hpY2ggd2lsbCBhdm9pZCBCdWZmZXIuY29uY2F0KCkgb3BlcmF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdHJlYW0gLSBOb2RlLmpzIFJlYWRhYmxlIHN0cmVhbVxuICAgICAqIEBwYXJhbSBidWZmZXJTaXplIC0gU2l6ZSBvZiBldmVyeSBidWZmZXIgYWxsb2NhdGVkLCBhbHNvIHRoZSBibG9jayBzaXplIGluIHRoZSB1cGxvYWRlZCBibG9jayBibG9iLiBEZWZhdWx0IHZhbHVlIGlzIDhNQlxuICAgICAqIEBwYXJhbSBtYXhDb25jdXJyZW5jeSAtICBNYXggY29uY3VycmVuY3kgaW5kaWNhdGVzIHRoZSBtYXggbnVtYmVyIG9mIGJ1ZmZlcnMgdGhhdCBjYW4gYmUgYWxsb2NhdGVkLFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpdmUgY29ycmVsYXRpb24gd2l0aCBtYXggdXBsb2FkaW5nIGNvbmN1cnJlbmN5LiBEZWZhdWx0IHZhbHVlIGlzIDVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gVXBsb2FkIFN0cmVhbSB0byBCbG9jayBCbG9iIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyBSZXNwb25zZSBkYXRhIGZvciB0aGUgQmxvYiBVcGxvYWQgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIHVwbG9hZFN0cmVhbShzdHJlYW0sIGJ1ZmZlclNpemUgPSBERUZBVUxUX0JMT0NLX0JVRkZFUl9TSVpFX0JZVEVTLCBtYXhDb25jdXJyZW5jeSA9IDUsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAoIW9wdGlvbnMuYmxvYkhUVFBIZWFkZXJzKSB7XG4gICAgICAgICAgICBvcHRpb25zLmJsb2JIVFRQSGVhZGVycyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9ucy5jb25kaXRpb25zKSB7XG4gICAgICAgICAgICBvcHRpb25zLmNvbmRpdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2NrQmxvYkNsaWVudC11cGxvYWRTdHJlYW1cIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBsZXQgYmxvY2tOdW0gPSAwO1xuICAgICAgICAgICAgY29uc3QgYmxvY2tJRFByZWZpeCA9IHJhbmRvbVVVSUQoKTtcbiAgICAgICAgICAgIGxldCB0cmFuc2ZlclByb2dyZXNzID0gMDtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrTGlzdCA9IFtdO1xuICAgICAgICAgICAgY29uc3Qgc2NoZWR1bGVyID0gbmV3IEJ1ZmZlclNjaGVkdWxlcihzdHJlYW0sIGJ1ZmZlclNpemUsIG1heENvbmN1cnJlbmN5LCBhc3luYyAoYm9keSwgbGVuZ3RoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmxvY2tJRCA9IGdlbmVyYXRlQmxvY2tJRChibG9ja0lEUHJlZml4LCBibG9ja051bSk7XG4gICAgICAgICAgICAgICAgYmxvY2tMaXN0LnB1c2goYmxvY2tJRCk7XG4gICAgICAgICAgICAgICAgYmxvY2tOdW0rKztcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnN0YWdlQmxvY2soYmxvY2tJRCwgYm9keSwgbGVuZ3RoLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnM6IG9wdGlvbnMuY29uZGl0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgZW5jcnlwdGlvblNjb3BlOiBvcHRpb25zLmVuY3J5cHRpb25TY29wZSxcbiAgICAgICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBwcm9ncmVzcyBhZnRlciBibG9jayBpcyBzdWNjZXNzZnVsbHkgdXBsb2FkZWQgdG8gc2VydmVyLCBpbiBjYXNlIG9mIGJsb2NrIHRyeWluZ1xuICAgICAgICAgICAgICAgIHRyYW5zZmVyUHJvZ3Jlc3MgKz0gbGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm9uUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vblByb2dyZXNzKHsgbG9hZGVkQnl0ZXM6IHRyYW5zZmVyUHJvZ3Jlc3MgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAvLyBjb25jdXJyZW5jeSBzaG91bGQgc2V0IGEgc21hbGxlciB2YWx1ZSB0aGFuIG1heENvbmN1cnJlbmN5LCB3aGljaCBpcyBoZWxwZnVsIHRvXG4gICAgICAgICAgICAvLyByZWR1Y2UgdGhlIHBvc3NpYmlsaXR5IHdoZW4gYSBvdXRnb2luZyBoYW5kbGVyIHdhaXRzIGZvciBzdHJlYW0gZGF0YSwgaW5cbiAgICAgICAgICAgIC8vIHRoaXMgc2l0dWF0aW9uLCBvdXRnb2luZyBoYW5kbGVycyBhcmUgYmxvY2tlZC5cbiAgICAgICAgICAgIC8vIE91dGdvaW5nIHF1ZXVlIHNob3VsZG4ndCBiZSBlbXB0eS5cbiAgICAgICAgICAgIE1hdGguY2VpbCgobWF4Q29uY3VycmVuY3kgLyA0KSAqIDMpKTtcbiAgICAgICAgICAgIGF3YWl0IHNjaGVkdWxlci5kbygpO1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMuY29tbWl0QmxvY2tMaXN0KGJsb2NrTGlzdCwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMgfSkpKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLyoqXG4gKiBQYWdlQmxvYkNsaWVudCBkZWZpbmVzIGEgc2V0IG9mIG9wZXJhdGlvbnMgYXBwbGljYWJsZSB0byBwYWdlIGJsb2JzLlxuICovXG5leHBvcnQgY2xhc3MgUGFnZUJsb2JDbGllbnQgZXh0ZW5kcyBCbG9iQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih1cmxPckNvbm5lY3Rpb25TdHJpbmcsIGNyZWRlbnRpYWxPclBpcGVsaW5lT3JDb250YWluZXJOYW1lLCBibG9iTmFtZU9yT3B0aW9ucywgXG4gICAgLy8gTGVnYWN5LCBubyBmaXggZm9yIGVzbGludCBlcnJvciB3aXRob3V0IGJyZWFraW5nLiBEaXNhYmxlIGl0IGZvciB0aGlzIGludGVyZmFjZS5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGF6dXJlL2F6dXJlLXNkay90cy1uYW1pbmctb3B0aW9ucyovXG4gICAgb3B0aW9ucykge1xuICAgICAgICAvLyBJbiBUeXBlU2NyaXB0IHdlIGNhbm5vdCBzaW1wbHkgcGFzcyBhbGwgcGFyYW1ldGVycyB0byBzdXBlcigpIGxpa2UgYmVsb3cgc28gaGF2ZSB0byBkdXBsaWNhdGUgdGhlIGNvZGUgaW5zdGVhZC5cbiAgICAgICAgLy8gICBzdXBlcihzLCBjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZU9yT3B0aW9ucywgYmxvYk5hbWVPck9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICBsZXQgcGlwZWxpbmU7XG4gICAgICAgIGxldCB1cmw7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBpZiAoaXNQaXBlbGluZUxpa2UoY3JlZGVudGlhbE9yUGlwZWxpbmVPckNvbnRhaW5lck5hbWUpKSB7XG4gICAgICAgICAgICAvLyAodXJsOiBzdHJpbmcsIHBpcGVsaW5lOiBQaXBlbGluZSlcbiAgICAgICAgICAgIHVybCA9IHVybE9yQ29ubmVjdGlvblN0cmluZztcbiAgICAgICAgICAgIHBpcGVsaW5lID0gY3JlZGVudGlhbE9yUGlwZWxpbmVPckNvbnRhaW5lck5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGlzTm9kZSAmJiBjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZSBpbnN0YW5jZW9mIFN0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsKSB8fFxuICAgICAgICAgICAgY3JlZGVudGlhbE9yUGlwZWxpbmVPckNvbnRhaW5lck5hbWUgaW5zdGFuY2VvZiBBbm9ueW1vdXNDcmVkZW50aWFsIHx8XG4gICAgICAgICAgICBpc1Rva2VuQ3JlZGVudGlhbChjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZSkpIHtcbiAgICAgICAgICAgIC8vICh1cmw6IHN0cmluZywgY3JlZGVudGlhbD86IFN0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsIHwgQW5vbnltb3VzQ3JlZGVudGlhbCB8IFRva2VuQ3JlZGVudGlhbCwgb3B0aW9ucz86IFN0b3JhZ2VQaXBlbGluZU9wdGlvbnMpXG4gICAgICAgICAgICB1cmwgPSB1cmxPckNvbm5lY3Rpb25TdHJpbmc7XG4gICAgICAgICAgICBvcHRpb25zID0gYmxvYk5hbWVPck9wdGlvbnM7XG4gICAgICAgICAgICBwaXBlbGluZSA9IG5ld1BpcGVsaW5lKGNyZWRlbnRpYWxPclBpcGVsaW5lT3JDb250YWluZXJOYW1lLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghY3JlZGVudGlhbE9yUGlwZWxpbmVPckNvbnRhaW5lck5hbWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiBjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgLy8gKHVybDogc3RyaW5nLCBjcmVkZW50aWFsPzogU3RvcmFnZVNoYXJlZEtleUNyZWRlbnRpYWwgfCBBbm9ueW1vdXNDcmVkZW50aWFsIHwgVG9rZW5DcmVkZW50aWFsLCBvcHRpb25zPzogU3RvcmFnZVBpcGVsaW5lT3B0aW9ucylcbiAgICAgICAgICAgIC8vIFRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIHVuZGVmaW5lZC4gVXNlIGFub255bW91cyBjcmVkZW50aWFsLlxuICAgICAgICAgICAgdXJsID0gdXJsT3JDb25uZWN0aW9uU3RyaW5nO1xuICAgICAgICAgICAgcGlwZWxpbmUgPSBuZXdQaXBlbGluZShuZXcgQW5vbnltb3VzQ3JlZGVudGlhbCgpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjcmVkZW50aWFsT3JQaXBlbGluZU9yQ29udGFpbmVyTmFtZSAmJlxuICAgICAgICAgICAgdHlwZW9mIGNyZWRlbnRpYWxPclBpcGVsaW5lT3JDb250YWluZXJOYW1lID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICBibG9iTmFtZU9yT3B0aW9ucyAmJlxuICAgICAgICAgICAgdHlwZW9mIGJsb2JOYW1lT3JPcHRpb25zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAvLyAoY29ubmVjdGlvblN0cmluZzogc3RyaW5nLCBjb250YWluZXJOYW1lOiBzdHJpbmcsIGJsb2JOYW1lOiBzdHJpbmcsIG9wdGlvbnM/OiBTdG9yYWdlUGlwZWxpbmVPcHRpb25zKVxuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyTmFtZSA9IGNyZWRlbnRpYWxPclBpcGVsaW5lT3JDb250YWluZXJOYW1lO1xuICAgICAgICAgICAgY29uc3QgYmxvYk5hbWUgPSBibG9iTmFtZU9yT3B0aW9ucztcbiAgICAgICAgICAgIGNvbnN0IGV4dHJhY3RlZENyZWRzID0gZXh0cmFjdENvbm5lY3Rpb25TdHJpbmdQYXJ0cyh1cmxPckNvbm5lY3Rpb25TdHJpbmcpO1xuICAgICAgICAgICAgaWYgKGV4dHJhY3RlZENyZWRzLmtpbmQgPT09IFwiQWNjb3VudENvbm5TdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2hhcmVkS2V5Q3JlZGVudGlhbCA9IG5ldyBTdG9yYWdlU2hhcmVkS2V5Q3JlZGVudGlhbChleHRyYWN0ZWRDcmVkcy5hY2NvdW50TmFtZSwgZXh0cmFjdGVkQ3JlZHMuYWNjb3VudEtleSk7XG4gICAgICAgICAgICAgICAgICAgIHVybCA9IGFwcGVuZFRvVVJMUGF0aChhcHBlbmRUb1VSTFBhdGgoZXh0cmFjdGVkQ3JlZHMudXJsLCBlbmNvZGVVUklDb21wb25lbnQoY29udGFpbmVyTmFtZSkpLCBlbmNvZGVVUklDb21wb25lbnQoYmxvYk5hbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLnByb3h5T3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wcm94eU9wdGlvbnMgPSBnZXREZWZhdWx0UHJveHlTZXR0aW5ncyhleHRyYWN0ZWRDcmVkcy5wcm94eVVyaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcGlwZWxpbmUgPSBuZXdQaXBlbGluZShzaGFyZWRLZXlDcmVkZW50aWFsLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFjY291bnQgY29ubmVjdGlvbiBzdHJpbmcgaXMgb25seSBzdXBwb3J0ZWQgaW4gTm9kZS5qcyBlbnZpcm9ubWVudFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChleHRyYWN0ZWRDcmVkcy5raW5kID09PSBcIlNBU0Nvbm5TdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHVybCA9XG4gICAgICAgICAgICAgICAgICAgIGFwcGVuZFRvVVJMUGF0aChhcHBlbmRUb1VSTFBhdGgoZXh0cmFjdGVkQ3JlZHMudXJsLCBlbmNvZGVVUklDb21wb25lbnQoY29udGFpbmVyTmFtZSkpLCBlbmNvZGVVUklDb21wb25lbnQoYmxvYk5hbWUpKSArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIj9cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRyYWN0ZWRDcmVkcy5hY2NvdW50U2FzO1xuICAgICAgICAgICAgICAgIHBpcGVsaW5lID0gbmV3UGlwZWxpbmUobmV3IEFub255bW91c0NyZWRlbnRpYWwoKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb25uZWN0aW9uIHN0cmluZyBtdXN0IGJlIGVpdGhlciBhbiBBY2NvdW50IGNvbm5lY3Rpb24gc3RyaW5nIG9yIGEgU0FTIGNvbm5lY3Rpb24gc3RyaW5nXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0aW5nIG5vbi1lbXB0eSBzdHJpbmdzIGZvciBjb250YWluZXJOYW1lIGFuZCBibG9iTmFtZSBwYXJhbWV0ZXJzXCIpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKHVybCwgcGlwZWxpbmUpO1xuICAgICAgICB0aGlzLnBhZ2VCbG9iQ29udGV4dCA9IHRoaXMuc3RvcmFnZUNsaWVudENvbnRleHQucGFnZUJsb2I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgUGFnZUJsb2JDbGllbnQgb2JqZWN0IGlkZW50aWNhbCB0byB0aGUgc291cmNlIGJ1dCB3aXRoIHRoZVxuICAgICAqIHNwZWNpZmllZCBzbmFwc2hvdCB0aW1lc3RhbXAuXG4gICAgICogUHJvdmlkZSBcIlwiIHdpbGwgcmVtb3ZlIHRoZSBzbmFwc2hvdCBhbmQgcmV0dXJuIGEgQ2xpZW50IHRvIHRoZSBiYXNlIGJsb2IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc25hcHNob3QgLSBUaGUgc25hcHNob3QgdGltZXN0YW1wLlxuICAgICAqIEByZXR1cm5zIEEgbmV3IFBhZ2VCbG9iQ2xpZW50IG9iamVjdCBpZGVudGljYWwgdG8gdGhlIHNvdXJjZSBidXQgd2l0aCB0aGUgc3BlY2lmaWVkIHNuYXBzaG90IHRpbWVzdGFtcC5cbiAgICAgKi9cbiAgICB3aXRoU25hcHNob3Qoc25hcHNob3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYWdlQmxvYkNsaWVudChzZXRVUkxQYXJhbWV0ZXIodGhpcy51cmwsIFVSTENvbnN0YW50cy5QYXJhbWV0ZXJzLlNOQVBTSE9ULCBzbmFwc2hvdC5sZW5ndGggPT09IDAgPyB1bmRlZmluZWQgOiBzbmFwc2hvdCksIHRoaXMucGlwZWxpbmUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcGFnZSBibG9iIG9mIHRoZSBzcGVjaWZpZWQgbGVuZ3RoLiBDYWxsIHVwbG9hZFBhZ2VzIHRvIHVwbG9hZCBkYXRhXG4gICAgICogZGF0YSB0byBhIHBhZ2UgYmxvYi5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9wdXQtYmxvYlxuICAgICAqXG4gICAgICogQHBhcmFtIHNpemUgLSBzaXplIG9mIHRoZSBwYWdlIGJsb2IuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIHRoZSBQYWdlIEJsb2IgQ3JlYXRlIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyBSZXNwb25zZSBkYXRhIGZvciB0aGUgUGFnZSBCbG9iIENyZWF0ZSBvcGVyYXRpb24uXG4gICAgICovXG4gICAgYXN5bmMgY3JlYXRlKHNpemUsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBvcHRpb25zLmNvbmRpdGlvbnMgPSBvcHRpb25zLmNvbmRpdGlvbnMgfHwge307XG4gICAgICAgIGVuc3VyZUNwa0lmU3BlY2lmaWVkKG9wdGlvbnMuY3VzdG9tZXJQcm92aWRlZEtleSwgdGhpcy5pc0h0dHBzKTtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJQYWdlQmxvYkNsaWVudC1jcmVhdGVcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgICAgIHJldHVybiBhc3NlcnRSZXNwb25zZShhd2FpdCB0aGlzLnBhZ2VCbG9iQ29udGV4dC5jcmVhdGUoMCwgc2l6ZSwge1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgIGJsb2JIdHRwSGVhZGVyczogb3B0aW9ucy5ibG9iSFRUUEhlYWRlcnMsXG4gICAgICAgICAgICAgICAgYmxvYlNlcXVlbmNlTnVtYmVyOiBvcHRpb25zLmJsb2JTZXF1ZW5jZU51bWJlcixcbiAgICAgICAgICAgICAgICBsZWFzZUFjY2Vzc0NvbmRpdGlvbnM6IG9wdGlvbnMuY29uZGl0aW9ucyxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogb3B0aW9ucy5tZXRhZGF0YSxcbiAgICAgICAgICAgICAgICBtb2RpZmllZEFjY2Vzc0NvbmRpdGlvbnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucy5jb25kaXRpb25zKSwgeyBpZlRhZ3M6IChfYSA9IG9wdGlvbnMuY29uZGl0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRhZ0NvbmRpdGlvbnMgfSksXG4gICAgICAgICAgICAgICAgY3BrSW5mbzogb3B0aW9ucy5jdXN0b21lclByb3ZpZGVkS2V5LFxuICAgICAgICAgICAgICAgIGVuY3J5cHRpb25TY29wZTogb3B0aW9ucy5lbmNyeXB0aW9uU2NvcGUsXG4gICAgICAgICAgICAgICAgaW1tdXRhYmlsaXR5UG9saWN5RXhwaXJ5OiAoX2IgPSBvcHRpb25zLmltbXV0YWJpbGl0eVBvbGljeSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmV4cGlyaWVzT24sXG4gICAgICAgICAgICAgICAgaW1tdXRhYmlsaXR5UG9saWN5TW9kZTogKF9jID0gb3B0aW9ucy5pbW11dGFiaWxpdHlQb2xpY3kpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5wb2xpY3lNb2RlLFxuICAgICAgICAgICAgICAgIGxlZ2FsSG9sZDogb3B0aW9ucy5sZWdhbEhvbGQsXG4gICAgICAgICAgICAgICAgdGllcjogdG9BY2Nlc3NUaWVyKG9wdGlvbnMudGllciksXG4gICAgICAgICAgICAgICAgYmxvYlRhZ3NTdHJpbmc6IHRvQmxvYlRhZ3NTdHJpbmcob3B0aW9ucy50YWdzKSxcbiAgICAgICAgICAgICAgICB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcGFnZSBibG9iIG9mIHRoZSBzcGVjaWZpZWQgbGVuZ3RoLiBDYWxsIHVwbG9hZFBhZ2VzIHRvIHVwbG9hZCBkYXRhXG4gICAgICogZGF0YSB0byBhIHBhZ2UgYmxvYi4gSWYgdGhlIGJsb2Igd2l0aCB0aGUgc2FtZSBuYW1lIGFscmVhZHkgZXhpc3RzLCB0aGUgY29udGVudFxuICAgICAqIG9mIHRoZSBleGlzdGluZyBibG9iIHdpbGwgcmVtYWluIHVuY2hhbmdlZC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9wdXQtYmxvYlxuICAgICAqXG4gICAgICogQHBhcmFtIHNpemUgLSBzaXplIG9mIHRoZSBwYWdlIGJsb2IuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLVxuICAgICAqL1xuICAgIGFzeW5jIGNyZWF0ZUlmTm90RXhpc3RzKHNpemUsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIlBhZ2VCbG9iQ2xpZW50LWNyZWF0ZUlmTm90RXhpc3RzXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29uZGl0aW9ucyA9IHsgaWZOb25lTWF0Y2g6IEVUYWdBbnkgfTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhc3NlcnRSZXNwb25zZShhd2FpdCB0aGlzLmNyZWF0ZShzaXplLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGNvbmRpdGlvbnMsIHRyYWNpbmdPcHRpb25zOiB1cGRhdGVkT3B0aW9ucy50cmFjaW5nT3B0aW9ucyB9KSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBzdWNjZWVkZWQ6IHRydWUgfSwgcmVzKSwgeyBfcmVzcG9uc2U6IHJlcy5fcmVzcG9uc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGlmICgoKF9hID0gZS5kZXRhaWxzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZXJyb3JDb2RlKSA9PT0gXCJCbG9iQWxyZWFkeUV4aXN0c1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBzdWNjZWVkZWQ6IGZhbHNlIH0sIChfYiA9IGUucmVzcG9uc2UpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5wYXJzZWRIZWFkZXJzKSwgeyBfcmVzcG9uc2U6IGUucmVzcG9uc2UgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZXMgMSBvciBtb3JlIHBhZ2VzIHRvIHRoZSBwYWdlIGJsb2IuIFRoZSBzdGFydCBhbmQgZW5kIG9mZnNldHMgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDUxMi5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9wdXQtcGFnZVxuICAgICAqXG4gICAgICogQHBhcmFtIGJvZHkgLSBEYXRhIHRvIHVwbG9hZFxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBPZmZzZXQgb2YgZGVzdGluYXRpb24gcGFnZSBibG9iXG4gICAgICogQHBhcmFtIGNvdW50IC0gQ29udGVudCBsZW5ndGggb2YgdGhlIGJvZHksIGFsc28gbnVtYmVyIG9mIGJ5dGVzIHRvIGJlIHVwbG9hZGVkXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIHRoZSBQYWdlIEJsb2IgVXBsb2FkIFBhZ2VzIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyBSZXNwb25zZSBkYXRhIGZvciB0aGUgUGFnZSBCbG9iIFVwbG9hZCBQYWdlcyBvcGVyYXRpb24uXG4gICAgICovXG4gICAgYXN5bmMgdXBsb2FkUGFnZXMoYm9keSwgb2Zmc2V0LCBjb3VudCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIG9wdGlvbnMuY29uZGl0aW9ucyA9IG9wdGlvbnMuY29uZGl0aW9ucyB8fCB7fTtcbiAgICAgICAgZW5zdXJlQ3BrSWZTcGVjaWZpZWQob3B0aW9ucy5jdXN0b21lclByb3ZpZGVkS2V5LCB0aGlzLmlzSHR0cHMpO1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIlBhZ2VCbG9iQ2xpZW50LXVwbG9hZFBhZ2VzXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMucGFnZUJsb2JDb250ZXh0LnVwbG9hZFBhZ2VzKGNvdW50LCBib2R5LCB7XG4gICAgICAgICAgICAgICAgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICAgICAgICAgICAgbGVhc2VBY2Nlc3NDb25kaXRpb25zOiBvcHRpb25zLmNvbmRpdGlvbnMsXG4gICAgICAgICAgICAgICAgbW9kaWZpZWRBY2Nlc3NDb25kaXRpb25zOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMuY29uZGl0aW9ucyksIHsgaWZUYWdzOiAoX2EgPSBvcHRpb25zLmNvbmRpdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50YWdDb25kaXRpb25zIH0pLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIG9uVXBsb2FkUHJvZ3Jlc3M6IG9wdGlvbnMub25Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJhbmdlOiByYW5nZVRvU3RyaW5nKHsgb2Zmc2V0LCBjb3VudCB9KSxcbiAgICAgICAgICAgICAgICBzZXF1ZW5jZU51bWJlckFjY2Vzc0NvbmRpdGlvbnM6IG9wdGlvbnMuY29uZGl0aW9ucyxcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbmFsQ29udGVudE1ENTogb3B0aW9ucy50cmFuc2FjdGlvbmFsQ29udGVudE1ENSxcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbmFsQ29udGVudENyYzY0OiBvcHRpb25zLnRyYW5zYWN0aW9uYWxDb250ZW50Q3JjNjQsXG4gICAgICAgICAgICAgICAgY3BrSW5mbzogb3B0aW9ucy5jdXN0b21lclByb3ZpZGVkS2V5LFxuICAgICAgICAgICAgICAgIGVuY3J5cHRpb25TY29wZTogb3B0aW9ucy5lbmNyeXB0aW9uU2NvcGUsXG4gICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIFVwbG9hZCBQYWdlcyBvcGVyYXRpb24gd3JpdGVzIGEgcmFuZ2Ugb2YgcGFnZXMgdG8gYSBwYWdlIGJsb2Igd2hlcmUgdGhlXG4gICAgICogY29udGVudHMgYXJlIHJlYWQgZnJvbSBhIFVSTC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9wdXQtcGFnZS1mcm9tLXVybFxuICAgICAqXG4gICAgICogQHBhcmFtIHNvdXJjZVVSTCAtIFNwZWNpZnkgYSBVUkwgdG8gdGhlIGNvcHkgc291cmNlLCBTaGFyZWQgQWNjZXNzIFNpZ25hdHVyZShTQVMpIG1heWJlIG5lZWRlZCBmb3IgYXV0aGVudGljYXRpb25cbiAgICAgKiBAcGFyYW0gc291cmNlT2Zmc2V0IC0gVGhlIHNvdXJjZSBvZmZzZXQgdG8gY29weSBmcm9tLiBQYXNzIDAgdG8gY29weSBmcm9tIHRoZSBiZWdpbm5pbmcgb2Ygc291cmNlIHBhZ2UgYmxvYlxuICAgICAqIEBwYXJhbSBkZXN0T2Zmc2V0IC0gT2Zmc2V0IG9mIGRlc3RpbmF0aW9uIHBhZ2UgYmxvYlxuICAgICAqIEBwYXJhbSBjb3VudCAtIE51bWJlciBvZiBieXRlcyB0byBiZSB1cGxvYWRlZCBmcm9tIHNvdXJjZSBwYWdlIGJsb2JcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtXG4gICAgICovXG4gICAgYXN5bmMgdXBsb2FkUGFnZXNGcm9tVVJMKHNvdXJjZVVSTCwgc291cmNlT2Zmc2V0LCBkZXN0T2Zmc2V0LCBjb3VudCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIG9wdGlvbnMuY29uZGl0aW9ucyA9IG9wdGlvbnMuY29uZGl0aW9ucyB8fCB7fTtcbiAgICAgICAgb3B0aW9ucy5zb3VyY2VDb25kaXRpb25zID0gb3B0aW9ucy5zb3VyY2VDb25kaXRpb25zIHx8IHt9O1xuICAgICAgICBlbnN1cmVDcGtJZlNwZWNpZmllZChvcHRpb25zLmN1c3RvbWVyUHJvdmlkZWRLZXksIHRoaXMuaXNIdHRwcyk7XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKFwiUGFnZUJsb2JDbGllbnQtdXBsb2FkUGFnZXNGcm9tVVJMXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgICAgIHJldHVybiBhc3NlcnRSZXNwb25zZShhd2FpdCB0aGlzLnBhZ2VCbG9iQ29udGV4dC51cGxvYWRQYWdlc0Zyb21VUkwoc291cmNlVVJMLCByYW5nZVRvU3RyaW5nKHsgb2Zmc2V0OiBzb3VyY2VPZmZzZXQsIGNvdW50IH0pLCAwLCByYW5nZVRvU3RyaW5nKHsgb2Zmc2V0OiBkZXN0T2Zmc2V0LCBjb3VudCB9KSwge1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgIHNvdXJjZUNvbnRlbnRNRDU6IG9wdGlvbnMuc291cmNlQ29udGVudE1ENSxcbiAgICAgICAgICAgICAgICBzb3VyY2VDb250ZW50Q3JjNjQ6IG9wdGlvbnMuc291cmNlQ29udGVudENyYzY0LFxuICAgICAgICAgICAgICAgIGxlYXNlQWNjZXNzQ29uZGl0aW9uczogb3B0aW9ucy5jb25kaXRpb25zLFxuICAgICAgICAgICAgICAgIHNlcXVlbmNlTnVtYmVyQWNjZXNzQ29uZGl0aW9uczogb3B0aW9ucy5jb25kaXRpb25zLFxuICAgICAgICAgICAgICAgIG1vZGlmaWVkQWNjZXNzQ29uZGl0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmNvbmRpdGlvbnMpLCB7IGlmVGFnczogKF9hID0gb3B0aW9ucy5jb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGFnQ29uZGl0aW9ucyB9KSxcbiAgICAgICAgICAgICAgICBzb3VyY2VNb2RpZmllZEFjY2Vzc0NvbmRpdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlSWZNYXRjaDogKF9iID0gb3B0aW9ucy5zb3VyY2VDb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuaWZNYXRjaCxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlSWZNb2RpZmllZFNpbmNlOiAoX2MgPSBvcHRpb25zLnNvdXJjZUNvbmRpdGlvbnMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5pZk1vZGlmaWVkU2luY2UsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUlmTm9uZU1hdGNoOiAoX2QgPSBvcHRpb25zLnNvdXJjZUNvbmRpdGlvbnMpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5pZk5vbmVNYXRjaCxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlSWZVbm1vZGlmaWVkU2luY2U6IChfZSA9IG9wdGlvbnMuc291cmNlQ29uZGl0aW9ucykgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLmlmVW5tb2RpZmllZFNpbmNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3BrSW5mbzogb3B0aW9ucy5jdXN0b21lclByb3ZpZGVkS2V5LFxuICAgICAgICAgICAgICAgIGVuY3J5cHRpb25TY29wZTogb3B0aW9ucy5lbmNyeXB0aW9uU2NvcGUsXG4gICAgICAgICAgICAgICAgY29weVNvdXJjZUF1dGhvcml6YXRpb246IGh0dHBBdXRob3JpemF0aW9uVG9TdHJpbmcob3B0aW9ucy5zb3VyY2VBdXRob3JpemF0aW9uKSxcbiAgICAgICAgICAgICAgICB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGcmVlcyB0aGUgc3BlY2lmaWVkIHBhZ2VzIGZyb20gdGhlIHBhZ2UgYmxvYi5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9wdXQtcGFnZVxuICAgICAqXG4gICAgICogQHBhcmFtIG9mZnNldCAtIFN0YXJ0aW5nIGJ5dGUgcG9zaXRpb24gb2YgdGhlIHBhZ2VzIHRvIGNsZWFyLlxuICAgICAqIEBwYXJhbSBjb3VudCAtIE51bWJlciBvZiBieXRlcyB0byBjbGVhci5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gdGhlIFBhZ2UgQmxvYiBDbGVhciBQYWdlcyBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMgUmVzcG9uc2UgZGF0YSBmb3IgdGhlIFBhZ2UgQmxvYiBDbGVhciBQYWdlcyBvcGVyYXRpb24uXG4gICAgICovXG4gICAgYXN5bmMgY2xlYXJQYWdlcyhvZmZzZXQgPSAwLCBjb3VudCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIG9wdGlvbnMuY29uZGl0aW9ucyA9IG9wdGlvbnMuY29uZGl0aW9ucyB8fCB7fTtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJQYWdlQmxvYkNsaWVudC1jbGVhclBhZ2VzXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMucGFnZUJsb2JDb250ZXh0LmNsZWFyUGFnZXMoMCwge1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgIGxlYXNlQWNjZXNzQ29uZGl0aW9uczogb3B0aW9ucy5jb25kaXRpb25zLFxuICAgICAgICAgICAgICAgIG1vZGlmaWVkQWNjZXNzQ29uZGl0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmNvbmRpdGlvbnMpLCB7IGlmVGFnczogKF9hID0gb3B0aW9ucy5jb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGFnQ29uZGl0aW9ucyB9KSxcbiAgICAgICAgICAgICAgICByYW5nZTogcmFuZ2VUb1N0cmluZyh7IG9mZnNldCwgY291bnQgfSksXG4gICAgICAgICAgICAgICAgc2VxdWVuY2VOdW1iZXJBY2Nlc3NDb25kaXRpb25zOiBvcHRpb25zLmNvbmRpdGlvbnMsXG4gICAgICAgICAgICAgICAgY3BrSW5mbzogb3B0aW9ucy5jdXN0b21lclByb3ZpZGVkS2V5LFxuICAgICAgICAgICAgICAgIGVuY3J5cHRpb25TY29wZTogb3B0aW9ucy5lbmNyeXB0aW9uU2NvcGUsXG4gICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGlzdCBvZiB2YWxpZCBwYWdlIHJhbmdlcyBmb3IgYSBwYWdlIGJsb2Igb3Igc25hcHNob3Qgb2YgYSBwYWdlIGJsb2IuXG4gICAgICogQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9yZXN0L2FwaS9zdG9yYWdlc2VydmljZXMvZ2V0LXBhZ2UtcmFuZ2VzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gU3RhcnRpbmcgYnl0ZSBwb3NpdGlvbiBvZiB0aGUgcGFnZSByYW5nZXMuXG4gICAgICogQHBhcmFtIGNvdW50IC0gTnVtYmVyIG9mIGJ5dGVzIHRvIGdldC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gdGhlIFBhZ2UgQmxvYiBHZXQgUmFuZ2VzIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyBSZXNwb25zZSBkYXRhIGZvciB0aGUgUGFnZSBCbG9iIEdldCBSYW5nZXMgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFBhZ2VSYW5nZXMob2Zmc2V0ID0gMCwgY291bnQsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBvcHRpb25zLmNvbmRpdGlvbnMgPSBvcHRpb25zLmNvbmRpdGlvbnMgfHwge307XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKFwiUGFnZUJsb2JDbGllbnQtZ2V0UGFnZVJhbmdlc1wiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXNzZXJ0UmVzcG9uc2UoYXdhaXQgdGhpcy5wYWdlQmxvYkNvbnRleHQuZ2V0UGFnZVJhbmdlcyh7XG4gICAgICAgICAgICAgICAgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICAgICAgICAgICAgbGVhc2VBY2Nlc3NDb25kaXRpb25zOiBvcHRpb25zLmNvbmRpdGlvbnMsXG4gICAgICAgICAgICAgICAgbW9kaWZpZWRBY2Nlc3NDb25kaXRpb25zOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMuY29uZGl0aW9ucyksIHsgaWZUYWdzOiAoX2EgPSBvcHRpb25zLmNvbmRpdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50YWdDb25kaXRpb25zIH0pLFxuICAgICAgICAgICAgICAgIHJhbmdlOiByYW5nZVRvU3RyaW5nKHsgb2Zmc2V0LCBjb3VudCB9KSxcbiAgICAgICAgICAgICAgICB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4gcmFuZ2VSZXNwb25zZUZyb21Nb2RlbChyZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBnZXRQYWdlUmFuZ2VzU2VnbWVudCByZXR1cm5zIGEgc2luZ2xlIHNlZ21lbnQgb2YgcGFnZSByYW5nZXMgc3RhcnRpbmcgZnJvbSB0aGVcbiAgICAgKiBzcGVjaWZpZWQgTWFya2VyLiBVc2UgYW4gZW1wdHkgTWFya2VyIHRvIHN0YXJ0IGVudW1lcmF0aW9uIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKiBBZnRlciBnZXR0aW5nIGEgc2VnbWVudCwgcHJvY2VzcyBpdCwgYW5kIHRoZW4gY2FsbCBnZXRQYWdlUmFuZ2VzU2VnbWVudCBhZ2FpblxuICAgICAqIChwYXNzaW5nIHRoZSB0aGUgcHJldmlvdXNseS1yZXR1cm5lZCBNYXJrZXIpIHRvIGdldCB0aGUgbmV4dCBzZWdtZW50LlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL2dldC1wYWdlLXJhbmdlc1xuICAgICAqXG4gICAgICogQHBhcmFtIG9mZnNldCAtIFN0YXJ0aW5nIGJ5dGUgcG9zaXRpb24gb2YgdGhlIHBhZ2UgcmFuZ2VzLlxuICAgICAqIEBwYXJhbSBjb3VudCAtIE51bWJlciBvZiBieXRlcyB0byBnZXQuXG4gICAgICogQHBhcmFtIG1hcmtlciAtIEEgc3RyaW5nIHZhbHVlIHRoYXQgaWRlbnRpZmllcyB0aGUgcG9ydGlvbiBvZiB0aGUgbGlzdCB0byBiZSByZXR1cm5lZCB3aXRoIHRoZSBuZXh0IGxpc3Qgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBQYWdlQmxvYiBHZXQgUGFnZSBSYW5nZXMgU2VnbWVudCBvcGVyYXRpb24uXG4gICAgICovXG4gICAgYXN5bmMgbGlzdFBhZ2VSYW5nZXNTZWdtZW50KG9mZnNldCA9IDAsIGNvdW50LCBtYXJrZXIsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIlBhZ2VCbG9iQ2xpZW50LWdldFBhZ2VSYW5nZXNTZWdtZW50XCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMucGFnZUJsb2JDb250ZXh0LmdldFBhZ2VSYW5nZXMoe1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgIGxlYXNlQWNjZXNzQ29uZGl0aW9uczogb3B0aW9ucy5jb25kaXRpb25zLFxuICAgICAgICAgICAgICAgIG1vZGlmaWVkQWNjZXNzQ29uZGl0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmNvbmRpdGlvbnMpLCB7IGlmVGFnczogKF9hID0gb3B0aW9ucy5jb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGFnQ29uZGl0aW9ucyB9KSxcbiAgICAgICAgICAgICAgICByYW5nZTogcmFuZ2VUb1N0cmluZyh7IG9mZnNldCwgY291bnQgfSksXG4gICAgICAgICAgICAgICAgbWFya2VyOiBtYXJrZXIsXG4gICAgICAgICAgICAgICAgbWF4UGFnZVNpemU6IG9wdGlvbnMubWF4UGFnZVNpemUsXG4gICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBBc3luY0l0ZXJhYmxlSXRlcmF0b3IgZm9yIHtAbGluayBQYWdlQmxvYkdldFBhZ2VSYW5nZXNSZXNwb25zZU1vZGVsfVxuICAgICAqXG4gICAgICogQHBhcmFtIG9mZnNldCAtIFN0YXJ0aW5nIGJ5dGUgcG9zaXRpb24gb2YgdGhlIHBhZ2UgcmFuZ2VzLlxuICAgICAqIEBwYXJhbSBjb3VudCAtIE51bWJlciBvZiBieXRlcyB0byBnZXQuXG4gICAgICogQHBhcmFtIG1hcmtlciAtIEEgc3RyaW5nIHZhbHVlIHRoYXQgaWRlbnRpZmllcyB0aGUgcG9ydGlvbiBvZlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZ2V0IG9mIHBhZ2UgcmFuZ2VzIHRvIGJlIHJldHVybmVkIHdpdGggdGhlIG5leHQgZ2V0dGluZyBvcGVyYXRpb24uIFRoZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb24gcmV0dXJucyB0aGUgQ29udGludWF0aW9uVG9rZW4gdmFsdWUgd2l0aGluIHRoZSByZXNwb25zZSBib2R5IGlmIHRoZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBnZXR0aW5nIG9wZXJhdGlvbiBkaWQgbm90IHJldHVybiBhbGwgcGFnZSByYW5nZXMgcmVtYWluaW5nIHdpdGhpbiB0aGUgY3VycmVudCBwYWdlLlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgQ29udGludWF0aW9uVG9rZW4gdmFsdWUgY2FuIGJlIHVzZWQgYXMgdGhlIHZhbHVlIGZvclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgbWFya2VyIHBhcmFtZXRlciBpbiBhIHN1YnNlcXVlbnQgY2FsbCB0byByZXF1ZXN0IHRoZSBuZXh0IHBhZ2Ugb2YgZ2V0XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLiBUaGUgbWFya2VyIHZhbHVlIGlzIG9wYXF1ZSB0byB0aGUgY2xpZW50LlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBMaXN0IFBhZ2UgUmFuZ2VzIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBsaXN0UGFnZVJhbmdlSXRlbVNlZ21lbnRzKCkge1xuICAgICAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKiBsaXN0UGFnZVJhbmdlSXRlbVNlZ21lbnRzXzEob2Zmc2V0ID0gMCwgY291bnQsIG1hcmtlciwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgICAgICBsZXQgZ2V0UGFnZVJhbmdlSXRlbVNlZ21lbnRzUmVzcG9uc2U7XG4gICAgICAgICAgICBpZiAoISFtYXJrZXIgfHwgbWFya2VyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhZ2VSYW5nZUl0ZW1TZWdtZW50c1Jlc3BvbnNlID0geWllbGQgX19hd2FpdCh0aGlzLmxpc3RQYWdlUmFuZ2VzU2VnbWVudChvZmZzZXQsIGNvdW50LCBtYXJrZXIsIG9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyID0gZ2V0UGFnZVJhbmdlSXRlbVNlZ21lbnRzUmVzcG9uc2UuY29udGludWF0aW9uVG9rZW47XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHlpZWxkIF9fYXdhaXQoeWllbGQgX19hd2FpdChnZXRQYWdlUmFuZ2VJdGVtU2VnbWVudHNSZXNwb25zZSkpO1xuICAgICAgICAgICAgICAgIH0gd2hpbGUgKG1hcmtlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIEFzeW5jSXRlcmFibGVJdGVyYXRvciBvZiB7QGxpbmsgUGFnZVJhbmdlSW5mb30gb2JqZWN0c1xuICAgICAqXG4gICAgICogQHBhcmFtIG9mZnNldCAtIFN0YXJ0aW5nIGJ5dGUgcG9zaXRpb24gb2YgdGhlIHBhZ2UgcmFuZ2VzLlxuICAgICAqIEBwYXJhbSBjb3VudCAtIE51bWJlciBvZiBieXRlcyB0byBnZXQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIExpc3QgUGFnZSBSYW5nZXMgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGxpc3RQYWdlUmFuZ2VJdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiogbGlzdFBhZ2VSYW5nZUl0ZW1zXzEob2Zmc2V0ID0gMCwgY291bnQsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICAgICAgdmFyIF9hLCBlXzEsIF9iLCBfYztcbiAgICAgICAgICAgIGxldCBtYXJrZXI7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9kID0gdHJ1ZSwgX2UgPSBfX2FzeW5jVmFsdWVzKHRoaXMubGlzdFBhZ2VSYW5nZUl0ZW1TZWdtZW50cyhvZmZzZXQsIGNvdW50LCBtYXJrZXIsIG9wdGlvbnMpKSwgX2Y7IF9mID0geWllbGQgX19hd2FpdChfZS5uZXh0KCkpLCBfYSA9IF9mLmRvbmUsICFfYTsgX2QgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF9jID0gX2YudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIF9kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdldFBhZ2VSYW5nZXNTZWdtZW50ID0gX2M7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIF9fYXdhaXQoeWllbGQqIF9fYXN5bmNEZWxlZ2F0b3IoX19hc3luY1ZhbHVlcyhFeHRyYWN0UGFnZVJhbmdlSW5mb0l0ZW1zKGdldFBhZ2VSYW5nZXNTZWdtZW50KSkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfZCAmJiAhX2EgJiYgKF9iID0gX2UucmV0dXJuKSkgeWllbGQgX19hd2FpdChfYi5jYWxsKF9lKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXN5bmMgaXRlcmFibGUgaXRlcmF0b3IgdG8gbGlzdCBvZiBwYWdlIHJhbmdlcyBmb3IgYSBwYWdlIGJsb2IuXG4gICAgICogQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9yZXN0L2FwaS9zdG9yYWdlc2VydmljZXMvZ2V0LXBhZ2UtcmFuZ2VzXG4gICAgICpcbiAgICAgKiAgLmJ5UGFnZSgpIHJldHVybnMgYW4gYXN5bmMgaXRlcmFibGUgaXRlcmF0b3IgdG8gbGlzdCBvZiBwYWdlIHJhbmdlcyBmb3IgYSBwYWdlIGJsb2IuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlIHVzaW5nIGBmb3IgYXdhaXRgIHN5bnRheDpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogLy8gR2V0IHRoZSBwYWdlQmxvYkNsaWVudCBiZWZvcmUgeW91IHJ1biB0aGVzZSBzbmlwcGV0cyxcbiAgICAgKiAvLyBDYW4gYmUgb2J0YWluZWQgZnJvbSBgYmxvYlNlcnZpY2VDbGllbnQuZ2V0Q29udGFpbmVyQ2xpZW50KFwiPHlvdXItY29udGFpbmVyLW5hbWU+XCIpLmdldFBhZ2VCbG9iQ2xpZW50KFwiPHlvdXItYmxvYi1uYW1lPlwiKTtgXG4gICAgICogbGV0IGkgPSAxO1xuICAgICAqIGZvciBhd2FpdCAoY29uc3QgcGFnZVJhbmdlIG9mIHBhZ2VCbG9iQ2xpZW50Lmxpc3RQYWdlUmFuZ2VzKCkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGBQYWdlIHJhbmdlICR7aSsrfTogJHtwYWdlUmFuZ2Uuc3RhcnR9IC0gJHtwYWdlUmFuZ2UuZW5kfWApO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEV4YW1wbGUgdXNpbmcgYGl0ZXIubmV4dCgpYDpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogbGV0IGkgPSAxO1xuICAgICAqIGxldCBpdGVyID0gcGFnZUJsb2JDbGllbnQubGlzdFBhZ2VSYW5nZXMoKTtcbiAgICAgKiBsZXQgcGFnZVJhbmdlSXRlbSA9IGF3YWl0IGl0ZXIubmV4dCgpO1xuICAgICAqIHdoaWxlICghcGFnZVJhbmdlSXRlbS5kb25lKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhgUGFnZSByYW5nZSAke2krK306ICR7cGFnZVJhbmdlSXRlbS52YWx1ZS5zdGFydH0gLSAke3BhZ2VSYW5nZUl0ZW0udmFsdWUuZW5kfSwgSXNDbGVhcjogJHtwYWdlUmFuZ2VJdGVtLnZhbHVlLmlzQ2xlYXJ9YCk7XG4gICAgICogICBwYWdlUmFuZ2VJdGVtID0gYXdhaXQgaXRlci5uZXh0KCk7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogRXhhbXBsZSB1c2luZyBgYnlQYWdlKClgOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAvLyBwYXNzaW5nIG9wdGlvbmFsIG1heFBhZ2VTaXplIGluIHRoZSBwYWdlIHNldHRpbmdzXG4gICAgICogbGV0IGkgPSAxO1xuICAgICAqIGZvciBhd2FpdCAoY29uc3QgcmVzcG9uc2Ugb2YgcGFnZUJsb2JDbGllbnQubGlzdFBhZ2VSYW5nZXMoKS5ieVBhZ2UoeyBtYXhQYWdlU2l6ZTogMjAgfSkpIHtcbiAgICAgKiAgIGZvciAoY29uc3QgcGFnZVJhbmdlIG9mIHJlc3BvbnNlKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKGBQYWdlIHJhbmdlICR7aSsrfTogJHtwYWdlUmFuZ2Uuc3RhcnR9IC0gJHtwYWdlUmFuZ2UuZW5kfWApO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEV4YW1wbGUgdXNpbmcgcGFnaW5nIHdpdGggYSBtYXJrZXI6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGxldCBpID0gMTtcbiAgICAgKiBsZXQgaXRlcmF0b3IgPSBwYWdlQmxvYkNsaWVudC5saXN0UGFnZVJhbmdlcygpLmJ5UGFnZSh7IG1heFBhZ2VTaXplOiAyIH0pO1xuICAgICAqIGxldCByZXNwb25zZSA9IChhd2FpdCBpdGVyYXRvci5uZXh0KCkpLnZhbHVlO1xuICAgICAqXG4gICAgICogLy8gUHJpbnRzIDIgcGFnZSByYW5nZXNcbiAgICAgKiBmb3IgKGNvbnN0IHBhZ2VSYW5nZSBvZiByZXNwb25zZSkge1xuICAgICAqICAgY29uc29sZS5sb2coYFBhZ2UgcmFuZ2UgJHtpKyt9OiAke3BhZ2VSYW5nZS5zdGFydH0gLSAke3BhZ2VSYW5nZS5lbmR9YCk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogLy8gR2V0cyBuZXh0IG1hcmtlclxuICAgICAqIGxldCBtYXJrZXIgPSByZXNwb25zZS5jb250aW51YXRpb25Ub2tlbjtcbiAgICAgKlxuICAgICAqIC8vIFBhc3NpbmcgbmV4dCBtYXJrZXIgYXMgY29udGludWF0aW9uVG9rZW5cbiAgICAgKlxuICAgICAqIGl0ZXJhdG9yID0gcGFnZUJsb2JDbGllbnQubGlzdFBhZ2VSYW5nZXMoKS5ieVBhZ2UoeyBjb250aW51YXRpb25Ub2tlbjogbWFya2VyLCBtYXhQYWdlU2l6ZTogMTAgfSk7XG4gICAgICogcmVzcG9uc2UgPSAoYXdhaXQgaXRlcmF0b3IubmV4dCgpKS52YWx1ZTtcbiAgICAgKlxuICAgICAqIC8vIFByaW50cyAxMCBwYWdlIHJhbmdlc1xuICAgICAqIGZvciAoY29uc3QgYmxvYiBvZiByZXNwb25zZSkge1xuICAgICAqICAgY29uc29sZS5sb2coYFBhZ2UgcmFuZ2UgJHtpKyt9OiAke3BhZ2VSYW5nZS5zdGFydH0gLSAke3BhZ2VSYW5nZS5lbmR9YCk7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBTdGFydGluZyBieXRlIHBvc2l0aW9uIG9mIHRoZSBwYWdlIHJhbmdlcy5cbiAgICAgKiBAcGFyYW0gY291bnQgLSBOdW1iZXIgb2YgYnl0ZXMgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byB0aGUgUGFnZSBCbG9iIEdldCBSYW5nZXMgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIEFuIGFzeW5jSXRlcmFibGVJdGVyYXRvciB0aGF0IHN1cHBvcnRzIHBhZ2luZy5cbiAgICAgKi9cbiAgICBsaXN0UGFnZVJhbmdlcyhvZmZzZXQgPSAwLCBjb3VudCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIG9wdGlvbnMuY29uZGl0aW9ucyA9IG9wdGlvbnMuY29uZGl0aW9ucyB8fCB7fTtcbiAgICAgICAgLy8gQXN5bmNJdGVyYWJsZUl0ZXJhdG9yIHRvIGl0ZXJhdGUgb3ZlciBibG9ic1xuICAgICAgICBjb25zdCBpdGVyID0gdGhpcy5saXN0UGFnZVJhbmdlSXRlbXMob2Zmc2V0LCBjb3VudCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSBuZXh0IG1ldGhvZCwgcGFydCBvZiB0aGUgaXRlcmF0aW9uIHByb3RvY29sXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZXIubmV4dCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIGNvbm5lY3Rpb24gdG8gdGhlIGFzeW5jIGl0ZXJhdG9yLCBwYXJ0IG9mIHRoZSBpdGVyYXRpb24gcHJvdG9jb2xcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJldHVybiBhbiBBc3luY0l0ZXJhYmxlSXRlcmF0b3IgdGhhdCB3b3JrcyBhIHBhZ2UgYXQgYSB0aW1lXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGJ5UGFnZTogKHNldHRpbmdzID0ge30pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0UGFnZVJhbmdlSXRlbVNlZ21lbnRzKG9mZnNldCwgY291bnQsIHNldHRpbmdzLmNvbnRpbnVhdGlvblRva2VuLCBPYmplY3QuYXNzaWduKHsgbWF4UGFnZVNpemU6IHNldHRpbmdzLm1heFBhZ2VTaXplIH0sIG9wdGlvbnMpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGNvbGxlY3Rpb24gb2YgcGFnZSByYW5nZXMgdGhhdCBkaWZmZXIgYmV0d2VlbiBhIHNwZWNpZmllZCBzbmFwc2hvdCBhbmQgdGhpcyBwYWdlIGJsb2IuXG4gICAgICogQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9yZXN0L2FwaS9zdG9yYWdlc2VydmljZXMvZ2V0LXBhZ2UtcmFuZ2VzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gU3RhcnRpbmcgYnl0ZSBwb3NpdGlvbiBvZiB0aGUgcGFnZSBibG9iXG4gICAgICogQHBhcmFtIGNvdW50IC0gTnVtYmVyIG9mIGJ5dGVzIHRvIGdldCByYW5nZXMgZGlmZi5cbiAgICAgKiBAcGFyYW0gcHJldlNuYXBzaG90IC0gVGltZXN0YW1wIG9mIHNuYXBzaG90IHRvIHJldHJpZXZlIHRoZSBkaWZmZXJlbmNlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byB0aGUgUGFnZSBCbG9iIEdldCBQYWdlIFJhbmdlcyBEaWZmIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyBSZXNwb25zZSBkYXRhIGZvciB0aGUgUGFnZSBCbG9iIEdldCBQYWdlIFJhbmdlIERpZmYgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFBhZ2VSYW5nZXNEaWZmKG9mZnNldCwgY291bnQsIHByZXZTbmFwc2hvdCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIG9wdGlvbnMuY29uZGl0aW9ucyA9IG9wdGlvbnMuY29uZGl0aW9ucyB8fCB7fTtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJQYWdlQmxvYkNsaWVudC1nZXRQYWdlUmFuZ2VzRGlmZlwiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMucGFnZUJsb2JDb250ZXh0LmdldFBhZ2VSYW5nZXNEaWZmKHtcbiAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgICAgICAgICAgICBsZWFzZUFjY2Vzc0NvbmRpdGlvbnM6IG9wdGlvbnMuY29uZGl0aW9ucyxcbiAgICAgICAgICAgICAgICBtb2RpZmllZEFjY2Vzc0NvbmRpdGlvbnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucy5jb25kaXRpb25zKSwgeyBpZlRhZ3M6IChfYSA9IG9wdGlvbnMuY29uZGl0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRhZ0NvbmRpdGlvbnMgfSksXG4gICAgICAgICAgICAgICAgcHJldnNuYXBzaG90OiBwcmV2U25hcHNob3QsXG4gICAgICAgICAgICAgICAgcmFuZ2U6IHJhbmdlVG9TdHJpbmcoeyBvZmZzZXQsIGNvdW50IH0pLFxuICAgICAgICAgICAgICAgIHRyYWNpbmdPcHRpb25zOiB1cGRhdGVkT3B0aW9ucy50cmFjaW5nT3B0aW9ucyxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHJldHVybiByYW5nZVJlc3BvbnNlRnJvbU1vZGVsKHJlc3VsdCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBnZXRQYWdlUmFuZ2VzRGlmZlNlZ21lbnQgcmV0dXJucyBhIHNpbmdsZSBzZWdtZW50IG9mIHBhZ2UgcmFuZ2VzIHN0YXJ0aW5nIGZyb20gdGhlXG4gICAgICogc3BlY2lmaWVkIE1hcmtlciBmb3IgZGlmZmVyZW5jZSBiZXR3ZWVuIHByZXZpb3VzIHNuYXBzaG90IGFuZCB0aGUgdGFyZ2V0IHBhZ2UgYmxvYi5cbiAgICAgKiBVc2UgYW4gZW1wdHkgTWFya2VyIHRvIHN0YXJ0IGVudW1lcmF0aW9uIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKiBBZnRlciBnZXR0aW5nIGEgc2VnbWVudCwgcHJvY2VzcyBpdCwgYW5kIHRoZW4gY2FsbCBnZXRQYWdlUmFuZ2VzRGlmZlNlZ21lbnQgYWdhaW5cbiAgICAgKiAocGFzc2luZyB0aGUgdGhlIHByZXZpb3VzbHktcmV0dXJuZWQgTWFya2VyKSB0byBnZXQgdGhlIG5leHQgc2VnbWVudC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9nZXQtcGFnZS1yYW5nZXNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBTdGFydGluZyBieXRlIHBvc2l0aW9uIG9mIHRoZSBwYWdlIHJhbmdlcy5cbiAgICAgKiBAcGFyYW0gY291bnQgLSBOdW1iZXIgb2YgYnl0ZXMgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSBwcmV2U25hcHNob3RPclVybCAtIFRpbWVzdGFtcCBvZiBzbmFwc2hvdCB0byByZXRyaWV2ZSB0aGUgZGlmZmVyZW5jZSBvciBVUkwgb2Ygc25hcHNob3QgdG8gcmV0cmlldmUgdGhlIGRpZmZlcmVuY2UuXG4gICAgICogQHBhcmFtIG1hcmtlciAtIEEgc3RyaW5nIHZhbHVlIHRoYXQgaWRlbnRpZmllcyB0aGUgcG9ydGlvbiBvZiB0aGUgZ2V0IHRvIGJlIHJldHVybmVkIHdpdGggdGhlIG5leHQgZ2V0IG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gdGhlIFBhZ2UgQmxvYiBHZXQgUGFnZSBSYW5nZXMgRGlmZiBvcGVyYXRpb24uXG4gICAgICovXG4gICAgYXN5bmMgbGlzdFBhZ2VSYW5nZXNEaWZmU2VnbWVudChvZmZzZXQsIGNvdW50LCBwcmV2U25hcHNob3RPclVybCwgbWFya2VyLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJQYWdlQmxvYkNsaWVudC1nZXRQYWdlUmFuZ2VzRGlmZlNlZ21lbnRcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gYXNzZXJ0UmVzcG9uc2UoYXdhaXQgdGhpcy5wYWdlQmxvYkNvbnRleHQuZ2V0UGFnZVJhbmdlc0RpZmYoe1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICAgICAgICAgICAgbGVhc2VBY2Nlc3NDb25kaXRpb25zOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY29uZGl0aW9ucyxcbiAgICAgICAgICAgICAgICBtb2RpZmllZEFjY2Vzc0NvbmRpdGlvbnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNvbmRpdGlvbnMpLCB7IGlmVGFnczogKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNvbmRpdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50YWdDb25kaXRpb25zIH0pLFxuICAgICAgICAgICAgICAgIHByZXZzbmFwc2hvdDogcHJldlNuYXBzaG90T3JVcmwsXG4gICAgICAgICAgICAgICAgcmFuZ2U6IHJhbmdlVG9TdHJpbmcoe1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgY291bnQ6IGNvdW50LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG1hcmtlcjogbWFya2VyLFxuICAgICAgICAgICAgICAgIG1heFBhZ2VTaXplOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubWF4UGFnZVNpemUsXG4gICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBBc3luY0l0ZXJhYmxlSXRlcmF0b3IgZm9yIHtAbGluayBQYWdlQmxvYkdldFBhZ2VSYW5nZXNEaWZmUmVzcG9uc2VNb2RlbH1cbiAgICAgKlxuICAgICAqXG4gICAgICogQHBhcmFtIG9mZnNldCAtIFN0YXJ0aW5nIGJ5dGUgcG9zaXRpb24gb2YgdGhlIHBhZ2UgcmFuZ2VzLlxuICAgICAqIEBwYXJhbSBjb3VudCAtIE51bWJlciBvZiBieXRlcyB0byBnZXQuXG4gICAgICogQHBhcmFtIHByZXZTbmFwc2hvdE9yVXJsIC0gVGltZXN0YW1wIG9mIHNuYXBzaG90IHRvIHJldHJpZXZlIHRoZSBkaWZmZXJlbmNlIG9yIFVSTCBvZiBzbmFwc2hvdCB0byByZXRyaWV2ZSB0aGUgZGlmZmVyZW5jZS5cbiAgICAgKiBAcGFyYW0gbWFya2VyIC0gQSBzdHJpbmcgdmFsdWUgdGhhdCBpZGVudGlmaWVzIHRoZSBwb3J0aW9uIG9mXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBnZXQgb2YgcGFnZSByYW5nZXMgdG8gYmUgcmV0dXJuZWQgd2l0aCB0aGUgbmV4dCBnZXR0aW5nIG9wZXJhdGlvbi4gVGhlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbiByZXR1cm5zIHRoZSBDb250aW51YXRpb25Ub2tlbiB2YWx1ZSB3aXRoaW4gdGhlIHJlc3BvbnNlIGJvZHkgaWYgdGhlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGdldHRpbmcgb3BlcmF0aW9uIGRpZCBub3QgcmV0dXJuIGFsbCBwYWdlIHJhbmdlcyByZW1haW5pbmcgd2l0aGluIHRoZSBjdXJyZW50IHBhZ2UuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBDb250aW51YXRpb25Ub2tlbiB2YWx1ZSBjYW4gYmUgdXNlZCBhcyB0aGUgdmFsdWUgZm9yXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBtYXJrZXIgcGFyYW1ldGVyIGluIGEgc3Vic2VxdWVudCBjYWxsIHRvIHJlcXVlc3QgdGhlIG5leHQgcGFnZSBvZiBnZXRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMuIFRoZSBtYXJrZXIgdmFsdWUgaXMgb3BhcXVlIHRvIHRoZSBjbGllbnQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIHRoZSBQYWdlIEJsb2IgR2V0IFBhZ2UgUmFuZ2VzIERpZmYgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGxpc3RQYWdlUmFuZ2VEaWZmSXRlbVNlZ21lbnRzKG9mZnNldCwgY291bnQsIHByZXZTbmFwc2hvdE9yVXJsLCBtYXJrZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiogbGlzdFBhZ2VSYW5nZURpZmZJdGVtU2VnbWVudHNfMSgpIHtcbiAgICAgICAgICAgIGxldCBnZXRQYWdlUmFuZ2VJdGVtU2VnbWVudHNSZXNwb25zZTtcbiAgICAgICAgICAgIGlmICghIW1hcmtlciB8fCBtYXJrZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFnZVJhbmdlSXRlbVNlZ21lbnRzUmVzcG9uc2UgPSB5aWVsZCBfX2F3YWl0KHRoaXMubGlzdFBhZ2VSYW5nZXNEaWZmU2VnbWVudChvZmZzZXQsIGNvdW50LCBwcmV2U25hcHNob3RPclVybCwgbWFya2VyLCBvcHRpb25zKSk7XG4gICAgICAgICAgICAgICAgICAgIG1hcmtlciA9IGdldFBhZ2VSYW5nZUl0ZW1TZWdtZW50c1Jlc3BvbnNlLmNvbnRpbnVhdGlvblRva2VuO1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCB5aWVsZCBfX2F3YWl0KHlpZWxkIF9fYXdhaXQoZ2V0UGFnZVJhbmdlSXRlbVNlZ21lbnRzUmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICB9IHdoaWxlIChtYXJrZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBBc3luY0l0ZXJhYmxlSXRlcmF0b3Igb2Yge0BsaW5rIFBhZ2VSYW5nZUluZm99IG9iamVjdHNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBTdGFydGluZyBieXRlIHBvc2l0aW9uIG9mIHRoZSBwYWdlIHJhbmdlcy5cbiAgICAgKiBAcGFyYW0gY291bnQgLSBOdW1iZXIgb2YgYnl0ZXMgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSBwcmV2U25hcHNob3RPclVybCAtIFRpbWVzdGFtcCBvZiBzbmFwc2hvdCB0byByZXRyaWV2ZSB0aGUgZGlmZmVyZW5jZSBvciBVUkwgb2Ygc25hcHNob3QgdG8gcmV0cmlldmUgdGhlIGRpZmZlcmVuY2UuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIHRoZSBQYWdlIEJsb2IgR2V0IFBhZ2UgUmFuZ2VzIERpZmYgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGxpc3RQYWdlUmFuZ2VEaWZmSXRlbXMob2Zmc2V0LCBjb3VudCwgcHJldlNuYXBzaG90T3JVcmwsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiogbGlzdFBhZ2VSYW5nZURpZmZJdGVtc18xKCkge1xuICAgICAgICAgICAgdmFyIF9hLCBlXzIsIF9iLCBfYztcbiAgICAgICAgICAgIGxldCBtYXJrZXI7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9kID0gdHJ1ZSwgX2UgPSBfX2FzeW5jVmFsdWVzKHRoaXMubGlzdFBhZ2VSYW5nZURpZmZJdGVtU2VnbWVudHMob2Zmc2V0LCBjb3VudCwgcHJldlNuYXBzaG90T3JVcmwsIG1hcmtlciwgb3B0aW9ucykpLCBfZjsgX2YgPSB5aWVsZCBfX2F3YWl0KF9lLm5leHQoKSksIF9hID0gX2YuZG9uZSwgIV9hOyBfZCA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgX2MgPSBfZi52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2V0UGFnZVJhbmdlc1NlZ21lbnQgPSBfYztcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgX19hd2FpdCh5aWVsZCogX19hc3luY0RlbGVnYXRvcihfX2FzeW5jVmFsdWVzKEV4dHJhY3RQYWdlUmFuZ2VJbmZvSXRlbXMoZ2V0UGFnZVJhbmdlc1NlZ21lbnQpKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9kICYmICFfYSAmJiAoX2IgPSBfZS5yZXR1cm4pKSB5aWVsZCBfX2F3YWl0KF9iLmNhbGwoX2UpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhc3luYyBpdGVyYWJsZSBpdGVyYXRvciB0byBsaXN0IG9mIHBhZ2UgcmFuZ2VzIHRoYXQgZGlmZmVyIGJldHdlZW4gYSBzcGVjaWZpZWQgc25hcHNob3QgYW5kIHRoaXMgcGFnZSBibG9iLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL2dldC1wYWdlLXJhbmdlc1xuICAgICAqXG4gICAgICogIC5ieVBhZ2UoKSByZXR1cm5zIGFuIGFzeW5jIGl0ZXJhYmxlIGl0ZXJhdG9yIHRvIGxpc3Qgb2YgcGFnZSByYW5nZXMgdGhhdCBkaWZmZXIgYmV0d2VlbiBhIHNwZWNpZmllZCBzbmFwc2hvdCBhbmQgdGhpcyBwYWdlIGJsb2IuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlIHVzaW5nIGBmb3IgYXdhaXRgIHN5bnRheDpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogLy8gR2V0IHRoZSBwYWdlQmxvYkNsaWVudCBiZWZvcmUgeW91IHJ1biB0aGVzZSBzbmlwcGV0cyxcbiAgICAgKiAvLyBDYW4gYmUgb2J0YWluZWQgZnJvbSBgYmxvYlNlcnZpY2VDbGllbnQuZ2V0Q29udGFpbmVyQ2xpZW50KFwiPHlvdXItY29udGFpbmVyLW5hbWU+XCIpLmdldFBhZ2VCbG9iQ2xpZW50KFwiPHlvdXItYmxvYi1uYW1lPlwiKTtgXG4gICAgICogbGV0IGkgPSAxO1xuICAgICAqIGZvciBhd2FpdCAoY29uc3QgcGFnZVJhbmdlIG9mIHBhZ2VCbG9iQ2xpZW50Lmxpc3RQYWdlUmFuZ2VzRGlmZigpKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhgUGFnZSByYW5nZSAke2krK306ICR7cGFnZVJhbmdlLnN0YXJ0fSAtICR7cGFnZVJhbmdlLmVuZH1gKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBFeGFtcGxlIHVzaW5nIGBpdGVyLm5leHQoKWA6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGxldCBpID0gMTtcbiAgICAgKiBsZXQgaXRlciA9IHBhZ2VCbG9iQ2xpZW50Lmxpc3RQYWdlUmFuZ2VzRGlmZigpO1xuICAgICAqIGxldCBwYWdlUmFuZ2VJdGVtID0gYXdhaXQgaXRlci5uZXh0KCk7XG4gICAgICogd2hpbGUgKCFwYWdlUmFuZ2VJdGVtLmRvbmUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGBQYWdlIHJhbmdlICR7aSsrfTogJHtwYWdlUmFuZ2VJdGVtLnZhbHVlLnN0YXJ0fSAtICR7cGFnZVJhbmdlSXRlbS52YWx1ZS5lbmR9LCBJc0NsZWFyOiAke3BhZ2VSYW5nZUl0ZW0udmFsdWUuaXNDbGVhcn1gKTtcbiAgICAgKiAgIHBhZ2VSYW5nZUl0ZW0gPSBhd2FpdCBpdGVyLm5leHQoKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBFeGFtcGxlIHVzaW5nIGBieVBhZ2UoKWA6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIC8vIHBhc3Npbmcgb3B0aW9uYWwgbWF4UGFnZVNpemUgaW4gdGhlIHBhZ2Ugc2V0dGluZ3NcbiAgICAgKiBsZXQgaSA9IDE7XG4gICAgICogZm9yIGF3YWl0IChjb25zdCByZXNwb25zZSBvZiBwYWdlQmxvYkNsaWVudC5saXN0UGFnZVJhbmdlc0RpZmYoKS5ieVBhZ2UoeyBtYXhQYWdlU2l6ZTogMjAgfSkpIHtcbiAgICAgKiAgIGZvciAoY29uc3QgcGFnZVJhbmdlIG9mIHJlc3BvbnNlKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKGBQYWdlIHJhbmdlICR7aSsrfTogJHtwYWdlUmFuZ2Uuc3RhcnR9IC0gJHtwYWdlUmFuZ2UuZW5kfWApO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEV4YW1wbGUgdXNpbmcgcGFnaW5nIHdpdGggYSBtYXJrZXI6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGxldCBpID0gMTtcbiAgICAgKiBsZXQgaXRlcmF0b3IgPSBwYWdlQmxvYkNsaWVudC5saXN0UGFnZVJhbmdlc0RpZmYoKS5ieVBhZ2UoeyBtYXhQYWdlU2l6ZTogMiB9KTtcbiAgICAgKiBsZXQgcmVzcG9uc2UgPSAoYXdhaXQgaXRlcmF0b3IubmV4dCgpKS52YWx1ZTtcbiAgICAgKlxuICAgICAqIC8vIFByaW50cyAyIHBhZ2UgcmFuZ2VzXG4gICAgICogZm9yIChjb25zdCBwYWdlUmFuZ2Ugb2YgcmVzcG9uc2UpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGBQYWdlIHJhbmdlICR7aSsrfTogJHtwYWdlUmFuZ2Uuc3RhcnR9IC0gJHtwYWdlUmFuZ2UuZW5kfWApO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIC8vIEdldHMgbmV4dCBtYXJrZXJcbiAgICAgKiBsZXQgbWFya2VyID0gcmVzcG9uc2UuY29udGludWF0aW9uVG9rZW47XG4gICAgICpcbiAgICAgKiAvLyBQYXNzaW5nIG5leHQgbWFya2VyIGFzIGNvbnRpbnVhdGlvblRva2VuXG4gICAgICpcbiAgICAgKiBpdGVyYXRvciA9IHBhZ2VCbG9iQ2xpZW50Lmxpc3RQYWdlUmFuZ2VzRGlmZigpLmJ5UGFnZSh7IGNvbnRpbnVhdGlvblRva2VuOiBtYXJrZXIsIG1heFBhZ2VTaXplOiAxMCB9KTtcbiAgICAgKiByZXNwb25zZSA9IChhd2FpdCBpdGVyYXRvci5uZXh0KCkpLnZhbHVlO1xuICAgICAqXG4gICAgICogLy8gUHJpbnRzIDEwIHBhZ2UgcmFuZ2VzXG4gICAgICogZm9yIChjb25zdCBibG9iIG9mIHJlc3BvbnNlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhgUGFnZSByYW5nZSAke2krK306ICR7cGFnZVJhbmdlLnN0YXJ0fSAtICR7cGFnZVJhbmdlLmVuZH1gKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG9mZnNldCAtIFN0YXJ0aW5nIGJ5dGUgcG9zaXRpb24gb2YgdGhlIHBhZ2UgcmFuZ2VzLlxuICAgICAqIEBwYXJhbSBjb3VudCAtIE51bWJlciBvZiBieXRlcyB0byBnZXQuXG4gICAgICogQHBhcmFtIHByZXZTbmFwc2hvdCAtIFRpbWVzdGFtcCBvZiBzbmFwc2hvdCB0byByZXRyaWV2ZSB0aGUgZGlmZmVyZW5jZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gdGhlIFBhZ2UgQmxvYiBHZXQgUmFuZ2VzIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyBBbiBhc3luY0l0ZXJhYmxlSXRlcmF0b3IgdGhhdCBzdXBwb3J0cyBwYWdpbmcuXG4gICAgICovXG4gICAgbGlzdFBhZ2VSYW5nZXNEaWZmKG9mZnNldCwgY291bnQsIHByZXZTbmFwc2hvdCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIG9wdGlvbnMuY29uZGl0aW9ucyA9IG9wdGlvbnMuY29uZGl0aW9ucyB8fCB7fTtcbiAgICAgICAgLy8gQXN5bmNJdGVyYWJsZUl0ZXJhdG9yIHRvIGl0ZXJhdGUgb3ZlciBibG9ic1xuICAgICAgICBjb25zdCBpdGVyID0gdGhpcy5saXN0UGFnZVJhbmdlRGlmZkl0ZW1zKG9mZnNldCwgY291bnQsIHByZXZTbmFwc2hvdCwgT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgbmV4dCBtZXRob2QsIHBhcnQgb2YgdGhlIGl0ZXJhdGlvbiBwcm90b2NvbFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBuZXh0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVyLm5leHQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSBjb25uZWN0aW9uIHRvIHRoZSBhc3luYyBpdGVyYXRvciwgcGFydCBvZiB0aGUgaXRlcmF0aW9uIHByb3RvY29sXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm4gYW4gQXN5bmNJdGVyYWJsZUl0ZXJhdG9yIHRoYXQgd29ya3MgYSBwYWdlIGF0IGEgdGltZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBieVBhZ2U6IChzZXR0aW5ncyA9IHt9KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdFBhZ2VSYW5nZURpZmZJdGVtU2VnbWVudHMob2Zmc2V0LCBjb3VudCwgcHJldlNuYXBzaG90LCBzZXR0aW5ncy5jb250aW51YXRpb25Ub2tlbiwgT2JqZWN0LmFzc2lnbih7IG1heFBhZ2VTaXplOiBzZXR0aW5ncy5tYXhQYWdlU2l6ZSB9LCBvcHRpb25zKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjb2xsZWN0aW9uIG9mIHBhZ2UgcmFuZ2VzIHRoYXQgZGlmZmVyIGJldHdlZW4gYSBzcGVjaWZpZWQgc25hcHNob3QgYW5kIHRoaXMgcGFnZSBibG9iIGZvciBtYW5hZ2VkIGRpc2tzLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL2dldC1wYWdlLXJhbmdlc1xuICAgICAqXG4gICAgICogQHBhcmFtIG9mZnNldCAtIFN0YXJ0aW5nIGJ5dGUgcG9zaXRpb24gb2YgdGhlIHBhZ2UgYmxvYlxuICAgICAqIEBwYXJhbSBjb3VudCAtIE51bWJlciBvZiBieXRlcyB0byBnZXQgcmFuZ2VzIGRpZmYuXG4gICAgICogQHBhcmFtIHByZXZTbmFwc2hvdFVybCAtIFVSTCBvZiBzbmFwc2hvdCB0byByZXRyaWV2ZSB0aGUgZGlmZmVyZW5jZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gdGhlIFBhZ2UgQmxvYiBHZXQgUGFnZSBSYW5nZXMgRGlmZiBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMgUmVzcG9uc2UgZGF0YSBmb3IgdGhlIFBhZ2UgQmxvYiBHZXQgUGFnZSBSYW5nZSBEaWZmIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRQYWdlUmFuZ2VzRGlmZkZvck1hbmFnZWREaXNrcyhvZmZzZXQsIGNvdW50LCBwcmV2U25hcHNob3RVcmwsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBvcHRpb25zLmNvbmRpdGlvbnMgPSBvcHRpb25zLmNvbmRpdGlvbnMgfHwge307XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKFwiUGFnZUJsb2JDbGllbnQtR2V0UGFnZVJhbmdlc0RpZmZGb3JNYW5hZ2VkRGlza3NcIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMucGFnZUJsb2JDb250ZXh0LmdldFBhZ2VSYW5nZXNEaWZmKHtcbiAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgICAgICAgICAgICBsZWFzZUFjY2Vzc0NvbmRpdGlvbnM6IG9wdGlvbnMuY29uZGl0aW9ucyxcbiAgICAgICAgICAgICAgICBtb2RpZmllZEFjY2Vzc0NvbmRpdGlvbnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucy5jb25kaXRpb25zKSwgeyBpZlRhZ3M6IChfYSA9IG9wdGlvbnMuY29uZGl0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRhZ0NvbmRpdGlvbnMgfSksXG4gICAgICAgICAgICAgICAgcHJldlNuYXBzaG90VXJsLFxuICAgICAgICAgICAgICAgIHJhbmdlOiByYW5nZVRvU3RyaW5nKHsgb2Zmc2V0LCBjb3VudCB9KSxcbiAgICAgICAgICAgICAgICB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4gcmFuZ2VSZXNwb25zZUZyb21Nb2RlbChyZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNpemVzIHRoZSBwYWdlIGJsb2IgdG8gdGhlIHNwZWNpZmllZCBzaXplICh3aGljaCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNTEyKS5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9zZXQtYmxvYi1wcm9wZXJ0aWVzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2l6ZSAtIFRhcmdldCBzaXplXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIHRoZSBQYWdlIEJsb2IgUmVzaXplIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyBSZXNwb25zZSBkYXRhIGZvciB0aGUgUGFnZSBCbG9iIFJlc2l6ZSBvcGVyYXRpb24uXG4gICAgICovXG4gICAgYXN5bmMgcmVzaXplKHNpemUsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBvcHRpb25zLmNvbmRpdGlvbnMgPSBvcHRpb25zLmNvbmRpdGlvbnMgfHwge307XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKFwiUGFnZUJsb2JDbGllbnQtcmVzaXplXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMucGFnZUJsb2JDb250ZXh0LnJlc2l6ZShzaXplLCB7XG4gICAgICAgICAgICAgICAgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICAgICAgICAgICAgbGVhc2VBY2Nlc3NDb25kaXRpb25zOiBvcHRpb25zLmNvbmRpdGlvbnMsXG4gICAgICAgICAgICAgICAgbW9kaWZpZWRBY2Nlc3NDb25kaXRpb25zOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMuY29uZGl0aW9ucyksIHsgaWZUYWdzOiAoX2EgPSBvcHRpb25zLmNvbmRpdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50YWdDb25kaXRpb25zIH0pLFxuICAgICAgICAgICAgICAgIGVuY3J5cHRpb25TY29wZTogb3B0aW9ucy5lbmNyeXB0aW9uU2NvcGUsXG4gICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBhIHBhZ2UgYmxvYidzIHNlcXVlbmNlIG51bWJlci5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9zZXQtYmxvYi1wcm9wZXJ0aWVzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2VxdWVuY2VOdW1iZXJBY3Rpb24gLSBJbmRpY2F0ZXMgaG93IHRoZSBzZXJ2aWNlIHNob3VsZCBtb2RpZnkgdGhlIGJsb2IncyBzZXF1ZW5jZSBudW1iZXIuXG4gICAgICogQHBhcmFtIHNlcXVlbmNlTnVtYmVyIC0gUmVxdWlyZWQgaWYgc2VxdWVuY2VOdW1iZXJBY3Rpb24gaXMgbWF4IG9yIHVwZGF0ZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byB0aGUgUGFnZSBCbG9iIFVwZGF0ZSBTZXF1ZW5jZSBOdW1iZXIgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIFJlc3BvbnNlIGRhdGEgZm9yIHRoZSBQYWdlIEJsb2IgVXBkYXRlIFNlcXVlbmNlIE51bWJlciBvcGVyYXRpb24uXG4gICAgICovXG4gICAgYXN5bmMgdXBkYXRlU2VxdWVuY2VOdW1iZXIoc2VxdWVuY2VOdW1iZXJBY3Rpb24sIHNlcXVlbmNlTnVtYmVyLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgb3B0aW9ucy5jb25kaXRpb25zID0gb3B0aW9ucy5jb25kaXRpb25zIHx8IHt9O1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIlBhZ2VCbG9iQ2xpZW50LXVwZGF0ZVNlcXVlbmNlTnVtYmVyXCIsIG9wdGlvbnMsIGFzeW5jICh1cGRhdGVkT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuIGFzc2VydFJlc3BvbnNlKGF3YWl0IHRoaXMucGFnZUJsb2JDb250ZXh0LnVwZGF0ZVNlcXVlbmNlTnVtYmVyKHNlcXVlbmNlTnVtYmVyQWN0aW9uLCB7XG4gICAgICAgICAgICAgICAgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICAgICAgICAgICAgYmxvYlNlcXVlbmNlTnVtYmVyOiBzZXF1ZW5jZU51bWJlcixcbiAgICAgICAgICAgICAgICBsZWFzZUFjY2Vzc0NvbmRpdGlvbnM6IG9wdGlvbnMuY29uZGl0aW9ucyxcbiAgICAgICAgICAgICAgICBtb2RpZmllZEFjY2Vzc0NvbmRpdGlvbnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucy5jb25kaXRpb25zKSwgeyBpZlRhZ3M6IChfYSA9IG9wdGlvbnMuY29uZGl0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRhZ0NvbmRpdGlvbnMgfSksXG4gICAgICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQmVnaW5zIGFuIG9wZXJhdGlvbiB0byBzdGFydCBhbiBpbmNyZW1lbnRhbCBjb3B5IGZyb20gb25lIHBhZ2UgYmxvYidzIHNuYXBzaG90IHRvIHRoaXMgcGFnZSBibG9iLlxuICAgICAqIFRoZSBzbmFwc2hvdCBpcyBjb3BpZWQgc3VjaCB0aGF0IG9ubHkgdGhlIGRpZmZlcmVudGlhbCBjaGFuZ2VzIGJldHdlZW4gdGhlIHByZXZpb3VzbHlcbiAgICAgKiBjb3BpZWQgc25hcHNob3QgYXJlIHRyYW5zZmVycmVkIHRvIHRoZSBkZXN0aW5hdGlvbi5cbiAgICAgKiBUaGUgY29waWVkIHNuYXBzaG90cyBhcmUgY29tcGxldGUgY29waWVzIG9mIHRoZSBvcmlnaW5hbCBzbmFwc2hvdCBhbmQgY2FuIGJlIHJlYWQgb3IgY29waWVkIGZyb20gYXMgdXN1YWwuXG4gICAgICogQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9yZXN0L2FwaS9zdG9yYWdlc2VydmljZXMvaW5jcmVtZW50YWwtY29weS1ibG9iXG4gICAgICogQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS92aXJ0dWFsLW1hY2hpbmVzL3dpbmRvd3MvaW5jcmVtZW50YWwtc25hcHNob3RzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29weVNvdXJjZSAtIFNwZWNpZmllcyB0aGUgbmFtZSBvZiB0aGUgc291cmNlIHBhZ2UgYmxvYiBzbmFwc2hvdC4gRm9yIGV4YW1wbGUsXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cHM6Ly9teWFjY291bnQuYmxvYi5jb3JlLndpbmRvd3MubmV0L215Y29udGFpbmVyL215YmxvYj9zbmFwc2hvdD08RGF0ZVRpbWU+XG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIHRoZSBQYWdlIEJsb2IgQ29weSBJbmNyZW1lbnRhbCBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMgUmVzcG9uc2UgZGF0YSBmb3IgdGhlIFBhZ2UgQmxvYiBDb3B5IEluY3JlbWVudGFsIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBzdGFydENvcHlJbmNyZW1lbnRhbChjb3B5U291cmNlLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oXCJQYWdlQmxvYkNsaWVudC1zdGFydENvcHlJbmNyZW1lbnRhbFwiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiBhc3NlcnRSZXNwb25zZShhd2FpdCB0aGlzLnBhZ2VCbG9iQ29udGV4dC5jb3B5SW5jcmVtZW50YWwoY29weVNvdXJjZSwge1xuICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgICAgICAgICAgIG1vZGlmaWVkQWNjZXNzQ29uZGl0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmNvbmRpdGlvbnMpLCB7IGlmVGFnczogKF9hID0gb3B0aW9ucy5jb25kaXRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGFnQ29uZGl0aW9ucyB9KSxcbiAgICAgICAgICAgICAgICB0cmFjaW5nT3B0aW9uczogdXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNsaWVudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContainerClient: () => (/* binding */ ContainerClient)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _azure_core_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-auth */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/index.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Pipeline */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _StorageClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StorageClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/tracing */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./sas/BlobSASSignatureValues */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js\");\n/* harmony import */ var _BlobLeaseClient__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./BlobLeaseClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js\");\n/* harmony import */ var _Clients__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Clients */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js\");\n/* harmony import */ var _BlobBatchClient__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./BlobBatchClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A ContainerClient represents a URL to the Azure Storage container allowing you to manipulate its blobs.\n */\nclass ContainerClient extends _StorageClient__WEBPACK_IMPORTED_MODULE_3__.StorageClient {\n    /**\n     * The name of the container.\n     */\n    get containerName() {\n        return this._containerName;\n    }\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        let pipeline;\n        let url;\n        options = options || {};\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.isPipelineLike)(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.isNode && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_2__.isTokenCredential)(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.extractConnectionStringParts)(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.isNode) {\n                    const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                    }\n                    pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName parameter\");\n        }\n        super(url, pipeline);\n        this._containerName = this.getContainerNameFromUrl();\n        this.containerContext = this.storageClientContext.container;\n    }\n    /**\n     * Creates a new container under the specified account. If the container with\n     * the same name already exists, the operation fails.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n     * Naming rules: @see https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n     *\n     * @param options - Options to Container Create operation.\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const containerClient = blobServiceClient.getContainerClient(\"<container name>\");\n     * const createContainerResponse = await containerClient.create();\n     * console.log(\"Container was created successfully\", createContainerResponse.requestId);\n     * ```\n     */\n    async create(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-create\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.create(updatedOptions));\n        });\n    }\n    /**\n     * Creates a new container under the specified account. If the container with\n     * the same name already exists, it is not changed.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n     * Naming rules: @see https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n     *\n     * @param options -\n     */\n    async createIfNotExists(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-createIfNotExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = await this.create(updatedOptions);\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"ContainerAlreadyExists\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                else {\n                    throw e;\n                }\n            }\n        });\n    }\n    /**\n     * Returns true if the Azure container resource represented by this client exists; false otherwise.\n     *\n     * NOTE: use this function with care since an existing container might be deleted by other clients or\n     * applications. Vice versa new containers with the same name might be added by other clients or\n     * applications after this function completes.\n     *\n     * @param options -\n     */\n    async exists(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-exists\", options, async (updatedOptions) => {\n            try {\n                await this.getProperties({\n                    abortSignal: options.abortSignal,\n                    tracingOptions: updatedOptions.tracingOptions,\n                });\n                return true;\n            }\n            catch (e) {\n                if (e.statusCode === 404) {\n                    return false;\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Creates a {@link BlobClient}\n     *\n     * @param blobName - A blob name\n     * @returns A new BlobClient object for the given blob name.\n     */\n    getBlobClient(blobName) {\n        return new _Clients__WEBPACK_IMPORTED_MODULE_9__.BlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(this.url, (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.EscapePath)(blobName)), this.pipeline);\n    }\n    /**\n     * Creates an {@link AppendBlobClient}\n     *\n     * @param blobName - An append blob name\n     */\n    getAppendBlobClient(blobName) {\n        return new _Clients__WEBPACK_IMPORTED_MODULE_9__.AppendBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(this.url, (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.EscapePath)(blobName)), this.pipeline);\n    }\n    /**\n     * Creates a {@link BlockBlobClient}\n     *\n     * @param blobName - A block blob name\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const content = \"Hello world!\";\n     *\n     * const blockBlobClient = containerClient.getBlockBlobClient(\"<blob name>\");\n     * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);\n     * ```\n     */\n    getBlockBlobClient(blobName) {\n        return new _Clients__WEBPACK_IMPORTED_MODULE_9__.BlockBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(this.url, (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.EscapePath)(blobName)), this.pipeline);\n    }\n    /**\n     * Creates a {@link PageBlobClient}\n     *\n     * @param blobName - A page blob name\n     */\n    getPageBlobClient(blobName) {\n        return new _Clients__WEBPACK_IMPORTED_MODULE_9__.PageBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(this.url, (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.EscapePath)(blobName)), this.pipeline);\n    }\n    /**\n     * Returns all user-defined metadata and system properties for the specified\n     * container. The data returned does not include the container's list of blobs.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties\n     *\n     * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n     * they originally contained uppercase characters. This differs from the metadata keys returned by\n     * the `listContainers` method of {@link BlobServiceClient} using the `includeMetadata` option, which\n     * will retain their original casing.\n     *\n     * @param options - Options to Container Get Properties operation.\n     */\n    async getProperties(options = {}) {\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-getProperties\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.getProperties(Object.assign(Object.assign({ abortSignal: options.abortSignal }, options.conditions), { tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n    /**\n     * Marks the specified container for deletion. The container and any blobs\n     * contained within it are later deleted during garbage collection.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n     *\n     * @param options - Options to Container Delete operation.\n     */\n    async delete(options = {}) {\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-delete\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.delete({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Marks the specified container for deletion if it exists. The container and any blobs\n     * contained within it are later deleted during garbage collection.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n     *\n     * @param options - Options to Container Delete operation.\n     */\n    async deleteIfExists(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-deleteIfExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = await this.delete(updatedOptions);\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"ContainerNotFound\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Sets one or more user-defined name-value pairs for the specified container.\n     *\n     * If no option provided, or no metadata defined in the parameter, the container\n     * metadata will be removed.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata\n     *\n     * @param metadata - Replace existing metadata with this value.\n     *                            If no value provided the existing metadata will be removed.\n     * @param options - Options to Container Set Metadata operation.\n     */\n    async setMetadata(metadata, options = {}) {\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        if (options.conditions.ifUnmodifiedSince) {\n            throw new RangeError(\"the IfUnmodifiedSince must have their default values because they are ignored by the blob service\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-setMetadata\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.setMetadata({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata,\n                modifiedAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Gets the permissions for the specified container. The permissions indicate\n     * whether container data may be accessed publicly.\n     *\n     * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.\n     * For example, new Date(\"2018-12-31T03:44:23.8827891Z\").toISOString() will get \"2018-12-31T03:44:23.882Z\".\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl\n     *\n     * @param options - Options to Container Get Access Policy operation.\n     */\n    async getAccessPolicy(options = {}) {\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-getAccessPolicy\", options, async (updatedOptions) => {\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.getAccessPolicy({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const res = {\n                _response: response._response,\n                blobPublicAccess: response.blobPublicAccess,\n                date: response.date,\n                etag: response.etag,\n                errorCode: response.errorCode,\n                lastModified: response.lastModified,\n                requestId: response.requestId,\n                clientRequestId: response.clientRequestId,\n                signedIdentifiers: [],\n                version: response.version,\n            };\n            for (const identifier of response) {\n                let accessPolicy = undefined;\n                if (identifier.accessPolicy) {\n                    accessPolicy = {\n                        permissions: identifier.accessPolicy.permissions,\n                    };\n                    if (identifier.accessPolicy.expiresOn) {\n                        accessPolicy.expiresOn = new Date(identifier.accessPolicy.expiresOn);\n                    }\n                    if (identifier.accessPolicy.startsOn) {\n                        accessPolicy.startsOn = new Date(identifier.accessPolicy.startsOn);\n                    }\n                }\n                res.signedIdentifiers.push({\n                    accessPolicy,\n                    id: identifier.id,\n                });\n            }\n            return res;\n        });\n    }\n    /**\n     * Sets the permissions for the specified container. The permissions indicate\n     * whether blobs in a container may be accessed publicly.\n     *\n     * When you set permissions for a container, the existing permissions are replaced.\n     * If no access or containerAcl provided, the existing container ACL will be\n     * removed.\n     *\n     * When you establish a stored access policy on a container, it may take up to 30 seconds to take effect.\n     * During this interval, a shared access signature that is associated with the stored access policy will\n     * fail with status code 403 (Forbidden), until the access policy becomes active.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl\n     *\n     * @param access - The level of public access to data in the container.\n     * @param containerAcl - Array of elements each having a unique Id and details of the access policy.\n     * @param options - Options to Container Set Access Policy operation.\n     */\n    async setAccessPolicy(access, containerAcl, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-setAccessPolicy\", options, async (updatedOptions) => {\n            const acl = [];\n            for (const identifier of containerAcl || []) {\n                acl.push({\n                    accessPolicy: {\n                        expiresOn: identifier.accessPolicy.expiresOn\n                            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.truncatedISO8061Date)(identifier.accessPolicy.expiresOn)\n                            : \"\",\n                        permissions: identifier.accessPolicy.permissions,\n                        startsOn: identifier.accessPolicy.startsOn\n                            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.truncatedISO8061Date)(identifier.accessPolicy.startsOn)\n                            : \"\",\n                    },\n                    id: identifier.id,\n                });\n            }\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.setAccessPolicy({\n                abortSignal: options.abortSignal,\n                access,\n                containerAcl: acl,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Get a {@link BlobLeaseClient} that manages leases on the container.\n     *\n     * @param proposeLeaseId - Initial proposed lease Id.\n     * @returns A new BlobLeaseClient object for managing leases on the container.\n     */\n    getBlobLeaseClient(proposeLeaseId) {\n        return new _BlobLeaseClient__WEBPACK_IMPORTED_MODULE_10__.BlobLeaseClient(this, proposeLeaseId);\n    }\n    /**\n     * Creates a new block blob, or updates the content of an existing block blob.\n     *\n     * Updating an existing block blob overwrites any existing metadata on the blob.\n     * Partial updates are not supported; the content of the existing blob is\n     * overwritten with the new content. To perform a partial update of a block blob's,\n     * use {@link BlockBlobClient.stageBlock} and {@link BlockBlobClient.commitBlockList}.\n     *\n     * This is a non-parallel uploading method, please use {@link BlockBlobClient.uploadFile},\n     * {@link BlockBlobClient.uploadStream} or {@link BlockBlobClient.uploadBrowserData} for better\n     * performance with concurrency uploading.\n     *\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param blobName - Name of the block blob to create or update.\n     * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function\n     *                               which returns a new Readable stream whose offset is from data source beginning.\n     * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n     *                               string including non non-Base64/Hex-encoded characters.\n     * @param options - Options to configure the Block Blob Upload operation.\n     * @returns Block Blob upload response data and the corresponding BlockBlobClient instance.\n     */\n    async uploadBlockBlob(blobName, body, contentLength, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-uploadBlockBlob\", options, async (updatedOptions) => {\n            const blockBlobClient = this.getBlockBlobClient(blobName);\n            const response = await blockBlobClient.upload(body, contentLength, updatedOptions);\n            return {\n                blockBlobClient,\n                response,\n            };\n        });\n    }\n    /**\n     * Marks the specified blob or snapshot for deletion. The blob is later deleted\n     * during garbage collection. Note that in order to delete a blob, you must delete\n     * all of its snapshots. You can delete both at the same time with the Delete\n     * Blob operation.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n     *\n     * @param blobName -\n     * @param options - Options to Blob Delete operation.\n     * @returns Block blob deletion response data.\n     */\n    async deleteBlob(blobName, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-deleteBlob\", options, async (updatedOptions) => {\n            let blobClient = this.getBlobClient(blobName);\n            if (options.versionId) {\n                blobClient = blobClient.withVersion(options.versionId);\n            }\n            return blobClient.delete(updatedOptions);\n        });\n    }\n    /**\n     * listBlobFlatSegment returns a single segment of blobs starting from the\n     * specified Marker. Use an empty Marker to start enumeration from the beginning.\n     * After getting a segment, process it, and then call listBlobsFlatSegment again\n     * (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n     *\n     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.\n     * @param options - Options to Container List Blob Flat Segment operation.\n     */\n    async listBlobFlatSegment(marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-listBlobFlatSegment\", options, async (updatedOptions) => {\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.listBlobFlatSegment(Object.assign(Object.assign({ marker }, options), { tracingOptions: updatedOptions.tracingOptions })));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: Object.assign(Object.assign({}, response._response), { parsedBody: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.ConvertInternalResponseOfListBlobFlat)(response._response.parsedBody) }), segment: Object.assign(Object.assign({}, response.segment), { blobItems: response.segment.blobItems.map((blobItemInternal) => {\n                        const blobItem = Object.assign(Object.assign({}, blobItemInternal), { name: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.BlobNameToString)(blobItemInternal.name), tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toTags)(blobItemInternal.blobTags), objectReplicationSourceProperties: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.parseObjectReplicationRecord)(blobItemInternal.objectReplicationMetadata) });\n                        return blobItem;\n                    }) }) });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * listBlobHierarchySegment returns a single segment of blobs starting from\n     * the specified Marker. Use an empty Marker to start enumeration from the\n     * beginning. After getting a segment, process it, and then call listBlobsHierarchicalSegment\n     * again (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n     *\n     * @param delimiter - The character or string used to define the virtual hierarchy\n     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.\n     * @param options - Options to Container List Blob Hierarchy Segment operation.\n     */\n    async listBlobHierarchySegment(delimiter, marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-listBlobHierarchySegment\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.listBlobHierarchySegment(delimiter, Object.assign(Object.assign({ marker }, options), { tracingOptions: updatedOptions.tracingOptions })));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: Object.assign(Object.assign({}, response._response), { parsedBody: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.ConvertInternalResponseOfListBlobHierarchy)(response._response.parsedBody) }), segment: Object.assign(Object.assign({}, response.segment), { blobItems: response.segment.blobItems.map((blobItemInternal) => {\n                        const blobItem = Object.assign(Object.assign({}, blobItemInternal), { name: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.BlobNameToString)(blobItemInternal.name), tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toTags)(blobItemInternal.blobTags), objectReplicationSourceProperties: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.parseObjectReplicationRecord)(blobItemInternal.objectReplicationMetadata) });\n                        return blobItem;\n                    }), blobPrefixes: (_a = response.segment.blobPrefixes) === null || _a === void 0 ? void 0 : _a.map((blobPrefixInternal) => {\n                        const blobPrefix = Object.assign(Object.assign({}, blobPrefixInternal), { name: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.BlobNameToString)(blobPrefixInternal.name) });\n                        return blobPrefix;\n                    }) }) });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for ContainerListBlobFlatSegmentResponse\n     *\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to list blobs operation.\n     */\n    listSegments(marker_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* listSegments_1(marker, options = {}) {\n            let listBlobsFlatSegmentResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    listBlobsFlatSegmentResponse = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(this.listBlobFlatSegment(marker, options));\n                    marker = listBlobsFlatSegmentResponse.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(listBlobsFlatSegmentResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator of {@link BlobItem} objects\n     *\n     * @param options - Options to list blobs operation.\n     */\n    listItems() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* listItems_1(options = {}) {\n            var _a, e_1, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(this.listSegments(marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const listBlobsFlatSegmentResponse = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(listBlobsFlatSegmentResponse.segment.blobItems)));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_b.call(_e));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list all the blobs\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the blobs in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * // Get the containerClient before you run these snippets,\n     * // Can be obtained from `blobServiceClient.getContainerClient(\"<your-container-name>\");`\n     * let i = 1;\n     * for await (const blob of containerClient.listBlobsFlat()) {\n     *   console.log(`Blob ${i++}: ${blob.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * let iter = containerClient.listBlobsFlat();\n     * let blobItem = await iter.next();\n     * while (!blobItem.done) {\n     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n     *   blobItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of containerClient.listBlobsFlat().byPage({ maxPageSize: 20 })) {\n     *   for (const blob of response.segment.blobItems) {\n     *     console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 blob names\n     * for (const blob of response.segment.blobItems) {\n     *   console.log(`Blob ${i++}: ${blob.name}`);\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     *\n     * // Passing next marker as continuationToken\n     *\n     * iterator = containerClient.listBlobsFlat().byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 blob names\n     * for (const blob of response.segment.blobItems) {\n     *   console.log(`Blob ${i++}: ${blob.name}`);\n     * }\n     * ```\n     *\n     * @param options - Options to list blobs.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listBlobsFlat(options = {}) {\n        const include = [];\n        if (options.includeCopy) {\n            include.push(\"copy\");\n        }\n        if (options.includeDeleted) {\n            include.push(\"deleted\");\n        }\n        if (options.includeMetadata) {\n            include.push(\"metadata\");\n        }\n        if (options.includeSnapshots) {\n            include.push(\"snapshots\");\n        }\n        if (options.includeVersions) {\n            include.push(\"versions\");\n        }\n        if (options.includeUncommitedBlobs) {\n            include.push(\"uncommittedblobs\");\n        }\n        if (options.includeTags) {\n            include.push(\"tags\");\n        }\n        if (options.includeDeletedWithVersions) {\n            include.push(\"deletedwithversions\");\n        }\n        if (options.includeImmutabilityPolicy) {\n            include.push(\"immutabilitypolicy\");\n        }\n        if (options.includeLegalHold) {\n            include.push(\"legalhold\");\n        }\n        if (options.prefix === \"\") {\n            options.prefix = undefined;\n        }\n        const updatedOptions = Object.assign(Object.assign({}, options), (include.length > 0 ? { include: include } : {}));\n        // AsyncIterableIterator to iterate over blobs\n        const iter = this.listItems(updatedOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listSegments(settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, updatedOptions));\n            },\n        };\n    }\n    /**\n     * Returns an AsyncIterableIterator for ContainerListBlobHierarchySegmentResponse\n     *\n     * @param delimiter - The character or string used to define the virtual hierarchy\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to list blobs operation.\n     */\n    listHierarchySegments(delimiter_1, marker_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* listHierarchySegments_1(delimiter, marker, options = {}) {\n            let listBlobsHierarchySegmentResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    listBlobsHierarchySegmentResponse = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(this.listBlobHierarchySegment(delimiter, marker, options));\n                    marker = listBlobsHierarchySegmentResponse.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(listBlobsHierarchySegmentResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for {@link BlobPrefix} and {@link BlobItem} objects.\n     *\n     * @param delimiter - The character or string used to define the virtual hierarchy\n     * @param options - Options to list blobs operation.\n     */\n    listItemsByHierarchy(delimiter_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* listItemsByHierarchy_1(delimiter, options = {}) {\n            var _a, e_2, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(this.listHierarchySegments(delimiter, marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const listBlobsHierarchySegmentResponse = _c;\n                    const segment = listBlobsHierarchySegmentResponse.segment;\n                    if (segment.blobPrefixes) {\n                        for (const prefix of segment.blobPrefixes) {\n                            yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(Object.assign({ kind: \"prefix\" }, prefix));\n                        }\n                    }\n                    for (const blob of segment.blobItems) {\n                        yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(Object.assign({ kind: \"blob\" }, blob));\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_b.call(_e));\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list all the blobs by hierarchy.\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the blobs by hierarchy in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * for await (const item of containerClient.listBlobsByHierarchy(\"/\")) {\n     *   if (item.kind === \"prefix\") {\n     *     console.log(`\\tBlobPrefix: ${item.name}`);\n     *   } else {\n     *     console.log(`\\tBlobItem: name - ${item.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let iter = containerClient.listBlobsByHierarchy(\"/\", { prefix: \"prefix1/\" });\n     * let entity = await iter.next();\n     * while (!entity.done) {\n     *   let item = entity.value;\n     *   if (item.kind === \"prefix\") {\n     *     console.log(`\\tBlobPrefix: ${item.name}`);\n     *   } else {\n     *     console.log(`\\tBlobItem: name - ${item.name}`);\n     *   }\n     *   entity = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * console.log(\"Listing blobs by hierarchy by page\");\n     * for await (const response of containerClient.listBlobsByHierarchy(\"/\").byPage()) {\n     *   const segment = response.segment;\n     *   if (segment.blobPrefixes) {\n     *     for (const prefix of segment.blobPrefixes) {\n     *       console.log(`\\tBlobPrefix: ${prefix.name}`);\n     *     }\n     *   }\n     *   for (const blob of response.segment.blobItems) {\n     *     console.log(`\\tBlobItem: name - ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a max page size:\n     *\n     * ```js\n     * console.log(\"Listing blobs by hierarchy by page, specifying a prefix and a max page size\");\n     *\n     * let i = 1;\n     * for await (const response of containerClient\n     *   .listBlobsByHierarchy(\"/\", { prefix: \"prefix2/sub1/\" })\n     *   .byPage({ maxPageSize: 2 })) {\n     *   console.log(`Page ${i++}`);\n     *   const segment = response.segment;\n     *\n     *   if (segment.blobPrefixes) {\n     *     for (const prefix of segment.blobPrefixes) {\n     *       console.log(`\\tBlobPrefix: ${prefix.name}`);\n     *     }\n     *   }\n     *\n     *   for (const blob of response.segment.blobItems) {\n     *     console.log(`\\tBlobItem: name - ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param delimiter - The character or string used to define the virtual hierarchy\n     * @param options - Options to list blobs operation.\n     */\n    listBlobsByHierarchy(delimiter, options = {}) {\n        if (delimiter === \"\") {\n            throw new RangeError(\"delimiter should contain one or more characters\");\n        }\n        const include = [];\n        if (options.includeCopy) {\n            include.push(\"copy\");\n        }\n        if (options.includeDeleted) {\n            include.push(\"deleted\");\n        }\n        if (options.includeMetadata) {\n            include.push(\"metadata\");\n        }\n        if (options.includeSnapshots) {\n            include.push(\"snapshots\");\n        }\n        if (options.includeVersions) {\n            include.push(\"versions\");\n        }\n        if (options.includeUncommitedBlobs) {\n            include.push(\"uncommittedblobs\");\n        }\n        if (options.includeTags) {\n            include.push(\"tags\");\n        }\n        if (options.includeDeletedWithVersions) {\n            include.push(\"deletedwithversions\");\n        }\n        if (options.includeImmutabilityPolicy) {\n            include.push(\"immutabilitypolicy\");\n        }\n        if (options.includeLegalHold) {\n            include.push(\"legalhold\");\n        }\n        if (options.prefix === \"\") {\n            options.prefix = undefined;\n        }\n        const updatedOptions = Object.assign(Object.assign({}, options), (include.length > 0 ? { include: include } : {}));\n        // AsyncIterableIterator to iterate over blob prefixes and blobs\n        const iter = this.listItemsByHierarchy(delimiter, updatedOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            async next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listHierarchySegments(delimiter, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, updatedOptions));\n            },\n        };\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs in the container whose tags\n     * match a given search expression.\n     *\n     * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                        The given expression must evaluate to true for a blob to be returned in the results.\n     *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                        however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n    async findBlobsByTagsSegment(tagFilterSqlExpression, marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-findBlobsByTagsSegment\", options, async (updatedOptions) => {\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.filterBlobs({\n                abortSignal: options.abortSignal,\n                where: tagFilterSqlExpression,\n                marker,\n                maxPageSize: options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, blobs: response.blobs.map((blob) => {\n                    var _a;\n                    let tagValue = \"\";\n                    if (((_a = blob.tags) === null || _a === void 0 ? void 0 : _a.blobTagSet.length) === 1) {\n                        tagValue = blob.tags.blobTagSet[0].value;\n                    }\n                    return Object.assign(Object.assign({}, blob), { tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toTags)(blob.tags), tagValue });\n                }) });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for ContainerFindBlobsByTagsSegmentResponse.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n    findBlobsByTagsSegments(tagFilterSqlExpression_1, marker_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* findBlobsByTagsSegments_1(tagFilterSqlExpression, marker, options = {}) {\n            let response;\n            if (!!marker || marker === undefined) {\n                do {\n                    response = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options));\n                    response.blobs = response.blobs || [];\n                    marker = response.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(response);\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for blobs.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to findBlobsByTagsItems.\n     */\n    findBlobsByTagsItems(tagFilterSqlExpression_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* findBlobsByTagsItems_1(tagFilterSqlExpression, options = {}) {\n            var _a, e_3, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const segment = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(segment.blobs)));\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_b.call(_e));\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to find all blobs with specified tag\n     * under the specified container.\n     *\n     * .byPage() returns an async iterable iterator to list the blobs in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * let i = 1;\n     * for await (const blob of containerClient.findBlobsByTags(\"tagkey='tagvalue'\")) {\n     *   console.log(`Blob ${i++}: ${blob.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * const iter = containerClient.findBlobsByTags(\"tagkey='tagvalue'\");\n     * let blobItem = await iter.next();\n     * while (!blobItem.done) {\n     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n     *   blobItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of containerClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 20 })) {\n     *   if (response.blobs) {\n     *     for (const blob of response.blobs) {\n     *       console.log(`Blob ${i++}: ${blob.name}`);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = containerClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *     console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     * // Passing next marker as continuationToken\n     * iterator = containerClient\n     *   .findBlobsByTags(\"tagkey='tagvalue'\")\n     *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *      console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to find blobs by tags.\n     */\n    findBlobsByTags(tagFilterSqlExpression, options = {}) {\n        // AsyncIterableIterator to iterate over blobs\n        const listSegmentOptions = Object.assign({}, options);\n        const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));\n            },\n        };\n    }\n    getContainerNameFromUrl() {\n        let containerName;\n        try {\n            //  URL may look like the following\n            // \"https://myaccount.blob.core.windows.net/mycontainer?sasString\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer\";\n            // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername`\n            // http://localhost:10001/devstoreaccount1/containername\n            const parsedUrl = new URL(this.url);\n            if (parsedUrl.hostname.split(\".\")[1] === \"blob\") {\n                // \"https://myaccount.blob.core.windows.net/containername\".\n                // \"https://customdomain.com/containername\".\n                // .getPath() -> /containername\n                containerName = parsedUrl.pathname.split(\"/\")[1];\n            }\n            else if ((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.isIpEndpointStyle)(parsedUrl)) {\n                // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername\n                // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername\n                // .getPath() -> /devstoreaccount1/containername\n                containerName = parsedUrl.pathname.split(\"/\")[2];\n            }\n            else {\n                // \"https://customdomain.com/containername\".\n                // .getPath() -> /containername\n                containerName = parsedUrl.pathname.split(\"/\")[1];\n            }\n            // decode the encoded containerName - to get all the special characters that might be present in it\n            containerName = decodeURIComponent(containerName);\n            if (!containerName) {\n                throw new Error(\"Provided containerName is invalid.\");\n            }\n            return containerName;\n        }\n        catch (error) {\n            throw new Error(\"Unable to extract containerName with provided information.\");\n        }\n    }\n    /**\n     * Only available for ContainerClient constructed with a shared key credential.\n     *\n     * Generates a Blob Container Service Shared Access Signature (SAS) URI based on the client properties\n     * and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateSasUrl(options) {\n        return new Promise((resolve) => {\n            if (!(this.credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential)) {\n                throw new RangeError(\"Can only generate the SAS when the client is initialized with a shared key credential\");\n            }\n            const sas = (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_12__.generateBlobSASQueryParameters)(Object.assign({ containerName: this._containerName }, options), this.credential).toString();\n            resolve((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLQuery)(this.url, sas));\n        });\n    }\n    /**\n     * Creates a BlobBatchClient object to conduct batch operations.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n     *\n     * @returns A new BlobBatchClient object for this container.\n     */\n    getBlobBatchClient() {\n        return new _BlobBatchClient__WEBPACK_IMPORTED_MODULE_13__.BlobBatchClient(this.url, this.pipeline);\n    }\n}\n//# sourceMappingURL=ContainerClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rangeResponseFromModel: () => (/* binding */ rangeResponseFromModel)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Function that converts PageRange and ClearRange to a common Range object.\n * PageRange and ClearRange have start and end while Range offset and count\n * this function normalizes to Range.\n * @param response - Model PageBlob Range response\n */\nfunction rangeResponseFromModel(response) {\n    const pageRange = (response._response.parsedBody.pageRange || []).map((x) => ({\n        offset: x.start,\n        count: x.end - x.start,\n    }));\n    const clearRange = (response._response.parsedBody.clearRange || []).map((x) => ({\n        offset: x.start,\n        count: x.end - x.start,\n    }));\n    return Object.assign(Object.assign({}, response), { pageRange,\n        clearRange, _response: Object.assign(Object.assign({}, response._response), { parsedBody: {\n                pageRange,\n                clearRange,\n            } }) });\n}\n//# sourceMappingURL=PageBlobRangeResponse.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL1BhZ2VCbG9iUmFuZ2VSZXNwb25zZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCx5Q0FBeUMsZUFBZTtBQUN4RCw2REFBNkQseUJBQXlCO0FBQ3RGO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9QYWdlQmxvYlJhbmdlUmVzcG9uc2UuanM/YTJhOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8qKlxuICogRnVuY3Rpb24gdGhhdCBjb252ZXJ0cyBQYWdlUmFuZ2UgYW5kIENsZWFyUmFuZ2UgdG8gYSBjb21tb24gUmFuZ2Ugb2JqZWN0LlxuICogUGFnZVJhbmdlIGFuZCBDbGVhclJhbmdlIGhhdmUgc3RhcnQgYW5kIGVuZCB3aGlsZSBSYW5nZSBvZmZzZXQgYW5kIGNvdW50XG4gKiB0aGlzIGZ1bmN0aW9uIG5vcm1hbGl6ZXMgdG8gUmFuZ2UuXG4gKiBAcGFyYW0gcmVzcG9uc2UgLSBNb2RlbCBQYWdlQmxvYiBSYW5nZSByZXNwb25zZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmFuZ2VSZXNwb25zZUZyb21Nb2RlbChyZXNwb25zZSkge1xuICAgIGNvbnN0IHBhZ2VSYW5nZSA9IChyZXNwb25zZS5fcmVzcG9uc2UucGFyc2VkQm9keS5wYWdlUmFuZ2UgfHwgW10pLm1hcCgoeCkgPT4gKHtcbiAgICAgICAgb2Zmc2V0OiB4LnN0YXJ0LFxuICAgICAgICBjb3VudDogeC5lbmQgLSB4LnN0YXJ0LFxuICAgIH0pKTtcbiAgICBjb25zdCBjbGVhclJhbmdlID0gKHJlc3BvbnNlLl9yZXNwb25zZS5wYXJzZWRCb2R5LmNsZWFyUmFuZ2UgfHwgW10pLm1hcCgoeCkgPT4gKHtcbiAgICAgICAgb2Zmc2V0OiB4LnN0YXJ0LFxuICAgICAgICBjb3VudDogeC5lbmQgLSB4LnN0YXJ0LFxuICAgIH0pKTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZSksIHsgcGFnZVJhbmdlLFxuICAgICAgICBjbGVhclJhbmdlLCBfcmVzcG9uc2U6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UuX3Jlc3BvbnNlKSwgeyBwYXJzZWRCb2R5OiB7XG4gICAgICAgICAgICAgICAgcGFnZVJhbmdlLFxuICAgICAgICAgICAgICAgIGNsZWFyUmFuZ2UsXG4gICAgICAgICAgICB9IH0pIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGFnZUJsb2JSYW5nZVJlc3BvbnNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Pipeline: () => (/* binding */ Pipeline),\n/* harmony export */   StorageOAuthScopes: () => (/* reexport safe */ _utils_constants__WEBPACK_IMPORTED_MODULE_5__.StorageOAuthScopes),\n/* harmony export */   getCoreClientOptions: () => (/* binding */ getCoreClientOptions),\n/* harmony export */   getCredentialFromPipeline: () => (/* binding */ getCredentialFromPipeline),\n/* harmony export */   isPipelineLike: () => (/* binding */ isPipelineLike),\n/* harmony export */   newPipeline: () => (/* binding */ newPipeline)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _azure_core_http_compat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-http-compat */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/index.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _azure_core_xml__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/core-xml */ \"(rsc)/./node_modules/@azure/core-xml/dist/esm/index.js\");\n/* harmony import */ var _azure_core_auth__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/core-auth */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/index.js\");\n/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./log */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js\");\n/* harmony import */ var _StorageRetryPolicyFactory__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./StorageRetryPolicyFactory */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_cache__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/cache */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js\");\n/* harmony import */ var _policies_StorageBrowserPolicyV2__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./policies/StorageBrowserPolicyV2 */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js\");\n/* harmony import */ var _policies_StorageRetryPolicyV2__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./policies/StorageRetryPolicyV2 */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js\");\n/* harmony import */ var _policies_StorageSharedKeyCredentialPolicyV2__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./policies/StorageSharedKeyCredentialPolicyV2 */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.js\");\n/* harmony import */ var _StorageBrowserPolicyFactory__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./StorageBrowserPolicyFactory */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Export following interfaces and types for customers who want to implement their\n// own RequestPolicy or HTTPClient\n\n/**\n * A helper to decide if a given argument satisfies the Pipeline contract\n * @param pipeline - An argument that may be a Pipeline\n * @returns true when the argument satisfies the Pipeline contract\n */\nfunction isPipelineLike(pipeline) {\n    if (!pipeline || typeof pipeline !== \"object\") {\n        return false;\n    }\n    const castPipeline = pipeline;\n    return (Array.isArray(castPipeline.factories) &&\n        typeof castPipeline.options === \"object\" &&\n        typeof castPipeline.toServiceClientOptions === \"function\");\n}\n/**\n * A Pipeline class containing HTTP request policies.\n * You can create a default Pipeline by calling {@link newPipeline}.\n * Or you can create a Pipeline with your own policies by the constructor of Pipeline.\n *\n * Refer to {@link newPipeline} and provided policies before implementing your\n * customized Pipeline.\n */\nclass Pipeline {\n    /**\n     * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.\n     *\n     * @param factories -\n     * @param options -\n     */\n    constructor(factories, options = {}) {\n        this.factories = factories;\n        this.options = options;\n    }\n    /**\n     * Transfer Pipeline object to ServiceClientOptions object which is required by\n     * ServiceClient constructor.\n     *\n     * @returns The ServiceClientOptions object from this Pipeline.\n     */\n    toServiceClientOptions() {\n        return {\n            httpClient: this.options.httpClient,\n            requestPolicyFactories: this.factories,\n        };\n    }\n}\n/**\n * Creates a new Pipeline object with Credential provided.\n *\n * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n * @param pipelineOptions - Optional. Options.\n * @returns A new Pipeline object.\n */\nfunction newPipeline(credential, pipelineOptions = {}) {\n    if (!credential) {\n        credential = new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential();\n    }\n    const pipeline = new Pipeline([], pipelineOptions);\n    pipeline._credential = credential;\n    return pipeline;\n}\nfunction processDownlevelPipeline(pipeline) {\n    const knownFactoryFunctions = [\n        isAnonymousCredential,\n        isStorageSharedKeyCredential,\n        isCoreHttpBearerTokenFactory,\n        isStorageBrowserPolicyFactory,\n        isStorageRetryPolicyFactory,\n        isStorageTelemetryPolicyFactory,\n        isCoreHttpPolicyFactory,\n    ];\n    if (pipeline.factories.length) {\n        const novelFactories = pipeline.factories.filter((factory) => {\n            return !knownFactoryFunctions.some((knownFactory) => knownFactory(factory));\n        });\n        if (novelFactories.length) {\n            const hasInjector = novelFactories.some((factory) => isInjectorPolicyFactory(factory));\n            // if there are any left over, wrap in a requestPolicyFactoryPolicy\n            return {\n                wrappedPolicies: (0,_azure_core_http_compat__WEBPACK_IMPORTED_MODULE_0__.createRequestPolicyFactoryPolicy)(novelFactories),\n                afterRetry: hasInjector,\n            };\n        }\n    }\n    return undefined;\n}\nfunction getCoreClientOptions(pipeline) {\n    var _a;\n    const _b = pipeline.options, { httpClient: v1Client } = _b, restOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__rest)(_b, [\"httpClient\"]);\n    let httpClient = pipeline._coreHttpClient;\n    if (!httpClient) {\n        httpClient = v1Client ? (0,_azure_core_http_compat__WEBPACK_IMPORTED_MODULE_0__.convertHttpClient)(v1Client) : (0,_utils_cache__WEBPACK_IMPORTED_MODULE_8__.getCachedDefaultHttpClient)();\n        pipeline._coreHttpClient = httpClient;\n    }\n    let corePipeline = pipeline._corePipeline;\n    if (!corePipeline) {\n        const packageDetails = `azsdk-js-azure-storage-blob/${_utils_constants__WEBPACK_IMPORTED_MODULE_5__.SDK_VERSION}`;\n        const userAgentPrefix = restOptions.userAgentOptions && restOptions.userAgentOptions.userAgentPrefix\n            ? `${restOptions.userAgentOptions.userAgentPrefix} ${packageDetails}`\n            : `${packageDetails}`;\n        corePipeline = (0,_azure_core_client__WEBPACK_IMPORTED_MODULE_2__.createClientPipeline)(Object.assign(Object.assign({}, restOptions), { loggingOptions: {\n                additionalAllowedHeaderNames: _utils_constants__WEBPACK_IMPORTED_MODULE_5__.StorageBlobLoggingAllowedHeaderNames,\n                additionalAllowedQueryParameters: _utils_constants__WEBPACK_IMPORTED_MODULE_5__.StorageBlobLoggingAllowedQueryParameters,\n                logger: _log__WEBPACK_IMPORTED_MODULE_9__.logger.info,\n            }, userAgentOptions: {\n                userAgentPrefix,\n            }, serializationOptions: {\n                stringifyXML: _azure_core_xml__WEBPACK_IMPORTED_MODULE_3__.stringifyXML,\n                serializerOptions: {\n                    xml: {\n                        // Use customized XML char key of \"#\" so we can deserialize metadata\n                        // with \"_\" key\n                        xmlCharKey: \"#\",\n                    },\n                },\n            }, deserializationOptions: {\n                parseXML: _azure_core_xml__WEBPACK_IMPORTED_MODULE_3__.parseXML,\n                serializerOptions: {\n                    xml: {\n                        // Use customized XML char key of \"#\" so we can deserialize metadata\n                        // with \"_\" key\n                        xmlCharKey: \"#\",\n                    },\n                },\n            } }));\n        corePipeline.removePolicy({ phase: \"Retry\" });\n        corePipeline.removePolicy({ name: _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.decompressResponsePolicyName });\n        corePipeline.addPolicy((0,_policies_StorageRetryPolicyV2__WEBPACK_IMPORTED_MODULE_10__.storageRetryPolicy)(restOptions.retryOptions), { phase: \"Retry\" });\n        corePipeline.addPolicy((0,_policies_StorageBrowserPolicyV2__WEBPACK_IMPORTED_MODULE_11__.storageBrowserPolicy)());\n        const downlevelResults = processDownlevelPipeline(pipeline);\n        if (downlevelResults) {\n            corePipeline.addPolicy(downlevelResults.wrappedPolicies, downlevelResults.afterRetry ? { afterPhase: \"Retry\" } : undefined);\n        }\n        const credential = getCredentialFromPipeline(pipeline);\n        if ((0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_4__.isTokenCredential)(credential)) {\n            corePipeline.addPolicy((0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.bearerTokenAuthenticationPolicy)({\n                credential,\n                scopes: (_a = restOptions.audience) !== null && _a !== void 0 ? _a : _utils_constants__WEBPACK_IMPORTED_MODULE_5__.StorageOAuthScopes,\n                challengeCallbacks: { authorizeRequestOnChallenge: _azure_core_client__WEBPACK_IMPORTED_MODULE_2__.authorizeRequestOnTenantChallenge },\n            }), { phase: \"Sign\" });\n        }\n        else if (credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_12__.StorageSharedKeyCredential) {\n            corePipeline.addPolicy((0,_policies_StorageSharedKeyCredentialPolicyV2__WEBPACK_IMPORTED_MODULE_13__.storageSharedKeyCredentialPolicy)({\n                accountName: credential.accountName,\n                accountKey: credential.accountKey,\n            }), { phase: \"Sign\" });\n        }\n        pipeline._corePipeline = corePipeline;\n    }\n    return Object.assign(Object.assign({}, restOptions), { allowInsecureConnection: true, httpClient, pipeline: corePipeline });\n}\nfunction getCredentialFromPipeline(pipeline) {\n    // see if we squirreled one away on the type itself\n    if (pipeline._credential) {\n        return pipeline._credential;\n    }\n    // if it came from another package, loop over the factories and look for one like before\n    let credential = new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential();\n    for (const factory of pipeline.factories) {\n        if ((0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_4__.isTokenCredential)(factory.credential)) {\n            // Only works if the factory has been attached a \"credential\" property.\n            // We do that in newPipeline() when using TokenCredential.\n            credential = factory.credential;\n        }\n        else if (isStorageSharedKeyCredential(factory)) {\n            return factory;\n        }\n    }\n    return credential;\n}\nfunction isStorageSharedKeyCredential(factory) {\n    if (factory instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_12__.StorageSharedKeyCredential) {\n        return true;\n    }\n    return factory.constructor.name === \"StorageSharedKeyCredential\";\n}\nfunction isAnonymousCredential(factory) {\n    if (factory instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential) {\n        return true;\n    }\n    return factory.constructor.name === \"AnonymousCredential\";\n}\nfunction isCoreHttpBearerTokenFactory(factory) {\n    return (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_4__.isTokenCredential)(factory.credential);\n}\nfunction isStorageBrowserPolicyFactory(factory) {\n    if (factory instanceof _StorageBrowserPolicyFactory__WEBPACK_IMPORTED_MODULE_14__.StorageBrowserPolicyFactory) {\n        return true;\n    }\n    return factory.constructor.name === \"StorageBrowserPolicyFactory\";\n}\nfunction isStorageRetryPolicyFactory(factory) {\n    if (factory instanceof _StorageRetryPolicyFactory__WEBPACK_IMPORTED_MODULE_15__.StorageRetryPolicyFactory) {\n        return true;\n    }\n    return factory.constructor.name === \"StorageRetryPolicyFactory\";\n}\nfunction isStorageTelemetryPolicyFactory(factory) {\n    return factory.constructor.name === \"TelemetryPolicyFactory\";\n}\nfunction isInjectorPolicyFactory(factory) {\n    return factory.constructor.name === \"InjectorPolicyFactory\";\n}\nfunction isCoreHttpPolicyFactory(factory) {\n    const knownPolicies = [\n        \"GenerateClientRequestIdPolicy\",\n        \"TracingPolicy\",\n        \"LogPolicy\",\n        \"ProxyPolicy\",\n        \"DisableResponseDecompressionPolicy\",\n        \"KeepAlivePolicy\",\n        \"DeserializationPolicy\",\n    ];\n    const mockHttpClient = {\n        sendRequest: async (request) => {\n            return {\n                request,\n                headers: request.headers.clone(),\n                status: 500,\n            };\n        },\n    };\n    const mockRequestPolicyOptions = {\n        log(_logLevel, _message) {\n            /* do nothing */\n        },\n        shouldLog(_logLevel) {\n            return false;\n        },\n    };\n    const policyInstance = factory.create(mockHttpClient, mockRequestPolicyOptions);\n    const policyName = policyInstance.constructor.name;\n    // bundlers sometimes add a custom suffix to the class name to make it unique\n    return knownPolicies.some((knownPolicyName) => {\n        return policyName.startsWith(knownPolicyName);\n    });\n}\n//# sourceMappingURL=Pipeline.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rangeToString: () => (/* binding */ rangeToString)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Generate a range string. For example:\n *\n * \"bytes=255-\" or \"bytes=0-511\"\n *\n * @param iRange -\n */\nfunction rangeToString(iRange) {\n    if (iRange.offset < 0) {\n        throw new RangeError(`Range.offset cannot be smaller than 0.`);\n    }\n    if (iRange.count && iRange.count <= 0) {\n        throw new RangeError(`Range.count must be larger than 0. Leave it undefined if you want a range from offset to the end.`);\n    }\n    return iRange.count\n        ? `bytes=${iRange.offset}-${iRange.offset + iRange.count - 1}`\n        : `bytes=${iRange.offset}-`;\n}\n//# sourceMappingURL=Range.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL1JhbmdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGNBQWMsR0FBRyxpQ0FBaUM7QUFDckUsbUJBQW1CLGNBQWM7QUFDakM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9SYW5nZS5qcz8zYzZhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBHZW5lcmF0ZSBhIHJhbmdlIHN0cmluZy4gRm9yIGV4YW1wbGU6XG4gKlxuICogXCJieXRlcz0yNTUtXCIgb3IgXCJieXRlcz0wLTUxMVwiXG4gKlxuICogQHBhcmFtIGlSYW5nZSAtXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5nZVRvU3RyaW5nKGlSYW5nZSkge1xuICAgIGlmIChpUmFuZ2Uub2Zmc2V0IDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgUmFuZ2Uub2Zmc2V0IGNhbm5vdCBiZSBzbWFsbGVyIHRoYW4gMC5gKTtcbiAgICB9XG4gICAgaWYgKGlSYW5nZS5jb3VudCAmJiBpUmFuZ2UuY291bnQgPD0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgUmFuZ2UuY291bnQgbXVzdCBiZSBsYXJnZXIgdGhhbiAwLiBMZWF2ZSBpdCB1bmRlZmluZWQgaWYgeW91IHdhbnQgYSByYW5nZSBmcm9tIG9mZnNldCB0byB0aGUgZW5kLmApO1xuICAgIH1cbiAgICByZXR1cm4gaVJhbmdlLmNvdW50XG4gICAgICAgID8gYGJ5dGVzPSR7aVJhbmdlLm9mZnNldH0tJHtpUmFuZ2Uub2Zmc2V0ICsgaVJhbmdlLmNvdW50IC0gMX1gXG4gICAgICAgIDogYGJ5dGVzPSR7aVJhbmdlLm9mZnNldH0tYDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJhbmdlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageBrowserPolicy: () => (/* reexport safe */ _policies_StorageBrowserPolicy__WEBPACK_IMPORTED_MODULE_0__.StorageBrowserPolicy),\n/* harmony export */   StorageBrowserPolicyFactory: () => (/* binding */ StorageBrowserPolicyFactory)\n/* harmony export */ });\n/* harmony import */ var _policies_StorageBrowserPolicy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./policies/StorageBrowserPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * StorageBrowserPolicyFactory is a factory class helping generating StorageBrowserPolicy objects.\n */\nclass StorageBrowserPolicyFactory {\n    /**\n     * Creates a StorageBrowserPolicyFactory object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new _policies_StorageBrowserPolicy__WEBPACK_IMPORTED_MODULE_0__.StorageBrowserPolicy(nextPolicy, options);\n    }\n}\n//# sourceMappingURL=StorageBrowserPolicyFactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL1N0b3JhZ2VCcm93c2VyUG9saWN5RmFjdG9yeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ3VFO0FBQ3ZDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZ0ZBQW9CO0FBQ3ZDO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9TdG9yYWdlQnJvd3NlclBvbGljeUZhY3RvcnkuanM/NDlmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IFN0b3JhZ2VCcm93c2VyUG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvU3RvcmFnZUJyb3dzZXJQb2xpY3lcIjtcbmV4cG9ydCB7IFN0b3JhZ2VCcm93c2VyUG9saWN5IH07XG4vKipcbiAqIFN0b3JhZ2VCcm93c2VyUG9saWN5RmFjdG9yeSBpcyBhIGZhY3RvcnkgY2xhc3MgaGVscGluZyBnZW5lcmF0aW5nIFN0b3JhZ2VCcm93c2VyUG9saWN5IG9iamVjdHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdG9yYWdlQnJvd3NlclBvbGljeUZhY3Rvcnkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBTdG9yYWdlQnJvd3NlclBvbGljeUZhY3Rvcnkgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG5leHRQb2xpY3kgLVxuICAgICAqIEBwYXJhbSBvcHRpb25zIC1cbiAgICAgKi9cbiAgICBjcmVhdGUobmV4dFBvbGljeSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IFN0b3JhZ2VCcm93c2VyUG9saWN5KG5leHRQb2xpY3ksIG9wdGlvbnMpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0b3JhZ2VCcm93c2VyUG9saWN5RmFjdG9yeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageClient: () => (/* binding */ StorageClient)\n/* harmony export */ });\n/* harmony import */ var _StorageContextClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StorageContextClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Pipeline */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n */\nclass StorageClient {\n    /**\n     * Creates an instance of StorageClient.\n     * @param url - url to resource\n     * @param pipeline - request policy pipeline.\n     */\n    constructor(url, pipeline) {\n        // URL should be encoded and only once, protocol layer shouldn't encode URL again\n        this.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.escapeURLPath)(url);\n        this.accountName = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.getAccountNameFromUrl)(url);\n        this.pipeline = pipeline;\n        this.storageClientContext = new _StorageContextClient__WEBPACK_IMPORTED_MODULE_1__.StorageContextClient(this.url, (0,_Pipeline__WEBPACK_IMPORTED_MODULE_2__.getCoreClientOptions)(pipeline));\n        this.isHttps = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.iEqual)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.getURLScheme)(this.url) || \"\", \"https\");\n        this.credential = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_2__.getCredentialFromPipeline)(pipeline);\n        // Override protocol layer's default content-type\n        const storageClientContext = this.storageClientContext;\n        storageClientContext.requestContentType = undefined;\n    }\n}\n//# sourceMappingURL=StorageClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL1N0b3JhZ2VDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDOEQ7QUFDZTtBQUNxQjtBQUNsRztBQUNBLHFEQUFxRCx3QkFBd0IsR0FBRztBQUNoRjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixrRUFBYTtBQUNoQywyQkFBMkIsMEVBQXFCO0FBQ2hEO0FBQ0Esd0NBQXdDLHVFQUFvQixXQUFXLCtEQUFvQjtBQUMzRix1QkFBdUIsMkRBQU0sQ0FBQyxpRUFBWTtBQUMxQywwQkFBMEIsb0VBQXlCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9TdG9yYWdlQ2xpZW50LmpzP2ViZTYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBTdG9yYWdlQ29udGV4dENsaWVudCB9IGZyb20gXCIuL1N0b3JhZ2VDb250ZXh0Q2xpZW50XCI7XG5pbXBvcnQgeyBnZXRDb3JlQ2xpZW50T3B0aW9ucywgZ2V0Q3JlZGVudGlhbEZyb21QaXBlbGluZSB9IGZyb20gXCIuL1BpcGVsaW5lXCI7XG5pbXBvcnQgeyBlc2NhcGVVUkxQYXRoLCBnZXRVUkxTY2hlbWUsIGlFcXVhbCwgZ2V0QWNjb3VudE5hbWVGcm9tVXJsIH0gZnJvbSBcIi4vdXRpbHMvdXRpbHMuY29tbW9uXCI7XG4vKipcbiAqIEEgU3RvcmFnZUNsaWVudCByZXByZXNlbnRzIGEgYmFzZWQgVVJMIGNsYXNzIGZvciB7QGxpbmsgQmxvYlNlcnZpY2VDbGllbnR9LCB7QGxpbmsgQ29udGFpbmVyQ2xpZW50fVxuICogYW5kIGV0Yy5cbiAqL1xuZXhwb3J0IGNsYXNzIFN0b3JhZ2VDbGllbnQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgU3RvcmFnZUNsaWVudC5cbiAgICAgKiBAcGFyYW0gdXJsIC0gdXJsIHRvIHJlc291cmNlXG4gICAgICogQHBhcmFtIHBpcGVsaW5lIC0gcmVxdWVzdCBwb2xpY3kgcGlwZWxpbmUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodXJsLCBwaXBlbGluZSkge1xuICAgICAgICAvLyBVUkwgc2hvdWxkIGJlIGVuY29kZWQgYW5kIG9ubHkgb25jZSwgcHJvdG9jb2wgbGF5ZXIgc2hvdWxkbid0IGVuY29kZSBVUkwgYWdhaW5cbiAgICAgICAgdGhpcy51cmwgPSBlc2NhcGVVUkxQYXRoKHVybCk7XG4gICAgICAgIHRoaXMuYWNjb3VudE5hbWUgPSBnZXRBY2NvdW50TmFtZUZyb21VcmwodXJsKTtcbiAgICAgICAgdGhpcy5waXBlbGluZSA9IHBpcGVsaW5lO1xuICAgICAgICB0aGlzLnN0b3JhZ2VDbGllbnRDb250ZXh0ID0gbmV3IFN0b3JhZ2VDb250ZXh0Q2xpZW50KHRoaXMudXJsLCBnZXRDb3JlQ2xpZW50T3B0aW9ucyhwaXBlbGluZSkpO1xuICAgICAgICB0aGlzLmlzSHR0cHMgPSBpRXF1YWwoZ2V0VVJMU2NoZW1lKHRoaXMudXJsKSB8fCBcIlwiLCBcImh0dHBzXCIpO1xuICAgICAgICB0aGlzLmNyZWRlbnRpYWwgPSBnZXRDcmVkZW50aWFsRnJvbVBpcGVsaW5lKHBpcGVsaW5lKTtcbiAgICAgICAgLy8gT3ZlcnJpZGUgcHJvdG9jb2wgbGF5ZXIncyBkZWZhdWx0IGNvbnRlbnQtdHlwZVxuICAgICAgICBjb25zdCBzdG9yYWdlQ2xpZW50Q29udGV4dCA9IHRoaXMuc3RvcmFnZUNsaWVudENvbnRleHQ7XG4gICAgICAgIHN0b3JhZ2VDbGllbnRDb250ZXh0LnJlcXVlc3RDb250ZW50VHlwZSA9IHVuZGVmaW5lZDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdG9yYWdlQ2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageContextClient: () => (/* binding */ StorageContextClient)\n/* harmony export */ });\n/* harmony import */ var _generated_src__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generated/src */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * @internal\n */\nclass StorageContextClient extends _generated_src__WEBPACK_IMPORTED_MODULE_0__.StorageClient {\n    async sendOperationRequest(operationArguments, operationSpec) {\n        const operationSpecToSend = Object.assign({}, operationSpec);\n        if (operationSpecToSend.path === \"/{containerName}\" ||\n            operationSpecToSend.path === \"/{containerName}/{blob}\") {\n            operationSpecToSend.path = \"\";\n        }\n        return super.sendOperationRequest(operationArguments, operationSpecToSend);\n    }\n}\n//# sourceMappingURL=StorageContextClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL1N0b3JhZ2VDb250ZXh0Q2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDTyxtQ0FBbUMseURBQWE7QUFDdkQ7QUFDQSxvREFBb0Q7QUFDcEQsNENBQTRDLGNBQWM7QUFDMUQsNENBQTRDLGNBQWMsRUFBRSxLQUFLO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9TdG9yYWdlQ29udGV4dENsaWVudC5qcz9lY2M3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgU3RvcmFnZUNsaWVudCB9IGZyb20gXCIuL2dlbmVyYXRlZC9zcmNcIjtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBTdG9yYWdlQ29udGV4dENsaWVudCBleHRlbmRzIFN0b3JhZ2VDbGllbnQge1xuICAgIGFzeW5jIHNlbmRPcGVyYXRpb25SZXF1ZXN0KG9wZXJhdGlvbkFyZ3VtZW50cywgb3BlcmF0aW9uU3BlYykge1xuICAgICAgICBjb25zdCBvcGVyYXRpb25TcGVjVG9TZW5kID0gT2JqZWN0LmFzc2lnbih7fSwgb3BlcmF0aW9uU3BlYyk7XG4gICAgICAgIGlmIChvcGVyYXRpb25TcGVjVG9TZW5kLnBhdGggPT09IFwiL3tjb250YWluZXJOYW1lfVwiIHx8XG4gICAgICAgICAgICBvcGVyYXRpb25TcGVjVG9TZW5kLnBhdGggPT09IFwiL3tjb250YWluZXJOYW1lfS97YmxvYn1cIikge1xuICAgICAgICAgICAgb3BlcmF0aW9uU3BlY1RvU2VuZC5wYXRoID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuc2VuZE9wZXJhdGlvblJlcXVlc3Qob3BlcmF0aW9uQXJndW1lbnRzLCBvcGVyYXRpb25TcGVjVG9TZW5kKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdG9yYWdlQ29udGV4dENsaWVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageRetryPolicy: () => (/* reexport safe */ _policies_StorageRetryPolicy__WEBPACK_IMPORTED_MODULE_0__.StorageRetryPolicy),\n/* harmony export */   StorageRetryPolicyFactory: () => (/* binding */ StorageRetryPolicyFactory),\n/* harmony export */   StorageRetryPolicyType: () => (/* reexport safe */ _policies_StorageRetryPolicy__WEBPACK_IMPORTED_MODULE_0__.StorageRetryPolicyType)\n/* harmony export */ });\n/* harmony import */ var _policies_StorageRetryPolicy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./policies/StorageRetryPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * StorageRetryPolicyFactory is a factory class helping generating {@link StorageRetryPolicy} objects.\n */\nclass StorageRetryPolicyFactory {\n    /**\n     * Creates an instance of StorageRetryPolicyFactory.\n     * @param retryOptions -\n     */\n    constructor(retryOptions) {\n        this.retryOptions = retryOptions;\n    }\n    /**\n     * Creates a StorageRetryPolicy object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new _policies_StorageRetryPolicy__WEBPACK_IMPORTED_MODULE_0__.StorageRetryPolicy(nextPolicy, options, this.retryOptions);\n    }\n}\n//# sourceMappingURL=StorageRetryPolicyFactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL1N0b3JhZ2VSZXRyeVBvbGljeUZhY3RvcnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDMkY7QUFDckM7QUFDdEQ7QUFDQSxvRUFBb0UsMEJBQTBCO0FBQzlGO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDRFQUFrQjtBQUNyQztBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvU3RvcmFnZVJldHJ5UG9saWN5RmFjdG9yeS5qcz80NjdkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgU3RvcmFnZVJldHJ5UG9saWN5LCBTdG9yYWdlUmV0cnlQb2xpY3lUeXBlIH0gZnJvbSBcIi4vcG9saWNpZXMvU3RvcmFnZVJldHJ5UG9saWN5XCI7XG5leHBvcnQgeyBTdG9yYWdlUmV0cnlQb2xpY3lUeXBlLCBTdG9yYWdlUmV0cnlQb2xpY3kgfTtcbi8qKlxuICogU3RvcmFnZVJldHJ5UG9saWN5RmFjdG9yeSBpcyBhIGZhY3RvcnkgY2xhc3MgaGVscGluZyBnZW5lcmF0aW5nIHtAbGluayBTdG9yYWdlUmV0cnlQb2xpY3l9IG9iamVjdHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdG9yYWdlUmV0cnlQb2xpY3lGYWN0b3J5IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFN0b3JhZ2VSZXRyeVBvbGljeUZhY3RvcnkuXG4gICAgICogQHBhcmFtIHJldHJ5T3B0aW9ucyAtXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocmV0cnlPcHRpb25zKSB7XG4gICAgICAgIHRoaXMucmV0cnlPcHRpb25zID0gcmV0cnlPcHRpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgU3RvcmFnZVJldHJ5UG9saWN5IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuZXh0UG9saWN5IC1cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtXG4gICAgICovXG4gICAgY3JlYXRlKG5leHRQb2xpY3ksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdG9yYWdlUmV0cnlQb2xpY3kobmV4dFBvbGljeSwgb3B0aW9ucywgdGhpcy5yZXRyeU9wdGlvbnMpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0b3JhZ2VSZXRyeVBvbGljeUZhY3RvcnkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnonymousCredential: () => (/* binding */ AnonymousCredential)\n/* harmony export */ });\n/* harmony import */ var _policies_AnonymousCredentialPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../policies/AnonymousCredentialPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js\");\n/* harmony import */ var _Credential__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Credential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * AnonymousCredential provides a credentialPolicyCreator member used to create\n * AnonymousCredentialPolicy objects. AnonymousCredentialPolicy is used with\n * HTTP(S) requests that read public resources or for use with Shared Access\n * Signatures (SAS).\n */\nclass AnonymousCredential extends _Credential__WEBPACK_IMPORTED_MODULE_0__.Credential {\n    /**\n     * Creates an {@link AnonymousCredentialPolicy} object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new _policies_AnonymousCredentialPolicy__WEBPACK_IMPORTED_MODULE_1__.AnonymousCredentialPolicy(nextPolicy, options);\n    }\n}\n//# sourceMappingURL=AnonymousCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2NyZWRlbnRpYWxzL0Fub255bW91c0NyZWRlbnRpYWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNrRjtBQUN4QztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxrQ0FBa0MsbURBQVU7QUFDbkQ7QUFDQSxtQkFBbUIsaUNBQWlDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsMEZBQXlCO0FBQzVDO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9jcmVkZW50aWFscy9Bbm9ueW1vdXNDcmVkZW50aWFsLmpzPzBkMDAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBBbm9ueW1vdXNDcmVkZW50aWFsUG9saWN5IH0gZnJvbSBcIi4uL3BvbGljaWVzL0Fub255bW91c0NyZWRlbnRpYWxQb2xpY3lcIjtcbmltcG9ydCB7IENyZWRlbnRpYWwgfSBmcm9tIFwiLi9DcmVkZW50aWFsXCI7XG4vKipcbiAqIEFub255bW91c0NyZWRlbnRpYWwgcHJvdmlkZXMgYSBjcmVkZW50aWFsUG9saWN5Q3JlYXRvciBtZW1iZXIgdXNlZCB0byBjcmVhdGVcbiAqIEFub255bW91c0NyZWRlbnRpYWxQb2xpY3kgb2JqZWN0cy4gQW5vbnltb3VzQ3JlZGVudGlhbFBvbGljeSBpcyB1c2VkIHdpdGhcbiAqIEhUVFAoUykgcmVxdWVzdHMgdGhhdCByZWFkIHB1YmxpYyByZXNvdXJjZXMgb3IgZm9yIHVzZSB3aXRoIFNoYXJlZCBBY2Nlc3NcbiAqIFNpZ25hdHVyZXMgKFNBUykuXG4gKi9cbmV4cG9ydCBjbGFzcyBBbm9ueW1vdXNDcmVkZW50aWFsIGV4dGVuZHMgQ3JlZGVudGlhbCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiB7QGxpbmsgQW5vbnltb3VzQ3JlZGVudGlhbFBvbGljeX0gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG5leHRQb2xpY3kgLVxuICAgICAqIEBwYXJhbSBvcHRpb25zIC1cbiAgICAgKi9cbiAgICBjcmVhdGUobmV4dFBvbGljeSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEFub255bW91c0NyZWRlbnRpYWxQb2xpY3kobmV4dFBvbGljeSwgb3B0aW9ucyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QW5vbnltb3VzQ3JlZGVudGlhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Credential: () => (/* binding */ Credential)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Credential is an abstract class for Azure Storage HTTP requests signing. This\n * class will host an credentialPolicyCreator factory which generates CredentialPolicy.\n */\nclass Credential {\n    /**\n     * Creates a RequestPolicy object.\n     *\n     * @param _nextPolicy -\n     * @param _options -\n     */\n    create(_nextPolicy, _options) {\n        throw new Error(\"Method should be implemented in children classes.\");\n    }\n}\n//# sourceMappingURL=Credential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2NyZWRlbnRpYWxzL0NyZWRlbnRpYWwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9jcmVkZW50aWFscy9DcmVkZW50aWFsLmpzPzYxYTYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIENyZWRlbnRpYWwgaXMgYW4gYWJzdHJhY3QgY2xhc3MgZm9yIEF6dXJlIFN0b3JhZ2UgSFRUUCByZXF1ZXN0cyBzaWduaW5nLiBUaGlzXG4gKiBjbGFzcyB3aWxsIGhvc3QgYW4gY3JlZGVudGlhbFBvbGljeUNyZWF0b3IgZmFjdG9yeSB3aGljaCBnZW5lcmF0ZXMgQ3JlZGVudGlhbFBvbGljeS5cbiAqL1xuZXhwb3J0IGNsYXNzIENyZWRlbnRpYWwge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBSZXF1ZXN0UG9saWN5IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBfbmV4dFBvbGljeSAtXG4gICAgICogQHBhcmFtIF9vcHRpb25zIC1cbiAgICAgKi9cbiAgICBjcmVhdGUoX25leHRQb2xpY3ksIF9vcHRpb25zKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBzaG91bGQgYmUgaW1wbGVtZW50ZWQgaW4gY2hpbGRyZW4gY2xhc3Nlcy5cIik7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q3JlZGVudGlhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageSharedKeyCredential: () => (/* binding */ StorageSharedKeyCredential)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _policies_StorageSharedKeyCredentialPolicy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../policies/StorageSharedKeyCredentialPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicy.js\");\n/* harmony import */ var _Credential__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Credential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * StorageSharedKeyCredential for account key authorization of Azure Storage service.\n */\nclass StorageSharedKeyCredential extends _Credential__WEBPACK_IMPORTED_MODULE_1__.Credential {\n    /**\n     * Creates an instance of StorageSharedKeyCredential.\n     * @param accountName -\n     * @param accountKey -\n     */\n    constructor(accountName, accountKey) {\n        super();\n        this.accountName = accountName;\n        this.accountKey = Buffer.from(accountKey, \"base64\");\n    }\n    /**\n     * Creates a StorageSharedKeyCredentialPolicy object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new _policies_StorageSharedKeyCredentialPolicy__WEBPACK_IMPORTED_MODULE_2__.StorageSharedKeyCredentialPolicy(nextPolicy, options, this);\n    }\n    /**\n     * Generates a hash signature for an HTTP request or for a SAS.\n     *\n     * @param stringToSign -\n     */\n    computeHMACSHA256(stringToSign) {\n        return (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac)(\"sha256\", this.accountKey).update(stringToSign, \"utf8\").digest(\"base64\");\n    }\n}\n//# sourceMappingURL=StorageSharedKeyCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2NyZWRlbnRpYWxzL1N0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNvQztBQUM0RDtBQUN0RDtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08seUNBQXlDLG1EQUFVO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsd0dBQWdDO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxrREFBVTtBQUN6QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvY3JlZGVudGlhbHMvU3RvcmFnZVNoYXJlZEtleUNyZWRlbnRpYWwuanM/OTg3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZUhtYWMgfSBmcm9tIFwiY3J5cHRvXCI7XG5pbXBvcnQgeyBTdG9yYWdlU2hhcmVkS2V5Q3JlZGVudGlhbFBvbGljeSB9IGZyb20gXCIuLi9wb2xpY2llcy9TdG9yYWdlU2hhcmVkS2V5Q3JlZGVudGlhbFBvbGljeVwiO1xuaW1wb3J0IHsgQ3JlZGVudGlhbCB9IGZyb20gXCIuL0NyZWRlbnRpYWxcIjtcbi8qKlxuICogT05MWSBBVkFJTEFCTEUgSU4gTk9ERS5KUyBSVU5USU1FLlxuICpcbiAqIFN0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsIGZvciBhY2NvdW50IGtleSBhdXRob3JpemF0aW9uIG9mIEF6dXJlIFN0b3JhZ2Ugc2VydmljZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFN0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsIGV4dGVuZHMgQ3JlZGVudGlhbCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBTdG9yYWdlU2hhcmVkS2V5Q3JlZGVudGlhbC5cbiAgICAgKiBAcGFyYW0gYWNjb3VudE5hbWUgLVxuICAgICAqIEBwYXJhbSBhY2NvdW50S2V5IC1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhY2NvdW50TmFtZSwgYWNjb3VudEtleSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmFjY291bnROYW1lID0gYWNjb3VudE5hbWU7XG4gICAgICAgIHRoaXMuYWNjb3VudEtleSA9IEJ1ZmZlci5mcm9tKGFjY291bnRLZXksIFwiYmFzZTY0XCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgU3RvcmFnZVNoYXJlZEtleUNyZWRlbnRpYWxQb2xpY3kgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG5leHRQb2xpY3kgLVxuICAgICAqIEBwYXJhbSBvcHRpb25zIC1cbiAgICAgKi9cbiAgICBjcmVhdGUobmV4dFBvbGljeSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IFN0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsUG9saWN5KG5leHRQb2xpY3ksIG9wdGlvbnMsIHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBoYXNoIHNpZ25hdHVyZSBmb3IgYW4gSFRUUCByZXF1ZXN0IG9yIGZvciBhIFNBUy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdHJpbmdUb1NpZ24gLVxuICAgICAqL1xuICAgIGNvbXB1dGVITUFDU0hBMjU2KHN0cmluZ1RvU2lnbikge1xuICAgICAgICByZXR1cm4gY3JlYXRlSG1hYyhcInNoYTI1NlwiLCB0aGlzLmFjY291bnRLZXkpLnVwZGF0ZShzdHJpbmdUb1NpZ24sIFwidXRmOFwiKS5kaWdlc3QoXCJiYXNlNjRcIik7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RvcmFnZVNoYXJlZEtleUNyZWRlbnRpYWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UserDelegationKeyCredential: () => (/* binding */ UserDelegationKeyCredential)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * UserDelegationKeyCredential is only used for generation of user delegation SAS.\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-user-delegation-sas\n */\nclass UserDelegationKeyCredential {\n    /**\n     * Creates an instance of UserDelegationKeyCredential.\n     * @param accountName -\n     * @param userDelegationKey -\n     */\n    constructor(accountName, userDelegationKey) {\n        this.accountName = accountName;\n        this.userDelegationKey = userDelegationKey;\n        this.key = Buffer.from(userDelegationKey.value, \"base64\");\n    }\n    /**\n     * Generates a hash signature for an HTTP request or for a SAS.\n     *\n     * @param stringToSign -\n     */\n    computeHMACSHA256(stringToSign) {\n        // console.log(`stringToSign: ${JSON.stringify(stringToSign)}`);\n        return (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac)(\"sha256\", this.key).update(stringToSign, \"utf8\").digest(\"base64\");\n    }\n}\n//# sourceMappingURL=UserDelegationKeyCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2NyZWRlbnRpYWxzL1VzZXJEZWxlZ2F0aW9uS2V5Q3JlZGVudGlhbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ29DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsNkJBQTZCO0FBQ3JFLGVBQWUsa0RBQVU7QUFDekI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2NyZWRlbnRpYWxzL1VzZXJEZWxlZ2F0aW9uS2V5Q3JlZGVudGlhbC5qcz8wN2Q3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlSG1hYyB9IGZyb20gXCJjcnlwdG9cIjtcbi8qKlxuICogT05MWSBBVkFJTEFCTEUgSU4gTk9ERS5KUyBSVU5USU1FLlxuICpcbiAqIFVzZXJEZWxlZ2F0aW9uS2V5Q3JlZGVudGlhbCBpcyBvbmx5IHVzZWQgZm9yIGdlbmVyYXRpb24gb2YgdXNlciBkZWxlZ2F0aW9uIFNBUy5cbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL2NyZWF0ZS11c2VyLWRlbGVnYXRpb24tc2FzXG4gKi9cbmV4cG9ydCBjbGFzcyBVc2VyRGVsZWdhdGlvbktleUNyZWRlbnRpYWwge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgVXNlckRlbGVnYXRpb25LZXlDcmVkZW50aWFsLlxuICAgICAqIEBwYXJhbSBhY2NvdW50TmFtZSAtXG4gICAgICogQHBhcmFtIHVzZXJEZWxlZ2F0aW9uS2V5IC1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhY2NvdW50TmFtZSwgdXNlckRlbGVnYXRpb25LZXkpIHtcbiAgICAgICAgdGhpcy5hY2NvdW50TmFtZSA9IGFjY291bnROYW1lO1xuICAgICAgICB0aGlzLnVzZXJEZWxlZ2F0aW9uS2V5ID0gdXNlckRlbGVnYXRpb25LZXk7XG4gICAgICAgIHRoaXMua2V5ID0gQnVmZmVyLmZyb20odXNlckRlbGVnYXRpb25LZXkudmFsdWUsIFwiYmFzZTY0XCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBoYXNoIHNpZ25hdHVyZSBmb3IgYW4gSFRUUCByZXF1ZXN0IG9yIGZvciBhIFNBUy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdHJpbmdUb1NpZ24gLVxuICAgICAqL1xuICAgIGNvbXB1dGVITUFDU0hBMjU2KHN0cmluZ1RvU2lnbikge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhgc3RyaW5nVG9TaWduOiAke0pTT04uc3RyaW5naWZ5KHN0cmluZ1RvU2lnbil9YCk7XG4gICAgICAgIHJldHVybiBjcmVhdGVIbWFjKFwic2hhMjU2XCIsIHRoaXMua2V5KS51cGRhdGUoc3RyaW5nVG9TaWduLCBcInV0ZjhcIikuZGlnZXN0KFwiYmFzZTY0XCIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVzZXJEZWxlZ2F0aW9uS2V5Q3JlZGVudGlhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessPolicy: () => (/* binding */ AccessPolicy),\n/* harmony export */   AppendBlobAppendBlockExceptionHeaders: () => (/* binding */ AppendBlobAppendBlockExceptionHeaders),\n/* harmony export */   AppendBlobAppendBlockFromUrlExceptionHeaders: () => (/* binding */ AppendBlobAppendBlockFromUrlExceptionHeaders),\n/* harmony export */   AppendBlobAppendBlockFromUrlHeaders: () => (/* binding */ AppendBlobAppendBlockFromUrlHeaders),\n/* harmony export */   AppendBlobAppendBlockHeaders: () => (/* binding */ AppendBlobAppendBlockHeaders),\n/* harmony export */   AppendBlobCreateExceptionHeaders: () => (/* binding */ AppendBlobCreateExceptionHeaders),\n/* harmony export */   AppendBlobCreateHeaders: () => (/* binding */ AppendBlobCreateHeaders),\n/* harmony export */   AppendBlobSealExceptionHeaders: () => (/* binding */ AppendBlobSealExceptionHeaders),\n/* harmony export */   AppendBlobSealHeaders: () => (/* binding */ AppendBlobSealHeaders),\n/* harmony export */   ArrowConfiguration: () => (/* binding */ ArrowConfiguration),\n/* harmony export */   ArrowField: () => (/* binding */ ArrowField),\n/* harmony export */   BlobAbortCopyFromURLExceptionHeaders: () => (/* binding */ BlobAbortCopyFromURLExceptionHeaders),\n/* harmony export */   BlobAbortCopyFromURLHeaders: () => (/* binding */ BlobAbortCopyFromURLHeaders),\n/* harmony export */   BlobAcquireLeaseExceptionHeaders: () => (/* binding */ BlobAcquireLeaseExceptionHeaders),\n/* harmony export */   BlobAcquireLeaseHeaders: () => (/* binding */ BlobAcquireLeaseHeaders),\n/* harmony export */   BlobBreakLeaseExceptionHeaders: () => (/* binding */ BlobBreakLeaseExceptionHeaders),\n/* harmony export */   BlobBreakLeaseHeaders: () => (/* binding */ BlobBreakLeaseHeaders),\n/* harmony export */   BlobChangeLeaseExceptionHeaders: () => (/* binding */ BlobChangeLeaseExceptionHeaders),\n/* harmony export */   BlobChangeLeaseHeaders: () => (/* binding */ BlobChangeLeaseHeaders),\n/* harmony export */   BlobCopyFromURLExceptionHeaders: () => (/* binding */ BlobCopyFromURLExceptionHeaders),\n/* harmony export */   BlobCopyFromURLHeaders: () => (/* binding */ BlobCopyFromURLHeaders),\n/* harmony export */   BlobCreateSnapshotExceptionHeaders: () => (/* binding */ BlobCreateSnapshotExceptionHeaders),\n/* harmony export */   BlobCreateSnapshotHeaders: () => (/* binding */ BlobCreateSnapshotHeaders),\n/* harmony export */   BlobDeleteExceptionHeaders: () => (/* binding */ BlobDeleteExceptionHeaders),\n/* harmony export */   BlobDeleteHeaders: () => (/* binding */ BlobDeleteHeaders),\n/* harmony export */   BlobDeleteImmutabilityPolicyExceptionHeaders: () => (/* binding */ BlobDeleteImmutabilityPolicyExceptionHeaders),\n/* harmony export */   BlobDeleteImmutabilityPolicyHeaders: () => (/* binding */ BlobDeleteImmutabilityPolicyHeaders),\n/* harmony export */   BlobDownloadExceptionHeaders: () => (/* binding */ BlobDownloadExceptionHeaders),\n/* harmony export */   BlobDownloadHeaders: () => (/* binding */ BlobDownloadHeaders),\n/* harmony export */   BlobFlatListSegment: () => (/* binding */ BlobFlatListSegment),\n/* harmony export */   BlobGetAccountInfoExceptionHeaders: () => (/* binding */ BlobGetAccountInfoExceptionHeaders),\n/* harmony export */   BlobGetAccountInfoHeaders: () => (/* binding */ BlobGetAccountInfoHeaders),\n/* harmony export */   BlobGetPropertiesExceptionHeaders: () => (/* binding */ BlobGetPropertiesExceptionHeaders),\n/* harmony export */   BlobGetPropertiesHeaders: () => (/* binding */ BlobGetPropertiesHeaders),\n/* harmony export */   BlobGetTagsExceptionHeaders: () => (/* binding */ BlobGetTagsExceptionHeaders),\n/* harmony export */   BlobGetTagsHeaders: () => (/* binding */ BlobGetTagsHeaders),\n/* harmony export */   BlobHierarchyListSegment: () => (/* binding */ BlobHierarchyListSegment),\n/* harmony export */   BlobItemInternal: () => (/* binding */ BlobItemInternal),\n/* harmony export */   BlobName: () => (/* binding */ BlobName),\n/* harmony export */   BlobPrefix: () => (/* binding */ BlobPrefix),\n/* harmony export */   BlobPropertiesInternal: () => (/* binding */ BlobPropertiesInternal),\n/* harmony export */   BlobQueryExceptionHeaders: () => (/* binding */ BlobQueryExceptionHeaders),\n/* harmony export */   BlobQueryHeaders: () => (/* binding */ BlobQueryHeaders),\n/* harmony export */   BlobReleaseLeaseExceptionHeaders: () => (/* binding */ BlobReleaseLeaseExceptionHeaders),\n/* harmony export */   BlobReleaseLeaseHeaders: () => (/* binding */ BlobReleaseLeaseHeaders),\n/* harmony export */   BlobRenewLeaseExceptionHeaders: () => (/* binding */ BlobRenewLeaseExceptionHeaders),\n/* harmony export */   BlobRenewLeaseHeaders: () => (/* binding */ BlobRenewLeaseHeaders),\n/* harmony export */   BlobServiceProperties: () => (/* binding */ BlobServiceProperties),\n/* harmony export */   BlobServiceStatistics: () => (/* binding */ BlobServiceStatistics),\n/* harmony export */   BlobSetExpiryExceptionHeaders: () => (/* binding */ BlobSetExpiryExceptionHeaders),\n/* harmony export */   BlobSetExpiryHeaders: () => (/* binding */ BlobSetExpiryHeaders),\n/* harmony export */   BlobSetHttpHeadersExceptionHeaders: () => (/* binding */ BlobSetHttpHeadersExceptionHeaders),\n/* harmony export */   BlobSetHttpHeadersHeaders: () => (/* binding */ BlobSetHttpHeadersHeaders),\n/* harmony export */   BlobSetImmutabilityPolicyExceptionHeaders: () => (/* binding */ BlobSetImmutabilityPolicyExceptionHeaders),\n/* harmony export */   BlobSetImmutabilityPolicyHeaders: () => (/* binding */ BlobSetImmutabilityPolicyHeaders),\n/* harmony export */   BlobSetLegalHoldExceptionHeaders: () => (/* binding */ BlobSetLegalHoldExceptionHeaders),\n/* harmony export */   BlobSetLegalHoldHeaders: () => (/* binding */ BlobSetLegalHoldHeaders),\n/* harmony export */   BlobSetMetadataExceptionHeaders: () => (/* binding */ BlobSetMetadataExceptionHeaders),\n/* harmony export */   BlobSetMetadataHeaders: () => (/* binding */ BlobSetMetadataHeaders),\n/* harmony export */   BlobSetTagsExceptionHeaders: () => (/* binding */ BlobSetTagsExceptionHeaders),\n/* harmony export */   BlobSetTagsHeaders: () => (/* binding */ BlobSetTagsHeaders),\n/* harmony export */   BlobSetTierExceptionHeaders: () => (/* binding */ BlobSetTierExceptionHeaders),\n/* harmony export */   BlobSetTierHeaders: () => (/* binding */ BlobSetTierHeaders),\n/* harmony export */   BlobStartCopyFromURLExceptionHeaders: () => (/* binding */ BlobStartCopyFromURLExceptionHeaders),\n/* harmony export */   BlobStartCopyFromURLHeaders: () => (/* binding */ BlobStartCopyFromURLHeaders),\n/* harmony export */   BlobTag: () => (/* binding */ BlobTag),\n/* harmony export */   BlobTags: () => (/* binding */ BlobTags),\n/* harmony export */   BlobUndeleteExceptionHeaders: () => (/* binding */ BlobUndeleteExceptionHeaders),\n/* harmony export */   BlobUndeleteHeaders: () => (/* binding */ BlobUndeleteHeaders),\n/* harmony export */   Block: () => (/* binding */ Block),\n/* harmony export */   BlockBlobCommitBlockListExceptionHeaders: () => (/* binding */ BlockBlobCommitBlockListExceptionHeaders),\n/* harmony export */   BlockBlobCommitBlockListHeaders: () => (/* binding */ BlockBlobCommitBlockListHeaders),\n/* harmony export */   BlockBlobGetBlockListExceptionHeaders: () => (/* binding */ BlockBlobGetBlockListExceptionHeaders),\n/* harmony export */   BlockBlobGetBlockListHeaders: () => (/* binding */ BlockBlobGetBlockListHeaders),\n/* harmony export */   BlockBlobPutBlobFromUrlExceptionHeaders: () => (/* binding */ BlockBlobPutBlobFromUrlExceptionHeaders),\n/* harmony export */   BlockBlobPutBlobFromUrlHeaders: () => (/* binding */ BlockBlobPutBlobFromUrlHeaders),\n/* harmony export */   BlockBlobStageBlockExceptionHeaders: () => (/* binding */ BlockBlobStageBlockExceptionHeaders),\n/* harmony export */   BlockBlobStageBlockFromURLExceptionHeaders: () => (/* binding */ BlockBlobStageBlockFromURLExceptionHeaders),\n/* harmony export */   BlockBlobStageBlockFromURLHeaders: () => (/* binding */ BlockBlobStageBlockFromURLHeaders),\n/* harmony export */   BlockBlobStageBlockHeaders: () => (/* binding */ BlockBlobStageBlockHeaders),\n/* harmony export */   BlockBlobUploadExceptionHeaders: () => (/* binding */ BlockBlobUploadExceptionHeaders),\n/* harmony export */   BlockBlobUploadHeaders: () => (/* binding */ BlockBlobUploadHeaders),\n/* harmony export */   BlockList: () => (/* binding */ BlockList),\n/* harmony export */   BlockLookupList: () => (/* binding */ BlockLookupList),\n/* harmony export */   ClearRange: () => (/* binding */ ClearRange),\n/* harmony export */   ContainerAcquireLeaseExceptionHeaders: () => (/* binding */ ContainerAcquireLeaseExceptionHeaders),\n/* harmony export */   ContainerAcquireLeaseHeaders: () => (/* binding */ ContainerAcquireLeaseHeaders),\n/* harmony export */   ContainerBreakLeaseExceptionHeaders: () => (/* binding */ ContainerBreakLeaseExceptionHeaders),\n/* harmony export */   ContainerBreakLeaseHeaders: () => (/* binding */ ContainerBreakLeaseHeaders),\n/* harmony export */   ContainerChangeLeaseExceptionHeaders: () => (/* binding */ ContainerChangeLeaseExceptionHeaders),\n/* harmony export */   ContainerChangeLeaseHeaders: () => (/* binding */ ContainerChangeLeaseHeaders),\n/* harmony export */   ContainerCreateExceptionHeaders: () => (/* binding */ ContainerCreateExceptionHeaders),\n/* harmony export */   ContainerCreateHeaders: () => (/* binding */ ContainerCreateHeaders),\n/* harmony export */   ContainerDeleteExceptionHeaders: () => (/* binding */ ContainerDeleteExceptionHeaders),\n/* harmony export */   ContainerDeleteHeaders: () => (/* binding */ ContainerDeleteHeaders),\n/* harmony export */   ContainerFilterBlobsExceptionHeaders: () => (/* binding */ ContainerFilterBlobsExceptionHeaders),\n/* harmony export */   ContainerFilterBlobsHeaders: () => (/* binding */ ContainerFilterBlobsHeaders),\n/* harmony export */   ContainerGetAccessPolicyExceptionHeaders: () => (/* binding */ ContainerGetAccessPolicyExceptionHeaders),\n/* harmony export */   ContainerGetAccessPolicyHeaders: () => (/* binding */ ContainerGetAccessPolicyHeaders),\n/* harmony export */   ContainerGetAccountInfoExceptionHeaders: () => (/* binding */ ContainerGetAccountInfoExceptionHeaders),\n/* harmony export */   ContainerGetAccountInfoHeaders: () => (/* binding */ ContainerGetAccountInfoHeaders),\n/* harmony export */   ContainerGetPropertiesExceptionHeaders: () => (/* binding */ ContainerGetPropertiesExceptionHeaders),\n/* harmony export */   ContainerGetPropertiesHeaders: () => (/* binding */ ContainerGetPropertiesHeaders),\n/* harmony export */   ContainerItem: () => (/* binding */ ContainerItem),\n/* harmony export */   ContainerListBlobFlatSegmentExceptionHeaders: () => (/* binding */ ContainerListBlobFlatSegmentExceptionHeaders),\n/* harmony export */   ContainerListBlobFlatSegmentHeaders: () => (/* binding */ ContainerListBlobFlatSegmentHeaders),\n/* harmony export */   ContainerListBlobHierarchySegmentExceptionHeaders: () => (/* binding */ ContainerListBlobHierarchySegmentExceptionHeaders),\n/* harmony export */   ContainerListBlobHierarchySegmentHeaders: () => (/* binding */ ContainerListBlobHierarchySegmentHeaders),\n/* harmony export */   ContainerProperties: () => (/* binding */ ContainerProperties),\n/* harmony export */   ContainerReleaseLeaseExceptionHeaders: () => (/* binding */ ContainerReleaseLeaseExceptionHeaders),\n/* harmony export */   ContainerReleaseLeaseHeaders: () => (/* binding */ ContainerReleaseLeaseHeaders),\n/* harmony export */   ContainerRenameExceptionHeaders: () => (/* binding */ ContainerRenameExceptionHeaders),\n/* harmony export */   ContainerRenameHeaders: () => (/* binding */ ContainerRenameHeaders),\n/* harmony export */   ContainerRenewLeaseExceptionHeaders: () => (/* binding */ ContainerRenewLeaseExceptionHeaders),\n/* harmony export */   ContainerRenewLeaseHeaders: () => (/* binding */ ContainerRenewLeaseHeaders),\n/* harmony export */   ContainerRestoreExceptionHeaders: () => (/* binding */ ContainerRestoreExceptionHeaders),\n/* harmony export */   ContainerRestoreHeaders: () => (/* binding */ ContainerRestoreHeaders),\n/* harmony export */   ContainerSetAccessPolicyExceptionHeaders: () => (/* binding */ ContainerSetAccessPolicyExceptionHeaders),\n/* harmony export */   ContainerSetAccessPolicyHeaders: () => (/* binding */ ContainerSetAccessPolicyHeaders),\n/* harmony export */   ContainerSetMetadataExceptionHeaders: () => (/* binding */ ContainerSetMetadataExceptionHeaders),\n/* harmony export */   ContainerSetMetadataHeaders: () => (/* binding */ ContainerSetMetadataHeaders),\n/* harmony export */   ContainerSubmitBatchExceptionHeaders: () => (/* binding */ ContainerSubmitBatchExceptionHeaders),\n/* harmony export */   ContainerSubmitBatchHeaders: () => (/* binding */ ContainerSubmitBatchHeaders),\n/* harmony export */   CorsRule: () => (/* binding */ CorsRule),\n/* harmony export */   DelimitedTextConfiguration: () => (/* binding */ DelimitedTextConfiguration),\n/* harmony export */   FilterBlobItem: () => (/* binding */ FilterBlobItem),\n/* harmony export */   FilterBlobSegment: () => (/* binding */ FilterBlobSegment),\n/* harmony export */   GeoReplication: () => (/* binding */ GeoReplication),\n/* harmony export */   JsonTextConfiguration: () => (/* binding */ JsonTextConfiguration),\n/* harmony export */   KeyInfo: () => (/* binding */ KeyInfo),\n/* harmony export */   ListBlobsFlatSegmentResponse: () => (/* binding */ ListBlobsFlatSegmentResponse),\n/* harmony export */   ListBlobsHierarchySegmentResponse: () => (/* binding */ ListBlobsHierarchySegmentResponse),\n/* harmony export */   ListContainersSegmentResponse: () => (/* binding */ ListContainersSegmentResponse),\n/* harmony export */   Logging: () => (/* binding */ Logging),\n/* harmony export */   Metrics: () => (/* binding */ Metrics),\n/* harmony export */   PageBlobClearPagesExceptionHeaders: () => (/* binding */ PageBlobClearPagesExceptionHeaders),\n/* harmony export */   PageBlobClearPagesHeaders: () => (/* binding */ PageBlobClearPagesHeaders),\n/* harmony export */   PageBlobCopyIncrementalExceptionHeaders: () => (/* binding */ PageBlobCopyIncrementalExceptionHeaders),\n/* harmony export */   PageBlobCopyIncrementalHeaders: () => (/* binding */ PageBlobCopyIncrementalHeaders),\n/* harmony export */   PageBlobCreateExceptionHeaders: () => (/* binding */ PageBlobCreateExceptionHeaders),\n/* harmony export */   PageBlobCreateHeaders: () => (/* binding */ PageBlobCreateHeaders),\n/* harmony export */   PageBlobGetPageRangesDiffExceptionHeaders: () => (/* binding */ PageBlobGetPageRangesDiffExceptionHeaders),\n/* harmony export */   PageBlobGetPageRangesDiffHeaders: () => (/* binding */ PageBlobGetPageRangesDiffHeaders),\n/* harmony export */   PageBlobGetPageRangesExceptionHeaders: () => (/* binding */ PageBlobGetPageRangesExceptionHeaders),\n/* harmony export */   PageBlobGetPageRangesHeaders: () => (/* binding */ PageBlobGetPageRangesHeaders),\n/* harmony export */   PageBlobResizeExceptionHeaders: () => (/* binding */ PageBlobResizeExceptionHeaders),\n/* harmony export */   PageBlobResizeHeaders: () => (/* binding */ PageBlobResizeHeaders),\n/* harmony export */   PageBlobUpdateSequenceNumberExceptionHeaders: () => (/* binding */ PageBlobUpdateSequenceNumberExceptionHeaders),\n/* harmony export */   PageBlobUpdateSequenceNumberHeaders: () => (/* binding */ PageBlobUpdateSequenceNumberHeaders),\n/* harmony export */   PageBlobUploadPagesExceptionHeaders: () => (/* binding */ PageBlobUploadPagesExceptionHeaders),\n/* harmony export */   PageBlobUploadPagesFromURLExceptionHeaders: () => (/* binding */ PageBlobUploadPagesFromURLExceptionHeaders),\n/* harmony export */   PageBlobUploadPagesFromURLHeaders: () => (/* binding */ PageBlobUploadPagesFromURLHeaders),\n/* harmony export */   PageBlobUploadPagesHeaders: () => (/* binding */ PageBlobUploadPagesHeaders),\n/* harmony export */   PageList: () => (/* binding */ PageList),\n/* harmony export */   PageRange: () => (/* binding */ PageRange),\n/* harmony export */   QueryFormat: () => (/* binding */ QueryFormat),\n/* harmony export */   QueryRequest: () => (/* binding */ QueryRequest),\n/* harmony export */   QuerySerialization: () => (/* binding */ QuerySerialization),\n/* harmony export */   RetentionPolicy: () => (/* binding */ RetentionPolicy),\n/* harmony export */   ServiceFilterBlobsExceptionHeaders: () => (/* binding */ ServiceFilterBlobsExceptionHeaders),\n/* harmony export */   ServiceFilterBlobsHeaders: () => (/* binding */ ServiceFilterBlobsHeaders),\n/* harmony export */   ServiceGetAccountInfoExceptionHeaders: () => (/* binding */ ServiceGetAccountInfoExceptionHeaders),\n/* harmony export */   ServiceGetAccountInfoHeaders: () => (/* binding */ ServiceGetAccountInfoHeaders),\n/* harmony export */   ServiceGetPropertiesExceptionHeaders: () => (/* binding */ ServiceGetPropertiesExceptionHeaders),\n/* harmony export */   ServiceGetPropertiesHeaders: () => (/* binding */ ServiceGetPropertiesHeaders),\n/* harmony export */   ServiceGetStatisticsExceptionHeaders: () => (/* binding */ ServiceGetStatisticsExceptionHeaders),\n/* harmony export */   ServiceGetStatisticsHeaders: () => (/* binding */ ServiceGetStatisticsHeaders),\n/* harmony export */   ServiceGetUserDelegationKeyExceptionHeaders: () => (/* binding */ ServiceGetUserDelegationKeyExceptionHeaders),\n/* harmony export */   ServiceGetUserDelegationKeyHeaders: () => (/* binding */ ServiceGetUserDelegationKeyHeaders),\n/* harmony export */   ServiceListContainersSegmentExceptionHeaders: () => (/* binding */ ServiceListContainersSegmentExceptionHeaders),\n/* harmony export */   ServiceListContainersSegmentHeaders: () => (/* binding */ ServiceListContainersSegmentHeaders),\n/* harmony export */   ServiceSetPropertiesExceptionHeaders: () => (/* binding */ ServiceSetPropertiesExceptionHeaders),\n/* harmony export */   ServiceSetPropertiesHeaders: () => (/* binding */ ServiceSetPropertiesHeaders),\n/* harmony export */   ServiceSubmitBatchExceptionHeaders: () => (/* binding */ ServiceSubmitBatchExceptionHeaders),\n/* harmony export */   ServiceSubmitBatchHeaders: () => (/* binding */ ServiceSubmitBatchHeaders),\n/* harmony export */   SignedIdentifier: () => (/* binding */ SignedIdentifier),\n/* harmony export */   StaticWebsite: () => (/* binding */ StaticWebsite),\n/* harmony export */   StorageError: () => (/* binding */ StorageError),\n/* harmony export */   UserDelegationKey: () => (/* binding */ UserDelegationKey)\n/* harmony export */ });\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nconst BlobServiceProperties = {\n    serializedName: \"BlobServiceProperties\",\n    xmlName: \"StorageServiceProperties\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobServiceProperties\",\n        modelProperties: {\n            blobAnalyticsLogging: {\n                serializedName: \"Logging\",\n                xmlName: \"Logging\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Logging\",\n                },\n            },\n            hourMetrics: {\n                serializedName: \"HourMetrics\",\n                xmlName: \"HourMetrics\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Metrics\",\n                },\n            },\n            minuteMetrics: {\n                serializedName: \"MinuteMetrics\",\n                xmlName: \"MinuteMetrics\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Metrics\",\n                },\n            },\n            cors: {\n                serializedName: \"Cors\",\n                xmlName: \"Cors\",\n                xmlIsWrapped: true,\n                xmlElementName: \"CorsRule\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"CorsRule\",\n                        },\n                    },\n                },\n            },\n            defaultServiceVersion: {\n                serializedName: \"DefaultServiceVersion\",\n                xmlName: \"DefaultServiceVersion\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deleteRetentionPolicy: {\n                serializedName: \"DeleteRetentionPolicy\",\n                xmlName: \"DeleteRetentionPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"RetentionPolicy\",\n                },\n            },\n            staticWebsite: {\n                serializedName: \"StaticWebsite\",\n                xmlName: \"StaticWebsite\",\n                type: {\n                    name: \"Composite\",\n                    className: \"StaticWebsite\",\n                },\n            },\n        },\n    },\n};\nconst Logging = {\n    serializedName: \"Logging\",\n    type: {\n        name: \"Composite\",\n        className: \"Logging\",\n        modelProperties: {\n            version: {\n                serializedName: \"Version\",\n                required: true,\n                xmlName: \"Version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deleteProperty: {\n                serializedName: \"Delete\",\n                required: true,\n                xmlName: \"Delete\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            read: {\n                serializedName: \"Read\",\n                required: true,\n                xmlName: \"Read\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            write: {\n                serializedName: \"Write\",\n                required: true,\n                xmlName: \"Write\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            retentionPolicy: {\n                serializedName: \"RetentionPolicy\",\n                xmlName: \"RetentionPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"RetentionPolicy\",\n                },\n            },\n        },\n    },\n};\nconst RetentionPolicy = {\n    serializedName: \"RetentionPolicy\",\n    type: {\n        name: \"Composite\",\n        className: \"RetentionPolicy\",\n        modelProperties: {\n            enabled: {\n                serializedName: \"Enabled\",\n                required: true,\n                xmlName: \"Enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            days: {\n                constraints: {\n                    InclusiveMinimum: 1,\n                },\n                serializedName: \"Days\",\n                xmlName: \"Days\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst Metrics = {\n    serializedName: \"Metrics\",\n    type: {\n        name: \"Composite\",\n        className: \"Metrics\",\n        modelProperties: {\n            version: {\n                serializedName: \"Version\",\n                xmlName: \"Version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            enabled: {\n                serializedName: \"Enabled\",\n                required: true,\n                xmlName: \"Enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            includeAPIs: {\n                serializedName: \"IncludeAPIs\",\n                xmlName: \"IncludeAPIs\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            retentionPolicy: {\n                serializedName: \"RetentionPolicy\",\n                xmlName: \"RetentionPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"RetentionPolicy\",\n                },\n            },\n        },\n    },\n};\nconst CorsRule = {\n    serializedName: \"CorsRule\",\n    type: {\n        name: \"Composite\",\n        className: \"CorsRule\",\n        modelProperties: {\n            allowedOrigins: {\n                serializedName: \"AllowedOrigins\",\n                required: true,\n                xmlName: \"AllowedOrigins\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            allowedMethods: {\n                serializedName: \"AllowedMethods\",\n                required: true,\n                xmlName: \"AllowedMethods\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            allowedHeaders: {\n                serializedName: \"AllowedHeaders\",\n                required: true,\n                xmlName: \"AllowedHeaders\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            exposedHeaders: {\n                serializedName: \"ExposedHeaders\",\n                required: true,\n                xmlName: \"ExposedHeaders\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxAgeInSeconds: {\n                constraints: {\n                    InclusiveMinimum: 0,\n                },\n                serializedName: \"MaxAgeInSeconds\",\n                required: true,\n                xmlName: \"MaxAgeInSeconds\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst StaticWebsite = {\n    serializedName: \"StaticWebsite\",\n    type: {\n        name: \"Composite\",\n        className: \"StaticWebsite\",\n        modelProperties: {\n            enabled: {\n                serializedName: \"Enabled\",\n                required: true,\n                xmlName: \"Enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            indexDocument: {\n                serializedName: \"IndexDocument\",\n                xmlName: \"IndexDocument\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorDocument404Path: {\n                serializedName: \"ErrorDocument404Path\",\n                xmlName: \"ErrorDocument404Path\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            defaultIndexDocumentPath: {\n                serializedName: \"DefaultIndexDocumentPath\",\n                xmlName: \"DefaultIndexDocumentPath\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst StorageError = {\n    serializedName: \"StorageError\",\n    type: {\n        name: \"Composite\",\n        className: \"StorageError\",\n        modelProperties: {\n            message: {\n                serializedName: \"Message\",\n                xmlName: \"Message\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            code: {\n                serializedName: \"Code\",\n                xmlName: \"Code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobServiceStatistics = {\n    serializedName: \"BlobServiceStatistics\",\n    xmlName: \"StorageServiceStats\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobServiceStatistics\",\n        modelProperties: {\n            geoReplication: {\n                serializedName: \"GeoReplication\",\n                xmlName: \"GeoReplication\",\n                type: {\n                    name: \"Composite\",\n                    className: \"GeoReplication\",\n                },\n            },\n        },\n    },\n};\nconst GeoReplication = {\n    serializedName: \"GeoReplication\",\n    type: {\n        name: \"Composite\",\n        className: \"GeoReplication\",\n        modelProperties: {\n            status: {\n                serializedName: \"Status\",\n                required: true,\n                xmlName: \"Status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"live\", \"bootstrap\", \"unavailable\"],\n                },\n            },\n            lastSyncOn: {\n                serializedName: \"LastSyncTime\",\n                required: true,\n                xmlName: \"LastSyncTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ListContainersSegmentResponse = {\n    serializedName: \"ListContainersSegmentResponse\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"ListContainersSegmentResponse\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            prefix: {\n                serializedName: \"Prefix\",\n                xmlName: \"Prefix\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            marker: {\n                serializedName: \"Marker\",\n                xmlName: \"Marker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxPageSize: {\n                serializedName: \"MaxResults\",\n                xmlName: \"MaxResults\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            containerItems: {\n                serializedName: \"ContainerItems\",\n                required: true,\n                xmlName: \"Containers\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Container\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ContainerItem\",\n                        },\n                    },\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerItem = {\n    serializedName: \"ContainerItem\",\n    xmlName: \"Container\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerItem\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                required: true,\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deleted: {\n                serializedName: \"Deleted\",\n                xmlName: \"Deleted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            version: {\n                serializedName: \"Version\",\n                xmlName: \"Version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            properties: {\n                serializedName: \"Properties\",\n                xmlName: \"Properties\",\n                type: {\n                    name: \"Composite\",\n                    className: \"ContainerProperties\",\n                },\n            },\n            metadata: {\n                serializedName: \"Metadata\",\n                xmlName: \"Metadata\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n        },\n    },\n};\nconst ContainerProperties = {\n    serializedName: \"ContainerProperties\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerProperties\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"Last-Modified\",\n                required: true,\n                xmlName: \"Last-Modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"Etag\",\n                required: true,\n                xmlName: \"Etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            leaseStatus: {\n                serializedName: \"LeaseStatus\",\n                xmlName: \"LeaseStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"LeaseState\",\n                xmlName: \"LeaseState\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"LeaseDuration\",\n                xmlName: \"LeaseDuration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            publicAccess: {\n                serializedName: \"PublicAccess\",\n                xmlName: \"PublicAccess\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"container\", \"blob\"],\n                },\n            },\n            hasImmutabilityPolicy: {\n                serializedName: \"HasImmutabilityPolicy\",\n                xmlName: \"HasImmutabilityPolicy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            hasLegalHold: {\n                serializedName: \"HasLegalHold\",\n                xmlName: \"HasLegalHold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            defaultEncryptionScope: {\n                serializedName: \"DefaultEncryptionScope\",\n                xmlName: \"DefaultEncryptionScope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            preventEncryptionScopeOverride: {\n                serializedName: \"DenyEncryptionScopeOverride\",\n                xmlName: \"DenyEncryptionScopeOverride\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            deletedOn: {\n                serializedName: \"DeletedTime\",\n                xmlName: \"DeletedTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            remainingRetentionDays: {\n                serializedName: \"RemainingRetentionDays\",\n                xmlName: \"RemainingRetentionDays\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isImmutableStorageWithVersioningEnabled: {\n                serializedName: \"ImmutableStorageWithVersioningEnabled\",\n                xmlName: \"ImmutableStorageWithVersioningEnabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst KeyInfo = {\n    serializedName: \"KeyInfo\",\n    type: {\n        name: \"Composite\",\n        className: \"KeyInfo\",\n        modelProperties: {\n            startsOn: {\n                serializedName: \"Start\",\n                required: true,\n                xmlName: \"Start\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"Expiry\",\n                required: true,\n                xmlName: \"Expiry\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst UserDelegationKey = {\n    serializedName: \"UserDelegationKey\",\n    type: {\n        name: \"Composite\",\n        className: \"UserDelegationKey\",\n        modelProperties: {\n            signedObjectId: {\n                serializedName: \"SignedOid\",\n                required: true,\n                xmlName: \"SignedOid\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedTenantId: {\n                serializedName: \"SignedTid\",\n                required: true,\n                xmlName: \"SignedTid\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedStartsOn: {\n                serializedName: \"SignedStart\",\n                required: true,\n                xmlName: \"SignedStart\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedExpiresOn: {\n                serializedName: \"SignedExpiry\",\n                required: true,\n                xmlName: \"SignedExpiry\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedService: {\n                serializedName: \"SignedService\",\n                required: true,\n                xmlName: \"SignedService\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedVersion: {\n                serializedName: \"SignedVersion\",\n                required: true,\n                xmlName: \"SignedVersion\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            value: {\n                serializedName: \"Value\",\n                required: true,\n                xmlName: \"Value\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst FilterBlobSegment = {\n    serializedName: \"FilterBlobSegment\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"FilterBlobSegment\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            where: {\n                serializedName: \"Where\",\n                required: true,\n                xmlName: \"Where\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobs: {\n                serializedName: \"Blobs\",\n                required: true,\n                xmlName: \"Blobs\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Blob\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"FilterBlobItem\",\n                        },\n                    },\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst FilterBlobItem = {\n    serializedName: \"FilterBlobItem\",\n    xmlName: \"Blob\",\n    type: {\n        name: \"Composite\",\n        className: \"FilterBlobItem\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                required: true,\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            containerName: {\n                serializedName: \"ContainerName\",\n                required: true,\n                xmlName: \"ContainerName\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            tags: {\n                serializedName: \"Tags\",\n                xmlName: \"Tags\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobTags\",\n                },\n            },\n        },\n    },\n};\nconst BlobTags = {\n    serializedName: \"BlobTags\",\n    xmlName: \"Tags\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobTags\",\n        modelProperties: {\n            blobTagSet: {\n                serializedName: \"BlobTagSet\",\n                required: true,\n                xmlName: \"TagSet\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Tag\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobTag\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst BlobTag = {\n    serializedName: \"BlobTag\",\n    xmlName: \"Tag\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobTag\",\n        modelProperties: {\n            key: {\n                serializedName: \"Key\",\n                required: true,\n                xmlName: \"Key\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            value: {\n                serializedName: \"Value\",\n                required: true,\n                xmlName: \"Value\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst SignedIdentifier = {\n    serializedName: \"SignedIdentifier\",\n    xmlName: \"SignedIdentifier\",\n    type: {\n        name: \"Composite\",\n        className: \"SignedIdentifier\",\n        modelProperties: {\n            id: {\n                serializedName: \"Id\",\n                required: true,\n                xmlName: \"Id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessPolicy: {\n                serializedName: \"AccessPolicy\",\n                xmlName: \"AccessPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"AccessPolicy\",\n                },\n            },\n        },\n    },\n};\nconst AccessPolicy = {\n    serializedName: \"AccessPolicy\",\n    type: {\n        name: \"Composite\",\n        className: \"AccessPolicy\",\n        modelProperties: {\n            startsOn: {\n                serializedName: \"Start\",\n                xmlName: \"Start\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"Expiry\",\n                xmlName: \"Expiry\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            permissions: {\n                serializedName: \"Permission\",\n                xmlName: \"Permission\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ListBlobsFlatSegmentResponse = {\n    serializedName: \"ListBlobsFlatSegmentResponse\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"ListBlobsFlatSegmentResponse\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            containerName: {\n                serializedName: \"ContainerName\",\n                required: true,\n                xmlName: \"ContainerName\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            prefix: {\n                serializedName: \"Prefix\",\n                xmlName: \"Prefix\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            marker: {\n                serializedName: \"Marker\",\n                xmlName: \"Marker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxPageSize: {\n                serializedName: \"MaxResults\",\n                xmlName: \"MaxResults\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            segment: {\n                serializedName: \"Segment\",\n                xmlName: \"Blobs\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobFlatListSegment\",\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobFlatListSegment = {\n    serializedName: \"BlobFlatListSegment\",\n    xmlName: \"Blobs\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobFlatListSegment\",\n        modelProperties: {\n            blobItems: {\n                serializedName: \"BlobItems\",\n                required: true,\n                xmlName: \"BlobItems\",\n                xmlElementName: \"Blob\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobItemInternal\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst BlobItemInternal = {\n    serializedName: \"BlobItemInternal\",\n    xmlName: \"Blob\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobItemInternal\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                xmlName: \"Name\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobName\",\n                },\n            },\n            deleted: {\n                serializedName: \"Deleted\",\n                required: true,\n                xmlName: \"Deleted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            snapshot: {\n                serializedName: \"Snapshot\",\n                required: true,\n                xmlName: \"Snapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"VersionId\",\n                xmlName: \"VersionId\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isCurrentVersion: {\n                serializedName: \"IsCurrentVersion\",\n                xmlName: \"IsCurrentVersion\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            properties: {\n                serializedName: \"Properties\",\n                xmlName: \"Properties\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobPropertiesInternal\",\n                },\n            },\n            metadata: {\n                serializedName: \"Metadata\",\n                xmlName: \"Metadata\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            blobTags: {\n                serializedName: \"BlobTags\",\n                xmlName: \"Tags\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobTags\",\n                },\n            },\n            objectReplicationMetadata: {\n                serializedName: \"ObjectReplicationMetadata\",\n                xmlName: \"OrMetadata\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            hasVersionsOnly: {\n                serializedName: \"HasVersionsOnly\",\n                xmlName: \"HasVersionsOnly\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst BlobName = {\n    serializedName: \"BlobName\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobName\",\n        modelProperties: {\n            encoded: {\n                serializedName: \"Encoded\",\n                xmlName: \"Encoded\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            content: {\n                serializedName: \"content\",\n                xmlName: \"content\",\n                xmlIsMsText: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobPropertiesInternal = {\n    serializedName: \"BlobPropertiesInternal\",\n    xmlName: \"Properties\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobPropertiesInternal\",\n        modelProperties: {\n            createdOn: {\n                serializedName: \"Creation-Time\",\n                xmlName: \"Creation-Time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            lastModified: {\n                serializedName: \"Last-Modified\",\n                required: true,\n                xmlName: \"Last-Modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"Etag\",\n                required: true,\n                xmlName: \"Etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLength: {\n                serializedName: \"Content-Length\",\n                xmlName: \"Content-Length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"Content-Type\",\n                xmlName: \"Content-Type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"Content-Encoding\",\n                xmlName: \"Content-Encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"Content-Language\",\n                xmlName: \"Content-Language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"Content-MD5\",\n                xmlName: \"Content-MD5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"Content-Disposition\",\n                xmlName: \"Content-Disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"Cache-Control\",\n                xmlName: \"Cache-Control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            blobType: {\n                serializedName: \"BlobType\",\n                xmlName: \"BlobType\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"LeaseStatus\",\n                xmlName: \"LeaseStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"LeaseState\",\n                xmlName: \"LeaseState\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"LeaseDuration\",\n                xmlName: \"LeaseDuration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            copyId: {\n                serializedName: \"CopyId\",\n                xmlName: \"CopyId\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"CopyStatus\",\n                xmlName: \"CopyStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            copySource: {\n                serializedName: \"CopySource\",\n                xmlName: \"CopySource\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"CopyProgress\",\n                xmlName: \"CopyProgress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyCompletedOn: {\n                serializedName: \"CopyCompletionTime\",\n                xmlName: \"CopyCompletionTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"CopyStatusDescription\",\n                xmlName: \"CopyStatusDescription\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            serverEncrypted: {\n                serializedName: \"ServerEncrypted\",\n                xmlName: \"ServerEncrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            incrementalCopy: {\n                serializedName: \"IncrementalCopy\",\n                xmlName: \"IncrementalCopy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            destinationSnapshot: {\n                serializedName: \"DestinationSnapshot\",\n                xmlName: \"DestinationSnapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deletedOn: {\n                serializedName: \"DeletedTime\",\n                xmlName: \"DeletedTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            remainingRetentionDays: {\n                serializedName: \"RemainingRetentionDays\",\n                xmlName: \"RemainingRetentionDays\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            accessTier: {\n                serializedName: \"AccessTier\",\n                xmlName: \"AccessTier\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"P4\",\n                        \"P6\",\n                        \"P10\",\n                        \"P15\",\n                        \"P20\",\n                        \"P30\",\n                        \"P40\",\n                        \"P50\",\n                        \"P60\",\n                        \"P70\",\n                        \"P80\",\n                        \"Hot\",\n                        \"Cool\",\n                        \"Archive\",\n                        \"Cold\",\n                    ],\n                },\n            },\n            accessTierInferred: {\n                serializedName: \"AccessTierInferred\",\n                xmlName: \"AccessTierInferred\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            archiveStatus: {\n                serializedName: \"ArchiveStatus\",\n                xmlName: \"ArchiveStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"rehydrate-pending-to-hot\",\n                        \"rehydrate-pending-to-cool\",\n                        \"rehydrate-pending-to-cold\",\n                    ],\n                },\n            },\n            customerProvidedKeySha256: {\n                serializedName: \"CustomerProvidedKeySha256\",\n                xmlName: \"CustomerProvidedKeySha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"EncryptionScope\",\n                xmlName: \"EncryptionScope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTierChangedOn: {\n                serializedName: \"AccessTierChangeTime\",\n                xmlName: \"AccessTierChangeTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            tagCount: {\n                serializedName: \"TagCount\",\n                xmlName: \"TagCount\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"Expiry-Time\",\n                xmlName: \"Expiry-Time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isSealed: {\n                serializedName: \"Sealed\",\n                xmlName: \"Sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            rehydratePriority: {\n                serializedName: \"RehydratePriority\",\n                xmlName: \"RehydratePriority\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"High\", \"Standard\"],\n                },\n            },\n            lastAccessedOn: {\n                serializedName: \"LastAccessTime\",\n                xmlName: \"LastAccessTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiresOn: {\n                serializedName: \"ImmutabilityPolicyUntilDate\",\n                xmlName: \"ImmutabilityPolicyUntilDate\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"ImmutabilityPolicyMode\",\n                xmlName: \"ImmutabilityPolicyMode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n            legalHold: {\n                serializedName: \"LegalHold\",\n                xmlName: \"LegalHold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst ListBlobsHierarchySegmentResponse = {\n    serializedName: \"ListBlobsHierarchySegmentResponse\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"ListBlobsHierarchySegmentResponse\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            containerName: {\n                serializedName: \"ContainerName\",\n                required: true,\n                xmlName: \"ContainerName\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            prefix: {\n                serializedName: \"Prefix\",\n                xmlName: \"Prefix\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            marker: {\n                serializedName: \"Marker\",\n                xmlName: \"Marker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxPageSize: {\n                serializedName: \"MaxResults\",\n                xmlName: \"MaxResults\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            delimiter: {\n                serializedName: \"Delimiter\",\n                xmlName: \"Delimiter\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            segment: {\n                serializedName: \"Segment\",\n                xmlName: \"Blobs\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobHierarchyListSegment\",\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobHierarchyListSegment = {\n    serializedName: \"BlobHierarchyListSegment\",\n    xmlName: \"Blobs\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobHierarchyListSegment\",\n        modelProperties: {\n            blobPrefixes: {\n                serializedName: \"BlobPrefixes\",\n                xmlName: \"BlobPrefixes\",\n                xmlElementName: \"BlobPrefix\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobPrefix\",\n                        },\n                    },\n                },\n            },\n            blobItems: {\n                serializedName: \"BlobItems\",\n                required: true,\n                xmlName: \"BlobItems\",\n                xmlElementName: \"Blob\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobItemInternal\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst BlobPrefix = {\n    serializedName: \"BlobPrefix\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobPrefix\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                xmlName: \"Name\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobName\",\n                },\n            },\n        },\n    },\n};\nconst BlockLookupList = {\n    serializedName: \"BlockLookupList\",\n    xmlName: \"BlockList\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockLookupList\",\n        modelProperties: {\n            committed: {\n                serializedName: \"Committed\",\n                xmlName: \"Committed\",\n                xmlElementName: \"Committed\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\",\n                        },\n                    },\n                },\n            },\n            uncommitted: {\n                serializedName: \"Uncommitted\",\n                xmlName: \"Uncommitted\",\n                xmlElementName: \"Uncommitted\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\",\n                        },\n                    },\n                },\n            },\n            latest: {\n                serializedName: \"Latest\",\n                xmlName: \"Latest\",\n                xmlElementName: \"Latest\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst BlockList = {\n    serializedName: \"BlockList\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockList\",\n        modelProperties: {\n            committedBlocks: {\n                serializedName: \"CommittedBlocks\",\n                xmlName: \"CommittedBlocks\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Block\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"Block\",\n                        },\n                    },\n                },\n            },\n            uncommittedBlocks: {\n                serializedName: \"UncommittedBlocks\",\n                xmlName: \"UncommittedBlocks\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Block\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"Block\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst Block = {\n    serializedName: \"Block\",\n    type: {\n        name: \"Composite\",\n        className: \"Block\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                required: true,\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            size: {\n                serializedName: \"Size\",\n                required: true,\n                xmlName: \"Size\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst PageList = {\n    serializedName: \"PageList\",\n    type: {\n        name: \"Composite\",\n        className: \"PageList\",\n        modelProperties: {\n            pageRange: {\n                serializedName: \"PageRange\",\n                xmlName: \"PageRange\",\n                xmlElementName: \"PageRange\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"PageRange\",\n                        },\n                    },\n                },\n            },\n            clearRange: {\n                serializedName: \"ClearRange\",\n                xmlName: \"ClearRange\",\n                xmlElementName: \"ClearRange\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ClearRange\",\n                        },\n                    },\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageRange = {\n    serializedName: \"PageRange\",\n    xmlName: \"PageRange\",\n    type: {\n        name: \"Composite\",\n        className: \"PageRange\",\n        modelProperties: {\n            start: {\n                serializedName: \"Start\",\n                required: true,\n                xmlName: \"Start\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            end: {\n                serializedName: \"End\",\n                required: true,\n                xmlName: \"End\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst ClearRange = {\n    serializedName: \"ClearRange\",\n    xmlName: \"ClearRange\",\n    type: {\n        name: \"Composite\",\n        className: \"ClearRange\",\n        modelProperties: {\n            start: {\n                serializedName: \"Start\",\n                required: true,\n                xmlName: \"Start\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            end: {\n                serializedName: \"End\",\n                required: true,\n                xmlName: \"End\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst QueryRequest = {\n    serializedName: \"QueryRequest\",\n    xmlName: \"QueryRequest\",\n    type: {\n        name: \"Composite\",\n        className: \"QueryRequest\",\n        modelProperties: {\n            queryType: {\n                serializedName: \"QueryType\",\n                required: true,\n                xmlName: \"QueryType\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            expression: {\n                serializedName: \"Expression\",\n                required: true,\n                xmlName: \"Expression\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            inputSerialization: {\n                serializedName: \"InputSerialization\",\n                xmlName: \"InputSerialization\",\n                type: {\n                    name: \"Composite\",\n                    className: \"QuerySerialization\",\n                },\n            },\n            outputSerialization: {\n                serializedName: \"OutputSerialization\",\n                xmlName: \"OutputSerialization\",\n                type: {\n                    name: \"Composite\",\n                    className: \"QuerySerialization\",\n                },\n            },\n        },\n    },\n};\nconst QuerySerialization = {\n    serializedName: \"QuerySerialization\",\n    type: {\n        name: \"Composite\",\n        className: \"QuerySerialization\",\n        modelProperties: {\n            format: {\n                serializedName: \"Format\",\n                xmlName: \"Format\",\n                type: {\n                    name: \"Composite\",\n                    className: \"QueryFormat\",\n                },\n            },\n        },\n    },\n};\nconst QueryFormat = {\n    serializedName: \"QueryFormat\",\n    type: {\n        name: \"Composite\",\n        className: \"QueryFormat\",\n        modelProperties: {\n            type: {\n                serializedName: \"Type\",\n                required: true,\n                xmlName: \"Type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"delimited\", \"json\", \"arrow\", \"parquet\"],\n                },\n            },\n            delimitedTextConfiguration: {\n                serializedName: \"DelimitedTextConfiguration\",\n                xmlName: \"DelimitedTextConfiguration\",\n                type: {\n                    name: \"Composite\",\n                    className: \"DelimitedTextConfiguration\",\n                },\n            },\n            jsonTextConfiguration: {\n                serializedName: \"JsonTextConfiguration\",\n                xmlName: \"JsonTextConfiguration\",\n                type: {\n                    name: \"Composite\",\n                    className: \"JsonTextConfiguration\",\n                },\n            },\n            arrowConfiguration: {\n                serializedName: \"ArrowConfiguration\",\n                xmlName: \"ArrowConfiguration\",\n                type: {\n                    name: \"Composite\",\n                    className: \"ArrowConfiguration\",\n                },\n            },\n            parquetTextConfiguration: {\n                serializedName: \"ParquetTextConfiguration\",\n                xmlName: \"ParquetTextConfiguration\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"any\" } },\n                },\n            },\n        },\n    },\n};\nconst DelimitedTextConfiguration = {\n    serializedName: \"DelimitedTextConfiguration\",\n    xmlName: \"DelimitedTextConfiguration\",\n    type: {\n        name: \"Composite\",\n        className: \"DelimitedTextConfiguration\",\n        modelProperties: {\n            columnSeparator: {\n                serializedName: \"ColumnSeparator\",\n                xmlName: \"ColumnSeparator\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            fieldQuote: {\n                serializedName: \"FieldQuote\",\n                xmlName: \"FieldQuote\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            recordSeparator: {\n                serializedName: \"RecordSeparator\",\n                xmlName: \"RecordSeparator\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            escapeChar: {\n                serializedName: \"EscapeChar\",\n                xmlName: \"EscapeChar\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            headersPresent: {\n                serializedName: \"HeadersPresent\",\n                xmlName: \"HasHeaders\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst JsonTextConfiguration = {\n    serializedName: \"JsonTextConfiguration\",\n    xmlName: \"JsonTextConfiguration\",\n    type: {\n        name: \"Composite\",\n        className: \"JsonTextConfiguration\",\n        modelProperties: {\n            recordSeparator: {\n                serializedName: \"RecordSeparator\",\n                xmlName: \"RecordSeparator\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ArrowConfiguration = {\n    serializedName: \"ArrowConfiguration\",\n    xmlName: \"ArrowConfiguration\",\n    type: {\n        name: \"Composite\",\n        className: \"ArrowConfiguration\",\n        modelProperties: {\n            schema: {\n                serializedName: \"Schema\",\n                required: true,\n                xmlName: \"Schema\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Field\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ArrowField\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst ArrowField = {\n    serializedName: \"ArrowField\",\n    xmlName: \"Field\",\n    type: {\n        name: \"Composite\",\n        className: \"ArrowField\",\n        modelProperties: {\n            type: {\n                serializedName: \"Type\",\n                required: true,\n                xmlName: \"Type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            name: {\n                serializedName: \"Name\",\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            precision: {\n                serializedName: \"Precision\",\n                xmlName: \"Precision\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            scale: {\n                serializedName: \"Scale\",\n                xmlName: \"Scale\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst ServiceSetPropertiesHeaders = {\n    serializedName: \"Service_setPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSetPropertiesHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceSetPropertiesExceptionHeaders = {\n    serializedName: \"Service_setPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetPropertiesHeaders = {\n    serializedName: \"Service_getPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetPropertiesHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetPropertiesExceptionHeaders = {\n    serializedName: \"Service_getPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetStatisticsHeaders = {\n    serializedName: \"Service_getStatisticsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetStatisticsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetStatisticsExceptionHeaders = {\n    serializedName: \"Service_getStatisticsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetStatisticsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceListContainersSegmentHeaders = {\n    serializedName: \"Service_listContainersSegmentHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceListContainersSegmentHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceListContainersSegmentExceptionHeaders = {\n    serializedName: \"Service_listContainersSegmentExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceListContainersSegmentExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetUserDelegationKeyHeaders = {\n    serializedName: \"Service_getUserDelegationKeyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetUserDelegationKeyHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetUserDelegationKeyExceptionHeaders = {\n    serializedName: \"Service_getUserDelegationKeyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetUserDelegationKeyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetAccountInfoHeaders = {\n    serializedName: \"Service_getAccountInfoHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetAccountInfoHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            skuName: {\n                serializedName: \"x-ms-sku-name\",\n                xmlName: \"x-ms-sku-name\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Standard_LRS\",\n                        \"Standard_GRS\",\n                        \"Standard_RAGRS\",\n                        \"Standard_ZRS\",\n                        \"Premium_LRS\",\n                    ],\n                },\n            },\n            accountKind: {\n                serializedName: \"x-ms-account-kind\",\n                xmlName: \"x-ms-account-kind\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Storage\",\n                        \"BlobStorage\",\n                        \"StorageV2\",\n                        \"FileStorage\",\n                        \"BlockBlobStorage\",\n                    ],\n                },\n            },\n            isHierarchicalNamespaceEnabled: {\n                serializedName: \"x-ms-is-hns-enabled\",\n                xmlName: \"x-ms-is-hns-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetAccountInfoExceptionHeaders = {\n    serializedName: \"Service_getAccountInfoExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetAccountInfoExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceSubmitBatchHeaders = {\n    serializedName: \"Service_submitBatchHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSubmitBatchHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceSubmitBatchExceptionHeaders = {\n    serializedName: \"Service_submitBatchExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSubmitBatchExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceFilterBlobsHeaders = {\n    serializedName: \"Service_filterBlobsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceFilterBlobsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceFilterBlobsExceptionHeaders = {\n    serializedName: \"Service_filterBlobsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceFilterBlobsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerCreateHeaders = {\n    serializedName: \"Container_createHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerCreateHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerCreateExceptionHeaders = {\n    serializedName: \"Container_createExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerCreateExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerGetPropertiesHeaders = {\n    serializedName: \"Container_getPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetPropertiesHeaders\",\n        modelProperties: {\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobPublicAccess: {\n                serializedName: \"x-ms-blob-public-access\",\n                xmlName: \"x-ms-blob-public-access\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"container\", \"blob\"],\n                },\n            },\n            hasImmutabilityPolicy: {\n                serializedName: \"x-ms-has-immutability-policy\",\n                xmlName: \"x-ms-has-immutability-policy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            hasLegalHold: {\n                serializedName: \"x-ms-has-legal-hold\",\n                xmlName: \"x-ms-has-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            defaultEncryptionScope: {\n                serializedName: \"x-ms-default-encryption-scope\",\n                xmlName: \"x-ms-default-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            denyEncryptionScopeOverride: {\n                serializedName: \"x-ms-deny-encryption-scope-override\",\n                xmlName: \"x-ms-deny-encryption-scope-override\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            isImmutableStorageWithVersioningEnabled: {\n                serializedName: \"x-ms-immutable-storage-with-versioning-enabled\",\n                xmlName: \"x-ms-immutable-storage-with-versioning-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerGetPropertiesExceptionHeaders = {\n    serializedName: \"Container_getPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerDeleteHeaders = {\n    serializedName: \"Container_deleteHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerDeleteHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerDeleteExceptionHeaders = {\n    serializedName: \"Container_deleteExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerDeleteExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSetMetadataHeaders = {\n    serializedName: \"Container_setMetadataHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetMetadataHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSetMetadataExceptionHeaders = {\n    serializedName: \"Container_setMetadataExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetMetadataExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerGetAccessPolicyHeaders = {\n    serializedName: \"Container_getAccessPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccessPolicyHeaders\",\n        modelProperties: {\n            blobPublicAccess: {\n                serializedName: \"x-ms-blob-public-access\",\n                xmlName: \"x-ms-blob-public-access\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"container\", \"blob\"],\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerGetAccessPolicyExceptionHeaders = {\n    serializedName: \"Container_getAccessPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccessPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSetAccessPolicyHeaders = {\n    serializedName: \"Container_setAccessPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetAccessPolicyHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSetAccessPolicyExceptionHeaders = {\n    serializedName: \"Container_setAccessPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetAccessPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRestoreHeaders = {\n    serializedName: \"Container_restoreHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRestoreHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRestoreExceptionHeaders = {\n    serializedName: \"Container_restoreExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRestoreExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRenameHeaders = {\n    serializedName: \"Container_renameHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenameHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRenameExceptionHeaders = {\n    serializedName: \"Container_renameExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenameExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSubmitBatchHeaders = {\n    serializedName: \"Container_submitBatchHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSubmitBatchHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSubmitBatchExceptionHeaders = {\n    serializedName: \"Container_submitBatchExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSubmitBatchExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerFilterBlobsHeaders = {\n    serializedName: \"Container_filterBlobsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerFilterBlobsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerFilterBlobsExceptionHeaders = {\n    serializedName: \"Container_filterBlobsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerFilterBlobsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerAcquireLeaseHeaders = {\n    serializedName: \"Container_acquireLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerAcquireLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerAcquireLeaseExceptionHeaders = {\n    serializedName: \"Container_acquireLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerAcquireLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerReleaseLeaseHeaders = {\n    serializedName: \"Container_releaseLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerReleaseLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerReleaseLeaseExceptionHeaders = {\n    serializedName: \"Container_releaseLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerReleaseLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRenewLeaseHeaders = {\n    serializedName: \"Container_renewLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenewLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRenewLeaseExceptionHeaders = {\n    serializedName: \"Container_renewLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenewLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerBreakLeaseHeaders = {\n    serializedName: \"Container_breakLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerBreakLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseTime: {\n                serializedName: \"x-ms-lease-time\",\n                xmlName: \"x-ms-lease-time\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerBreakLeaseExceptionHeaders = {\n    serializedName: \"Container_breakLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerBreakLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerChangeLeaseHeaders = {\n    serializedName: \"Container_changeLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerChangeLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerChangeLeaseExceptionHeaders = {\n    serializedName: \"Container_changeLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerChangeLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerListBlobFlatSegmentHeaders = {\n    serializedName: \"Container_listBlobFlatSegmentHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobFlatSegmentHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerListBlobFlatSegmentExceptionHeaders = {\n    serializedName: \"Container_listBlobFlatSegmentExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobFlatSegmentExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerListBlobHierarchySegmentHeaders = {\n    serializedName: \"Container_listBlobHierarchySegmentHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobHierarchySegmentHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerListBlobHierarchySegmentExceptionHeaders = {\n    serializedName: \"Container_listBlobHierarchySegmentExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobHierarchySegmentExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerGetAccountInfoHeaders = {\n    serializedName: \"Container_getAccountInfoHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccountInfoHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            skuName: {\n                serializedName: \"x-ms-sku-name\",\n                xmlName: \"x-ms-sku-name\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Standard_LRS\",\n                        \"Standard_GRS\",\n                        \"Standard_RAGRS\",\n                        \"Standard_ZRS\",\n                        \"Premium_LRS\",\n                    ],\n                },\n            },\n            accountKind: {\n                serializedName: \"x-ms-account-kind\",\n                xmlName: \"x-ms-account-kind\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Storage\",\n                        \"BlobStorage\",\n                        \"StorageV2\",\n                        \"FileStorage\",\n                        \"BlockBlobStorage\",\n                    ],\n                },\n            },\n        },\n    },\n};\nconst ContainerGetAccountInfoExceptionHeaders = {\n    serializedName: \"Container_getAccountInfoExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccountInfoExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobDownloadHeaders = {\n    serializedName: \"Blob_downloadHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDownloadHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            createdOn: {\n                serializedName: \"x-ms-creation-time\",\n                xmlName: \"x-ms-creation-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            objectReplicationPolicyId: {\n                serializedName: \"x-ms-or-policy-id\",\n                xmlName: \"x-ms-or-policy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            objectReplicationRules: {\n                serializedName: \"x-ms-or\",\n                headerCollectionPrefix: \"x-ms-or-\",\n                xmlName: \"x-ms-or\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            contentLength: {\n                serializedName: \"content-length\",\n                xmlName: \"content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentRange: {\n                serializedName: \"content-range\",\n                xmlName: \"content-range\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"content-encoding\",\n                xmlName: \"content-encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"cache-control\",\n                xmlName: \"cache-control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"content-disposition\",\n                xmlName: \"content-disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"content-language\",\n                xmlName: \"content-language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            blobType: {\n                serializedName: \"x-ms-blob-type\",\n                xmlName: \"x-ms-blob-type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            copyCompletedOn: {\n                serializedName: \"x-ms-copy-completion-time\",\n                xmlName: \"x-ms-copy-completion-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"x-ms-copy-status-description\",\n                xmlName: \"x-ms-copy-status-description\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"x-ms-copy-progress\",\n                xmlName: \"x-ms-copy-progress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copySource: {\n                serializedName: \"x-ms-copy-source\",\n                xmlName: \"x-ms-copy-source\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isCurrentVersion: {\n                serializedName: \"x-ms-is-current-version\",\n                xmlName: \"x-ms-is-current-version\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            acceptRanges: {\n                serializedName: \"accept-ranges\",\n                xmlName: \"accept-ranges\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-server-encrypted\",\n                xmlName: \"x-ms-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentMD5: {\n                serializedName: \"x-ms-blob-content-md5\",\n                xmlName: \"x-ms-blob-content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            tagCount: {\n                serializedName: \"x-ms-tag-count\",\n                xmlName: \"x-ms-tag-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isSealed: {\n                serializedName: \"x-ms-blob-sealed\",\n                xmlName: \"x-ms-blob-sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            lastAccessed: {\n                serializedName: \"x-ms-last-access-time\",\n                xmlName: \"x-ms-last-access-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiresOn: {\n                serializedName: \"x-ms-immutability-policy-until-date\",\n                xmlName: \"x-ms-immutability-policy-until-date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"x-ms-immutability-policy-mode\",\n                xmlName: \"x-ms-immutability-policy-mode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n            legalHold: {\n                serializedName: \"x-ms-legal-hold\",\n                xmlName: \"x-ms-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n        },\n    },\n};\nconst BlobDownloadExceptionHeaders = {\n    serializedName: \"Blob_downloadExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDownloadExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobGetPropertiesHeaders = {\n    serializedName: \"Blob_getPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetPropertiesHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            createdOn: {\n                serializedName: \"x-ms-creation-time\",\n                xmlName: \"x-ms-creation-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            objectReplicationPolicyId: {\n                serializedName: \"x-ms-or-policy-id\",\n                xmlName: \"x-ms-or-policy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            objectReplicationRules: {\n                serializedName: \"x-ms-or\",\n                headerCollectionPrefix: \"x-ms-or-\",\n                xmlName: \"x-ms-or\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            blobType: {\n                serializedName: \"x-ms-blob-type\",\n                xmlName: \"x-ms-blob-type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            copyCompletedOn: {\n                serializedName: \"x-ms-copy-completion-time\",\n                xmlName: \"x-ms-copy-completion-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"x-ms-copy-status-description\",\n                xmlName: \"x-ms-copy-status-description\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"x-ms-copy-progress\",\n                xmlName: \"x-ms-copy-progress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copySource: {\n                serializedName: \"x-ms-copy-source\",\n                xmlName: \"x-ms-copy-source\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            isIncrementalCopy: {\n                serializedName: \"x-ms-incremental-copy\",\n                xmlName: \"x-ms-incremental-copy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            destinationSnapshot: {\n                serializedName: \"x-ms-copy-destination-snapshot\",\n                xmlName: \"x-ms-copy-destination-snapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            contentLength: {\n                serializedName: \"content-length\",\n                xmlName: \"content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"content-encoding\",\n                xmlName: \"content-encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"content-disposition\",\n                xmlName: \"content-disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"content-language\",\n                xmlName: \"content-language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"cache-control\",\n                xmlName: \"cache-control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            acceptRanges: {\n                serializedName: \"accept-ranges\",\n                xmlName: \"accept-ranges\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-server-encrypted\",\n                xmlName: \"x-ms-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTier: {\n                serializedName: \"x-ms-access-tier\",\n                xmlName: \"x-ms-access-tier\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTierInferred: {\n                serializedName: \"x-ms-access-tier-inferred\",\n                xmlName: \"x-ms-access-tier-inferred\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            archiveStatus: {\n                serializedName: \"x-ms-archive-status\",\n                xmlName: \"x-ms-archive-status\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTierChangedOn: {\n                serializedName: \"x-ms-access-tier-change-time\",\n                xmlName: \"x-ms-access-tier-change-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isCurrentVersion: {\n                serializedName: \"x-ms-is-current-version\",\n                xmlName: \"x-ms-is-current-version\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            tagCount: {\n                serializedName: \"x-ms-tag-count\",\n                xmlName: \"x-ms-tag-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"x-ms-expiry-time\",\n                xmlName: \"x-ms-expiry-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isSealed: {\n                serializedName: \"x-ms-blob-sealed\",\n                xmlName: \"x-ms-blob-sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            rehydratePriority: {\n                serializedName: \"x-ms-rehydrate-priority\",\n                xmlName: \"x-ms-rehydrate-priority\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"High\", \"Standard\"],\n                },\n            },\n            lastAccessed: {\n                serializedName: \"x-ms-last-access-time\",\n                xmlName: \"x-ms-last-access-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiresOn: {\n                serializedName: \"x-ms-immutability-policy-until-date\",\n                xmlName: \"x-ms-immutability-policy-until-date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"x-ms-immutability-policy-mode\",\n                xmlName: \"x-ms-immutability-policy-mode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n            legalHold: {\n                serializedName: \"x-ms-legal-hold\",\n                xmlName: \"x-ms-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobGetPropertiesExceptionHeaders = {\n    serializedName: \"Blob_getPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobDeleteHeaders = {\n    serializedName: \"Blob_deleteHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobDeleteExceptionHeaders = {\n    serializedName: \"Blob_deleteExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobUndeleteHeaders = {\n    serializedName: \"Blob_undeleteHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobUndeleteHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobUndeleteExceptionHeaders = {\n    serializedName: \"Blob_undeleteExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobUndeleteExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetExpiryHeaders = {\n    serializedName: \"Blob_setExpiryHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetExpiryHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetExpiryExceptionHeaders = {\n    serializedName: \"Blob_setExpiryExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetExpiryExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetHttpHeadersHeaders = {\n    serializedName: \"Blob_setHttpHeadersHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetHttpHeadersHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetHttpHeadersExceptionHeaders = {\n    serializedName: \"Blob_setHttpHeadersExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetHttpHeadersExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetImmutabilityPolicyHeaders = {\n    serializedName: \"Blob_setImmutabilityPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetImmutabilityPolicyHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiry: {\n                serializedName: \"x-ms-immutability-policy-until-date\",\n                xmlName: \"x-ms-immutability-policy-until-date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"x-ms-immutability-policy-mode\",\n                xmlName: \"x-ms-immutability-policy-mode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n        },\n    },\n};\nconst BlobSetImmutabilityPolicyExceptionHeaders = {\n    serializedName: \"Blob_setImmutabilityPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetImmutabilityPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobDeleteImmutabilityPolicyHeaders = {\n    serializedName: \"Blob_deleteImmutabilityPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteImmutabilityPolicyHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobDeleteImmutabilityPolicyExceptionHeaders = {\n    serializedName: \"Blob_deleteImmutabilityPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteImmutabilityPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetLegalHoldHeaders = {\n    serializedName: \"Blob_setLegalHoldHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetLegalHoldHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            legalHold: {\n                serializedName: \"x-ms-legal-hold\",\n                xmlName: \"x-ms-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetLegalHoldExceptionHeaders = {\n    serializedName: \"Blob_setLegalHoldExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetLegalHoldExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetMetadataHeaders = {\n    serializedName: \"Blob_setMetadataHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetMetadataHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetMetadataExceptionHeaders = {\n    serializedName: \"Blob_setMetadataExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetMetadataExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobAcquireLeaseHeaders = {\n    serializedName: \"Blob_acquireLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAcquireLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobAcquireLeaseExceptionHeaders = {\n    serializedName: \"Blob_acquireLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAcquireLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobReleaseLeaseHeaders = {\n    serializedName: \"Blob_releaseLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobReleaseLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobReleaseLeaseExceptionHeaders = {\n    serializedName: \"Blob_releaseLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobReleaseLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobRenewLeaseHeaders = {\n    serializedName: \"Blob_renewLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobRenewLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobRenewLeaseExceptionHeaders = {\n    serializedName: \"Blob_renewLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobRenewLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobChangeLeaseHeaders = {\n    serializedName: \"Blob_changeLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobChangeLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobChangeLeaseExceptionHeaders = {\n    serializedName: \"Blob_changeLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobChangeLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobBreakLeaseHeaders = {\n    serializedName: \"Blob_breakLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobBreakLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseTime: {\n                serializedName: \"x-ms-lease-time\",\n                xmlName: \"x-ms-lease-time\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobBreakLeaseExceptionHeaders = {\n    serializedName: \"Blob_breakLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobBreakLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobCreateSnapshotHeaders = {\n    serializedName: \"Blob_createSnapshotHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCreateSnapshotHeaders\",\n        modelProperties: {\n            snapshot: {\n                serializedName: \"x-ms-snapshot\",\n                xmlName: \"x-ms-snapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobCreateSnapshotExceptionHeaders = {\n    serializedName: \"Blob_createSnapshotExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCreateSnapshotExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobStartCopyFromURLHeaders = {\n    serializedName: \"Blob_startCopyFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobStartCopyFromURLHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobStartCopyFromURLExceptionHeaders = {\n    serializedName: \"Blob_startCopyFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobStartCopyFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobCopyFromURLHeaders = {\n    serializedName: \"Blob_copyFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCopyFromURLHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                defaultValue: \"success\",\n                isConstant: true,\n                serializedName: \"x-ms-copy-status\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobCopyFromURLExceptionHeaders = {\n    serializedName: \"Blob_copyFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCopyFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobAbortCopyFromURLHeaders = {\n    serializedName: \"Blob_abortCopyFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAbortCopyFromURLHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobAbortCopyFromURLExceptionHeaders = {\n    serializedName: \"Blob_abortCopyFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAbortCopyFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetTierHeaders = {\n    serializedName: \"Blob_setTierHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTierHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetTierExceptionHeaders = {\n    serializedName: \"Blob_setTierExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTierExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobGetAccountInfoHeaders = {\n    serializedName: \"Blob_getAccountInfoHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetAccountInfoHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            skuName: {\n                serializedName: \"x-ms-sku-name\",\n                xmlName: \"x-ms-sku-name\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Standard_LRS\",\n                        \"Standard_GRS\",\n                        \"Standard_RAGRS\",\n                        \"Standard_ZRS\",\n                        \"Premium_LRS\",\n                    ],\n                },\n            },\n            accountKind: {\n                serializedName: \"x-ms-account-kind\",\n                xmlName: \"x-ms-account-kind\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Storage\",\n                        \"BlobStorage\",\n                        \"StorageV2\",\n                        \"FileStorage\",\n                        \"BlockBlobStorage\",\n                    ],\n                },\n            },\n        },\n    },\n};\nconst BlobGetAccountInfoExceptionHeaders = {\n    serializedName: \"Blob_getAccountInfoExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetAccountInfoExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobQueryHeaders = {\n    serializedName: \"Blob_queryHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobQueryHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            contentLength: {\n                serializedName: \"content-length\",\n                xmlName: \"content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentRange: {\n                serializedName: \"content-range\",\n                xmlName: \"content-range\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"content-encoding\",\n                xmlName: \"content-encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"cache-control\",\n                xmlName: \"cache-control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"content-disposition\",\n                xmlName: \"content-disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"content-language\",\n                xmlName: \"content-language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            blobType: {\n                serializedName: \"x-ms-blob-type\",\n                xmlName: \"x-ms-blob-type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            copyCompletionTime: {\n                serializedName: \"x-ms-copy-completion-time\",\n                xmlName: \"x-ms-copy-completion-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"x-ms-copy-status-description\",\n                xmlName: \"x-ms-copy-status-description\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"x-ms-copy-progress\",\n                xmlName: \"x-ms-copy-progress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copySource: {\n                serializedName: \"x-ms-copy-source\",\n                xmlName: \"x-ms-copy-source\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            acceptRanges: {\n                serializedName: \"accept-ranges\",\n                xmlName: \"accept-ranges\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-server-encrypted\",\n                xmlName: \"x-ms-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentMD5: {\n                serializedName: \"x-ms-blob-content-md5\",\n                xmlName: \"x-ms-blob-content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n        },\n    },\n};\nconst BlobQueryExceptionHeaders = {\n    serializedName: \"Blob_queryExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobQueryExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobGetTagsHeaders = {\n    serializedName: \"Blob_getTagsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetTagsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobGetTagsExceptionHeaders = {\n    serializedName: \"Blob_getTagsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetTagsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetTagsHeaders = {\n    serializedName: \"Blob_setTagsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTagsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetTagsExceptionHeaders = {\n    serializedName: \"Blob_setTagsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTagsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobCreateHeaders = {\n    serializedName: \"PageBlob_createHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCreateHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobCreateExceptionHeaders = {\n    serializedName: \"PageBlob_createExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCreateExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUploadPagesHeaders = {\n    serializedName: \"PageBlob_uploadPagesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUploadPagesExceptionHeaders = {\n    serializedName: \"PageBlob_uploadPagesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobClearPagesHeaders = {\n    serializedName: \"PageBlob_clearPagesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobClearPagesHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobClearPagesExceptionHeaders = {\n    serializedName: \"PageBlob_clearPagesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobClearPagesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUploadPagesFromURLHeaders = {\n    serializedName: \"PageBlob_uploadPagesFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesFromURLHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUploadPagesFromURLExceptionHeaders = {\n    serializedName: \"PageBlob_uploadPagesFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobGetPageRangesHeaders = {\n    serializedName: \"PageBlob_getPageRangesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentLength: {\n                serializedName: \"x-ms-blob-content-length\",\n                xmlName: \"x-ms-blob-content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobGetPageRangesExceptionHeaders = {\n    serializedName: \"PageBlob_getPageRangesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobGetPageRangesDiffHeaders = {\n    serializedName: \"PageBlob_getPageRangesDiffHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesDiffHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentLength: {\n                serializedName: \"x-ms-blob-content-length\",\n                xmlName: \"x-ms-blob-content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobGetPageRangesDiffExceptionHeaders = {\n    serializedName: \"PageBlob_getPageRangesDiffExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesDiffExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobResizeHeaders = {\n    serializedName: \"PageBlob_resizeHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobResizeHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobResizeExceptionHeaders = {\n    serializedName: \"PageBlob_resizeExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobResizeExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUpdateSequenceNumberHeaders = {\n    serializedName: \"PageBlob_updateSequenceNumberHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUpdateSequenceNumberHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUpdateSequenceNumberExceptionHeaders = {\n    serializedName: \"PageBlob_updateSequenceNumberExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUpdateSequenceNumberExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobCopyIncrementalHeaders = {\n    serializedName: \"PageBlob_copyIncrementalHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCopyIncrementalHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobCopyIncrementalExceptionHeaders = {\n    serializedName: \"PageBlob_copyIncrementalExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCopyIncrementalExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobCreateHeaders = {\n    serializedName: \"AppendBlob_createHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobCreateHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobCreateExceptionHeaders = {\n    serializedName: \"AppendBlob_createExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobCreateExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobAppendBlockHeaders = {\n    serializedName: \"AppendBlob_appendBlockHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobAppendOffset: {\n                serializedName: \"x-ms-blob-append-offset\",\n                xmlName: \"x-ms-blob-append-offset\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobAppendBlockExceptionHeaders = {\n    serializedName: \"AppendBlob_appendBlockExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobAppendBlockFromUrlHeaders = {\n    serializedName: \"AppendBlob_appendBlockFromUrlHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockFromUrlHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobAppendOffset: {\n                serializedName: \"x-ms-blob-append-offset\",\n                xmlName: \"x-ms-blob-append-offset\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobAppendBlockFromUrlExceptionHeaders = {\n    serializedName: \"AppendBlob_appendBlockFromUrlExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockFromUrlExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobSealHeaders = {\n    serializedName: \"AppendBlob_sealHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobSealHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isSealed: {\n                serializedName: \"x-ms-blob-sealed\",\n                xmlName: \"x-ms-blob-sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobSealExceptionHeaders = {\n    serializedName: \"AppendBlob_sealExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobSealExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobUploadHeaders = {\n    serializedName: \"BlockBlob_uploadHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobUploadHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobUploadExceptionHeaders = {\n    serializedName: \"BlockBlob_uploadExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobUploadExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobPutBlobFromUrlHeaders = {\n    serializedName: \"BlockBlob_putBlobFromUrlHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobPutBlobFromUrlHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobPutBlobFromUrlExceptionHeaders = {\n    serializedName: \"BlockBlob_putBlobFromUrlExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobPutBlobFromUrlExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobStageBlockHeaders = {\n    serializedName: \"BlockBlob_stageBlockHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockHeaders\",\n        modelProperties: {\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobStageBlockExceptionHeaders = {\n    serializedName: \"BlockBlob_stageBlockExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobStageBlockFromURLHeaders = {\n    serializedName: \"BlockBlob_stageBlockFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockFromURLHeaders\",\n        modelProperties: {\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobStageBlockFromURLExceptionHeaders = {\n    serializedName: \"BlockBlob_stageBlockFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobCommitBlockListHeaders = {\n    serializedName: \"BlockBlob_commitBlockListHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobCommitBlockListHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobCommitBlockListExceptionHeaders = {\n    serializedName: \"BlockBlob_commitBlockListExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobCommitBlockListExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobGetBlockListHeaders = {\n    serializedName: \"BlockBlob_getBlockListHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobGetBlockListHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentLength: {\n                serializedName: \"x-ms-blob-content-length\",\n                xmlName: \"x-ms-blob-content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobGetBlockListExceptionHeaders = {\n    serializedName: \"BlockBlob_getBlockListExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobGetBlockListExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\n//# sourceMappingURL=mappers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2dlbmVyYXRlZC9zcmMvbW9kZWxzL21hcHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVEsa0JBQWtCO0FBQ3ZELGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsUUFBUSxrQkFBa0I7QUFDdkQsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsUUFBUSxrQkFBa0I7QUFDdkQsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVEsZUFBZTtBQUNwRCxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVEsa0JBQWtCO0FBQ3ZELGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVEsa0JBQWtCO0FBQ3ZELGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVEsa0JBQWtCO0FBQ3ZELGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsUUFBUSxrQkFBa0I7QUFDdkQsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsUUFBUSxrQkFBa0I7QUFDdkQsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVEsa0JBQWtCO0FBQ3ZELGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9nZW5lcmF0ZWQvc3JjL21vZGVscy9tYXBwZXJzLmpzPzBmYWEiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICpcbiAqIENvZGUgZ2VuZXJhdGVkIGJ5IE1pY3Jvc29mdCAoUikgQXV0b1Jlc3QgQ29kZSBHZW5lcmF0b3IuXG4gKiBDaGFuZ2VzIG1heSBjYXVzZSBpbmNvcnJlY3QgYmVoYXZpb3IgYW5kIHdpbGwgYmUgbG9zdCBpZiB0aGUgY29kZSBpcyByZWdlbmVyYXRlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IEJsb2JTZXJ2aWNlUHJvcGVydGllcyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iU2VydmljZVByb3BlcnRpZXNcIixcbiAgICB4bWxOYW1lOiBcIlN0b3JhZ2VTZXJ2aWNlUHJvcGVydGllc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2JTZXJ2aWNlUHJvcGVydGllc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGJsb2JBbmFseXRpY3NMb2dnaW5nOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiTG9nZ2luZ1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiTG9nZ2luZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkxvZ2dpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhvdXJNZXRyaWNzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiSG91ck1ldHJpY3NcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkhvdXJNZXRyaWNzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiTWV0cmljc1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWludXRlTWV0cmljczoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIk1pbnV0ZU1ldHJpY3NcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIk1pbnV0ZU1ldHJpY3NcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJNZXRyaWNzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb3JzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiQ29yc1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiQ29yc1wiLFxuICAgICAgICAgICAgICAgIHhtbElzV3JhcHBlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxFbGVtZW50TmFtZTogXCJDb3JzUnVsZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTZXF1ZW5jZVwiLFxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiQ29yc1J1bGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWZhdWx0U2VydmljZVZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJEZWZhdWx0U2VydmljZVZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkRlZmF1bHRTZXJ2aWNlVmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlbGV0ZVJldGVudGlvblBvbGljeToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkRlbGV0ZVJldGVudGlvblBvbGljeVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiRGVsZXRlUmV0ZW50aW9uUG9saWN5XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiUmV0ZW50aW9uUG9saWN5XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGF0aWNXZWJzaXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiU3RhdGljV2Vic2l0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiU3RhdGljV2Vic2l0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIlN0YXRpY1dlYnNpdGVcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBMb2dnaW5nID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkxvZ2dpbmdcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJMb2dnaW5nXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIlZlcnNpb25cIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWxldGVQcm9wZXJ0eToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkRlbGV0ZVwiLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiRGVsZXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlYWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJSZWFkXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJSZWFkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHdyaXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiV3JpdGVcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIldyaXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldGVudGlvblBvbGljeToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIlJldGVudGlvblBvbGljeVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiUmV0ZW50aW9uUG9saWN5XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiUmV0ZW50aW9uUG9saWN5XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgUmV0ZW50aW9uUG9saWN5ID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIlJldGVudGlvblBvbGljeVwiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIlJldGVudGlvblBvbGljeVwiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJFbmFibGVkXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJFbmFibGVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRheXM6IHtcbiAgICAgICAgICAgICAgICBjb25zdHJhaW50czoge1xuICAgICAgICAgICAgICAgICAgICBJbmNsdXNpdmVNaW5pbXVtOiAxLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiRGF5c1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiRGF5c1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOdW1iZXJcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBNZXRyaWNzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIk1ldHJpY3NcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJNZXRyaWNzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIlZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmFibGVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiRW5hYmxlZFwiLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiRW5hYmxlZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNsdWRlQVBJczoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkluY2x1ZGVBUElzXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJJbmNsdWRlQVBJc1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXRlbnRpb25Qb2xpY3k6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJSZXRlbnRpb25Qb2xpY3lcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlJldGVudGlvblBvbGljeVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIlJldGVudGlvblBvbGljeVwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IENvcnNSdWxlID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkNvcnNSdWxlXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQ29yc1J1bGVcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBhbGxvd2VkT3JpZ2luczoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkFsbG93ZWRPcmlnaW5zXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJBbGxvd2VkT3JpZ2luc1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFsbG93ZWRNZXRob2RzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiQWxsb3dlZE1ldGhvZHNcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkFsbG93ZWRNZXRob2RzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWxsb3dlZEhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJBbGxvd2VkSGVhZGVyc1wiLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiQWxsb3dlZEhlYWRlcnNcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBleHBvc2VkSGVhZGVyczoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkV4cG9zZWRIZWFkZXJzXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJFeHBvc2VkSGVhZGVyc1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1heEFnZUluU2Vjb25kczoge1xuICAgICAgICAgICAgICAgIGNvbnN0cmFpbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgIEluY2x1c2l2ZU1pbmltdW06IDAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJNYXhBZ2VJblNlY29uZHNcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIk1heEFnZUluU2Vjb25kc1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOdW1iZXJcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBTdGF0aWNXZWJzaXRlID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIlN0YXRpY1dlYnNpdGVcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJTdGF0aWNXZWJzaXRlXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZW5hYmxlZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkVuYWJsZWRcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkVuYWJsZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5kZXhEb2N1bWVudDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkluZGV4RG9jdW1lbnRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkluZGV4RG9jdW1lbnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckRvY3VtZW50NDA0UGF0aDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkVycm9yRG9jdW1lbnQ0MDRQYXRoXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJFcnJvckRvY3VtZW50NDA0UGF0aFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlZmF1bHRJbmRleERvY3VtZW50UGF0aDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkRlZmF1bHRJbmRleERvY3VtZW50UGF0aFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiRGVmYXVsdEluZGV4RG9jdW1lbnRQYXRoXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFN0b3JhZ2VFcnJvciA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJTdG9yYWdlRXJyb3JcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJTdG9yYWdlRXJyb3JcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBtZXNzYWdlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiTWVzc2FnZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiTWVzc2FnZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJDb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJDb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JTZXJ2aWNlU3RhdGlzdGljcyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iU2VydmljZVN0YXRpc3RpY3NcIixcbiAgICB4bWxOYW1lOiBcIlN0b3JhZ2VTZXJ2aWNlU3RhdHNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iU2VydmljZVN0YXRpc3RpY3NcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBnZW9SZXBsaWNhdGlvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkdlb1JlcGxpY2F0aW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJHZW9SZXBsaWNhdGlvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkdlb1JlcGxpY2F0aW9uXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgR2VvUmVwbGljYXRpb24gPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiR2VvUmVwbGljYXRpb25cIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJHZW9SZXBsaWNhdGlvblwiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHN0YXR1czoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIlN0YXR1c1wiLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiU3RhdHVzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVudW1cIixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wibGl2ZVwiLCBcImJvb3RzdHJhcFwiLCBcInVuYXZhaWxhYmxlXCJdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFN5bmNPbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkxhc3RTeW5jVGltZVwiLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiTGFzdFN5bmNUaW1lXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IExpc3RDb250YWluZXJzU2VnbWVudFJlc3BvbnNlID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkxpc3RDb250YWluZXJzU2VnbWVudFJlc3BvbnNlXCIsXG4gICAgeG1sTmFtZTogXCJFbnVtZXJhdGlvblJlc3VsdHNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJMaXN0Q29udGFpbmVyc1NlZ21lbnRSZXNwb25zZVwiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHNlcnZpY2VFbmRwb2ludDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIlNlcnZpY2VFbmRwb2ludFwiLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiU2VydmljZUVuZHBvaW50XCIsXG4gICAgICAgICAgICAgICAgeG1sSXNBdHRyaWJ1dGU6IHRydWUsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJlZml4OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiUHJlZml4XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJQcmVmaXhcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJNYXJrZXJcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIk1hcmtlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1heFBhZ2VTaXplOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiTWF4UmVzdWx0c1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiTWF4UmVzdWx0c1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOdW1iZXJcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRhaW5lckl0ZW1zOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiQ29udGFpbmVySXRlbXNcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkNvbnRhaW5lcnNcIixcbiAgICAgICAgICAgICAgICB4bWxJc1dyYXBwZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sRWxlbWVudE5hbWU6IFwiQ29udGFpbmVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlNlcXVlbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJDb250YWluZXJJdGVtXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGludWF0aW9uVG9rZW46IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJOZXh0TWFya2VyXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJOZXh0TWFya2VyXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IENvbnRhaW5lckl0ZW0gPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQ29udGFpbmVySXRlbVwiLFxuICAgIHhtbE5hbWU6IFwiQ29udGFpbmVyXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQ29udGFpbmVySXRlbVwiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJOYW1lXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJOYW1lXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVsZXRlZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkRlbGV0ZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkRlbGV0ZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIlZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiUHJvcGVydGllc1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiUHJvcGVydGllc1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkNvbnRhaW5lclByb3BlcnRpZXNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiTWV0YWRhdGFcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIk1ldGFkYXRhXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRpY3Rpb25hcnlcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsgdHlwZTogeyBuYW1lOiBcIlN0cmluZ1wiIH0gfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBDb250YWluZXJQcm9wZXJ0aWVzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkNvbnRhaW5lclByb3BlcnRpZXNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJDb250YWluZXJQcm9wZXJ0aWVzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiTGFzdC1Nb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiTGFzdC1Nb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV0YWc6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJFdGFnXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJFdGFnXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhc2VTdGF0dXM6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJMZWFzZVN0YXR1c1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiTGVhc2VTdGF0dXNcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJsb2NrZWRcIiwgXCJ1bmxvY2tlZFwiXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlYXNlU3RhdGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJMZWFzZVN0YXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJMZWFzZVN0YXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVudW1cIixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJhdmFpbGFibGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGVhc2VkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImV4cGlyZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYnJlYWtpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYnJva2VuXCIsXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsZWFzZUR1cmF0aW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiTGVhc2VEdXJhdGlvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiTGVhc2VEdXJhdGlvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJFbnVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFtcImluZmluaXRlXCIsIFwiZml4ZWRcIl0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwdWJsaWNBY2Nlc3M6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJQdWJsaWNBY2Nlc3NcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlB1YmxpY0FjY2Vzc1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJFbnVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFtcImNvbnRhaW5lclwiLCBcImJsb2JcIl0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNJbW11dGFiaWxpdHlQb2xpY3k6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJIYXNJbW11dGFiaWxpdHlQb2xpY3lcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkhhc0ltbXV0YWJpbGl0eVBvbGljeVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNMZWdhbEhvbGQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJIYXNMZWdhbEhvbGRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkhhc0xlZ2FsSG9sZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWZhdWx0RW5jcnlwdGlvblNjb3BlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiRGVmYXVsdEVuY3J5cHRpb25TY29wZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiRGVmYXVsdEVuY3J5cHRpb25TY29wZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByZXZlbnRFbmNyeXB0aW9uU2NvcGVPdmVycmlkZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkRlbnlFbmNyeXB0aW9uU2NvcGVPdmVycmlkZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiRGVueUVuY3J5cHRpb25TY29wZU92ZXJyaWRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlbGV0ZWRPbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkRlbGV0ZWRUaW1lXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJEZWxldGVkVGltZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlbWFpbmluZ1JldGVudGlvbkRheXM6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJSZW1haW5pbmdSZXRlbnRpb25EYXlzXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJSZW1haW5pbmdSZXRlbnRpb25EYXlzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNJbW11dGFibGVTdG9yYWdlV2l0aFZlcnNpb25pbmdFbmFibGVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiSW1tdXRhYmxlU3RvcmFnZVdpdGhWZXJzaW9uaW5nRW5hYmxlZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiSW1tdXRhYmxlU3RvcmFnZVdpdGhWZXJzaW9uaW5nRW5hYmxlZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgS2V5SW5mbyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJLZXlJbmZvXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiS2V5SW5mb1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHN0YXJ0c09uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiU3RhcnRcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXhwaXJlc09uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiRXhwaXJ5XCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJFeHBpcnlcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgVXNlckRlbGVnYXRpb25LZXkgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiVXNlckRlbGVnYXRpb25LZXlcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJVc2VyRGVsZWdhdGlvbktleVwiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHNpZ25lZE9iamVjdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiU2lnbmVkT2lkXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJTaWduZWRPaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzaWduZWRUZW5hbnRJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIlNpZ25lZFRpZFwiLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiU2lnbmVkVGlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2lnbmVkU3RhcnRzT246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJTaWduZWRTdGFydFwiLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiU2lnbmVkU3RhcnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzaWduZWRFeHBpcmVzT246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJTaWduZWRFeHBpcnlcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlNpZ25lZEV4cGlyeVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNpZ25lZFNlcnZpY2U6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJTaWduZWRTZXJ2aWNlXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJTaWduZWRTZXJ2aWNlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2lnbmVkVmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIlNpZ25lZFZlcnNpb25cIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlNpZ25lZFZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIlZhbHVlXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJWYWx1ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBGaWx0ZXJCbG9iU2VnbWVudCA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJGaWx0ZXJCbG9iU2VnbWVudFwiLFxuICAgIHhtbE5hbWU6IFwiRW51bWVyYXRpb25SZXN1bHRzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiRmlsdGVyQmxvYlNlZ21lbnRcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBzZXJ2aWNlRW5kcG9pbnQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJTZXJ2aWNlRW5kcG9pbnRcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlNlcnZpY2VFbmRwb2ludFwiLFxuICAgICAgICAgICAgICAgIHhtbElzQXR0cmlidXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiV2hlcmVcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIldoZXJlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmxvYnM6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9ic1wiLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiQmxvYnNcIixcbiAgICAgICAgICAgICAgICB4bWxJc1dyYXBwZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sRWxlbWVudE5hbWU6IFwiQmxvYlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTZXF1ZW5jZVwiLFxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiRmlsdGVyQmxvYkl0ZW1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250aW51YXRpb25Ub2tlbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIk5leHRNYXJrZXJcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIk5leHRNYXJrZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgRmlsdGVyQmxvYkl0ZW0gPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiRmlsdGVyQmxvYkl0ZW1cIixcbiAgICB4bWxOYW1lOiBcIkJsb2JcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJGaWx0ZXJCbG9iSXRlbVwiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJOYW1lXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJOYW1lXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGFpbmVyTmFtZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkNvbnRhaW5lck5hbWVcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkNvbnRhaW5lck5hbWVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YWdzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiVGFnc1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiVGFnc1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2JUYWdzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvYlRhZ3MgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYlRhZ3NcIixcbiAgICB4bWxOYW1lOiBcIlRhZ3NcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iVGFnc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGJsb2JUYWdTZXQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iVGFnU2V0XCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJUYWdTZXRcIixcbiAgICAgICAgICAgICAgICB4bWxJc1dyYXBwZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sRWxlbWVudE5hbWU6IFwiVGFnXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlNlcXVlbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJCbG9iVGFnXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JUYWcgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYlRhZ1wiLFxuICAgIHhtbE5hbWU6IFwiVGFnXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYlRhZ1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGtleToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIktleVwiLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiS2V5XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJWYWx1ZVwiLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiVmFsdWVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgU2lnbmVkSWRlbnRpZmllciA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJTaWduZWRJZGVudGlmaWVyXCIsXG4gICAgeG1sTmFtZTogXCJTaWduZWRJZGVudGlmaWVyXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiU2lnbmVkSWRlbnRpZmllclwiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGlkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiSWRcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIklkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWNjZXNzUG9saWN5OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiQWNjZXNzUG9saWN5XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJBY2Nlc3NQb2xpY3lcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJBY2Nlc3NQb2xpY3lcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBBY2Nlc3NQb2xpY3kgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQWNjZXNzUG9saWN5XCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQWNjZXNzUG9saWN5XCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgc3RhcnRzT246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJTdGFydFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiU3RhcnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBleHBpcmVzT246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJFeHBpcnlcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkV4cGlyeVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBlcm1pc3Npb25zOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiUGVybWlzc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiUGVybWlzc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBMaXN0QmxvYnNGbGF0U2VnbWVudFJlc3BvbnNlID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkxpc3RCbG9ic0ZsYXRTZWdtZW50UmVzcG9uc2VcIixcbiAgICB4bWxOYW1lOiBcIkVudW1lcmF0aW9uUmVzdWx0c1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkxpc3RCbG9ic0ZsYXRTZWdtZW50UmVzcG9uc2VcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBzZXJ2aWNlRW5kcG9pbnQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJTZXJ2aWNlRW5kcG9pbnRcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlNlcnZpY2VFbmRwb2ludFwiLFxuICAgICAgICAgICAgICAgIHhtbElzQXR0cmlidXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRhaW5lck5hbWU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJDb250YWluZXJOYW1lXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJDb250YWluZXJOYW1lXCIsXG4gICAgICAgICAgICAgICAgeG1sSXNBdHRyaWJ1dGU6IHRydWUsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJlZml4OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiUHJlZml4XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJQcmVmaXhcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJNYXJrZXJcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIk1hcmtlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1heFBhZ2VTaXplOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiTWF4UmVzdWx0c1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiTWF4UmVzdWx0c1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOdW1iZXJcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlZ21lbnQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJTZWdtZW50XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJCbG9ic1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2JGbGF0TGlzdFNlZ21lbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRpbnVhdGlvblRva2VuOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiTmV4dE1hcmtlclwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiTmV4dE1hcmtlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9iRmxhdExpc3RTZWdtZW50ID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2JGbGF0TGlzdFNlZ21lbnRcIixcbiAgICB4bWxOYW1lOiBcIkJsb2JzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYkZsYXRMaXN0U2VnbWVudFwiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGJsb2JJdGVtczoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2JJdGVtc1wiLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiQmxvYkl0ZW1zXCIsXG4gICAgICAgICAgICAgICAgeG1sRWxlbWVudE5hbWU6IFwiQmxvYlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTZXF1ZW5jZVwiLFxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiQmxvYkl0ZW1JbnRlcm5hbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9iSXRlbUludGVybmFsID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2JJdGVtSW50ZXJuYWxcIixcbiAgICB4bWxOYW1lOiBcIkJsb2JcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iSXRlbUludGVybmFsXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIk5hbWVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIk5hbWVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJCbG9iTmFtZVwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVsZXRlZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkRlbGV0ZWRcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkRlbGV0ZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc25hcHNob3Q6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJTbmFwc2hvdFwiLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiU25hcHNob3RcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uSWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJWZXJzaW9uSWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlZlcnNpb25JZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzQ3VycmVudFZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJJc0N1cnJlbnRWZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJJc0N1cnJlbnRWZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJQcm9wZXJ0aWVzXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJQcm9wZXJ0aWVzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiQmxvYlByb3BlcnRpZXNJbnRlcm5hbFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJNZXRhZGF0YVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiTWV0YWRhdGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGljdGlvbmFyeVwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogeyB0eXBlOiB7IG5hbWU6IFwiU3RyaW5nXCIgfSB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmxvYlRhZ3M6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iVGFnc1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiVGFnc1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2JUYWdzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvYmplY3RSZXBsaWNhdGlvbk1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiT2JqZWN0UmVwbGljYXRpb25NZXRhZGF0YVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiT3JNZXRhZGF0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEaWN0aW9uYXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IHR5cGU6IHsgbmFtZTogXCJTdHJpbmdcIiB9IH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNWZXJzaW9uc09ubHk6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJIYXNWZXJzaW9uc09ubHlcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkhhc1ZlcnNpb25zT25seVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvYk5hbWUgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYk5hbWVcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iTmFtZVwiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVuY29kZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJFbmNvZGVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJFbmNvZGVkXCIsXG4gICAgICAgICAgICAgICAgeG1sSXNBdHRyaWJ1dGU6IHRydWUsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJjb250ZW50XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJjb250ZW50XCIsXG4gICAgICAgICAgICAgICAgeG1sSXNNc1RleHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JQcm9wZXJ0aWVzSW50ZXJuYWwgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYlByb3BlcnRpZXNJbnRlcm5hbFwiLFxuICAgIHhtbE5hbWU6IFwiUHJvcGVydGllc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2JQcm9wZXJ0aWVzSW50ZXJuYWxcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBjcmVhdGVkT246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJDcmVhdGlvbi1UaW1lXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJDcmVhdGlvbi1UaW1lXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiTGFzdC1Nb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiTGFzdC1Nb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV0YWc6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJFdGFnXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJFdGFnXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudExlbmd0aDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkNvbnRlbnQtTGVuZ3RoXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJDb250ZW50LUxlbmd0aFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOdW1iZXJcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiQ29udGVudC1UeXBlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJDb250ZW50LVR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50RW5jb2Rpbmc6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJDb250ZW50LUVuY29kaW5nXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJDb250ZW50LUVuY29kaW5nXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudExhbmd1YWdlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiQ29udGVudC1MYW5ndWFnZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiQ29udGVudC1MYW5ndWFnZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnRNRDU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJDb250ZW50LU1ENVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiQ29udGVudC1NRDVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQnl0ZUFycmF5XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50RGlzcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJDb250ZW50LURpc3Bvc2l0aW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJDb250ZW50LURpc3Bvc2l0aW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2FjaGVDb250cm9sOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiQ2FjaGUtQ29udHJvbFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiQ2FjaGUtQ29udHJvbFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsb2JTZXF1ZW5jZU51bWJlcjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtYmxvYi1zZXF1ZW5jZS1udW1iZXJcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtYmxvYi1zZXF1ZW5jZS1udW1iZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibG9iVHlwZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2JUeXBlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJCbG9iVHlwZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJFbnVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFtcIkJsb2NrQmxvYlwiLCBcIlBhZ2VCbG9iXCIsIFwiQXBwZW5kQmxvYlwiXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlYXNlU3RhdHVzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiTGVhc2VTdGF0dXNcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkxlYXNlU3RhdHVzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVudW1cIixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wibG9ja2VkXCIsIFwidW5sb2NrZWRcIl0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsZWFzZVN0YXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiTGVhc2VTdGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiTGVhc2VTdGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJFbnVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYXZhaWxhYmxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImxlYXNlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJleHBpcmVkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJyZWFraW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJyb2tlblwiLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhc2VEdXJhdGlvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkxlYXNlRHVyYXRpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkxlYXNlRHVyYXRpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJpbmZpbml0ZVwiLCBcImZpeGVkXCJdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29weUlkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiQ29weUlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJDb3B5SWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb3B5U3RhdHVzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiQ29weVN0YXR1c1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiQ29weVN0YXR1c1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJFbnVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFtcInBlbmRpbmdcIiwgXCJzdWNjZXNzXCIsIFwiYWJvcnRlZFwiLCBcImZhaWxlZFwiXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvcHlTb3VyY2U6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJDb3B5U291cmNlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJDb3B5U291cmNlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29weVByb2dyZXNzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiQ29weVByb2dyZXNzXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJDb3B5UHJvZ3Jlc3NcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb3B5Q29tcGxldGVkT246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJDb3B5Q29tcGxldGlvblRpbWVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkNvcHlDb21wbGV0aW9uVGltZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvcHlTdGF0dXNEZXNjcmlwdGlvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkNvcHlTdGF0dXNEZXNjcmlwdGlvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiQ29weVN0YXR1c0Rlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2VydmVyRW5jcnlwdGVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiU2VydmVyRW5jcnlwdGVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJTZXJ2ZXJFbmNyeXB0ZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5jcmVtZW50YWxDb3B5OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiSW5jcmVtZW50YWxDb3B5XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJJbmNyZW1lbnRhbENvcHlcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzdGluYXRpb25TbmFwc2hvdDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkRlc3RpbmF0aW9uU25hcHNob3RcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkRlc3RpbmF0aW9uU25hcHNob3RcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWxldGVkT246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJEZWxldGVkVGltZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiRGVsZXRlZFRpbWVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW1haW5pbmdSZXRlbnRpb25EYXlzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiUmVtYWluaW5nUmV0ZW50aW9uRGF5c1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiUmVtYWluaW5nUmV0ZW50aW9uRGF5c1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOdW1iZXJcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFjY2Vzc1RpZXI6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJBY2Nlc3NUaWVyXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJBY2Nlc3NUaWVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVudW1cIixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJQNFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJQNlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJQMTBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUDE1XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlAyMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJQMzBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUDQwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlA1MFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJQNjBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUDcwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlA4MFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJIb3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29vbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBcmNoaXZlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkNvbGRcIixcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFjY2Vzc1RpZXJJbmZlcnJlZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkFjY2Vzc1RpZXJJbmZlcnJlZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiQWNjZXNzVGllckluZmVycmVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFyY2hpdmVTdGF0dXM6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJBcmNoaXZlU3RhdHVzXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJBcmNoaXZlU3RhdHVzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVudW1cIixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJyZWh5ZHJhdGUtcGVuZGluZy10by1ob3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicmVoeWRyYXRlLXBlbmRpbmctdG8tY29vbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJyZWh5ZHJhdGUtcGVuZGluZy10by1jb2xkXCIsXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjdXN0b21lclByb3ZpZGVkS2V5U2hhMjU2OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiQ3VzdG9tZXJQcm92aWRlZEtleVNoYTI1NlwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiQ3VzdG9tZXJQcm92aWRlZEtleVNoYTI1NlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVuY3J5cHRpb25TY29wZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkVuY3J5cHRpb25TY29wZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiRW5jcnlwdGlvblNjb3BlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWNjZXNzVGllckNoYW5nZWRPbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkFjY2Vzc1RpZXJDaGFuZ2VUaW1lXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJBY2Nlc3NUaWVyQ2hhbmdlVGltZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRhZ0NvdW50OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiVGFnQ291bnRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlRhZ0NvdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXhwaXJlc09uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiRXhwaXJ5LVRpbWVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkV4cGlyeS1UaW1lXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNTZWFsZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJTZWFsZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlNlYWxlZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWh5ZHJhdGVQcmlvcml0eToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIlJlaHlkcmF0ZVByaW9yaXR5XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJSZWh5ZHJhdGVQcmlvcml0eVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJFbnVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFtcIkhpZ2hcIiwgXCJTdGFuZGFyZFwiXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RBY2Nlc3NlZE9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiTGFzdEFjY2Vzc1RpbWVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkxhc3RBY2Nlc3NUaW1lXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW1tdXRhYmlsaXR5UG9saWN5RXhwaXJlc09uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiSW1tdXRhYmlsaXR5UG9saWN5VW50aWxEYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJJbW11dGFiaWxpdHlQb2xpY3lVbnRpbERhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbW11dGFiaWxpdHlQb2xpY3lNb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiSW1tdXRhYmlsaXR5UG9saWN5TW9kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiSW1tdXRhYmlsaXR5UG9saWN5TW9kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJFbnVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFtcIk11dGFibGVcIiwgXCJVbmxvY2tlZFwiLCBcIkxvY2tlZFwiXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlZ2FsSG9sZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkxlZ2FsSG9sZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiTGVnYWxIb2xkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBMaXN0QmxvYnNIaWVyYXJjaHlTZWdtZW50UmVzcG9uc2UgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiTGlzdEJsb2JzSGllcmFyY2h5U2VnbWVudFJlc3BvbnNlXCIsXG4gICAgeG1sTmFtZTogXCJFbnVtZXJhdGlvblJlc3VsdHNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJMaXN0QmxvYnNIaWVyYXJjaHlTZWdtZW50UmVzcG9uc2VcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBzZXJ2aWNlRW5kcG9pbnQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJTZXJ2aWNlRW5kcG9pbnRcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlNlcnZpY2VFbmRwb2ludFwiLFxuICAgICAgICAgICAgICAgIHhtbElzQXR0cmlidXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRhaW5lck5hbWU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJDb250YWluZXJOYW1lXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJDb250YWluZXJOYW1lXCIsXG4gICAgICAgICAgICAgICAgeG1sSXNBdHRyaWJ1dGU6IHRydWUsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJlZml4OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiUHJlZml4XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJQcmVmaXhcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJNYXJrZXJcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIk1hcmtlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1heFBhZ2VTaXplOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiTWF4UmVzdWx0c1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiTWF4UmVzdWx0c1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOdW1iZXJcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlbGltaXRlcjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkRlbGltaXRlclwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiRGVsaW1pdGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2VnbWVudDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIlNlZ21lbnRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkJsb2JzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiQmxvYkhpZXJhcmNoeUxpc3RTZWdtZW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250aW51YXRpb25Ub2tlbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIk5leHRNYXJrZXJcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIk5leHRNYXJrZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvYkhpZXJhcmNoeUxpc3RTZWdtZW50ID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2JIaWVyYXJjaHlMaXN0U2VnbWVudFwiLFxuICAgIHhtbE5hbWU6IFwiQmxvYnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iSGllcmFyY2h5TGlzdFNlZ21lbnRcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBibG9iUHJlZml4ZXM6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iUHJlZml4ZXNcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkJsb2JQcmVmaXhlc1wiLFxuICAgICAgICAgICAgICAgIHhtbEVsZW1lbnROYW1lOiBcIkJsb2JQcmVmaXhcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU2VxdWVuY2VcIixcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2JQcmVmaXhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibG9iSXRlbXM6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iSXRlbXNcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkJsb2JJdGVtc1wiLFxuICAgICAgICAgICAgICAgIHhtbEVsZW1lbnROYW1lOiBcIkJsb2JcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU2VxdWVuY2VcIixcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2JJdGVtSW50ZXJuYWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvYlByZWZpeCA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iUHJlZml4XCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYlByZWZpeFwiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJOYW1lXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJOYW1lXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiQmxvYk5hbWVcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9ja0xvb2t1cExpc3QgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvY2tMb29rdXBMaXN0XCIsXG4gICAgeG1sTmFtZTogXCJCbG9ja0xpc3RcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9ja0xvb2t1cExpc3RcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBjb21taXR0ZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJDb21taXR0ZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkNvbW1pdHRlZFwiLFxuICAgICAgICAgICAgICAgIHhtbEVsZW1lbnROYW1lOiBcIkNvbW1pdHRlZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTZXF1ZW5jZVwiLFxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bmNvbW1pdHRlZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIlVuY29tbWl0dGVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJVbmNvbW1pdHRlZFwiLFxuICAgICAgICAgICAgICAgIHhtbEVsZW1lbnROYW1lOiBcIlVuY29tbWl0dGVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlNlcXVlbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhdGVzdDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkxhdGVzdFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiTGF0ZXN0XCIsXG4gICAgICAgICAgICAgICAgeG1sRWxlbWVudE5hbWU6IFwiTGF0ZXN0XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlNlcXVlbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9ja0xpc3QgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvY2tMaXN0XCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvY2tMaXN0XCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgY29tbWl0dGVkQmxvY2tzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiQ29tbWl0dGVkQmxvY2tzXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJDb21taXR0ZWRCbG9ja3NcIixcbiAgICAgICAgICAgICAgICB4bWxJc1dyYXBwZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sRWxlbWVudE5hbWU6IFwiQmxvY2tcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU2VxdWVuY2VcIixcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2NrXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdW5jb21taXR0ZWRCbG9ja3M6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJVbmNvbW1pdHRlZEJsb2Nrc1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiVW5jb21taXR0ZWRCbG9ja3NcIixcbiAgICAgICAgICAgICAgICB4bWxJc1dyYXBwZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sRWxlbWVudE5hbWU6IFwiQmxvY2tcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU2VxdWVuY2VcIixcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2NrXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2NrID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2NrXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvY2tcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiTmFtZVwiLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiTmFtZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNpemU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJTaXplXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJTaXplXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFBhZ2VMaXN0ID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIlBhZ2VMaXN0XCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiUGFnZUxpc3RcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBwYWdlUmFuZ2U6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJQYWdlUmFuZ2VcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlBhZ2VSYW5nZVwiLFxuICAgICAgICAgICAgICAgIHhtbEVsZW1lbnROYW1lOiBcIlBhZ2VSYW5nZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTZXF1ZW5jZVwiLFxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiUGFnZVJhbmdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xlYXJSYW5nZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkNsZWFyUmFuZ2VcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkNsZWFyUmFuZ2VcIixcbiAgICAgICAgICAgICAgICB4bWxFbGVtZW50TmFtZTogXCJDbGVhclJhbmdlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlNlcXVlbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJDbGVhclJhbmdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGludWF0aW9uVG9rZW46IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJOZXh0TWFya2VyXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJOZXh0TWFya2VyXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFBhZ2VSYW5nZSA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJQYWdlUmFuZ2VcIixcbiAgICB4bWxOYW1lOiBcIlBhZ2VSYW5nZVwiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIlBhZ2VSYW5nZVwiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiU3RhcnRcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5kOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiRW5kXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJFbmRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQ2xlYXJSYW5nZSA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJDbGVhclJhbmdlXCIsXG4gICAgeG1sTmFtZTogXCJDbGVhclJhbmdlXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQ2xlYXJSYW5nZVwiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiU3RhcnRcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5kOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiRW5kXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJFbmRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgUXVlcnlSZXF1ZXN0ID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIlF1ZXJ5UmVxdWVzdFwiLFxuICAgIHhtbE5hbWU6IFwiUXVlcnlSZXF1ZXN0XCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiUXVlcnlSZXF1ZXN0XCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgcXVlcnlUeXBlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiUXVlcnlUeXBlXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJRdWVyeVR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBleHByZXNzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiRXhwcmVzc2lvblwiLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiRXhwcmVzc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlucHV0U2VyaWFsaXphdGlvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIklucHV0U2VyaWFsaXphdGlvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiSW5wdXRTZXJpYWxpemF0aW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiUXVlcnlTZXJpYWxpemF0aW9uXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvdXRwdXRTZXJpYWxpemF0aW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiT3V0cHV0U2VyaWFsaXphdGlvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiT3V0cHV0U2VyaWFsaXphdGlvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIlF1ZXJ5U2VyaWFsaXphdGlvblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFF1ZXJ5U2VyaWFsaXphdGlvbiA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJRdWVyeVNlcmlhbGl6YXRpb25cIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJRdWVyeVNlcmlhbGl6YXRpb25cIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJGb3JtYXRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkZvcm1hdFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIlF1ZXJ5Rm9ybWF0XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgUXVlcnlGb3JtYXQgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiUXVlcnlGb3JtYXRcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJRdWVyeUZvcm1hdFwiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJUeXBlXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVudW1cIixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wiZGVsaW1pdGVkXCIsIFwianNvblwiLCBcImFycm93XCIsIFwicGFycXVldFwiXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlbGltaXRlZFRleHRDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiRGVsaW1pdGVkVGV4dENvbmZpZ3VyYXRpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkRlbGltaXRlZFRleHRDb25maWd1cmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiRGVsaW1pdGVkVGV4dENvbmZpZ3VyYXRpb25cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGpzb25UZXh0Q29uZmlndXJhdGlvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkpzb25UZXh0Q29uZmlndXJhdGlvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiSnNvblRleHRDb25maWd1cmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiSnNvblRleHRDb25maWd1cmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhcnJvd0NvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJBcnJvd0NvbmZpZ3VyYXRpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkFycm93Q29uZmlndXJhdGlvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIkFycm93Q29uZmlndXJhdGlvblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFycXVldFRleHRDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiUGFycXVldFRleHRDb25maWd1cmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJQYXJxdWV0VGV4dENvbmZpZ3VyYXRpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGljdGlvbmFyeVwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogeyB0eXBlOiB7IG5hbWU6IFwiYW55XCIgfSB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IERlbGltaXRlZFRleHRDb25maWd1cmF0aW9uID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkRlbGltaXRlZFRleHRDb25maWd1cmF0aW9uXCIsXG4gICAgeG1sTmFtZTogXCJEZWxpbWl0ZWRUZXh0Q29uZmlndXJhdGlvblwiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkRlbGltaXRlZFRleHRDb25maWd1cmF0aW9uXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgY29sdW1uU2VwYXJhdG9yOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiQ29sdW1uU2VwYXJhdG9yXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJDb2x1bW5TZXBhcmF0b3JcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWVsZFF1b3RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiRmllbGRRdW90ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiRmllbGRRdW90ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlY29yZFNlcGFyYXRvcjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIlJlY29yZFNlcGFyYXRvclwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiUmVjb3JkU2VwYXJhdG9yXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXNjYXBlQ2hhcjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkVzY2FwZUNoYXJcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIkVzY2FwZUNoYXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoZWFkZXJzUHJlc2VudDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIkhlYWRlcnNQcmVzZW50XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJIYXNIZWFkZXJzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBKc29uVGV4dENvbmZpZ3VyYXRpb24gPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiSnNvblRleHRDb25maWd1cmF0aW9uXCIsXG4gICAgeG1sTmFtZTogXCJKc29uVGV4dENvbmZpZ3VyYXRpb25cIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJKc29uVGV4dENvbmZpZ3VyYXRpb25cIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICByZWNvcmRTZXBhcmF0b3I6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJSZWNvcmRTZXBhcmF0b3JcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlJlY29yZFNlcGFyYXRvclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBBcnJvd0NvbmZpZ3VyYXRpb24gPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQXJyb3dDb25maWd1cmF0aW9uXCIsXG4gICAgeG1sTmFtZTogXCJBcnJvd0NvbmZpZ3VyYXRpb25cIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJBcnJvd0NvbmZpZ3VyYXRpb25cIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBzY2hlbWE6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJTY2hlbWFcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlNjaGVtYVwiLFxuICAgICAgICAgICAgICAgIHhtbElzV3JhcHBlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB4bWxFbGVtZW50TmFtZTogXCJGaWVsZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTZXF1ZW5jZVwiLFxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiQXJyb3dGaWVsZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBBcnJvd0ZpZWxkID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkFycm93RmllbGRcIixcbiAgICB4bWxOYW1lOiBcIkZpZWxkXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQXJyb3dGaWVsZFwiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJUeXBlXCIsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIk5hbWVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIk5hbWVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmVjaXNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJQcmVjaXNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlByZWNpc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOdW1iZXJcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNjYWxlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiU2NhbGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlNjYWxlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFNlcnZpY2VTZXRQcm9wZXJ0aWVzSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJTZXJ2aWNlX3NldFByb3BlcnRpZXNIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiU2VydmljZVNldFByb3BlcnRpZXNIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgU2VydmljZVNldFByb3BlcnRpZXNFeGNlcHRpb25IZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIlNlcnZpY2Vfc2V0UHJvcGVydGllc0V4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJTZXJ2aWNlU2V0UHJvcGVydGllc0V4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBTZXJ2aWNlR2V0UHJvcGVydGllc0hlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiU2VydmljZV9nZXRQcm9wZXJ0aWVzSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIlNlcnZpY2VHZXRQcm9wZXJ0aWVzSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGNsaWVudFJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFNlcnZpY2VHZXRQcm9wZXJ0aWVzRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJTZXJ2aWNlX2dldFByb3BlcnRpZXNFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiU2VydmljZUdldFByb3BlcnRpZXNFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgU2VydmljZUdldFN0YXRpc3RpY3NIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIlNlcnZpY2VfZ2V0U3RhdGlzdGljc0hlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJTZXJ2aWNlR2V0U3RhdGlzdGljc0hlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFNlcnZpY2VHZXRTdGF0aXN0aWNzRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJTZXJ2aWNlX2dldFN0YXRpc3RpY3NFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiU2VydmljZUdldFN0YXRpc3RpY3NFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgU2VydmljZUxpc3RDb250YWluZXJzU2VnbWVudEhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiU2VydmljZV9saXN0Q29udGFpbmVyc1NlZ21lbnRIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiU2VydmljZUxpc3RDb250YWluZXJzU2VnbWVudEhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBTZXJ2aWNlTGlzdENvbnRhaW5lcnNTZWdtZW50RXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJTZXJ2aWNlX2xpc3RDb250YWluZXJzU2VnbWVudEV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJTZXJ2aWNlTGlzdENvbnRhaW5lcnNTZWdtZW50RXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFNlcnZpY2VHZXRVc2VyRGVsZWdhdGlvbktleUhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiU2VydmljZV9nZXRVc2VyRGVsZWdhdGlvbktleUhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJTZXJ2aWNlR2V0VXNlckRlbGVnYXRpb25LZXlIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBTZXJ2aWNlR2V0VXNlckRlbGVnYXRpb25LZXlFeGNlcHRpb25IZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIlNlcnZpY2VfZ2V0VXNlckRlbGVnYXRpb25LZXlFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiU2VydmljZUdldFVzZXJEZWxlZ2F0aW9uS2V5RXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFNlcnZpY2VHZXRBY2NvdW50SW5mb0hlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiU2VydmljZV9nZXRBY2NvdW50SW5mb0hlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJTZXJ2aWNlR2V0QWNjb3VudEluZm9IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBza3VOYW1lOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1za3UtbmFtZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1za3UtbmFtZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJFbnVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiU3RhbmRhcmRfTFJTXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlN0YW5kYXJkX0dSU1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJTdGFuZGFyZF9SQUdSU1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJTdGFuZGFyZF9aUlNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUHJlbWl1bV9MUlNcIixcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFjY291bnRLaW5kOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1hY2NvdW50LWtpbmRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtYWNjb3VudC1raW5kXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVudW1cIixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJTdG9yYWdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkJsb2JTdG9yYWdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlN0b3JhZ2VWMlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJGaWxlU3RvcmFnZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJCbG9ja0Jsb2JTdG9yYWdlXCIsXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0hpZXJhcmNoaWNhbE5hbWVzcGFjZUVuYWJsZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWlzLWhucy1lbmFibGVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWlzLWhucy1lbmFibGVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFNlcnZpY2VHZXRBY2NvdW50SW5mb0V4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiU2VydmljZV9nZXRBY2NvdW50SW5mb0V4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJTZXJ2aWNlR2V0QWNjb3VudEluZm9FeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgU2VydmljZVN1Ym1pdEJhdGNoSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJTZXJ2aWNlX3N1Ym1pdEJhdGNoSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIlNlcnZpY2VTdWJtaXRCYXRjaEhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBjb250ZW50VHlwZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtdHlwZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiY29udGVudC10eXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgU2VydmljZVN1Ym1pdEJhdGNoRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJTZXJ2aWNlX3N1Ym1pdEJhdGNoRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIlNlcnZpY2VTdWJtaXRCYXRjaEV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBTZXJ2aWNlRmlsdGVyQmxvYnNIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIlNlcnZpY2VfZmlsdGVyQmxvYnNIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiU2VydmljZUZpbHRlckJsb2JzSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGNsaWVudFJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgU2VydmljZUZpbHRlckJsb2JzRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJTZXJ2aWNlX2ZpbHRlckJsb2JzRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIlNlcnZpY2VGaWx0ZXJCbG9ic0V4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBDb250YWluZXJDcmVhdGVIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkNvbnRhaW5lcl9jcmVhdGVIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQ29udGFpbmVyQ3JlYXRlSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGV0YWc6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwibGFzdC1tb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwibGFzdC1tb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsaWVudFJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQ29udGFpbmVyQ3JlYXRlRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJDb250YWluZXJfY3JlYXRlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkNvbnRhaW5lckNyZWF0ZUV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBDb250YWluZXJHZXRQcm9wZXJ0aWVzSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJDb250YWluZXJfZ2V0UHJvcGVydGllc0hlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJDb250YWluZXJHZXRQcm9wZXJ0aWVzSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1tZXRhXCIsXG4gICAgICAgICAgICAgICAgaGVhZGVyQ29sbGVjdGlvblByZWZpeDogXCJ4LW1zLW1ldGEtXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLW1ldGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGljdGlvbmFyeVwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogeyB0eXBlOiB7IG5hbWU6IFwiU3RyaW5nXCIgfSB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhc2VEdXJhdGlvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtbGVhc2UtZHVyYXRpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGVhc2UtZHVyYXRpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJpbmZpbml0ZVwiLCBcImZpeGVkXCJdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhc2VTdGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtbGVhc2Utc3RhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGVhc2Utc3RhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBcImF2YWlsYWJsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJsZWFzZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhwaXJlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJicmVha2luZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJicm9rZW5cIixcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlYXNlU3RhdHVzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1sZWFzZS1zdGF0dXNcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGVhc2Utc3RhdHVzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVudW1cIixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wibG9ja2VkXCIsIFwidW5sb2NrZWRcIl0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsb2JQdWJsaWNBY2Nlc3M6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWJsb2ItcHVibGljLWFjY2Vzc1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1ibG9iLXB1YmxpYy1hY2Nlc3NcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJjb250YWluZXJcIiwgXCJibG9iXCJdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFzSW1tdXRhYmlsaXR5UG9saWN5OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1oYXMtaW1tdXRhYmlsaXR5LXBvbGljeVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1oYXMtaW1tdXRhYmlsaXR5LXBvbGljeVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNMZWdhbEhvbGQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWhhcy1sZWdhbC1ob2xkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWhhcy1sZWdhbC1ob2xkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlZmF1bHRFbmNyeXB0aW9uU2NvcGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWRlZmF1bHQtZW5jcnlwdGlvbi1zY29wZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1kZWZhdWx0LWVuY3J5cHRpb24tc2NvcGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZW55RW5jcnlwdGlvblNjb3BlT3ZlcnJpZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWRlbnktZW5jcnlwdGlvbi1zY29wZS1vdmVycmlkZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1kZW55LWVuY3J5cHRpb24tc2NvcGUtb3ZlcnJpZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNJbW11dGFibGVTdG9yYWdlV2l0aFZlcnNpb25pbmdFbmFibGVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1pbW11dGFibGUtc3RvcmFnZS13aXRoLXZlcnNpb25pbmctZW5hYmxlZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1pbW11dGFibGUtc3RvcmFnZS13aXRoLXZlcnNpb25pbmctZW5hYmxlZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBDb250YWluZXJHZXRQcm9wZXJ0aWVzRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJDb250YWluZXJfZ2V0UHJvcGVydGllc0V4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJDb250YWluZXJHZXRQcm9wZXJ0aWVzRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IENvbnRhaW5lckRlbGV0ZUhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQ29udGFpbmVyX2RlbGV0ZUhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJDb250YWluZXJEZWxldGVIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBDb250YWluZXJEZWxldGVFeGNlcHRpb25IZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkNvbnRhaW5lcl9kZWxldGVFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQ29udGFpbmVyRGVsZXRlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IENvbnRhaW5lclNldE1ldGFkYXRhSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJDb250YWluZXJfc2V0TWV0YWRhdGFIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQ29udGFpbmVyU2V0TWV0YWRhdGFIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBDb250YWluZXJTZXRNZXRhZGF0YUV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQ29udGFpbmVyX3NldE1ldGFkYXRhRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkNvbnRhaW5lclNldE1ldGFkYXRhRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IENvbnRhaW5lckdldEFjY2Vzc1BvbGljeUhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQ29udGFpbmVyX2dldEFjY2Vzc1BvbGljeUhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJDb250YWluZXJHZXRBY2Nlc3NQb2xpY3lIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgYmxvYlB1YmxpY0FjY2Vzczoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtYmxvYi1wdWJsaWMtYWNjZXNzXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWJsb2ItcHVibGljLWFjY2Vzc1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJFbnVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFtcImNvbnRhaW5lclwiLCBcImJsb2JcIl0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBldGFnOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IENvbnRhaW5lckdldEFjY2Vzc1BvbGljeUV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQ29udGFpbmVyX2dldEFjY2Vzc1BvbGljeUV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJDb250YWluZXJHZXRBY2Nlc3NQb2xpY3lFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQ29udGFpbmVyU2V0QWNjZXNzUG9saWN5SGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJDb250YWluZXJfc2V0QWNjZXNzUG9saWN5SGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkNvbnRhaW5lclNldEFjY2Vzc1BvbGljeUhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBldGFnOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IENvbnRhaW5lclNldEFjY2Vzc1BvbGljeUV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQ29udGFpbmVyX3NldEFjY2Vzc1BvbGljeUV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJDb250YWluZXJTZXRBY2Nlc3NQb2xpY3lFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQ29udGFpbmVyUmVzdG9yZUhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQ29udGFpbmVyX3Jlc3RvcmVIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQ29udGFpbmVyUmVzdG9yZUhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IENvbnRhaW5lclJlc3RvcmVFeGNlcHRpb25IZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkNvbnRhaW5lcl9yZXN0b3JlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkNvbnRhaW5lclJlc3RvcmVFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQ29udGFpbmVyUmVuYW1lSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJDb250YWluZXJfcmVuYW1lSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkNvbnRhaW5lclJlbmFtZUhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IENvbnRhaW5lclJlbmFtZUV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQ29udGFpbmVyX3JlbmFtZUV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJDb250YWluZXJSZW5hbWVFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQ29udGFpbmVyU3VibWl0QmF0Y2hIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkNvbnRhaW5lcl9zdWJtaXRCYXRjaEhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJDb250YWluZXJTdWJtaXRCYXRjaEhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBjb250ZW50VHlwZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtdHlwZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiY29udGVudC10eXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQ29udGFpbmVyU3VibWl0QmF0Y2hFeGNlcHRpb25IZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkNvbnRhaW5lcl9zdWJtaXRCYXRjaEV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJDb250YWluZXJTdWJtaXRCYXRjaEV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBDb250YWluZXJGaWx0ZXJCbG9ic0hlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQ29udGFpbmVyX2ZpbHRlckJsb2JzSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkNvbnRhaW5lckZpbHRlckJsb2JzSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGNsaWVudFJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IENvbnRhaW5lckZpbHRlckJsb2JzRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJDb250YWluZXJfZmlsdGVyQmxvYnNFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQ29udGFpbmVyRmlsdGVyQmxvYnNFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQ29udGFpbmVyQWNxdWlyZUxlYXNlSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJDb250YWluZXJfYWNxdWlyZUxlYXNlSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkNvbnRhaW5lckFjcXVpcmVMZWFzZUhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBldGFnOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsZWFzZUlkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1sZWFzZS1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1sZWFzZS1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsaWVudFJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IENvbnRhaW5lckFjcXVpcmVMZWFzZUV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQ29udGFpbmVyX2FjcXVpcmVMZWFzZUV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJDb250YWluZXJBY3F1aXJlTGVhc2VFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQ29udGFpbmVyUmVsZWFzZUxlYXNlSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJDb250YWluZXJfcmVsZWFzZUxlYXNlSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkNvbnRhaW5lclJlbGVhc2VMZWFzZUhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBldGFnOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBDb250YWluZXJSZWxlYXNlTGVhc2VFeGNlcHRpb25IZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkNvbnRhaW5lcl9yZWxlYXNlTGVhc2VFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQ29udGFpbmVyUmVsZWFzZUxlYXNlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IENvbnRhaW5lclJlbmV3TGVhc2VIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkNvbnRhaW5lcl9yZW5ld0xlYXNlSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkNvbnRhaW5lclJlbmV3TGVhc2VIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhc2VJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtbGVhc2UtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGVhc2UtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBDb250YWluZXJSZW5ld0xlYXNlRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJDb250YWluZXJfcmVuZXdMZWFzZUV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJDb250YWluZXJSZW5ld0xlYXNlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IENvbnRhaW5lckJyZWFrTGVhc2VIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkNvbnRhaW5lcl9icmVha0xlYXNlSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkNvbnRhaW5lckJyZWFrTGVhc2VIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhc2VUaW1lOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1sZWFzZS10aW1lXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWxlYXNlLXRpbWVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBDb250YWluZXJCcmVha0xlYXNlRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJDb250YWluZXJfYnJlYWtMZWFzZUV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJDb250YWluZXJCcmVha0xlYXNlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IENvbnRhaW5lckNoYW5nZUxlYXNlSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJDb250YWluZXJfY2hhbmdlTGVhc2VIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQ29udGFpbmVyQ2hhbmdlTGVhc2VIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhc2VJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtbGVhc2UtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGVhc2UtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBDb250YWluZXJDaGFuZ2VMZWFzZUV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQ29udGFpbmVyX2NoYW5nZUxlYXNlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkNvbnRhaW5lckNoYW5nZUxlYXNlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IENvbnRhaW5lckxpc3RCbG9iRmxhdFNlZ21lbnRIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkNvbnRhaW5lcl9saXN0QmxvYkZsYXRTZWdtZW50SGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkNvbnRhaW5lckxpc3RCbG9iRmxhdFNlZ21lbnRIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgY29udGVudFR5cGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJjb250ZW50LXR5cGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImNvbnRlbnQtdHlwZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsaWVudFJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQ29udGFpbmVyTGlzdEJsb2JGbGF0U2VnbWVudEV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQ29udGFpbmVyX2xpc3RCbG9iRmxhdFNlZ21lbnRFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQ29udGFpbmVyTGlzdEJsb2JGbGF0U2VnbWVudEV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBDb250YWluZXJMaXN0QmxvYkhpZXJhcmNoeVNlZ21lbnRIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkNvbnRhaW5lcl9saXN0QmxvYkhpZXJhcmNoeVNlZ21lbnRIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQ29udGFpbmVyTGlzdEJsb2JIaWVyYXJjaHlTZWdtZW50SGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiY29udGVudC10eXBlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJjb250ZW50LXR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IENvbnRhaW5lckxpc3RCbG9iSGllcmFyY2h5U2VnbWVudEV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQ29udGFpbmVyX2xpc3RCbG9iSGllcmFyY2h5U2VnbWVudEV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJDb250YWluZXJMaXN0QmxvYkhpZXJhcmNoeVNlZ21lbnRFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQ29udGFpbmVyR2V0QWNjb3VudEluZm9IZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkNvbnRhaW5lcl9nZXRBY2NvdW50SW5mb0hlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJDb250YWluZXJHZXRBY2NvdW50SW5mb0hlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNrdU5hbWU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXNrdS1uYW1lXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXNrdS1uYW1lXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVudW1cIixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJTdGFuZGFyZF9MUlNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiU3RhbmRhcmRfR1JTXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlN0YW5kYXJkX1JBR1JTXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlN0YW5kYXJkX1pSU1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJQcmVtaXVtX0xSU1wiLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWNjb3VudEtpbmQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWFjY291bnQta2luZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1hY2NvdW50LWtpbmRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlN0b3JhZ2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQmxvYlN0b3JhZ2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiU3RvcmFnZVYyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkZpbGVTdG9yYWdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkJsb2NrQmxvYlN0b3JhZ2VcIixcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBDb250YWluZXJHZXRBY2NvdW50SW5mb0V4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQ29udGFpbmVyX2dldEFjY291bnRJbmZvRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkNvbnRhaW5lckdldEFjY291bnRJbmZvRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JEb3dubG9hZEhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9kb3dubG9hZEhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iRG93bmxvYWRIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwibGFzdC1tb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwibGFzdC1tb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNyZWF0ZWRPbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY3JlYXRpb24tdGltZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jcmVhdGlvbi10aW1lXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLW1ldGFcIixcbiAgICAgICAgICAgICAgICBoZWFkZXJDb2xsZWN0aW9uUHJlZml4OiBcIngtbXMtbWV0YS1cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbWV0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEaWN0aW9uYXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IHR5cGU6IHsgbmFtZTogXCJTdHJpbmdcIiB9IH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvYmplY3RSZXBsaWNhdGlvblBvbGljeUlkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1vci1wb2xpY3ktaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtb3ItcG9saWN5LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb2JqZWN0UmVwbGljYXRpb25SdWxlczoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtb3JcIixcbiAgICAgICAgICAgICAgICBoZWFkZXJDb2xsZWN0aW9uUHJlZml4OiBcIngtbXMtb3ItXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLW9yXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRpY3Rpb25hcnlcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsgdHlwZTogeyBuYW1lOiBcIlN0cmluZ1wiIH0gfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnRMZW5ndGg6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJjb250ZW50LWxlbmd0aFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiY29udGVudC1sZW5ndGhcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50VHlwZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtdHlwZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiY29udGVudC10eXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudFJhbmdlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiY29udGVudC1yYW5nZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiY29udGVudC1yYW5nZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV0YWc6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudE1ENToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtbWQ1XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJjb250ZW50LW1kNVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCeXRlQXJyYXlcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnRFbmNvZGluZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtZW5jb2RpbmdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImNvbnRlbnQtZW5jb2RpbmdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWNoZUNvbnRyb2w6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJjYWNoZS1jb250cm9sXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJjYWNoZS1jb250cm9sXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudERpc3Bvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiY29udGVudC1kaXNwb3NpdGlvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiY29udGVudC1kaXNwb3NpdGlvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnRMYW5ndWFnZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtbGFuZ3VhZ2VcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImNvbnRlbnQtbGFuZ3VhZ2VcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibG9iU2VxdWVuY2VOdW1iZXI6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWJsb2Itc2VxdWVuY2UtbnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWJsb2Itc2VxdWVuY2UtbnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmxvYlR5cGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWJsb2ItdHlwZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1ibG9iLXR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJCbG9ja0Jsb2JcIiwgXCJQYWdlQmxvYlwiLCBcIkFwcGVuZEJsb2JcIl0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb3B5Q29tcGxldGVkT246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNvcHktY29tcGxldGlvbi10aW1lXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNvcHktY29tcGxldGlvbi10aW1lXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29weVN0YXR1c0Rlc2NyaXB0aW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jb3B5LXN0YXR1cy1kZXNjcmlwdGlvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jb3B5LXN0YXR1cy1kZXNjcmlwdGlvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvcHlJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY29weS1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jb3B5LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29weVByb2dyZXNzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jb3B5LXByb2dyZXNzXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNvcHktcHJvZ3Jlc3NcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb3B5U291cmNlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jb3B5LXNvdXJjZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jb3B5LXNvdXJjZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvcHlTdGF0dXM6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNvcHktc3RhdHVzXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNvcHktc3RhdHVzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVudW1cIixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wicGVuZGluZ1wiLCBcInN1Y2Nlc3NcIiwgXCJhYm9ydGVkXCIsIFwiZmFpbGVkXCJdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhc2VEdXJhdGlvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtbGVhc2UtZHVyYXRpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGVhc2UtZHVyYXRpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJpbmZpbml0ZVwiLCBcImZpeGVkXCJdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhc2VTdGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtbGVhc2Utc3RhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGVhc2Utc3RhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBcImF2YWlsYWJsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJsZWFzZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhwaXJlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJicmVha2luZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJicm9rZW5cIixcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlYXNlU3RhdHVzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1sZWFzZS1zdGF0dXNcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGVhc2Utc3RhdHVzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVudW1cIixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wibG9ja2VkXCIsIFwidW5sb2NrZWRcIl0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uSWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb24taWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvbi1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzQ3VycmVudFZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWlzLWN1cnJlbnQtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1pcy1jdXJyZW50LXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWNjZXB0UmFuZ2VzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiYWNjZXB0LXJhbmdlc1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiYWNjZXB0LXJhbmdlc1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmxvYkNvbW1pdHRlZEJsb2NrQ291bnQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWJsb2ItY29tbWl0dGVkLWJsb2NrLWNvdW50XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWJsb2ItY29tbWl0dGVkLWJsb2NrLWNvdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNTZXJ2ZXJFbmNyeXB0ZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXNlcnZlci1lbmNyeXB0ZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtc2VydmVyLWVuY3J5cHRlZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmNyeXB0aW9uS2V5U2hhMjU2OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLWtleS1zaGEyNTZcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1rZXktc2hhMjU2XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5jcnlwdGlvblNjb3BlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLXNjb3BlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24tc2NvcGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibG9iQ29udGVudE1ENToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtYmxvYi1jb250ZW50LW1kNVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1ibG9iLWNvbnRlbnQtbWQ1XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJ5dGVBcnJheVwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGFnQ291bnQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXRhZy1jb3VudFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy10YWctY291bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1NlYWxlZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtYmxvYi1zZWFsZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtYmxvYi1zZWFsZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdEFjY2Vzc2VkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1sYXN0LWFjY2Vzcy10aW1lXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWxhc3QtYWNjZXNzLXRpbWVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbW11dGFiaWxpdHlQb2xpY3lFeHBpcmVzT246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWltbXV0YWJpbGl0eS1wb2xpY3ktdW50aWwtZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1pbW11dGFiaWxpdHktcG9saWN5LXVudGlsLWRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbW11dGFiaWxpdHlQb2xpY3lNb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1pbW11dGFiaWxpdHktcG9saWN5LW1vZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtaW1tdXRhYmlsaXR5LXBvbGljeS1tb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVudW1cIixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wiTXV0YWJsZVwiLCBcIlVubG9ja2VkXCIsIFwiTG9ja2VkXCJdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVnYWxIb2xkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1sZWdhbC1ob2xkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWxlZ2FsLWhvbGRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50Q3JjNjQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNvbnRlbnQtY3JjNjRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY29udGVudC1jcmM2NFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCeXRlQXJyYXlcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9iRG93bmxvYWRFeGNlcHRpb25IZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2JfZG93bmxvYWRFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYkRvd25sb2FkRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JHZXRQcm9wZXJ0aWVzSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iX2dldFByb3BlcnRpZXNIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYkdldFByb3BlcnRpZXNIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwibGFzdC1tb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwibGFzdC1tb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNyZWF0ZWRPbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY3JlYXRpb24tdGltZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jcmVhdGlvbi10aW1lXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLW1ldGFcIixcbiAgICAgICAgICAgICAgICBoZWFkZXJDb2xsZWN0aW9uUHJlZml4OiBcIngtbXMtbWV0YS1cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbWV0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEaWN0aW9uYXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IHR5cGU6IHsgbmFtZTogXCJTdHJpbmdcIiB9IH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvYmplY3RSZXBsaWNhdGlvblBvbGljeUlkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1vci1wb2xpY3ktaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtb3ItcG9saWN5LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb2JqZWN0UmVwbGljYXRpb25SdWxlczoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtb3JcIixcbiAgICAgICAgICAgICAgICBoZWFkZXJDb2xsZWN0aW9uUHJlZml4OiBcIngtbXMtb3ItXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLW9yXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRpY3Rpb25hcnlcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsgdHlwZTogeyBuYW1lOiBcIlN0cmluZ1wiIH0gfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsb2JUeXBlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1ibG9iLXR5cGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtYmxvYi10eXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVudW1cIixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wiQmxvY2tCbG9iXCIsIFwiUGFnZUJsb2JcIiwgXCJBcHBlbmRCbG9iXCJdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29weUNvbXBsZXRlZE9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jb3B5LWNvbXBsZXRpb24tdGltZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jb3B5LWNvbXBsZXRpb24tdGltZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvcHlTdGF0dXNEZXNjcmlwdGlvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY29weS1zdGF0dXMtZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY29weS1zdGF0dXMtZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb3B5SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNvcHktaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY29weS1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvcHlQcm9ncmVzczoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY29weS1wcm9ncmVzc1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jb3B5LXByb2dyZXNzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29weVNvdXJjZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY29weS1zb3VyY2VcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY29weS1zb3VyY2VcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb3B5U3RhdHVzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jb3B5LXN0YXR1c1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jb3B5LXN0YXR1c1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJFbnVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFtcInBlbmRpbmdcIiwgXCJzdWNjZXNzXCIsIFwiYWJvcnRlZFwiLCBcImZhaWxlZFwiXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzSW5jcmVtZW50YWxDb3B5OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1pbmNyZW1lbnRhbC1jb3B5XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWluY3JlbWVudGFsLWNvcHlcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzdGluYXRpb25TbmFwc2hvdDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY29weS1kZXN0aW5hdGlvbi1zbmFwc2hvdFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jb3B5LWRlc3RpbmF0aW9uLXNuYXBzaG90XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhc2VEdXJhdGlvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtbGVhc2UtZHVyYXRpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGVhc2UtZHVyYXRpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJpbmZpbml0ZVwiLCBcImZpeGVkXCJdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhc2VTdGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtbGVhc2Utc3RhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGVhc2Utc3RhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBcImF2YWlsYWJsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJsZWFzZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhwaXJlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJicmVha2luZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJicm9rZW5cIixcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlYXNlU3RhdHVzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1sZWFzZS1zdGF0dXNcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGVhc2Utc3RhdHVzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVudW1cIixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wibG9ja2VkXCIsIFwidW5sb2NrZWRcIl0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50TGVuZ3RoOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiY29udGVudC1sZW5ndGhcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImNvbnRlbnQtbGVuZ3RoXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudFR5cGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJjb250ZW50LXR5cGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImNvbnRlbnQtdHlwZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV0YWc6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudE1ENToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtbWQ1XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJjb250ZW50LW1kNVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCeXRlQXJyYXlcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnRFbmNvZGluZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtZW5jb2RpbmdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImNvbnRlbnQtZW5jb2RpbmdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50RGlzcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJjb250ZW50LWRpc3Bvc2l0aW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJjb250ZW50LWRpc3Bvc2l0aW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudExhbmd1YWdlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiY29udGVudC1sYW5ndWFnZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiY29udGVudC1sYW5ndWFnZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhY2hlQ29udHJvbDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNhY2hlLWNvbnRyb2xcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImNhY2hlLWNvbnRyb2xcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibG9iU2VxdWVuY2VOdW1iZXI6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWJsb2Itc2VxdWVuY2UtbnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWJsb2Itc2VxdWVuY2UtbnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhY2NlcHRSYW5nZXM6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJhY2NlcHQtcmFuZ2VzXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJhY2NlcHQtcmFuZ2VzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmxvYkNvbW1pdHRlZEJsb2NrQ291bnQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWJsb2ItY29tbWl0dGVkLWJsb2NrLWNvdW50XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWJsb2ItY29tbWl0dGVkLWJsb2NrLWNvdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNTZXJ2ZXJFbmNyeXB0ZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXNlcnZlci1lbmNyeXB0ZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtc2VydmVyLWVuY3J5cHRlZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmNyeXB0aW9uS2V5U2hhMjU2OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLWtleS1zaGEyNTZcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1rZXktc2hhMjU2XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5jcnlwdGlvblNjb3BlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLXNjb3BlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24tc2NvcGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhY2Nlc3NUaWVyOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1hY2Nlc3MtdGllclwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1hY2Nlc3MtdGllclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFjY2Vzc1RpZXJJbmZlcnJlZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtYWNjZXNzLXRpZXItaW5mZXJyZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtYWNjZXNzLXRpZXItaW5mZXJyZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXJjaGl2ZVN0YXR1czoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtYXJjaGl2ZS1zdGF0dXNcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtYXJjaGl2ZS1zdGF0dXNcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhY2Nlc3NUaWVyQ2hhbmdlZE9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1hY2Nlc3MtdGllci1jaGFuZ2UtdGltZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1hY2Nlc3MtdGllci1jaGFuZ2UtdGltZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb25JZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvbi1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uLWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNDdXJyZW50VmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtaXMtY3VycmVudC12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWlzLWN1cnJlbnQtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YWdDb3VudDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdGFnLWNvdW50XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXRhZy1jb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOdW1iZXJcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV4cGlyZXNPbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXhwaXJ5LXRpbWVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXhwaXJ5LXRpbWVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1NlYWxlZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtYmxvYi1zZWFsZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtYmxvYi1zZWFsZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVoeWRyYXRlUHJpb3JpdHk6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlaHlkcmF0ZS1wcmlvcml0eVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZWh5ZHJhdGUtcHJpb3JpdHlcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJIaWdoXCIsIFwiU3RhbmRhcmRcIl0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0QWNjZXNzZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWxhc3QtYWNjZXNzLXRpbWVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGFzdC1hY2Nlc3MtdGltZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGltbXV0YWJpbGl0eVBvbGljeUV4cGlyZXNPbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtaW1tdXRhYmlsaXR5LXBvbGljeS11bnRpbC1kYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWltbXV0YWJpbGl0eS1wb2xpY3ktdW50aWwtZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGltbXV0YWJpbGl0eVBvbGljeU1vZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWltbXV0YWJpbGl0eS1wb2xpY3ktbW9kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1pbW11dGFiaWxpdHktcG9saWN5LW1vZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJNdXRhYmxlXCIsIFwiVW5sb2NrZWRcIiwgXCJMb2NrZWRcIl0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsZWdhbEhvbGQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWxlZ2FsLWhvbGRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGVnYWwtaG9sZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9iR2V0UHJvcGVydGllc0V4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9nZXRQcm9wZXJ0aWVzRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2JHZXRQcm9wZXJ0aWVzRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JEZWxldGVIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2JfZGVsZXRlSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2JEZWxldGVIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9iRGVsZXRlRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iX2RlbGV0ZUV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iRGVsZXRlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JVbmRlbGV0ZUhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl91bmRlbGV0ZUhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iVW5kZWxldGVIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9iVW5kZWxldGVFeGNlcHRpb25IZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2JfdW5kZWxldGVFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYlVuZGVsZXRlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JTZXRFeHBpcnlIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2Jfc2V0RXhwaXJ5SGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2JTZXRFeHBpcnlIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvYlNldEV4cGlyeUV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9zZXRFeHBpcnlFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYlNldEV4cGlyeUV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9iU2V0SHR0cEhlYWRlcnNIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2Jfc2V0SHR0cEhlYWRlcnNIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYlNldEh0dHBIZWFkZXJzSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGV0YWc6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwibGFzdC1tb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwibGFzdC1tb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsb2JTZXF1ZW5jZU51bWJlcjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtYmxvYi1zZXF1ZW5jZS1udW1iZXJcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtYmxvYi1zZXF1ZW5jZS1udW1iZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JTZXRIdHRwSGVhZGVyc0V4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9zZXRIdHRwSGVhZGVyc0V4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iU2V0SHR0cEhlYWRlcnNFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvYlNldEltbXV0YWJpbGl0eVBvbGljeUhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9zZXRJbW11dGFiaWxpdHlQb2xpY3lIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYlNldEltbXV0YWJpbGl0eVBvbGljeUhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGltbXV0YWJpbGl0eVBvbGljeUV4cGlyeToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtaW1tdXRhYmlsaXR5LXBvbGljeS11bnRpbC1kYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWltbXV0YWJpbGl0eS1wb2xpY3ktdW50aWwtZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGltbXV0YWJpbGl0eVBvbGljeU1vZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWltbXV0YWJpbGl0eS1wb2xpY3ktbW9kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1pbW11dGFiaWxpdHktcG9saWN5LW1vZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJNdXRhYmxlXCIsIFwiVW5sb2NrZWRcIiwgXCJMb2NrZWRcIl0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvYlNldEltbXV0YWJpbGl0eVBvbGljeUV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9zZXRJbW11dGFiaWxpdHlQb2xpY3lFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYlNldEltbXV0YWJpbGl0eVBvbGljeUV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9iRGVsZXRlSW1tdXRhYmlsaXR5UG9saWN5SGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iX2RlbGV0ZUltbXV0YWJpbGl0eVBvbGljeUhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iRGVsZXRlSW1tdXRhYmlsaXR5UG9saWN5SGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGNsaWVudFJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JEZWxldGVJbW11dGFiaWxpdHlQb2xpY3lFeGNlcHRpb25IZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2JfZGVsZXRlSW1tdXRhYmlsaXR5UG9saWN5RXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2JEZWxldGVJbW11dGFiaWxpdHlQb2xpY3lFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvYlNldExlZ2FsSG9sZEhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9zZXRMZWdhbEhvbGRIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYlNldExlZ2FsSG9sZEhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlZ2FsSG9sZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtbGVnYWwtaG9sZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1sZWdhbC1ob2xkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9iU2V0TGVnYWxIb2xkRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iX3NldExlZ2FsSG9sZEV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iU2V0TGVnYWxIb2xkRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JTZXRNZXRhZGF0YUhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9zZXRNZXRhZGF0YUhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iU2V0TWV0YWRhdGFIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbklkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uLWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb24taWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzU2VydmVyRW5jcnlwdGVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LXNlcnZlci1lbmNyeXB0ZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1zZXJ2ZXItZW5jcnlwdGVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVuY3J5cHRpb25LZXlTaGEyNTY6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24ta2V5LXNoYTI1NlwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLWtleS1zaGEyNTZcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmNyeXB0aW9uU2NvcGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24tc2NvcGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1zY29wZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JTZXRNZXRhZGF0YUV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9zZXRNZXRhZGF0YUV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iU2V0TWV0YWRhdGFFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvYkFjcXVpcmVMZWFzZUhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9hY3F1aXJlTGVhc2VIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYkFjcXVpcmVMZWFzZUhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBldGFnOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsZWFzZUlkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1sZWFzZS1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1sZWFzZS1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsaWVudFJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JBY3F1aXJlTGVhc2VFeGNlcHRpb25IZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2JfYWNxdWlyZUxlYXNlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2JBY3F1aXJlTGVhc2VFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvYlJlbGVhc2VMZWFzZUhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9yZWxlYXNlTGVhc2VIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYlJlbGVhc2VMZWFzZUhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBldGFnOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9iUmVsZWFzZUxlYXNlRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iX3JlbGVhc2VMZWFzZUV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iUmVsZWFzZUxlYXNlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JSZW5ld0xlYXNlSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iX3JlbmV3TGVhc2VIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYlJlbmV3TGVhc2VIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhc2VJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtbGVhc2UtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGVhc2UtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9iUmVuZXdMZWFzZUV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9yZW5ld0xlYXNlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2JSZW5ld0xlYXNlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JDaGFuZ2VMZWFzZUhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9jaGFuZ2VMZWFzZUhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iQ2hhbmdlTGVhc2VIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhc2VJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtbGVhc2UtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGVhc2UtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9iQ2hhbmdlTGVhc2VFeGNlcHRpb25IZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2JfY2hhbmdlTGVhc2VFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYkNoYW5nZUxlYXNlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JCcmVha0xlYXNlSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iX2JyZWFrTGVhc2VIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYkJyZWFrTGVhc2VIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhc2VUaW1lOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1sZWFzZS10aW1lXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWxlYXNlLXRpbWVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9iQnJlYWtMZWFzZUV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9icmVha0xlYXNlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2JCcmVha0xlYXNlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JDcmVhdGVTbmFwc2hvdEhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9jcmVhdGVTbmFwc2hvdEhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iQ3JlYXRlU25hcHNob3RIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgc25hcHNob3Q6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXNuYXBzaG90XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXNuYXBzaG90XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbklkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uLWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb24taWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzU2VydmVyRW5jcnlwdGVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LXNlcnZlci1lbmNyeXB0ZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1zZXJ2ZXItZW5jcnlwdGVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JDcmVhdGVTbmFwc2hvdEV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9jcmVhdGVTbmFwc2hvdEV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iQ3JlYXRlU25hcHNob3RFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvYlN0YXJ0Q29weUZyb21VUkxIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2Jfc3RhcnRDb3B5RnJvbVVSTEhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iU3RhcnRDb3B5RnJvbVVSTEhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBldGFnOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uSWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb24taWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvbi1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29weUlkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jb3B5LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNvcHktaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb3B5U3RhdHVzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jb3B5LXN0YXR1c1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jb3B5LXN0YXR1c1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJFbnVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFtcInBlbmRpbmdcIiwgXCJzdWNjZXNzXCIsIFwiYWJvcnRlZFwiLCBcImZhaWxlZFwiXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JTdGFydENvcHlGcm9tVVJMRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iX3N0YXJ0Q29weUZyb21VUkxFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYlN0YXJ0Q29weUZyb21VUkxFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvYkNvcHlGcm9tVVJMSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iX2NvcHlGcm9tVVJMSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2JDb3B5RnJvbVVSTEhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBldGFnOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uSWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb24taWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvbi1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29weUlkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jb3B5LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNvcHktaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb3B5U3RhdHVzOiB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgICBpc0NvbnN0YW50OiB0cnVlLFxuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY29weS1zdGF0dXNcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50TUQ1OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiY29udGVudC1tZDVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImNvbnRlbnQtbWQ1XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJ5dGVBcnJheVwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeE1zQ29udGVudENyYzY0OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jb250ZW50LWNyYzY0XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNvbnRlbnQtY3JjNjRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQnl0ZUFycmF5XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmNyeXB0aW9uU2NvcGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24tc2NvcGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1zY29wZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JDb3B5RnJvbVVSTEV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9jb3B5RnJvbVVSTEV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iQ29weUZyb21VUkxFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvYkFib3J0Q29weUZyb21VUkxIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2JfYWJvcnRDb3B5RnJvbVVSTEhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iQWJvcnRDb3B5RnJvbVVSTEhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JBYm9ydENvcHlGcm9tVVJMRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iX2Fib3J0Q29weUZyb21VUkxFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYkFib3J0Q29weUZyb21VUkxFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvYlNldFRpZXJIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2Jfc2V0VGllckhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iU2V0VGllckhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9iU2V0VGllckV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9zZXRUaWVyRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2JTZXRUaWVyRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JHZXRBY2NvdW50SW5mb0hlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9nZXRBY2NvdW50SW5mb0hlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iR2V0QWNjb3VudEluZm9IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBza3VOYW1lOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1za3UtbmFtZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1za3UtbmFtZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJFbnVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiU3RhbmRhcmRfTFJTXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlN0YW5kYXJkX0dSU1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJTdGFuZGFyZF9SQUdSU1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJTdGFuZGFyZF9aUlNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUHJlbWl1bV9MUlNcIixcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFjY291bnRLaW5kOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1hY2NvdW50LWtpbmRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtYWNjb3VudC1raW5kXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVudW1cIixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJTdG9yYWdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkJsb2JTdG9yYWdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlN0b3JhZ2VWMlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJGaWxlU3RvcmFnZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJCbG9ja0Jsb2JTdG9yYWdlXCIsXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvYkdldEFjY291bnRJbmZvRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iX2dldEFjY291bnRJbmZvRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2JHZXRBY2NvdW50SW5mb0V4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9iUXVlcnlIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2JfcXVlcnlIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYlF1ZXJ5SGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtbWV0YVwiLFxuICAgICAgICAgICAgICAgIGhlYWRlckNvbGxlY3Rpb25QcmVmaXg6IFwieC1tcy1tZXRhLVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1tZXRhXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRpY3Rpb25hcnlcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsgdHlwZTogeyBuYW1lOiBcIlN0cmluZ1wiIH0gfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnRMZW5ndGg6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJjb250ZW50LWxlbmd0aFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiY29udGVudC1sZW5ndGhcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50VHlwZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtdHlwZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiY29udGVudC10eXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudFJhbmdlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiY29udGVudC1yYW5nZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiY29udGVudC1yYW5nZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV0YWc6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudE1ENToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtbWQ1XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJjb250ZW50LW1kNVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCeXRlQXJyYXlcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnRFbmNvZGluZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtZW5jb2RpbmdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImNvbnRlbnQtZW5jb2RpbmdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWNoZUNvbnRyb2w6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJjYWNoZS1jb250cm9sXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJjYWNoZS1jb250cm9sXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudERpc3Bvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiY29udGVudC1kaXNwb3NpdGlvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiY29udGVudC1kaXNwb3NpdGlvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnRMYW5ndWFnZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtbGFuZ3VhZ2VcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImNvbnRlbnQtbGFuZ3VhZ2VcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibG9iU2VxdWVuY2VOdW1iZXI6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWJsb2Itc2VxdWVuY2UtbnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWJsb2Itc2VxdWVuY2UtbnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmxvYlR5cGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWJsb2ItdHlwZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1ibG9iLXR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJCbG9ja0Jsb2JcIiwgXCJQYWdlQmxvYlwiLCBcIkFwcGVuZEJsb2JcIl0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb3B5Q29tcGxldGlvblRpbWU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNvcHktY29tcGxldGlvbi10aW1lXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNvcHktY29tcGxldGlvbi10aW1lXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29weVN0YXR1c0Rlc2NyaXB0aW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jb3B5LXN0YXR1cy1kZXNjcmlwdGlvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jb3B5LXN0YXR1cy1kZXNjcmlwdGlvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvcHlJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY29weS1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jb3B5LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29weVByb2dyZXNzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jb3B5LXByb2dyZXNzXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNvcHktcHJvZ3Jlc3NcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb3B5U291cmNlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jb3B5LXNvdXJjZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jb3B5LXNvdXJjZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvcHlTdGF0dXM6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNvcHktc3RhdHVzXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNvcHktc3RhdHVzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVudW1cIixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wicGVuZGluZ1wiLCBcInN1Y2Nlc3NcIiwgXCJhYm9ydGVkXCIsIFwiZmFpbGVkXCJdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhc2VEdXJhdGlvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtbGVhc2UtZHVyYXRpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGVhc2UtZHVyYXRpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJpbmZpbml0ZVwiLCBcImZpeGVkXCJdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhc2VTdGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtbGVhc2Utc3RhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGVhc2Utc3RhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBcImF2YWlsYWJsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJsZWFzZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhwaXJlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJicmVha2luZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJicm9rZW5cIixcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlYXNlU3RhdHVzOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1sZWFzZS1zdGF0dXNcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtbGVhc2Utc3RhdHVzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkVudW1cIixcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wibG9ja2VkXCIsIFwidW5sb2NrZWRcIl0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhY2NlcHRSYW5nZXM6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJhY2NlcHQtcmFuZ2VzXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJhY2NlcHQtcmFuZ2VzXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibG9iQ29tbWl0dGVkQmxvY2tDb3VudDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtYmxvYi1jb21taXR0ZWQtYmxvY2stY291bnRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtYmxvYi1jb21taXR0ZWQtYmxvY2stY291bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1NlcnZlckVuY3J5cHRlZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtc2VydmVyLWVuY3J5cHRlZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1zZXJ2ZXItZW5jcnlwdGVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVuY3J5cHRpb25LZXlTaGEyNTY6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24ta2V5LXNoYTI1NlwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLWtleS1zaGEyNTZcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmNyeXB0aW9uU2NvcGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24tc2NvcGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1zY29wZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsb2JDb250ZW50TUQ1OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1ibG9iLWNvbnRlbnQtbWQ1XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWJsb2ItY29udGVudC1tZDVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQnl0ZUFycmF5XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnRDcmM2NDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY29udGVudC1jcmM2NFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jb250ZW50LWNyYzY0XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJ5dGVBcnJheVwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JRdWVyeUV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvYl9xdWVyeUV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iUXVlcnlFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvYkdldFRhZ3NIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2JfZ2V0VGFnc0hlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iR2V0VGFnc0hlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JHZXRUYWdzRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iX2dldFRhZ3NFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYkdldFRhZ3NFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvYlNldFRhZ3NIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2Jfc2V0VGFnc0hlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9iU2V0VGFnc0hlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2JTZXRUYWdzRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9iX3NldFRhZ3NFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvYlNldFRhZ3NFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgUGFnZUJsb2JDcmVhdGVIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIlBhZ2VCbG9iX2NyZWF0ZUhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJQYWdlQmxvYkNyZWF0ZUhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBldGFnOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50TUQ1OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiY29udGVudC1tZDVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImNvbnRlbnQtbWQ1XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJ5dGVBcnJheVwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbklkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uLWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb24taWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzU2VydmVyRW5jcnlwdGVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LXNlcnZlci1lbmNyeXB0ZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1zZXJ2ZXItZW5jcnlwdGVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVuY3J5cHRpb25LZXlTaGEyNTY6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24ta2V5LXNoYTI1NlwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLWtleS1zaGEyNTZcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmNyeXB0aW9uU2NvcGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24tc2NvcGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1zY29wZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFBhZ2VCbG9iQ3JlYXRlRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJQYWdlQmxvYl9jcmVhdGVFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiUGFnZUJsb2JDcmVhdGVFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgUGFnZUJsb2JVcGxvYWRQYWdlc0hlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiUGFnZUJsb2JfdXBsb2FkUGFnZXNIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiUGFnZUJsb2JVcGxvYWRQYWdlc0hlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBldGFnOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50TUQ1OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiY29udGVudC1tZDVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImNvbnRlbnQtbWQ1XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJ5dGVBcnJheVwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeE1zQ29udGVudENyYzY0OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jb250ZW50LWNyYzY0XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNvbnRlbnQtY3JjNjRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQnl0ZUFycmF5XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibG9iU2VxdWVuY2VOdW1iZXI6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWJsb2Itc2VxdWVuY2UtbnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWJsb2Itc2VxdWVuY2UtbnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1NlcnZlckVuY3J5cHRlZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1zZXJ2ZXItZW5jcnlwdGVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3Qtc2VydmVyLWVuY3J5cHRlZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmNyeXB0aW9uS2V5U2hhMjU2OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLWtleS1zaGEyNTZcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1rZXktc2hhMjU2XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5jcnlwdGlvblNjb3BlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLXNjb3BlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24tc2NvcGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBQYWdlQmxvYlVwbG9hZFBhZ2VzRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJQYWdlQmxvYl91cGxvYWRQYWdlc0V4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJQYWdlQmxvYlVwbG9hZFBhZ2VzRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFBhZ2VCbG9iQ2xlYXJQYWdlc0hlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiUGFnZUJsb2JfY2xlYXJQYWdlc0hlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJQYWdlQmxvYkNsZWFyUGFnZXNIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudE1ENToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtbWQ1XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJjb250ZW50LW1kNVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCeXRlQXJyYXlcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHhNc0NvbnRlbnRDcmM2NDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY29udGVudC1jcmM2NFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jb250ZW50LWNyYzY0XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJ5dGVBcnJheVwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmxvYlNlcXVlbmNlTnVtYmVyOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1ibG9iLXNlcXVlbmNlLW51bWJlclwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1ibG9iLXNlcXVlbmNlLW51bWJlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOdW1iZXJcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsaWVudFJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgUGFnZUJsb2JDbGVhclBhZ2VzRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJQYWdlQmxvYl9jbGVhclBhZ2VzRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIlBhZ2VCbG9iQ2xlYXJQYWdlc0V4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBQYWdlQmxvYlVwbG9hZFBhZ2VzRnJvbVVSTEhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiUGFnZUJsb2JfdXBsb2FkUGFnZXNGcm9tVVJMSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIlBhZ2VCbG9iVXBsb2FkUGFnZXNGcm9tVVJMSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGV0YWc6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwibGFzdC1tb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwibGFzdC1tb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnRNRDU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJjb250ZW50LW1kNVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiY29udGVudC1tZDVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQnl0ZUFycmF5XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4TXNDb250ZW50Q3JjNjQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNvbnRlbnQtY3JjNjRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY29udGVudC1jcmM2NFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCeXRlQXJyYXlcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsb2JTZXF1ZW5jZU51bWJlcjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtYmxvYi1zZXF1ZW5jZS1udW1iZXJcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtYmxvYi1zZXF1ZW5jZS1udW1iZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNTZXJ2ZXJFbmNyeXB0ZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3Qtc2VydmVyLWVuY3J5cHRlZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LXNlcnZlci1lbmNyeXB0ZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5jcnlwdGlvbktleVNoYTI1Njoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1rZXktc2hhMjU2XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24ta2V5LXNoYTI1NlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVuY3J5cHRpb25TY29wZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1zY29wZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLXNjb3BlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgUGFnZUJsb2JVcGxvYWRQYWdlc0Zyb21VUkxFeGNlcHRpb25IZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIlBhZ2VCbG9iX3VwbG9hZFBhZ2VzRnJvbVVSTEV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJQYWdlQmxvYlVwbG9hZFBhZ2VzRnJvbVVSTEV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBQYWdlQmxvYkdldFBhZ2VSYW5nZXNIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIlBhZ2VCbG9iX2dldFBhZ2VSYW5nZXNIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiUGFnZUJsb2JHZXRQYWdlUmFuZ2VzSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBldGFnOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsb2JDb250ZW50TGVuZ3RoOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1ibG9iLWNvbnRlbnQtbGVuZ3RoXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWJsb2ItY29udGVudC1sZW5ndGhcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFBhZ2VCbG9iR2V0UGFnZVJhbmdlc0V4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiUGFnZUJsb2JfZ2V0UGFnZVJhbmdlc0V4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJQYWdlQmxvYkdldFBhZ2VSYW5nZXNFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgUGFnZUJsb2JHZXRQYWdlUmFuZ2VzRGlmZkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiUGFnZUJsb2JfZ2V0UGFnZVJhbmdlc0RpZmZIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiUGFnZUJsb2JHZXRQYWdlUmFuZ2VzRGlmZkhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibG9iQ29udGVudExlbmd0aDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtYmxvYi1jb250ZW50LWxlbmd0aFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1ibG9iLWNvbnRlbnQtbGVuZ3RoXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBQYWdlQmxvYkdldFBhZ2VSYW5nZXNEaWZmRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJQYWdlQmxvYl9nZXRQYWdlUmFuZ2VzRGlmZkV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJQYWdlQmxvYkdldFBhZ2VSYW5nZXNEaWZmRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFBhZ2VCbG9iUmVzaXplSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJQYWdlQmxvYl9yZXNpemVIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiUGFnZUJsb2JSZXNpemVIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmxvYlNlcXVlbmNlTnVtYmVyOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1ibG9iLXNlcXVlbmNlLW51bWJlclwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1ibG9iLXNlcXVlbmNlLW51bWJlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOdW1iZXJcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsaWVudFJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgUGFnZUJsb2JSZXNpemVFeGNlcHRpb25IZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIlBhZ2VCbG9iX3Jlc2l6ZUV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJQYWdlQmxvYlJlc2l6ZUV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBQYWdlQmxvYlVwZGF0ZVNlcXVlbmNlTnVtYmVySGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJQYWdlQmxvYl91cGRhdGVTZXF1ZW5jZU51bWJlckhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJQYWdlQmxvYlVwZGF0ZVNlcXVlbmNlTnVtYmVySGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGV0YWc6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwibGFzdC1tb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwibGFzdC1tb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsb2JTZXF1ZW5jZU51bWJlcjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtYmxvYi1zZXF1ZW5jZS1udW1iZXJcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtYmxvYi1zZXF1ZW5jZS1udW1iZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IFBhZ2VCbG9iVXBkYXRlU2VxdWVuY2VOdW1iZXJFeGNlcHRpb25IZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIlBhZ2VCbG9iX3VwZGF0ZVNlcXVlbmNlTnVtYmVyRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIlBhZ2VCbG9iVXBkYXRlU2VxdWVuY2VOdW1iZXJFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgUGFnZUJsb2JDb3B5SW5jcmVtZW50YWxIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIlBhZ2VCbG9iX2NvcHlJbmNyZW1lbnRhbEhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJQYWdlQmxvYkNvcHlJbmNyZW1lbnRhbEhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBldGFnOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZXRhZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImxhc3QtbW9kaWZpZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvcHlJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY29weS1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jb3B5LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29weVN0YXR1czoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY29weS1zdGF0dXNcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY29weS1zdGF0dXNcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRW51bVwiLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJwZW5kaW5nXCIsIFwic3VjY2Vzc1wiLCBcImFib3J0ZWRcIiwgXCJmYWlsZWRcIl0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBQYWdlQmxvYkNvcHlJbmNyZW1lbnRhbEV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiUGFnZUJsb2JfY29weUluY3JlbWVudGFsRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIlBhZ2VCbG9iQ29weUluY3JlbWVudGFsRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEFwcGVuZEJsb2JDcmVhdGVIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkFwcGVuZEJsb2JfY3JlYXRlSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkFwcGVuZEJsb2JDcmVhdGVIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudE1ENToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtbWQ1XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJjb250ZW50LW1kNVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCeXRlQXJyYXlcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsaWVudFJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb25JZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvbi1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uLWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1NlcnZlckVuY3J5cHRlZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1zZXJ2ZXItZW5jcnlwdGVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3Qtc2VydmVyLWVuY3J5cHRlZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmNyeXB0aW9uS2V5U2hhMjU2OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLWtleS1zaGEyNTZcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1rZXktc2hhMjU2XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5jcnlwdGlvblNjb3BlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLXNjb3BlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24tc2NvcGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBBcHBlbmRCbG9iQ3JlYXRlRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJBcHBlbmRCbG9iX2NyZWF0ZUV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJBcHBlbmRCbG9iQ3JlYXRlRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEFwcGVuZEJsb2JBcHBlbmRCbG9ja0hlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQXBwZW5kQmxvYl9hcHBlbmRCbG9ja0hlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJBcHBlbmRCbG9iQXBwZW5kQmxvY2tIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudE1ENToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtbWQ1XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJjb250ZW50LW1kNVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCeXRlQXJyYXlcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHhNc0NvbnRlbnRDcmM2NDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY29udGVudC1jcmM2NFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jb250ZW50LWNyYzY0XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJ5dGVBcnJheVwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibG9iQXBwZW5kT2Zmc2V0OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1ibG9iLWFwcGVuZC1vZmZzZXRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtYmxvYi1hcHBlbmQtb2Zmc2V0XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmxvYkNvbW1pdHRlZEJsb2NrQ291bnQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWJsb2ItY29tbWl0dGVkLWJsb2NrLWNvdW50XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWJsb2ItY29tbWl0dGVkLWJsb2NrLWNvdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNTZXJ2ZXJFbmNyeXB0ZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3Qtc2VydmVyLWVuY3J5cHRlZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LXNlcnZlci1lbmNyeXB0ZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5jcnlwdGlvbktleVNoYTI1Njoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1rZXktc2hhMjU2XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24ta2V5LXNoYTI1NlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVuY3J5cHRpb25TY29wZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1zY29wZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLXNjb3BlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQXBwZW5kQmxvYkFwcGVuZEJsb2NrRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJBcHBlbmRCbG9iX2FwcGVuZEJsb2NrRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkFwcGVuZEJsb2JBcHBlbmRCbG9ja0V4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBBcHBlbmRCbG9iQXBwZW5kQmxvY2tGcm9tVXJsSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJBcHBlbmRCbG9iX2FwcGVuZEJsb2NrRnJvbVVybEhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJBcHBlbmRCbG9iQXBwZW5kQmxvY2tGcm9tVXJsSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGV0YWc6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwibGFzdC1tb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwibGFzdC1tb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRlbnRNRDU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJjb250ZW50LW1kNVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiY29udGVudC1tZDVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQnl0ZUFycmF5XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4TXNDb250ZW50Q3JjNjQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWNvbnRlbnQtY3JjNjRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY29udGVudC1jcmM2NFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCeXRlQXJyYXlcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibG9iQXBwZW5kT2Zmc2V0OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1ibG9iLWFwcGVuZC1vZmZzZXRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtYmxvYi1hcHBlbmQtb2Zmc2V0XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmxvYkNvbW1pdHRlZEJsb2NrQ291bnQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWJsb2ItY29tbWl0dGVkLWJsb2NrLWNvdW50XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWJsb2ItY29tbWl0dGVkLWJsb2NrLWNvdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk51bWJlclwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5jcnlwdGlvbktleVNoYTI1Njoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1rZXktc2hhMjU2XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24ta2V5LXNoYTI1NlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVuY3J5cHRpb25TY29wZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1zY29wZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLXNjb3BlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNTZXJ2ZXJFbmNyeXB0ZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3Qtc2VydmVyLWVuY3J5cHRlZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LXNlcnZlci1lbmNyeXB0ZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQXBwZW5kQmxvYkFwcGVuZEJsb2NrRnJvbVVybEV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQXBwZW5kQmxvYl9hcHBlbmRCbG9ja0Zyb21VcmxFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQXBwZW5kQmxvYkFwcGVuZEJsb2NrRnJvbVVybEV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBBcHBlbmRCbG9iU2VhbEhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQXBwZW5kQmxvYl9zZWFsSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkFwcGVuZEJsb2JTZWFsSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGV0YWc6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJldGFnXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwibGFzdC1tb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwibGFzdC1tb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsaWVudFJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNTZWFsZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWJsb2Itc2VhbGVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWJsb2Itc2VhbGVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBBcHBlbmRCbG9iU2VhbEV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQXBwZW5kQmxvYl9zZWFsRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkFwcGVuZEJsb2JTZWFsRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2NrQmxvYlVwbG9hZEhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvY2tCbG9iX3VwbG9hZEhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9ja0Jsb2JVcGxvYWRIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudE1ENToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtbWQ1XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJjb250ZW50LW1kNVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCeXRlQXJyYXlcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsaWVudFJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb25JZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvbi1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uLWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1NlcnZlckVuY3J5cHRlZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1zZXJ2ZXItZW5jcnlwdGVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3Qtc2VydmVyLWVuY3J5cHRlZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmNyeXB0aW9uS2V5U2hhMjU2OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLWtleS1zaGEyNTZcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1rZXktc2hhMjU2XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5jcnlwdGlvblNjb3BlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLXNjb3BlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24tc2NvcGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9ja0Jsb2JVcGxvYWRFeGNlcHRpb25IZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2NrQmxvYl91cGxvYWRFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvY2tCbG9iVXBsb2FkRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2NrQmxvYlB1dEJsb2JGcm9tVXJsSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9ja0Jsb2JfcHV0QmxvYkZyb21VcmxIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvY2tCbG9iUHV0QmxvYkZyb21VcmxIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudE1ENToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtbWQ1XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJjb250ZW50LW1kNVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCeXRlQXJyYXlcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsaWVudFJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb25JZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvbi1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uLWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1NlcnZlckVuY3J5cHRlZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1zZXJ2ZXItZW5jcnlwdGVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3Qtc2VydmVyLWVuY3J5cHRlZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmNyeXB0aW9uS2V5U2hhMjU2OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLWtleS1zaGEyNTZcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1rZXktc2hhMjU2XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5jcnlwdGlvblNjb3BlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLXNjb3BlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24tc2NvcGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9ja0Jsb2JQdXRCbG9iRnJvbVVybEV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvY2tCbG9iX3B1dEJsb2JGcm9tVXJsRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2NrQmxvYlB1dEJsb2JGcm9tVXJsRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2NrQmxvYlN0YWdlQmxvY2tIZWFkZXJzID0ge1xuICAgIHNlcmlhbGl6ZWROYW1lOiBcIkJsb2NrQmxvYl9zdGFnZUJsb2NrSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2NrQmxvYlN0YWdlQmxvY2tIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgY29udGVudE1ENToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtbWQ1XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJjb250ZW50LW1kNVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCeXRlQXJyYXlcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsaWVudFJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeE1zQ29udGVudENyYzY0OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jb250ZW50LWNyYzY0XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWNvbnRlbnQtY3JjNjRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQnl0ZUFycmF5XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1NlcnZlckVuY3J5cHRlZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1zZXJ2ZXItZW5jcnlwdGVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3Qtc2VydmVyLWVuY3J5cHRlZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmNyeXB0aW9uS2V5U2hhMjU2OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLWtleS1zaGEyNTZcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1rZXktc2hhMjU2XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5jcnlwdGlvblNjb3BlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLXNjb3BlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24tc2NvcGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9ja0Jsb2JTdGFnZUJsb2NrRXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9ja0Jsb2Jfc3RhZ2VCbG9ja0V4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9ja0Jsb2JTdGFnZUJsb2NrRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2NrQmxvYlN0YWdlQmxvY2tGcm9tVVJMSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9ja0Jsb2Jfc3RhZ2VCbG9ja0Zyb21VUkxIZWFkZXJzXCIsXG4gICAgdHlwZToge1xuICAgICAgICBuYW1lOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiQmxvY2tCbG9iU3RhZ2VCbG9ja0Zyb21VUkxIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgY29udGVudE1ENToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtbWQ1XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJjb250ZW50LW1kNVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCeXRlQXJyYXlcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHhNc0NvbnRlbnRDcmM2NDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY29udGVudC1jcmM2NFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jb250ZW50LWNyYzY0XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJ5dGVBcnJheVwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGF0ZVRpbWVSZmMxMTIzXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1NlcnZlckVuY3J5cHRlZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1zZXJ2ZXItZW5jcnlwdGVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXJlcXVlc3Qtc2VydmVyLWVuY3J5cHRlZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCb29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmNyeXB0aW9uS2V5U2hhMjU2OiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLWtleS1zaGEyNTZcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1rZXktc2hhMjU2XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5jcnlwdGlvblNjb3BlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLXNjb3BlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24tc2NvcGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBCbG9ja0Jsb2JTdGFnZUJsb2NrRnJvbVVSTEV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvY2tCbG9iX3N0YWdlQmxvY2tGcm9tVVJMRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2NrQmxvYlN0YWdlQmxvY2tGcm9tVVJMRXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgICAgICBtb2RlbFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2NrQmxvYkNvbW1pdEJsb2NrTGlzdEhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvY2tCbG9iX2NvbW1pdEJsb2NrTGlzdEhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9ja0Jsb2JDb21taXRCbG9ja0xpc3RIZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudE1ENToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtbWQ1XCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJjb250ZW50LW1kNVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJCeXRlQXJyYXlcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHhNc0NvbnRlbnRDcmM2NDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY29udGVudC1jcmM2NFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jb250ZW50LWNyYzY0XCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJ5dGVBcnJheVwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpZW50UmVxdWVzdElkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbjoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy12ZXJzaW9uXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVyc2lvbklkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy12ZXJzaW9uLWlkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLXZlcnNpb24taWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzU2VydmVyRW5jcnlwdGVkOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1yZXF1ZXN0LXNlcnZlci1lbmNyeXB0ZWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1zZXJ2ZXItZW5jcnlwdGVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVuY3J5cHRpb25LZXlTaGEyNTY6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24ta2V5LXNoYTI1NlwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lbmNyeXB0aW9uLWtleS1zaGEyNTZcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmNyeXB0aW9uU2NvcGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVuY3J5cHRpb24tc2NvcGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZW5jcnlwdGlvbi1zY29wZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ29kZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEJsb2NrQmxvYkNvbW1pdEJsb2NrTGlzdEV4Y2VwdGlvbkhlYWRlcnMgPSB7XG4gICAgc2VyaWFsaXplZE5hbWU6IFwiQmxvY2tCbG9iX2NvbW1pdEJsb2NrTGlzdEV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICB0eXBlOiB7XG4gICAgICAgIG5hbWU6IFwiQ29tcG9zaXRlXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJCbG9ja0Jsb2JDb21taXRCbG9ja0xpc3RFeGNlcHRpb25IZWFkZXJzXCIsXG4gICAgICAgIG1vZGVsUHJvcGVydGllczoge1xuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvY2tCbG9iR2V0QmxvY2tMaXN0SGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9ja0Jsb2JfZ2V0QmxvY2tMaXN0SGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2NrQmxvYkdldEJsb2NrTGlzdEhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJsYXN0LW1vZGlmaWVkXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXRhZzoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcImV0YWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50VHlwZToge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcImNvbnRlbnQtdHlwZVwiLFxuICAgICAgICAgICAgICAgIHhtbE5hbWU6IFwiY29udGVudC10eXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmxvYkNvbnRlbnRMZW5ndGg6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWJsb2ItY29udGVudC1sZW5ndGhcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtYmxvYi1jb250ZW50LWxlbmd0aFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOdW1iZXJcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsaWVudFJlcXVlc3RJZDoge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWROYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLXZlcnNpb25cIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtdmVyc2lvblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkRhdGVUaW1lUmZjMTEyM1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3JDb2RlOiB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwieC1tcy1lcnJvci1jb2RlXCIsXG4gICAgICAgICAgICAgICAgeG1sTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnQgY29uc3QgQmxvY2tCbG9iR2V0QmxvY2tMaXN0RXhjZXB0aW9uSGVhZGVycyA9IHtcbiAgICBzZXJpYWxpemVkTmFtZTogXCJCbG9ja0Jsb2JfZ2V0QmxvY2tMaXN0RXhjZXB0aW9uSGVhZGVyc1wiLFxuICAgIHR5cGU6IHtcbiAgICAgICAgbmFtZTogXCJDb21wb3NpdGVcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIkJsb2NrQmxvYkdldEJsb2NrTGlzdEV4Y2VwdGlvbkhlYWRlcnNcIixcbiAgICAgICAgbW9kZWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBlcnJvckNvZGU6IHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIngtbXMtZXJyb3ItY29kZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcHBlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   accept: () => (/* binding */ accept),\n/* harmony export */   accept1: () => (/* binding */ accept1),\n/* harmony export */   accept2: () => (/* binding */ accept2),\n/* harmony export */   access: () => (/* binding */ access),\n/* harmony export */   action: () => (/* binding */ action),\n/* harmony export */   action1: () => (/* binding */ action1),\n/* harmony export */   action2: () => (/* binding */ action2),\n/* harmony export */   action3: () => (/* binding */ action3),\n/* harmony export */   action4: () => (/* binding */ action4),\n/* harmony export */   appendPosition: () => (/* binding */ appendPosition),\n/* harmony export */   blobCacheControl: () => (/* binding */ blobCacheControl),\n/* harmony export */   blobContentDisposition: () => (/* binding */ blobContentDisposition),\n/* harmony export */   blobContentEncoding: () => (/* binding */ blobContentEncoding),\n/* harmony export */   blobContentLanguage: () => (/* binding */ blobContentLanguage),\n/* harmony export */   blobContentLength: () => (/* binding */ blobContentLength),\n/* harmony export */   blobContentMD5: () => (/* binding */ blobContentMD5),\n/* harmony export */   blobContentType: () => (/* binding */ blobContentType),\n/* harmony export */   blobDeleteType: () => (/* binding */ blobDeleteType),\n/* harmony export */   blobSequenceNumber: () => (/* binding */ blobSequenceNumber),\n/* harmony export */   blobServiceProperties: () => (/* binding */ blobServiceProperties),\n/* harmony export */   blobTagsString: () => (/* binding */ blobTagsString),\n/* harmony export */   blobType: () => (/* binding */ blobType),\n/* harmony export */   blobType1: () => (/* binding */ blobType1),\n/* harmony export */   blobType2: () => (/* binding */ blobType2),\n/* harmony export */   blockId: () => (/* binding */ blockId),\n/* harmony export */   blocks: () => (/* binding */ blocks),\n/* harmony export */   body: () => (/* binding */ body),\n/* harmony export */   body1: () => (/* binding */ body1),\n/* harmony export */   breakPeriod: () => (/* binding */ breakPeriod),\n/* harmony export */   comp: () => (/* binding */ comp),\n/* harmony export */   comp1: () => (/* binding */ comp1),\n/* harmony export */   comp10: () => (/* binding */ comp10),\n/* harmony export */   comp11: () => (/* binding */ comp11),\n/* harmony export */   comp12: () => (/* binding */ comp12),\n/* harmony export */   comp13: () => (/* binding */ comp13),\n/* harmony export */   comp14: () => (/* binding */ comp14),\n/* harmony export */   comp15: () => (/* binding */ comp15),\n/* harmony export */   comp16: () => (/* binding */ comp16),\n/* harmony export */   comp17: () => (/* binding */ comp17),\n/* harmony export */   comp18: () => (/* binding */ comp18),\n/* harmony export */   comp19: () => (/* binding */ comp19),\n/* harmony export */   comp2: () => (/* binding */ comp2),\n/* harmony export */   comp20: () => (/* binding */ comp20),\n/* harmony export */   comp21: () => (/* binding */ comp21),\n/* harmony export */   comp22: () => (/* binding */ comp22),\n/* harmony export */   comp23: () => (/* binding */ comp23),\n/* harmony export */   comp24: () => (/* binding */ comp24),\n/* harmony export */   comp25: () => (/* binding */ comp25),\n/* harmony export */   comp3: () => (/* binding */ comp3),\n/* harmony export */   comp4: () => (/* binding */ comp4),\n/* harmony export */   comp5: () => (/* binding */ comp5),\n/* harmony export */   comp6: () => (/* binding */ comp6),\n/* harmony export */   comp7: () => (/* binding */ comp7),\n/* harmony export */   comp8: () => (/* binding */ comp8),\n/* harmony export */   comp9: () => (/* binding */ comp9),\n/* harmony export */   containerAcl: () => (/* binding */ containerAcl),\n/* harmony export */   contentLength: () => (/* binding */ contentLength),\n/* harmony export */   contentType: () => (/* binding */ contentType),\n/* harmony export */   contentType1: () => (/* binding */ contentType1),\n/* harmony export */   copyActionAbortConstant: () => (/* binding */ copyActionAbortConstant),\n/* harmony export */   copyId: () => (/* binding */ copyId),\n/* harmony export */   copySource: () => (/* binding */ copySource),\n/* harmony export */   copySourceAuthorization: () => (/* binding */ copySourceAuthorization),\n/* harmony export */   copySourceBlobProperties: () => (/* binding */ copySourceBlobProperties),\n/* harmony export */   copySourceTags: () => (/* binding */ copySourceTags),\n/* harmony export */   defaultEncryptionScope: () => (/* binding */ defaultEncryptionScope),\n/* harmony export */   deleteSnapshots: () => (/* binding */ deleteSnapshots),\n/* harmony export */   deletedContainerName: () => (/* binding */ deletedContainerName),\n/* harmony export */   deletedContainerVersion: () => (/* binding */ deletedContainerVersion),\n/* harmony export */   delimiter: () => (/* binding */ delimiter),\n/* harmony export */   duration: () => (/* binding */ duration),\n/* harmony export */   encryptionAlgorithm: () => (/* binding */ encryptionAlgorithm),\n/* harmony export */   encryptionKey: () => (/* binding */ encryptionKey),\n/* harmony export */   encryptionKeySha256: () => (/* binding */ encryptionKeySha256),\n/* harmony export */   encryptionScope: () => (/* binding */ encryptionScope),\n/* harmony export */   expiresOn: () => (/* binding */ expiresOn),\n/* harmony export */   expiryOptions: () => (/* binding */ expiryOptions),\n/* harmony export */   ifMatch: () => (/* binding */ ifMatch),\n/* harmony export */   ifModifiedSince: () => (/* binding */ ifModifiedSince),\n/* harmony export */   ifNoneMatch: () => (/* binding */ ifNoneMatch),\n/* harmony export */   ifSequenceNumberEqualTo: () => (/* binding */ ifSequenceNumberEqualTo),\n/* harmony export */   ifSequenceNumberLessThan: () => (/* binding */ ifSequenceNumberLessThan),\n/* harmony export */   ifSequenceNumberLessThanOrEqualTo: () => (/* binding */ ifSequenceNumberLessThanOrEqualTo),\n/* harmony export */   ifTags: () => (/* binding */ ifTags),\n/* harmony export */   ifUnmodifiedSince: () => (/* binding */ ifUnmodifiedSince),\n/* harmony export */   immutabilityPolicyExpiry: () => (/* binding */ immutabilityPolicyExpiry),\n/* harmony export */   immutabilityPolicyMode: () => (/* binding */ immutabilityPolicyMode),\n/* harmony export */   include: () => (/* binding */ include),\n/* harmony export */   include1: () => (/* binding */ include1),\n/* harmony export */   keyInfo: () => (/* binding */ keyInfo),\n/* harmony export */   leaseId: () => (/* binding */ leaseId),\n/* harmony export */   leaseId1: () => (/* binding */ leaseId1),\n/* harmony export */   legalHold: () => (/* binding */ legalHold),\n/* harmony export */   legalHold1: () => (/* binding */ legalHold1),\n/* harmony export */   listType: () => (/* binding */ listType),\n/* harmony export */   marker: () => (/* binding */ marker),\n/* harmony export */   maxPageSize: () => (/* binding */ maxPageSize),\n/* harmony export */   maxSize: () => (/* binding */ maxSize),\n/* harmony export */   metadata: () => (/* binding */ metadata),\n/* harmony export */   multipartContentType: () => (/* binding */ multipartContentType),\n/* harmony export */   pageWrite: () => (/* binding */ pageWrite),\n/* harmony export */   pageWrite1: () => (/* binding */ pageWrite1),\n/* harmony export */   prefix: () => (/* binding */ prefix),\n/* harmony export */   prevSnapshotUrl: () => (/* binding */ prevSnapshotUrl),\n/* harmony export */   preventEncryptionScopeOverride: () => (/* binding */ preventEncryptionScopeOverride),\n/* harmony export */   prevsnapshot: () => (/* binding */ prevsnapshot),\n/* harmony export */   proposedLeaseId: () => (/* binding */ proposedLeaseId),\n/* harmony export */   proposedLeaseId1: () => (/* binding */ proposedLeaseId1),\n/* harmony export */   queryRequest: () => (/* binding */ queryRequest),\n/* harmony export */   range: () => (/* binding */ range),\n/* harmony export */   range1: () => (/* binding */ range1),\n/* harmony export */   rangeGetContentCRC64: () => (/* binding */ rangeGetContentCRC64),\n/* harmony export */   rangeGetContentMD5: () => (/* binding */ rangeGetContentMD5),\n/* harmony export */   rehydratePriority: () => (/* binding */ rehydratePriority),\n/* harmony export */   requestId: () => (/* binding */ requestId),\n/* harmony export */   restype: () => (/* binding */ restype),\n/* harmony export */   restype1: () => (/* binding */ restype1),\n/* harmony export */   restype2: () => (/* binding */ restype2),\n/* harmony export */   sealBlob: () => (/* binding */ sealBlob),\n/* harmony export */   sequenceNumberAction: () => (/* binding */ sequenceNumberAction),\n/* harmony export */   snapshot: () => (/* binding */ snapshot),\n/* harmony export */   sourceContainerName: () => (/* binding */ sourceContainerName),\n/* harmony export */   sourceContentCrc64: () => (/* binding */ sourceContentCrc64),\n/* harmony export */   sourceContentMD5: () => (/* binding */ sourceContentMD5),\n/* harmony export */   sourceIfMatch: () => (/* binding */ sourceIfMatch),\n/* harmony export */   sourceIfModifiedSince: () => (/* binding */ sourceIfModifiedSince),\n/* harmony export */   sourceIfNoneMatch: () => (/* binding */ sourceIfNoneMatch),\n/* harmony export */   sourceIfTags: () => (/* binding */ sourceIfTags),\n/* harmony export */   sourceIfUnmodifiedSince: () => (/* binding */ sourceIfUnmodifiedSince),\n/* harmony export */   sourceLeaseId: () => (/* binding */ sourceLeaseId),\n/* harmony export */   sourceRange: () => (/* binding */ sourceRange),\n/* harmony export */   sourceRange1: () => (/* binding */ sourceRange1),\n/* harmony export */   sourceUrl: () => (/* binding */ sourceUrl),\n/* harmony export */   tags: () => (/* binding */ tags),\n/* harmony export */   tier: () => (/* binding */ tier),\n/* harmony export */   tier1: () => (/* binding */ tier1),\n/* harmony export */   timeoutInSeconds: () => (/* binding */ timeoutInSeconds),\n/* harmony export */   transactionalContentCrc64: () => (/* binding */ transactionalContentCrc64),\n/* harmony export */   transactionalContentMD5: () => (/* binding */ transactionalContentMD5),\n/* harmony export */   url: () => (/* binding */ url),\n/* harmony export */   version: () => (/* binding */ version),\n/* harmony export */   versionId: () => (/* binding */ versionId),\n/* harmony export */   where: () => (/* binding */ where),\n/* harmony export */   xMsRequiresSync: () => (/* binding */ xMsRequiresSync)\n/* harmony export */ });\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/mappers */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nconst contentType = {\n    parameterPath: [\"options\", \"contentType\"],\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Content-Type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobServiceProperties = {\n    parameterPath: \"blobServiceProperties\",\n    mapper: _models_mappers__WEBPACK_IMPORTED_MODULE_0__.BlobServiceProperties,\n};\nconst accept = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst url = {\n    parameterPath: \"url\",\n    mapper: {\n        serializedName: \"url\",\n        required: true,\n        xmlName: \"url\",\n        type: {\n            name: \"String\",\n        },\n    },\n    skipEncoding: true,\n};\nconst restype = {\n    parameterPath: \"restype\",\n    mapper: {\n        defaultValue: \"service\",\n        isConstant: true,\n        serializedName: \"restype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"properties\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst timeoutInSeconds = {\n    parameterPath: [\"options\", \"timeoutInSeconds\"],\n    mapper: {\n        constraints: {\n            InclusiveMinimum: 0,\n        },\n        serializedName: \"timeout\",\n        xmlName: \"timeout\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst version = {\n    parameterPath: \"version\",\n    mapper: {\n        defaultValue: \"2024-05-04\",\n        isConstant: true,\n        serializedName: \"x-ms-version\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst requestId = {\n    parameterPath: [\"options\", \"requestId\"],\n    mapper: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst accept1 = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp1 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"stats\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp2 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"list\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst prefix = {\n    parameterPath: [\"options\", \"prefix\"],\n    mapper: {\n        serializedName: \"prefix\",\n        xmlName: \"prefix\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst marker = {\n    parameterPath: [\"options\", \"marker\"],\n    mapper: {\n        serializedName: \"marker\",\n        xmlName: \"marker\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst maxPageSize = {\n    parameterPath: [\"options\", \"maxPageSize\"],\n    mapper: {\n        constraints: {\n            InclusiveMinimum: 1,\n        },\n        serializedName: \"maxresults\",\n        xmlName: \"maxresults\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst include = {\n    parameterPath: [\"options\", \"include\"],\n    mapper: {\n        serializedName: \"include\",\n        xmlName: \"include\",\n        xmlElementName: \"ListContainersIncludeType\",\n        type: {\n            name: \"Sequence\",\n            element: {\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"metadata\", \"deleted\", \"system\"],\n                },\n            },\n        },\n    },\n    collectionFormat: \"CSV\",\n};\nconst keyInfo = {\n    parameterPath: \"keyInfo\",\n    mapper: _models_mappers__WEBPACK_IMPORTED_MODULE_0__.KeyInfo,\n};\nconst comp3 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"userdelegationkey\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst restype1 = {\n    parameterPath: \"restype\",\n    mapper: {\n        defaultValue: \"account\",\n        isConstant: true,\n        serializedName: \"restype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst body = {\n    parameterPath: \"body\",\n    mapper: {\n        serializedName: \"body\",\n        required: true,\n        xmlName: \"body\",\n        type: {\n            name: \"Stream\",\n        },\n    },\n};\nconst comp4 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"batch\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst contentLength = {\n    parameterPath: \"contentLength\",\n    mapper: {\n        serializedName: \"Content-Length\",\n        required: true,\n        xmlName: \"Content-Length\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst multipartContentType = {\n    parameterPath: \"multipartContentType\",\n    mapper: {\n        serializedName: \"Content-Type\",\n        required: true,\n        xmlName: \"Content-Type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp5 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"blobs\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst where = {\n    parameterPath: [\"options\", \"where\"],\n    mapper: {\n        serializedName: \"where\",\n        xmlName: \"where\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst restype2 = {\n    parameterPath: \"restype\",\n    mapper: {\n        defaultValue: \"container\",\n        isConstant: true,\n        serializedName: \"restype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst metadata = {\n    parameterPath: [\"options\", \"metadata\"],\n    mapper: {\n        serializedName: \"x-ms-meta\",\n        xmlName: \"x-ms-meta\",\n        headerCollectionPrefix: \"x-ms-meta-\",\n        type: {\n            name: \"Dictionary\",\n            value: { type: { name: \"String\" } },\n        },\n    },\n};\nconst access = {\n    parameterPath: [\"options\", \"access\"],\n    mapper: {\n        serializedName: \"x-ms-blob-public-access\",\n        xmlName: \"x-ms-blob-public-access\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"container\", \"blob\"],\n        },\n    },\n};\nconst defaultEncryptionScope = {\n    parameterPath: [\n        \"options\",\n        \"containerEncryptionScope\",\n        \"defaultEncryptionScope\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-default-encryption-scope\",\n        xmlName: \"x-ms-default-encryption-scope\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst preventEncryptionScopeOverride = {\n    parameterPath: [\n        \"options\",\n        \"containerEncryptionScope\",\n        \"preventEncryptionScopeOverride\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-deny-encryption-scope-override\",\n        xmlName: \"x-ms-deny-encryption-scope-override\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst leaseId = {\n    parameterPath: [\"options\", \"leaseAccessConditions\", \"leaseId\"],\n    mapper: {\n        serializedName: \"x-ms-lease-id\",\n        xmlName: \"x-ms-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst ifModifiedSince = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifModifiedSince\"],\n    mapper: {\n        serializedName: \"If-Modified-Since\",\n        xmlName: \"If-Modified-Since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nconst ifUnmodifiedSince = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifUnmodifiedSince\"],\n    mapper: {\n        serializedName: \"If-Unmodified-Since\",\n        xmlName: \"If-Unmodified-Since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nconst comp6 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"metadata\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp7 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"acl\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst containerAcl = {\n    parameterPath: [\"options\", \"containerAcl\"],\n    mapper: {\n        serializedName: \"containerAcl\",\n        xmlName: \"SignedIdentifiers\",\n        xmlIsWrapped: true,\n        xmlElementName: \"SignedIdentifier\",\n        type: {\n            name: \"Sequence\",\n            element: {\n                type: {\n                    name: \"Composite\",\n                    className: \"SignedIdentifier\",\n                },\n            },\n        },\n    },\n};\nconst comp8 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"undelete\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst deletedContainerName = {\n    parameterPath: [\"options\", \"deletedContainerName\"],\n    mapper: {\n        serializedName: \"x-ms-deleted-container-name\",\n        xmlName: \"x-ms-deleted-container-name\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst deletedContainerVersion = {\n    parameterPath: [\"options\", \"deletedContainerVersion\"],\n    mapper: {\n        serializedName: \"x-ms-deleted-container-version\",\n        xmlName: \"x-ms-deleted-container-version\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp9 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"rename\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceContainerName = {\n    parameterPath: \"sourceContainerName\",\n    mapper: {\n        serializedName: \"x-ms-source-container-name\",\n        required: true,\n        xmlName: \"x-ms-source-container-name\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceLeaseId = {\n    parameterPath: [\"options\", \"sourceLeaseId\"],\n    mapper: {\n        serializedName: \"x-ms-source-lease-id\",\n        xmlName: \"x-ms-source-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp10 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"lease\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst action = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"acquire\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst duration = {\n    parameterPath: [\"options\", \"duration\"],\n    mapper: {\n        serializedName: \"x-ms-lease-duration\",\n        xmlName: \"x-ms-lease-duration\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst proposedLeaseId = {\n    parameterPath: [\"options\", \"proposedLeaseId\"],\n    mapper: {\n        serializedName: \"x-ms-proposed-lease-id\",\n        xmlName: \"x-ms-proposed-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst action1 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"release\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst leaseId1 = {\n    parameterPath: \"leaseId\",\n    mapper: {\n        serializedName: \"x-ms-lease-id\",\n        required: true,\n        xmlName: \"x-ms-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst action2 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"renew\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst action3 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"break\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst breakPeriod = {\n    parameterPath: [\"options\", \"breakPeriod\"],\n    mapper: {\n        serializedName: \"x-ms-lease-break-period\",\n        xmlName: \"x-ms-lease-break-period\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst action4 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"change\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst proposedLeaseId1 = {\n    parameterPath: \"proposedLeaseId\",\n    mapper: {\n        serializedName: \"x-ms-proposed-lease-id\",\n        required: true,\n        xmlName: \"x-ms-proposed-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst include1 = {\n    parameterPath: [\"options\", \"include\"],\n    mapper: {\n        serializedName: \"include\",\n        xmlName: \"include\",\n        xmlElementName: \"ListBlobsIncludeItem\",\n        type: {\n            name: \"Sequence\",\n            element: {\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"copy\",\n                        \"deleted\",\n                        \"metadata\",\n                        \"snapshots\",\n                        \"uncommittedblobs\",\n                        \"versions\",\n                        \"tags\",\n                        \"immutabilitypolicy\",\n                        \"legalhold\",\n                        \"deletedwithversions\",\n                    ],\n                },\n            },\n        },\n    },\n    collectionFormat: \"CSV\",\n};\nconst delimiter = {\n    parameterPath: \"delimiter\",\n    mapper: {\n        serializedName: \"delimiter\",\n        required: true,\n        xmlName: \"delimiter\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst snapshot = {\n    parameterPath: [\"options\", \"snapshot\"],\n    mapper: {\n        serializedName: \"snapshot\",\n        xmlName: \"snapshot\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst versionId = {\n    parameterPath: [\"options\", \"versionId\"],\n    mapper: {\n        serializedName: \"versionid\",\n        xmlName: \"versionid\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst range = {\n    parameterPath: [\"options\", \"range\"],\n    mapper: {\n        serializedName: \"x-ms-range\",\n        xmlName: \"x-ms-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst rangeGetContentMD5 = {\n    parameterPath: [\"options\", \"rangeGetContentMD5\"],\n    mapper: {\n        serializedName: \"x-ms-range-get-content-md5\",\n        xmlName: \"x-ms-range-get-content-md5\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst rangeGetContentCRC64 = {\n    parameterPath: [\"options\", \"rangeGetContentCRC64\"],\n    mapper: {\n        serializedName: \"x-ms-range-get-content-crc64\",\n        xmlName: \"x-ms-range-get-content-crc64\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst encryptionKey = {\n    parameterPath: [\"options\", \"cpkInfo\", \"encryptionKey\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-key\",\n        xmlName: \"x-ms-encryption-key\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst encryptionKeySha256 = {\n    parameterPath: [\"options\", \"cpkInfo\", \"encryptionKeySha256\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst encryptionAlgorithm = {\n    parameterPath: [\"options\", \"cpkInfo\", \"encryptionAlgorithm\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-algorithm\",\n        xmlName: \"x-ms-encryption-algorithm\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst ifMatch = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifMatch\"],\n    mapper: {\n        serializedName: \"If-Match\",\n        xmlName: \"If-Match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst ifNoneMatch = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifNoneMatch\"],\n    mapper: {\n        serializedName: \"If-None-Match\",\n        xmlName: \"If-None-Match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst ifTags = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifTags\"],\n    mapper: {\n        serializedName: \"x-ms-if-tags\",\n        xmlName: \"x-ms-if-tags\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst deleteSnapshots = {\n    parameterPath: [\"options\", \"deleteSnapshots\"],\n    mapper: {\n        serializedName: \"x-ms-delete-snapshots\",\n        xmlName: \"x-ms-delete-snapshots\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"include\", \"only\"],\n        },\n    },\n};\nconst blobDeleteType = {\n    parameterPath: [\"options\", \"blobDeleteType\"],\n    mapper: {\n        serializedName: \"deletetype\",\n        xmlName: \"deletetype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp11 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"expiry\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst expiryOptions = {\n    parameterPath: \"expiryOptions\",\n    mapper: {\n        serializedName: \"x-ms-expiry-option\",\n        required: true,\n        xmlName: \"x-ms-expiry-option\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst expiresOn = {\n    parameterPath: [\"options\", \"expiresOn\"],\n    mapper: {\n        serializedName: \"x-ms-expiry-time\",\n        xmlName: \"x-ms-expiry-time\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobCacheControl = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobCacheControl\"],\n    mapper: {\n        serializedName: \"x-ms-blob-cache-control\",\n        xmlName: \"x-ms-blob-cache-control\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobContentType = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentType\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-type\",\n        xmlName: \"x-ms-blob-content-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobContentMD5 = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentMD5\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-md5\",\n        xmlName: \"x-ms-blob-content-md5\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nconst blobContentEncoding = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentEncoding\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-encoding\",\n        xmlName: \"x-ms-blob-content-encoding\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobContentLanguage = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentLanguage\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-language\",\n        xmlName: \"x-ms-blob-content-language\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobContentDisposition = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentDisposition\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-disposition\",\n        xmlName: \"x-ms-blob-content-disposition\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp12 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"immutabilityPolicies\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst immutabilityPolicyExpiry = {\n    parameterPath: [\"options\", \"immutabilityPolicyExpiry\"],\n    mapper: {\n        serializedName: \"x-ms-immutability-policy-until-date\",\n        xmlName: \"x-ms-immutability-policy-until-date\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nconst immutabilityPolicyMode = {\n    parameterPath: [\"options\", \"immutabilityPolicyMode\"],\n    mapper: {\n        serializedName: \"x-ms-immutability-policy-mode\",\n        xmlName: \"x-ms-immutability-policy-mode\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n        },\n    },\n};\nconst comp13 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"legalhold\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst legalHold = {\n    parameterPath: \"legalHold\",\n    mapper: {\n        serializedName: \"x-ms-legal-hold\",\n        required: true,\n        xmlName: \"x-ms-legal-hold\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst encryptionScope = {\n    parameterPath: [\"options\", \"encryptionScope\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp14 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"snapshot\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst tier = {\n    parameterPath: [\"options\", \"tier\"],\n    mapper: {\n        serializedName: \"x-ms-access-tier\",\n        xmlName: \"x-ms-access-tier\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\n                \"P4\",\n                \"P6\",\n                \"P10\",\n                \"P15\",\n                \"P20\",\n                \"P30\",\n                \"P40\",\n                \"P50\",\n                \"P60\",\n                \"P70\",\n                \"P80\",\n                \"Hot\",\n                \"Cool\",\n                \"Archive\",\n                \"Cold\",\n            ],\n        },\n    },\n};\nconst rehydratePriority = {\n    parameterPath: [\"options\", \"rehydratePriority\"],\n    mapper: {\n        serializedName: \"x-ms-rehydrate-priority\",\n        xmlName: \"x-ms-rehydrate-priority\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"High\", \"Standard\"],\n        },\n    },\n};\nconst sourceIfModifiedSince = {\n    parameterPath: [\n        \"options\",\n        \"sourceModifiedAccessConditions\",\n        \"sourceIfModifiedSince\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-source-if-modified-since\",\n        xmlName: \"x-ms-source-if-modified-since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nconst sourceIfUnmodifiedSince = {\n    parameterPath: [\n        \"options\",\n        \"sourceModifiedAccessConditions\",\n        \"sourceIfUnmodifiedSince\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-source-if-unmodified-since\",\n        xmlName: \"x-ms-source-if-unmodified-since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nconst sourceIfMatch = {\n    parameterPath: [\"options\", \"sourceModifiedAccessConditions\", \"sourceIfMatch\"],\n    mapper: {\n        serializedName: \"x-ms-source-if-match\",\n        xmlName: \"x-ms-source-if-match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceIfNoneMatch = {\n    parameterPath: [\n        \"options\",\n        \"sourceModifiedAccessConditions\",\n        \"sourceIfNoneMatch\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-source-if-none-match\",\n        xmlName: \"x-ms-source-if-none-match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceIfTags = {\n    parameterPath: [\"options\", \"sourceModifiedAccessConditions\", \"sourceIfTags\"],\n    mapper: {\n        serializedName: \"x-ms-source-if-tags\",\n        xmlName: \"x-ms-source-if-tags\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst copySource = {\n    parameterPath: \"copySource\",\n    mapper: {\n        serializedName: \"x-ms-copy-source\",\n        required: true,\n        xmlName: \"x-ms-copy-source\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobTagsString = {\n    parameterPath: [\"options\", \"blobTagsString\"],\n    mapper: {\n        serializedName: \"x-ms-tags\",\n        xmlName: \"x-ms-tags\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sealBlob = {\n    parameterPath: [\"options\", \"sealBlob\"],\n    mapper: {\n        serializedName: \"x-ms-seal-blob\",\n        xmlName: \"x-ms-seal-blob\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst legalHold1 = {\n    parameterPath: [\"options\", \"legalHold\"],\n    mapper: {\n        serializedName: \"x-ms-legal-hold\",\n        xmlName: \"x-ms-legal-hold\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst xMsRequiresSync = {\n    parameterPath: \"xMsRequiresSync\",\n    mapper: {\n        defaultValue: \"true\",\n        isConstant: true,\n        serializedName: \"x-ms-requires-sync\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceContentMD5 = {\n    parameterPath: [\"options\", \"sourceContentMD5\"],\n    mapper: {\n        serializedName: \"x-ms-source-content-md5\",\n        xmlName: \"x-ms-source-content-md5\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nconst copySourceAuthorization = {\n    parameterPath: [\"options\", \"copySourceAuthorization\"],\n    mapper: {\n        serializedName: \"x-ms-copy-source-authorization\",\n        xmlName: \"x-ms-copy-source-authorization\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst copySourceTags = {\n    parameterPath: [\"options\", \"copySourceTags\"],\n    mapper: {\n        serializedName: \"x-ms-copy-source-tag-option\",\n        xmlName: \"x-ms-copy-source-tag-option\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"REPLACE\", \"COPY\"],\n        },\n    },\n};\nconst comp15 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"copy\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst copyActionAbortConstant = {\n    parameterPath: \"copyActionAbortConstant\",\n    mapper: {\n        defaultValue: \"abort\",\n        isConstant: true,\n        serializedName: \"x-ms-copy-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst copyId = {\n    parameterPath: \"copyId\",\n    mapper: {\n        serializedName: \"copyid\",\n        required: true,\n        xmlName: \"copyid\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp16 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"tier\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst tier1 = {\n    parameterPath: \"tier\",\n    mapper: {\n        serializedName: \"x-ms-access-tier\",\n        required: true,\n        xmlName: \"x-ms-access-tier\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\n                \"P4\",\n                \"P6\",\n                \"P10\",\n                \"P15\",\n                \"P20\",\n                \"P30\",\n                \"P40\",\n                \"P50\",\n                \"P60\",\n                \"P70\",\n                \"P80\",\n                \"Hot\",\n                \"Cool\",\n                \"Archive\",\n                \"Cold\",\n            ],\n        },\n    },\n};\nconst queryRequest = {\n    parameterPath: [\"options\", \"queryRequest\"],\n    mapper: _models_mappers__WEBPACK_IMPORTED_MODULE_0__.QueryRequest,\n};\nconst comp17 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"query\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp18 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"tags\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst tags = {\n    parameterPath: [\"options\", \"tags\"],\n    mapper: _models_mappers__WEBPACK_IMPORTED_MODULE_0__.BlobTags,\n};\nconst transactionalContentMD5 = {\n    parameterPath: [\"options\", \"transactionalContentMD5\"],\n    mapper: {\n        serializedName: \"Content-MD5\",\n        xmlName: \"Content-MD5\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nconst transactionalContentCrc64 = {\n    parameterPath: [\"options\", \"transactionalContentCrc64\"],\n    mapper: {\n        serializedName: \"x-ms-content-crc64\",\n        xmlName: \"x-ms-content-crc64\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nconst blobType = {\n    parameterPath: \"blobType\",\n    mapper: {\n        defaultValue: \"PageBlob\",\n        isConstant: true,\n        serializedName: \"x-ms-blob-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobContentLength = {\n    parameterPath: \"blobContentLength\",\n    mapper: {\n        serializedName: \"x-ms-blob-content-length\",\n        required: true,\n        xmlName: \"x-ms-blob-content-length\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst blobSequenceNumber = {\n    parameterPath: [\"options\", \"blobSequenceNumber\"],\n    mapper: {\n        defaultValue: 0,\n        serializedName: \"x-ms-blob-sequence-number\",\n        xmlName: \"x-ms-blob-sequence-number\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst contentType1 = {\n    parameterPath: [\"options\", \"contentType\"],\n    mapper: {\n        defaultValue: \"application/octet-stream\",\n        isConstant: true,\n        serializedName: \"Content-Type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst body1 = {\n    parameterPath: \"body\",\n    mapper: {\n        serializedName: \"body\",\n        required: true,\n        xmlName: \"body\",\n        type: {\n            name: \"Stream\",\n        },\n    },\n};\nconst accept2 = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp19 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"page\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst pageWrite = {\n    parameterPath: \"pageWrite\",\n    mapper: {\n        defaultValue: \"update\",\n        isConstant: true,\n        serializedName: \"x-ms-page-write\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst ifSequenceNumberLessThanOrEqualTo = {\n    parameterPath: [\n        \"options\",\n        \"sequenceNumberAccessConditions\",\n        \"ifSequenceNumberLessThanOrEqualTo\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-if-sequence-number-le\",\n        xmlName: \"x-ms-if-sequence-number-le\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst ifSequenceNumberLessThan = {\n    parameterPath: [\n        \"options\",\n        \"sequenceNumberAccessConditions\",\n        \"ifSequenceNumberLessThan\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-if-sequence-number-lt\",\n        xmlName: \"x-ms-if-sequence-number-lt\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst ifSequenceNumberEqualTo = {\n    parameterPath: [\n        \"options\",\n        \"sequenceNumberAccessConditions\",\n        \"ifSequenceNumberEqualTo\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-if-sequence-number-eq\",\n        xmlName: \"x-ms-if-sequence-number-eq\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst pageWrite1 = {\n    parameterPath: \"pageWrite\",\n    mapper: {\n        defaultValue: \"clear\",\n        isConstant: true,\n        serializedName: \"x-ms-page-write\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceUrl = {\n    parameterPath: \"sourceUrl\",\n    mapper: {\n        serializedName: \"x-ms-copy-source\",\n        required: true,\n        xmlName: \"x-ms-copy-source\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceRange = {\n    parameterPath: \"sourceRange\",\n    mapper: {\n        serializedName: \"x-ms-source-range\",\n        required: true,\n        xmlName: \"x-ms-source-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceContentCrc64 = {\n    parameterPath: [\"options\", \"sourceContentCrc64\"],\n    mapper: {\n        serializedName: \"x-ms-source-content-crc64\",\n        xmlName: \"x-ms-source-content-crc64\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nconst range1 = {\n    parameterPath: \"range\",\n    mapper: {\n        serializedName: \"x-ms-range\",\n        required: true,\n        xmlName: \"x-ms-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp20 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"pagelist\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst prevsnapshot = {\n    parameterPath: [\"options\", \"prevsnapshot\"],\n    mapper: {\n        serializedName: \"prevsnapshot\",\n        xmlName: \"prevsnapshot\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst prevSnapshotUrl = {\n    parameterPath: [\"options\", \"prevSnapshotUrl\"],\n    mapper: {\n        serializedName: \"x-ms-previous-snapshot-url\",\n        xmlName: \"x-ms-previous-snapshot-url\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sequenceNumberAction = {\n    parameterPath: \"sequenceNumberAction\",\n    mapper: {\n        serializedName: \"x-ms-sequence-number-action\",\n        required: true,\n        xmlName: \"x-ms-sequence-number-action\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"max\", \"update\", \"increment\"],\n        },\n    },\n};\nconst comp21 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"incrementalcopy\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobType1 = {\n    parameterPath: \"blobType\",\n    mapper: {\n        defaultValue: \"AppendBlob\",\n        isConstant: true,\n        serializedName: \"x-ms-blob-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp22 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"appendblock\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst maxSize = {\n    parameterPath: [\"options\", \"appendPositionAccessConditions\", \"maxSize\"],\n    mapper: {\n        serializedName: \"x-ms-blob-condition-maxsize\",\n        xmlName: \"x-ms-blob-condition-maxsize\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst appendPosition = {\n    parameterPath: [\n        \"options\",\n        \"appendPositionAccessConditions\",\n        \"appendPosition\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-blob-condition-appendpos\",\n        xmlName: \"x-ms-blob-condition-appendpos\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst sourceRange1 = {\n    parameterPath: [\"options\", \"sourceRange\"],\n    mapper: {\n        serializedName: \"x-ms-source-range\",\n        xmlName: \"x-ms-source-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp23 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"seal\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobType2 = {\n    parameterPath: \"blobType\",\n    mapper: {\n        defaultValue: \"BlockBlob\",\n        isConstant: true,\n        serializedName: \"x-ms-blob-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst copySourceBlobProperties = {\n    parameterPath: [\"options\", \"copySourceBlobProperties\"],\n    mapper: {\n        serializedName: \"x-ms-copy-source-blob-properties\",\n        xmlName: \"x-ms-copy-source-blob-properties\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst comp24 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"block\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blockId = {\n    parameterPath: \"blockId\",\n    mapper: {\n        serializedName: \"blockid\",\n        required: true,\n        xmlName: \"blockid\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blocks = {\n    parameterPath: \"blocks\",\n    mapper: _models_mappers__WEBPACK_IMPORTED_MODULE_0__.BlockLookupList,\n};\nconst comp25 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"blocklist\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst listType = {\n    parameterPath: \"listType\",\n    mapper: {\n        defaultValue: \"committed\",\n        serializedName: \"blocklisttype\",\n        required: true,\n        xmlName: \"blocklisttype\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"committed\", \"uncommitted\", \"all\"],\n        },\n    },\n};\n//# sourceMappingURL=parameters.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppendBlobImpl: () => (/* binding */ AppendBlobImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing AppendBlob operations. */\nclass AppendBlobImpl {\n    /**\n     * Initialize a new instance of the class AppendBlob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Create Append Blob operation creates a new append blob.\n     * @param contentLength The length of the request.\n     * @param options The options parameters.\n     */\n    create(contentLength, options) {\n        return this.client.sendOperationRequest({ contentLength, options }, createOperationSpec);\n    }\n    /**\n     * The Append Block operation commits a new block of data to the end of an existing append blob. The\n     * Append Block operation is permitted only if the blob was created with x-ms-blob-type set to\n     * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    appendBlock(contentLength, body, options) {\n        return this.client.sendOperationRequest({ contentLength, body, options }, appendBlockOperationSpec);\n    }\n    /**\n     * The Append Block operation commits a new block of data to the end of an existing append blob where\n     * the contents are read from a source url. The Append Block operation is permitted only if the blob\n     * was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on version\n     * 2015-02-21 version or later.\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param contentLength The length of the request.\n     * @param options The options parameters.\n     */\n    appendBlockFromUrl(sourceUrl, contentLength, options) {\n        return this.client.sendOperationRequest({ sourceUrl, contentLength, options }, appendBlockFromUrlOperationSpec);\n    }\n    /**\n     * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version\n     * 2019-12-12 version or later.\n     * @param options The options parameters.\n     */\n    seal(options) {\n        return this.client.sendOperationRequest({ options }, sealOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst createOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobCreateHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobCreateExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobType1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst appendBlockOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobAppendBlockHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobAppendBlockExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body1,\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp22],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.appendPosition,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst appendBlockFromUrlOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobAppendBlockFromUrlHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobAppendBlockFromUrlExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp22],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceAuthorization,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceUrl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.appendPosition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceRange1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst sealOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobSealHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobSealExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp23],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.appendPosition,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=appendBlob.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobImpl: () => (/* binding */ BlobImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing Blob operations. */\nclass BlobImpl {\n    /**\n     * Initialize a new instance of the class Blob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Download operation reads or downloads a blob from the system, including its metadata and\n     * properties. You can also call Download to read a snapshot.\n     * @param options The options parameters.\n     */\n    download(options) {\n        return this.client.sendOperationRequest({ options }, downloadOperationSpec);\n    }\n    /**\n     * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system\n     * properties for the blob. It does not return the content of the blob.\n     * @param options The options parameters.\n     */\n    getProperties(options) {\n        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec);\n    }\n    /**\n     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is\n     * permanently removed from the storage account. If the storage account's soft delete feature is\n     * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible\n     * immediately. However, the blob service retains the blob or snapshot for the number of days specified\n     * by the DeleteRetentionPolicy section of [Storage service properties]\n     * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is\n     * permanently removed from the storage account. Note that you continue to be charged for the\n     * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the\n     * \"include=deleted\" query parameter to discover which blobs and snapshots have been soft deleted. You\n     * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a\n     * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n     * (ResourceNotFound).\n     * @param options The options parameters.\n     */\n    delete(options) {\n        return this.client.sendOperationRequest({ options }, deleteOperationSpec);\n    }\n    /**\n     * Undelete a blob that was previously soft deleted\n     * @param options The options parameters.\n     */\n    undelete(options) {\n        return this.client.sendOperationRequest({ options }, undeleteOperationSpec);\n    }\n    /**\n     * Sets the time a blob will expire and be deleted.\n     * @param expiryOptions Required. Indicates mode of the expiry time\n     * @param options The options parameters.\n     */\n    setExpiry(expiryOptions, options) {\n        return this.client.sendOperationRequest({ expiryOptions, options }, setExpiryOperationSpec);\n    }\n    /**\n     * The Set HTTP Headers operation sets system properties on the blob\n     * @param options The options parameters.\n     */\n    setHttpHeaders(options) {\n        return this.client.sendOperationRequest({ options }, setHttpHeadersOperationSpec);\n    }\n    /**\n     * The Set Immutability Policy operation sets the immutability policy on the blob\n     * @param options The options parameters.\n     */\n    setImmutabilityPolicy(options) {\n        return this.client.sendOperationRequest({ options }, setImmutabilityPolicyOperationSpec);\n    }\n    /**\n     * The Delete Immutability Policy operation deletes the immutability policy on the blob\n     * @param options The options parameters.\n     */\n    deleteImmutabilityPolicy(options) {\n        return this.client.sendOperationRequest({ options }, deleteImmutabilityPolicyOperationSpec);\n    }\n    /**\n     * The Set Legal Hold operation sets a legal hold on the blob.\n     * @param legalHold Specified if a legal hold should be set on the blob.\n     * @param options The options parameters.\n     */\n    setLegalHold(legalHold, options) {\n        return this.client.sendOperationRequest({ legalHold, options }, setLegalHoldOperationSpec);\n    }\n    /**\n     * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more\n     * name-value pairs\n     * @param options The options parameters.\n     */\n    setMetadata(options) {\n        return this.client.sendOperationRequest({ options }, setMetadataOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param options The options parameters.\n     */\n    acquireLease(options) {\n        return this.client.sendOperationRequest({ options }, acquireLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    releaseLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, releaseLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    renewLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, renewLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n     *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n     *                        (String) for a list of valid GUID string formats.\n     * @param options The options parameters.\n     */\n    changeLease(leaseId, proposedLeaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, proposedLeaseId, options }, changeLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param options The options parameters.\n     */\n    breakLease(options) {\n        return this.client.sendOperationRequest({ options }, breakLeaseOperationSpec);\n    }\n    /**\n     * The Create Snapshot operation creates a read-only snapshot of a blob\n     * @param options The options parameters.\n     */\n    createSnapshot(options) {\n        return this.client.sendOperationRequest({ options }, createSnapshotOperationSpec);\n    }\n    /**\n     * The Start Copy From URL operation copies a blob or an internet resource to a new blob.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    startCopyFromURL(copySource, options) {\n        return this.client.sendOperationRequest({ copySource, options }, startCopyFromURLOperationSpec);\n    }\n    /**\n     * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return\n     * a response until the copy is complete.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    copyFromURL(copySource, options) {\n        return this.client.sendOperationRequest({ copySource, options }, copyFromURLOperationSpec);\n    }\n    /**\n     * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination\n     * blob with zero length and full metadata.\n     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n     *               operation.\n     * @param options The options parameters.\n     */\n    abortCopyFromURL(copyId, options) {\n        return this.client.sendOperationRequest({ copyId, options }, abortCopyFromURLOperationSpec);\n    }\n    /**\n     * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium\n     * storage account and on a block blob in a blob storage account (locally redundant storage only). A\n     * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block\n     * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's\n     * ETag.\n     * @param tier Indicates the tier to be set on the blob.\n     * @param options The options parameters.\n     */\n    setTier(tier, options) {\n        return this.client.sendOperationRequest({ tier, options }, setTierOperationSpec);\n    }\n    /**\n     * Returns the sku name and account kind\n     * @param options The options parameters.\n     */\n    getAccountInfo(options) {\n        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec);\n    }\n    /**\n     * The Query operation enables users to select/project on blob data by providing simple query\n     * expressions.\n     * @param options The options parameters.\n     */\n    query(options) {\n        return this.client.sendOperationRequest({ options }, queryOperationSpec);\n    }\n    /**\n     * The Get Tags operation enables users to get the tags associated with a blob.\n     * @param options The options parameters.\n     */\n    getTags(options) {\n        return this.client.sendOperationRequest({ options }, getTagsOperationSpec);\n    }\n    /**\n     * The Set Tags operation enables users to set tags on a blob.\n     * @param options The options parameters.\n     */\n    setTags(options) {\n        return this.client.sendOperationRequest({ options }, setTagsOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst downloadOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDownloadHeaders,\n        },\n        206: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDownloadHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDownloadExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.rangeGetContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.rangeGetContentCRC64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"HEAD\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetPropertiesExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst deleteOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDeleteHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDeleteExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobDeleteType,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.deleteSnapshots,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst undeleteOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobUndeleteHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobUndeleteExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp8],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setExpiryOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetExpiryHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetExpiryExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp11],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.expiryOptions,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.expiresOn,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setHttpHeadersOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetHttpHeadersHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetHttpHeadersExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setImmutabilityPolicyOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetImmutabilityPolicyHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetImmutabilityPolicyExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp12],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst deleteImmutabilityPolicyOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDeleteImmutabilityPolicyHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDeleteImmutabilityPolicyExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp12],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setLegalHoldOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetLegalHoldHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetLegalHoldExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp13],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setMetadataOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetMetadataHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetMetadataExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp6],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst acquireLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobAcquireLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobAcquireLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.duration,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.proposedLeaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst releaseLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobReleaseLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobReleaseLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst renewLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobRenewLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobRenewLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst changeLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobChangeLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobChangeLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action4,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.proposedLeaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst breakLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobBreakLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobBreakLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action3,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.breakPeriod,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst createSnapshotOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobCreateSnapshotHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobCreateSnapshotExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp14],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst startCopyFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobStartCopyFromURLHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobStartCopyFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.rehydratePriority,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySource,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sealBlob,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst copyFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobCopyFromURLHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobCopyFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySource,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.xMsRequiresSync,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceAuthorization,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst abortCopyFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        204: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobAbortCopyFromURLHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobAbortCopyFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp15,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copyId,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copyActionAbortConstant,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setTierOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetTierHeaders,\n        },\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetTierHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetTierExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp16,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.rehydratePriority,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetAccountInfoHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetAccountInfoExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype1],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.version, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst queryOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"POST\",\n    responses: {\n        200: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobQueryHeaders,\n        },\n        206: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobQueryHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobQueryExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.queryRequest,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp17,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getTagsOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobTags,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetTagsHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetTagsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp18,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setTagsOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        204: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetTagsHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetTagsExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tags,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp18,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=blob.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockBlobImpl: () => (/* binding */ BlockBlobImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing BlockBlob operations. */\nclass BlockBlobImpl {\n    /**\n     * Initialize a new instance of the class BlockBlob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing\n     * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put\n     * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a\n     * partial update of the content of a block blob, use the Put Block List operation.\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    upload(contentLength, body, options) {\n        return this.client.sendOperationRequest({ contentLength, body, options }, uploadOperationSpec);\n    }\n    /**\n     * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read\n     * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are\n     * not supported with Put Blob from URL; the content of an existing blob is overwritten with the\n     * content of the new blob.  To perform partial updates to a block blob’s contents using a source URL,\n     * use the Put Block from URL API in conjunction with Put Block List.\n     * @param contentLength The length of the request.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    putBlobFromUrl(contentLength, copySource, options) {\n        return this.client.sendOperationRequest({ contentLength, copySource, options }, putBlobFromUrlOperationSpec);\n    }\n    /**\n     * The Stage Block operation creates a new block to be committed as part of a blob\n     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n     *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n     *                for the blockid parameter must be the same size for each block.\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    stageBlock(blockId, contentLength, body, options) {\n        return this.client.sendOperationRequest({ blockId, contentLength, body, options }, stageBlockOperationSpec);\n    }\n    /**\n     * The Stage Block operation creates a new block to be committed as part of a blob where the contents\n     * are read from a URL.\n     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n     *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n     *                for the blockid parameter must be the same size for each block.\n     * @param contentLength The length of the request.\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param options The options parameters.\n     */\n    stageBlockFromURL(blockId, contentLength, sourceUrl, options) {\n        return this.client.sendOperationRequest({ blockId, contentLength, sourceUrl, options }, stageBlockFromURLOperationSpec);\n    }\n    /**\n     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the\n     * blob. In order to be written as part of a blob, a block must have been successfully written to the\n     * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading\n     * only those blocks that have changed, then committing the new and existing blocks together. You can\n     * do this by specifying whether to commit a block from the committed block list or from the\n     * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list\n     * it may belong to.\n     * @param blocks Blob Blocks.\n     * @param options The options parameters.\n     */\n    commitBlockList(blocks, options) {\n        return this.client.sendOperationRequest({ blocks, options }, commitBlockListOperationSpec);\n    }\n    /**\n     * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block\n     * blob\n     * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted\n     *                 blocks, or both lists together.\n     * @param options The options parameters.\n     */\n    getBlockList(listType, options) {\n        return this.client.sendOperationRequest({ listType, options }, getBlockListOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst uploadOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobUploadHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobUploadExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body1,\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobType2,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst putBlobFromUrlOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobPutBlobFromUrlHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobPutBlobFromUrlExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySource,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceAuthorization,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobType2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceBlobProperties,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst stageBlockOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobStageBlockHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobStageBlockExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body1,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp24,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blockId,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept2,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst stageBlockFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobStageBlockFromURLHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobStageBlockFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp24,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blockId,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceAuthorization,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceUrl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceRange1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst commitBlockListOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobCommitBlockListHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobCommitBlockListExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blocks,\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp25],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getBlockListOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockList,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobGetBlockListHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobGetBlockListExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp25,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.listType,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=blockBlob.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContainerImpl: () => (/* binding */ ContainerImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing Container operations. */\nclass ContainerImpl {\n    /**\n     * Initialize a new instance of the class Container class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * creates a new container under the specified account. If the container with the same name already\n     * exists, the operation fails\n     * @param options The options parameters.\n     */\n    create(options) {\n        return this.client.sendOperationRequest({ options }, createOperationSpec);\n    }\n    /**\n     * returns all user-defined metadata and system properties for the specified container. The data\n     * returned does not include the container's list of blobs\n     * @param options The options parameters.\n     */\n    getProperties(options) {\n        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec);\n    }\n    /**\n     * operation marks the specified container for deletion. The container and any blobs contained within\n     * it are later deleted during garbage collection\n     * @param options The options parameters.\n     */\n    delete(options) {\n        return this.client.sendOperationRequest({ options }, deleteOperationSpec);\n    }\n    /**\n     * operation sets one or more user-defined name-value pairs for the specified container.\n     * @param options The options parameters.\n     */\n    setMetadata(options) {\n        return this.client.sendOperationRequest({ options }, setMetadataOperationSpec);\n    }\n    /**\n     * gets the permissions for the specified container. The permissions indicate whether container data\n     * may be accessed publicly.\n     * @param options The options parameters.\n     */\n    getAccessPolicy(options) {\n        return this.client.sendOperationRequest({ options }, getAccessPolicyOperationSpec);\n    }\n    /**\n     * sets the permissions for the specified container. The permissions indicate whether blobs in a\n     * container may be accessed publicly.\n     * @param options The options parameters.\n     */\n    setAccessPolicy(options) {\n        return this.client.sendOperationRequest({ options }, setAccessPolicyOperationSpec);\n    }\n    /**\n     * Restores a previously-deleted container.\n     * @param options The options parameters.\n     */\n    restore(options) {\n        return this.client.sendOperationRequest({ options }, restoreOperationSpec);\n    }\n    /**\n     * Renames an existing container.\n     * @param sourceContainerName Required.  Specifies the name of the container to rename.\n     * @param options The options parameters.\n     */\n    rename(sourceContainerName, options) {\n        return this.client.sendOperationRequest({ sourceContainerName, options }, renameOperationSpec);\n    }\n    /**\n     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n     * @param contentLength The length of the request.\n     * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n     *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    submitBatch(contentLength, multipartContentType, body, options) {\n        return this.client.sendOperationRequest({ contentLength, multipartContentType, body, options }, submitBatchOperationSpec);\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given\n     * search expression.  Filter blobs searches within the given container.\n     * @param options The options parameters.\n     */\n    filterBlobs(options) {\n        return this.client.sendOperationRequest({ options }, filterBlobsOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param options The options parameters.\n     */\n    acquireLease(options) {\n        return this.client.sendOperationRequest({ options }, acquireLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    releaseLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, releaseLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    renewLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, renewLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param options The options parameters.\n     */\n    breakLease(options) {\n        return this.client.sendOperationRequest({ options }, breakLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n     *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n     *                        (String) for a list of valid GUID string formats.\n     * @param options The options parameters.\n     */\n    changeLease(leaseId, proposedLeaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, proposedLeaseId, options }, changeLeaseOperationSpec);\n    }\n    /**\n     * [Update] The List Blobs operation returns a list of the blobs under the specified container\n     * @param options The options parameters.\n     */\n    listBlobFlatSegment(options) {\n        return this.client.sendOperationRequest({ options }, listBlobFlatSegmentOperationSpec);\n    }\n    /**\n     * [Update] The List Blobs operation returns a list of the blobs under the specified container\n     * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix\n     *                  element in the response body that acts as a placeholder for all blobs whose names begin with the\n     *                  same substring up to the appearance of the delimiter character. The delimiter may be a single\n     *                  character or a string.\n     * @param options The options parameters.\n     */\n    listBlobHierarchySegment(delimiter, options) {\n        return this.client.sendOperationRequest({ delimiter, options }, listBlobHierarchySegmentOperationSpec);\n    }\n    /**\n     * Returns the sku name and account kind\n     * @param options The options parameters.\n     */\n    getAccountInfo(options) {\n        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst createOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerCreateHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerCreateExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.access,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.defaultEncryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.preventEncryptionScopeOverride,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetPropertiesExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst deleteOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerDeleteHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerDeleteExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setMetadataOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSetMetadataHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSetMetadataExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp6,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getAccessPolicyOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: {\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: { name: \"Composite\", className: \"SignedIdentifier\" },\n                    },\n                },\n                serializedName: \"SignedIdentifiers\",\n                xmlName: \"SignedIdentifiers\",\n                xmlIsWrapped: true,\n                xmlElementName: \"SignedIdentifier\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetAccessPolicyHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetAccessPolicyExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp7,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setAccessPolicyOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSetAccessPolicyHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSetAccessPolicyExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.containerAcl,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp7,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.access,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst restoreOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRestoreHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRestoreExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp8,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.deletedContainerName,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.deletedContainerVersion,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst renameOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRenameHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRenameExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp9,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContainerName,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceLeaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst submitBatchOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"POST\",\n    responses: {\n        202: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSubmitBatchHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSubmitBatchExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp4,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.multipartContentType,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst filterBlobsOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.FilterBlobSegment,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerFilterBlobsHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerFilterBlobsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.where,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst acquireLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerAcquireLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerAcquireLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.duration,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.proposedLeaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst releaseLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerReleaseLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerReleaseLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst renewLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRenewLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRenewLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action2,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst breakLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerBreakLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerBreakLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action3,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.breakPeriod,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst changeLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerChangeLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerChangeLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action4,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.proposedLeaseId1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst listBlobFlatSegmentOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ListBlobsFlatSegmentResponse,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerListBlobFlatSegmentHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerListBlobFlatSegmentExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.prefix,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.include1,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst listBlobHierarchySegmentOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ListBlobsHierarchySegmentResponse,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerListBlobHierarchySegmentHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerListBlobHierarchySegmentExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.prefix,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.include1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.delimiter,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetAccountInfoHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetAccountInfoExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype1],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.version, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=container.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PageBlobImpl: () => (/* binding */ PageBlobImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing PageBlob operations. */\nclass PageBlobImpl {\n    /**\n     * Initialize a new instance of the class PageBlob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Create operation creates a new page blob.\n     * @param contentLength The length of the request.\n     * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n     *                          page blob size must be aligned to a 512-byte boundary.\n     * @param options The options parameters.\n     */\n    create(contentLength, blobContentLength, options) {\n        return this.client.sendOperationRequest({ contentLength, blobContentLength, options }, createOperationSpec);\n    }\n    /**\n     * The Upload Pages operation writes a range of pages to a page blob\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    uploadPages(contentLength, body, options) {\n        return this.client.sendOperationRequest({ contentLength, body, options }, uploadPagesOperationSpec);\n    }\n    /**\n     * The Clear Pages operation clears a set of pages from a page blob\n     * @param contentLength The length of the request.\n     * @param options The options parameters.\n     */\n    clearPages(contentLength, options) {\n        return this.client.sendOperationRequest({ contentLength, options }, clearPagesOperationSpec);\n    }\n    /**\n     * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a\n     * URL\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param sourceRange Bytes of source data in the specified range. The length of this range should\n     *                    match the ContentLength header and x-ms-range/Range destination range header.\n     * @param contentLength The length of the request.\n     * @param range The range of bytes to which the source range would be written. The range should be 512\n     *              aligned and range-end is required.\n     * @param options The options parameters.\n     */\n    uploadPagesFromURL(sourceUrl, sourceRange, contentLength, range, options) {\n        return this.client.sendOperationRequest({ sourceUrl, sourceRange, contentLength, range, options }, uploadPagesFromURLOperationSpec);\n    }\n    /**\n     * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a\n     * page blob\n     * @param options The options parameters.\n     */\n    getPageRanges(options) {\n        return this.client.sendOperationRequest({ options }, getPageRangesOperationSpec);\n    }\n    /**\n     * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were\n     * changed between target blob and previous snapshot.\n     * @param options The options parameters.\n     */\n    getPageRangesDiff(options) {\n        return this.client.sendOperationRequest({ options }, getPageRangesDiffOperationSpec);\n    }\n    /**\n     * Resize the Blob\n     * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n     *                          page blob size must be aligned to a 512-byte boundary.\n     * @param options The options parameters.\n     */\n    resize(blobContentLength, options) {\n        return this.client.sendOperationRequest({ blobContentLength, options }, resizeOperationSpec);\n    }\n    /**\n     * Update the sequence number of the blob\n     * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.\n     *                             This property applies to page blobs only. This property indicates how the service should modify the\n     *                             blob's sequence number\n     * @param options The options parameters.\n     */\n    updateSequenceNumber(sequenceNumberAction, options) {\n        return this.client.sendOperationRequest({ sequenceNumberAction, options }, updateSequenceNumberOperationSpec);\n    }\n    /**\n     * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.\n     * The snapshot is copied such that only the differential changes between the previously copied\n     * snapshot are transferred to the destination. The copied snapshots are complete copies of the\n     * original snapshot and can be read or copied from as usual. This API is supported since REST version\n     * 2016-05-31.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    copyIncremental(copySource, options) {\n        return this.client.sendOperationRequest({ copySource, options }, copyIncrementalOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst createOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobCreateHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobCreateExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobSequenceNumber,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst uploadPagesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUploadPagesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUploadPagesExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body1,\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp19],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.pageWrite,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThanOrEqualTo,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThan,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberEqualTo,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst clearPagesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobClearPagesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobClearPagesExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp19],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThanOrEqualTo,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThan,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberEqualTo,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.pageWrite1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst uploadPagesFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUploadPagesFromURLHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUploadPagesFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp19],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceAuthorization,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.pageWrite,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThanOrEqualTo,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThan,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberEqualTo,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceUrl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceRange,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPageRangesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageList,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobGetPageRangesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobGetPageRangesExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp20,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPageRangesDiffOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageList,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobGetPageRangesDiffHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobGetPageRangesDiffExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp20,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.prevsnapshot,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.prevSnapshotUrl,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst resizeOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobResizeHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobResizeExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLength,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst updateSequenceNumberOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUpdateSequenceNumberHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUpdateSequenceNumberExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobSequenceNumber,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sequenceNumberAction,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst copyIncrementalOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobCopyIncrementalHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobCopyIncrementalExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp21],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySource,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=pageBlob.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServiceImpl: () => (/* binding */ ServiceImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing Service operations. */\nclass ServiceImpl {\n    /**\n     * Initialize a new instance of the class Service class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Sets properties for a storage account's Blob service endpoint, including properties for Storage\n     * Analytics and CORS (Cross-Origin Resource Sharing) rules\n     * @param blobServiceProperties The StorageService properties.\n     * @param options The options parameters.\n     */\n    setProperties(blobServiceProperties, options) {\n        return this.client.sendOperationRequest({ blobServiceProperties, options }, setPropertiesOperationSpec);\n    }\n    /**\n     * gets the properties of a storage account's Blob service, including properties for Storage Analytics\n     * and CORS (Cross-Origin Resource Sharing) rules.\n     * @param options The options parameters.\n     */\n    getProperties(options) {\n        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec);\n    }\n    /**\n     * Retrieves statistics related to replication for the Blob service. It is only available on the\n     * secondary location endpoint when read-access geo-redundant replication is enabled for the storage\n     * account.\n     * @param options The options parameters.\n     */\n    getStatistics(options) {\n        return this.client.sendOperationRequest({ options }, getStatisticsOperationSpec);\n    }\n    /**\n     * The List Containers Segment operation returns a list of the containers under the specified account\n     * @param options The options parameters.\n     */\n    listContainersSegment(options) {\n        return this.client.sendOperationRequest({ options }, listContainersSegmentOperationSpec);\n    }\n    /**\n     * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n     * bearer token authentication.\n     * @param keyInfo Key information\n     * @param options The options parameters.\n     */\n    getUserDelegationKey(keyInfo, options) {\n        return this.client.sendOperationRequest({ keyInfo, options }, getUserDelegationKeyOperationSpec);\n    }\n    /**\n     * Returns the sku name and account kind\n     * @param options The options parameters.\n     */\n    getAccountInfo(options) {\n        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec);\n    }\n    /**\n     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n     * @param contentLength The length of the request.\n     * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n     *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    submitBatch(contentLength, multipartContentType, body, options) {\n        return this.client.sendOperationRequest({ contentLength, multipartContentType, body, options }, submitBatchOperationSpec);\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a\n     * given search expression.  Filter blobs searches across all containers within a storage account but\n     * can be scoped within the expression to a single container.\n     * @param options The options parameters.\n     */\n    filterBlobs(options) {\n        return this.client.sendOperationRequest({ options }, filterBlobsOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst setPropertiesOperationSpec = {\n    path: \"/\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceSetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceSetPropertiesExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobServiceProperties,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobServiceProperties,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetPropertiesExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getStatisticsOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobServiceStatistics,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetStatisticsHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetStatisticsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp1,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst listContainersSegmentOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ListContainersSegmentResponse,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceListContainersSegmentHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceListContainersSegmentExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.prefix,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.include,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getUserDelegationKeyOperationSpec = {\n    path: \"/\",\n    httpMethod: \"POST\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.UserDelegationKey,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetUserDelegationKeyHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetUserDelegationKeyExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.keyInfo,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp3,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetAccountInfoHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetAccountInfoExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype1],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.version, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst submitBatchOperationSpec = {\n    path: \"/\",\n    httpMethod: \"POST\",\n    responses: {\n        202: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceSubmitBatchHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceSubmitBatchExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body,\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp4],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.multipartContentType,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst filterBlobsOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.FilterBlobSegment,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceFilterBlobsHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceFilterBlobsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.where,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=service.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageClient: () => (/* binding */ StorageClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_http_compat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-http-compat */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/index.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operations */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operations */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operations */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operations */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operations */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operations */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\nclass StorageClient extends _azure_core_http_compat__WEBPACK_IMPORTED_MODULE_0__.ExtendedServiceClient {\n    /**\n     * Initializes a new instance of the StorageClient class.\n     * @param url The URL of the service account, container, or blob that is the target of the desired\n     *            operation.\n     * @param options The parameter options\n     */\n    constructor(url, options) {\n        var _a, _b;\n        if (url === undefined) {\n            throw new Error(\"'url' cannot be null\");\n        }\n        // Initializing default values for options\n        if (!options) {\n            options = {};\n        }\n        const defaults = {\n            requestContentType: \"application/json; charset=utf-8\",\n        };\n        const packageDetails = `azsdk-js-azure-storage-blob/12.23.0`;\n        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n            : `${packageDetails}`;\n        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {\n                userAgentPrefix,\n            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : \"{url}\" });\n        super(optionsWithDefaults);\n        // Parameter assignments\n        this.url = url;\n        // Assigning values to Constant parameters\n        this.version = options.version || \"2023-11-03\";\n        this.service = new _operations__WEBPACK_IMPORTED_MODULE_1__.ServiceImpl(this);\n        this.container = new _operations__WEBPACK_IMPORTED_MODULE_2__.ContainerImpl(this);\n        this.blob = new _operations__WEBPACK_IMPORTED_MODULE_3__.BlobImpl(this);\n        this.pageBlob = new _operations__WEBPACK_IMPORTED_MODULE_4__.PageBlobImpl(this);\n        this.appendBlob = new _operations__WEBPACK_IMPORTED_MODULE_5__.AppendBlobImpl(this);\n        this.blockBlob = new _operations__WEBPACK_IMPORTED_MODULE_6__.BlockBlobImpl(this);\n    }\n}\n//# sourceMappingURL=storageClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2dlbmVyYXRlZC9zcmMvc3RvcmFnZUNsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzBEO0FBQ3dEO0FBQzNHLDRCQUE0QiwwRUFBb0M7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDBDQUEwQyxFQUFFLGVBQWU7QUFDNUUsaUJBQWlCLGVBQWU7QUFDaEMsZ0ZBQWdGLHlCQUF5QjtBQUN6RztBQUNBLGFBQWEsK0hBQStILElBQUksR0FBRztBQUNuSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLG9EQUFXO0FBQ3RDLDZCQUE2QixzREFBYTtBQUMxQyx3QkFBd0IsaURBQVE7QUFDaEMsNEJBQTRCLHFEQUFZO0FBQ3hDLDhCQUE4Qix1REFBYztBQUM1Qyw2QkFBNkIsc0RBQWE7QUFDMUM7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2dlbmVyYXRlZC9zcmMvc3RvcmFnZUNsaWVudC5qcz9jNjRjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqXG4gKiBDb2RlIGdlbmVyYXRlZCBieSBNaWNyb3NvZnQgKFIpIEF1dG9SZXN0IENvZGUgR2VuZXJhdG9yLlxuICogQ2hhbmdlcyBtYXkgY2F1c2UgaW5jb3JyZWN0IGJlaGF2aW9yIGFuZCB3aWxsIGJlIGxvc3QgaWYgdGhlIGNvZGUgaXMgcmVnZW5lcmF0ZWQuXG4gKi9cbmltcG9ydCAqIGFzIGNvcmVIdHRwQ29tcGF0IGZyb20gXCJAYXp1cmUvY29yZS1odHRwLWNvbXBhdFwiO1xuaW1wb3J0IHsgU2VydmljZUltcGwsIENvbnRhaW5lckltcGwsIEJsb2JJbXBsLCBQYWdlQmxvYkltcGwsIEFwcGVuZEJsb2JJbXBsLCBCbG9ja0Jsb2JJbXBsLCB9IGZyb20gXCIuL29wZXJhdGlvbnNcIjtcbmV4cG9ydCBjbGFzcyBTdG9yYWdlQ2xpZW50IGV4dGVuZHMgY29yZUh0dHBDb21wYXQuRXh0ZW5kZWRTZXJ2aWNlQ2xpZW50IHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgU3RvcmFnZUNsaWVudCBjbGFzcy5cbiAgICAgKiBAcGFyYW0gdXJsIFRoZSBVUkwgb2YgdGhlIHNlcnZpY2UgYWNjb3VudCwgY29udGFpbmVyLCBvciBibG9iIHRoYXQgaXMgdGhlIHRhcmdldCBvZiB0aGUgZGVzaXJlZFxuICAgICAqICAgICAgICAgICAgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBwYXJhbWV0ZXIgb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHVybCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAodXJsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIid1cmwnIGNhbm5vdCBiZSBudWxsXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEluaXRpYWxpemluZyBkZWZhdWx0IHZhbHVlcyBmb3Igb3B0aW9uc1xuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIHJlcXVlc3RDb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHBhY2thZ2VEZXRhaWxzID0gYGF6c2RrLWpzLWF6dXJlLXN0b3JhZ2UtYmxvYi8xMi4yMy4wYDtcbiAgICAgICAgY29uc3QgdXNlckFnZW50UHJlZml4ID0gb3B0aW9ucy51c2VyQWdlbnRPcHRpb25zICYmIG9wdGlvbnMudXNlckFnZW50T3B0aW9ucy51c2VyQWdlbnRQcmVmaXhcbiAgICAgICAgICAgID8gYCR7b3B0aW9ucy51c2VyQWdlbnRPcHRpb25zLnVzZXJBZ2VudFByZWZpeH0gJHtwYWNrYWdlRGV0YWlsc31gXG4gICAgICAgICAgICA6IGAke3BhY2thZ2VEZXRhaWxzfWA7XG4gICAgICAgIGNvbnN0IG9wdGlvbnNXaXRoRGVmYXVsdHMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdHMpLCBvcHRpb25zKSwgeyB1c2VyQWdlbnRPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgdXNlckFnZW50UHJlZml4LFxuICAgICAgICAgICAgfSwgZW5kcG9pbnQ6IChfYiA9IChfYSA9IG9wdGlvbnMuZW5kcG9pbnQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG9wdGlvbnMuYmFzZVVyaSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJ7dXJsfVwiIH0pO1xuICAgICAgICBzdXBlcihvcHRpb25zV2l0aERlZmF1bHRzKTtcbiAgICAgICAgLy8gUGFyYW1ldGVyIGFzc2lnbm1lbnRzXG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICAvLyBBc3NpZ25pbmcgdmFsdWVzIHRvIENvbnN0YW50IHBhcmFtZXRlcnNcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gb3B0aW9ucy52ZXJzaW9uIHx8IFwiMjAyMy0xMS0wM1wiO1xuICAgICAgICB0aGlzLnNlcnZpY2UgPSBuZXcgU2VydmljZUltcGwodGhpcyk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gbmV3IENvbnRhaW5lckltcGwodGhpcyk7XG4gICAgICAgIHRoaXMuYmxvYiA9IG5ldyBCbG9iSW1wbCh0aGlzKTtcbiAgICAgICAgdGhpcy5wYWdlQmxvYiA9IG5ldyBQYWdlQmxvYkltcGwodGhpcyk7XG4gICAgICAgIHRoaXMuYXBwZW5kQmxvYiA9IG5ldyBBcHBlbmRCbG9iSW1wbCh0aGlzKTtcbiAgICAgICAgdGhpcy5ibG9ja0Jsb2IgPSBuZXcgQmxvY2tCbG9iSW1wbCh0aGlzKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdG9yYWdlQ2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * The `@azure/logger` configuration for this package.\n */\nconst logger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_0__.createClientLogger)(\"storage-blob\");\n//# sourceMappingURL=log.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2xvZy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ08sZUFBZSxpRUFBa0I7QUFDeEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvbG9nLmpzP2U0NzQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVDbGllbnRMb2dnZXIgfSBmcm9tIFwiQGF6dXJlL2xvZ2dlclwiO1xuLyoqXG4gKiBUaGUgYEBhenVyZS9sb2dnZXJgIGNvbmZpZ3VyYXRpb24gZm9yIHRoaXMgcGFja2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGxvZ2dlciA9IGNyZWF0ZUNsaWVudExvZ2dlcihcInN0b3JhZ2UtYmxvYlwiKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockBlobTier: () => (/* binding */ BlockBlobTier),\n/* harmony export */   PremiumPageBlobTier: () => (/* binding */ PremiumPageBlobTier),\n/* harmony export */   StorageBlobAudience: () => (/* binding */ StorageBlobAudience),\n/* harmony export */   ensureCpkIfSpecified: () => (/* binding */ ensureCpkIfSpecified),\n/* harmony export */   getBlobServiceAccountAudience: () => (/* binding */ getBlobServiceAccountAudience),\n/* harmony export */   toAccessTier: () => (/* binding */ toAccessTier)\n/* harmony export */ });\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Represents the access tier on a blob.\n * For detailed information about block blob level tiering see {@link https://docs.microsoft.com/azure/storage/blobs/storage-blob-storage-tiers|Hot, cool and archive storage tiers.}\n */\nvar BlockBlobTier;\n(function (BlockBlobTier) {\n    /**\n     * Optimized for storing data that is accessed frequently.\n     */\n    BlockBlobTier[\"Hot\"] = \"Hot\";\n    /**\n     * Optimized for storing data that is infrequently accessed and stored for at least 30 days.\n     */\n    BlockBlobTier[\"Cool\"] = \"Cool\";\n    /**\n     * Optimized for storing data that is rarely accessed.\n     */\n    BlockBlobTier[\"Cold\"] = \"Cold\";\n    /**\n     * Optimized for storing data that is rarely accessed and stored for at least 180 days\n     * with flexible latency requirements (on the order of hours).\n     */\n    BlockBlobTier[\"Archive\"] = \"Archive\";\n})(BlockBlobTier || (BlockBlobTier = {}));\n/**\n * Specifies the page blob tier to set the blob to. This is only applicable to page blobs on premium storage accounts.\n * Please see {@link https://docs.microsoft.com/azure/storage/storage-premium-storage#scalability-and-performance-targets|here}\n * for detailed information on the corresponding IOPS and throughput per PageBlobTier.\n */\nvar PremiumPageBlobTier;\n(function (PremiumPageBlobTier) {\n    /**\n     * P4 Tier.\n     */\n    PremiumPageBlobTier[\"P4\"] = \"P4\";\n    /**\n     * P6 Tier.\n     */\n    PremiumPageBlobTier[\"P6\"] = \"P6\";\n    /**\n     * P10 Tier.\n     */\n    PremiumPageBlobTier[\"P10\"] = \"P10\";\n    /**\n     * P15 Tier.\n     */\n    PremiumPageBlobTier[\"P15\"] = \"P15\";\n    /**\n     * P20 Tier.\n     */\n    PremiumPageBlobTier[\"P20\"] = \"P20\";\n    /**\n     * P30 Tier.\n     */\n    PremiumPageBlobTier[\"P30\"] = \"P30\";\n    /**\n     * P40 Tier.\n     */\n    PremiumPageBlobTier[\"P40\"] = \"P40\";\n    /**\n     * P50 Tier.\n     */\n    PremiumPageBlobTier[\"P50\"] = \"P50\";\n    /**\n     * P60 Tier.\n     */\n    PremiumPageBlobTier[\"P60\"] = \"P60\";\n    /**\n     * P70 Tier.\n     */\n    PremiumPageBlobTier[\"P70\"] = \"P70\";\n    /**\n     * P80 Tier.\n     */\n    PremiumPageBlobTier[\"P80\"] = \"P80\";\n})(PremiumPageBlobTier || (PremiumPageBlobTier = {}));\nfunction toAccessTier(tier) {\n    if (tier === undefined) {\n        return undefined;\n    }\n    return tier; // No more check if string is a valid AccessTier, and left this to underlay logic to decide(service).\n}\nfunction ensureCpkIfSpecified(cpk, isHttps) {\n    if (cpk && !isHttps) {\n        throw new RangeError(\"Customer-provided encryption key must be used over HTTPS.\");\n    }\n    if (cpk && !cpk.encryptionAlgorithm) {\n        cpk.encryptionAlgorithm = _utils_constants__WEBPACK_IMPORTED_MODULE_0__.EncryptionAlgorithmAES25;\n    }\n}\n/**\n * Defines the known cloud audiences for Storage.\n */\nvar StorageBlobAudience;\n(function (StorageBlobAudience) {\n    /**\n     * The OAuth scope to use to retrieve an AAD token for Azure Storage.\n     */\n    StorageBlobAudience[\"StorageOAuthScopes\"] = \"https://storage.azure.com/.default\";\n    /**\n     * The OAuth scope to use to retrieve an AAD token for Azure Disk.\n     */\n    StorageBlobAudience[\"DiskComputeOAuthScopes\"] = \"https://disk.compute.azure.com/.default\";\n})(StorageBlobAudience || (StorageBlobAudience = {}));\n/**\n *\n * To get OAuth audience for a storage account for blob service.\n */\nfunction getBlobServiceAccountAudience(storageAccountName) {\n    return `https://${storageAccountName}.blob.core.windows.net/.default`;\n}\n//# sourceMappingURL=models.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL21vZGVscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUM2RDtBQUM3RDtBQUNBO0FBQ0EsZ0VBQWdFO0FBQ2hFO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNDQUFzQztBQUN2QztBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsa0RBQWtEO0FBQzVDO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxzRUFBd0I7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrREFBa0Q7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLHNCQUFzQixtQkFBbUI7QUFDekM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9tb2RlbHMuanM/ODNlNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEVuY3J5cHRpb25BbGdvcml0aG1BRVMyNSB9IGZyb20gXCIuL3V0aWxzL2NvbnN0YW50c1wiO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBhY2Nlc3MgdGllciBvbiBhIGJsb2IuXG4gKiBGb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgYmxvY2sgYmxvYiBsZXZlbCB0aWVyaW5nIHNlZSB7QGxpbmsgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vYXp1cmUvc3RvcmFnZS9ibG9icy9zdG9yYWdlLWJsb2Itc3RvcmFnZS10aWVyc3xIb3QsIGNvb2wgYW5kIGFyY2hpdmUgc3RvcmFnZSB0aWVycy59XG4gKi9cbmV4cG9ydCB2YXIgQmxvY2tCbG9iVGllcjtcbihmdW5jdGlvbiAoQmxvY2tCbG9iVGllcikge1xuICAgIC8qKlxuICAgICAqIE9wdGltaXplZCBmb3Igc3RvcmluZyBkYXRhIHRoYXQgaXMgYWNjZXNzZWQgZnJlcXVlbnRseS5cbiAgICAgKi9cbiAgICBCbG9ja0Jsb2JUaWVyW1wiSG90XCJdID0gXCJIb3RcIjtcbiAgICAvKipcbiAgICAgKiBPcHRpbWl6ZWQgZm9yIHN0b3JpbmcgZGF0YSB0aGF0IGlzIGluZnJlcXVlbnRseSBhY2Nlc3NlZCBhbmQgc3RvcmVkIGZvciBhdCBsZWFzdCAzMCBkYXlzLlxuICAgICAqL1xuICAgIEJsb2NrQmxvYlRpZXJbXCJDb29sXCJdID0gXCJDb29sXCI7XG4gICAgLyoqXG4gICAgICogT3B0aW1pemVkIGZvciBzdG9yaW5nIGRhdGEgdGhhdCBpcyByYXJlbHkgYWNjZXNzZWQuXG4gICAgICovXG4gICAgQmxvY2tCbG9iVGllcltcIkNvbGRcIl0gPSBcIkNvbGRcIjtcbiAgICAvKipcbiAgICAgKiBPcHRpbWl6ZWQgZm9yIHN0b3JpbmcgZGF0YSB0aGF0IGlzIHJhcmVseSBhY2Nlc3NlZCBhbmQgc3RvcmVkIGZvciBhdCBsZWFzdCAxODAgZGF5c1xuICAgICAqIHdpdGggZmxleGlibGUgbGF0ZW5jeSByZXF1aXJlbWVudHMgKG9uIHRoZSBvcmRlciBvZiBob3VycykuXG4gICAgICovXG4gICAgQmxvY2tCbG9iVGllcltcIkFyY2hpdmVcIl0gPSBcIkFyY2hpdmVcIjtcbn0pKEJsb2NrQmxvYlRpZXIgfHwgKEJsb2NrQmxvYlRpZXIgPSB7fSkpO1xuLyoqXG4gKiBTcGVjaWZpZXMgdGhlIHBhZ2UgYmxvYiB0aWVyIHRvIHNldCB0aGUgYmxvYiB0by4gVGhpcyBpcyBvbmx5IGFwcGxpY2FibGUgdG8gcGFnZSBibG9icyBvbiBwcmVtaXVtIHN0b3JhZ2UgYWNjb3VudHMuXG4gKiBQbGVhc2Ugc2VlIHtAbGluayBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9henVyZS9zdG9yYWdlL3N0b3JhZ2UtcHJlbWl1bS1zdG9yYWdlI3NjYWxhYmlsaXR5LWFuZC1wZXJmb3JtYW5jZS10YXJnZXRzfGhlcmV9XG4gKiBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gdGhlIGNvcnJlc3BvbmRpbmcgSU9QUyBhbmQgdGhyb3VnaHB1dCBwZXIgUGFnZUJsb2JUaWVyLlxuICovXG5leHBvcnQgdmFyIFByZW1pdW1QYWdlQmxvYlRpZXI7XG4oZnVuY3Rpb24gKFByZW1pdW1QYWdlQmxvYlRpZXIpIHtcbiAgICAvKipcbiAgICAgKiBQNCBUaWVyLlxuICAgICAqL1xuICAgIFByZW1pdW1QYWdlQmxvYlRpZXJbXCJQNFwiXSA9IFwiUDRcIjtcbiAgICAvKipcbiAgICAgKiBQNiBUaWVyLlxuICAgICAqL1xuICAgIFByZW1pdW1QYWdlQmxvYlRpZXJbXCJQNlwiXSA9IFwiUDZcIjtcbiAgICAvKipcbiAgICAgKiBQMTAgVGllci5cbiAgICAgKi9cbiAgICBQcmVtaXVtUGFnZUJsb2JUaWVyW1wiUDEwXCJdID0gXCJQMTBcIjtcbiAgICAvKipcbiAgICAgKiBQMTUgVGllci5cbiAgICAgKi9cbiAgICBQcmVtaXVtUGFnZUJsb2JUaWVyW1wiUDE1XCJdID0gXCJQMTVcIjtcbiAgICAvKipcbiAgICAgKiBQMjAgVGllci5cbiAgICAgKi9cbiAgICBQcmVtaXVtUGFnZUJsb2JUaWVyW1wiUDIwXCJdID0gXCJQMjBcIjtcbiAgICAvKipcbiAgICAgKiBQMzAgVGllci5cbiAgICAgKi9cbiAgICBQcmVtaXVtUGFnZUJsb2JUaWVyW1wiUDMwXCJdID0gXCJQMzBcIjtcbiAgICAvKipcbiAgICAgKiBQNDAgVGllci5cbiAgICAgKi9cbiAgICBQcmVtaXVtUGFnZUJsb2JUaWVyW1wiUDQwXCJdID0gXCJQNDBcIjtcbiAgICAvKipcbiAgICAgKiBQNTAgVGllci5cbiAgICAgKi9cbiAgICBQcmVtaXVtUGFnZUJsb2JUaWVyW1wiUDUwXCJdID0gXCJQNTBcIjtcbiAgICAvKipcbiAgICAgKiBQNjAgVGllci5cbiAgICAgKi9cbiAgICBQcmVtaXVtUGFnZUJsb2JUaWVyW1wiUDYwXCJdID0gXCJQNjBcIjtcbiAgICAvKipcbiAgICAgKiBQNzAgVGllci5cbiAgICAgKi9cbiAgICBQcmVtaXVtUGFnZUJsb2JUaWVyW1wiUDcwXCJdID0gXCJQNzBcIjtcbiAgICAvKipcbiAgICAgKiBQODAgVGllci5cbiAgICAgKi9cbiAgICBQcmVtaXVtUGFnZUJsb2JUaWVyW1wiUDgwXCJdID0gXCJQODBcIjtcbn0pKFByZW1pdW1QYWdlQmxvYlRpZXIgfHwgKFByZW1pdW1QYWdlQmxvYlRpZXIgPSB7fSkpO1xuZXhwb3J0IGZ1bmN0aW9uIHRvQWNjZXNzVGllcih0aWVyKSB7XG4gICAgaWYgKHRpZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gdGllcjsgLy8gTm8gbW9yZSBjaGVjayBpZiBzdHJpbmcgaXMgYSB2YWxpZCBBY2Nlc3NUaWVyLCBhbmQgbGVmdCB0aGlzIHRvIHVuZGVybGF5IGxvZ2ljIHRvIGRlY2lkZShzZXJ2aWNlKS5cbn1cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVDcGtJZlNwZWNpZmllZChjcGssIGlzSHR0cHMpIHtcbiAgICBpZiAoY3BrICYmICFpc0h0dHBzKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiQ3VzdG9tZXItcHJvdmlkZWQgZW5jcnlwdGlvbiBrZXkgbXVzdCBiZSB1c2VkIG92ZXIgSFRUUFMuXCIpO1xuICAgIH1cbiAgICBpZiAoY3BrICYmICFjcGsuZW5jcnlwdGlvbkFsZ29yaXRobSkge1xuICAgICAgICBjcGsuZW5jcnlwdGlvbkFsZ29yaXRobSA9IEVuY3J5cHRpb25BbGdvcml0aG1BRVMyNTtcbiAgICB9XG59XG4vKipcbiAqIERlZmluZXMgdGhlIGtub3duIGNsb3VkIGF1ZGllbmNlcyBmb3IgU3RvcmFnZS5cbiAqL1xuZXhwb3J0IHZhciBTdG9yYWdlQmxvYkF1ZGllbmNlO1xuKGZ1bmN0aW9uIChTdG9yYWdlQmxvYkF1ZGllbmNlKSB7XG4gICAgLyoqXG4gICAgICogVGhlIE9BdXRoIHNjb3BlIHRvIHVzZSB0byByZXRyaWV2ZSBhbiBBQUQgdG9rZW4gZm9yIEF6dXJlIFN0b3JhZ2UuXG4gICAgICovXG4gICAgU3RvcmFnZUJsb2JBdWRpZW5jZVtcIlN0b3JhZ2VPQXV0aFNjb3Blc1wiXSA9IFwiaHR0cHM6Ly9zdG9yYWdlLmF6dXJlLmNvbS8uZGVmYXVsdFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBPQXV0aCBzY29wZSB0byB1c2UgdG8gcmV0cmlldmUgYW4gQUFEIHRva2VuIGZvciBBenVyZSBEaXNrLlxuICAgICAqL1xuICAgIFN0b3JhZ2VCbG9iQXVkaWVuY2VbXCJEaXNrQ29tcHV0ZU9BdXRoU2NvcGVzXCJdID0gXCJodHRwczovL2Rpc2suY29tcHV0ZS5henVyZS5jb20vLmRlZmF1bHRcIjtcbn0pKFN0b3JhZ2VCbG9iQXVkaWVuY2UgfHwgKFN0b3JhZ2VCbG9iQXVkaWVuY2UgPSB7fSkpO1xuLyoqXG4gKlxuICogVG8gZ2V0IE9BdXRoIGF1ZGllbmNlIGZvciBhIHN0b3JhZ2UgYWNjb3VudCBmb3IgYmxvYiBzZXJ2aWNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmxvYlNlcnZpY2VBY2NvdW50QXVkaWVuY2Uoc3RvcmFnZUFjY291bnROYW1lKSB7XG4gICAgcmV0dXJuIGBodHRwczovLyR7c3RvcmFnZUFjY291bnROYW1lfS5ibG9iLmNvcmUud2luZG93cy5uZXQvLmRlZmF1bHRgO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kZWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnonymousCredentialPolicy: () => (/* binding */ AnonymousCredentialPolicy)\n/* harmony export */ });\n/* harmony import */ var _CredentialPolicy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CredentialPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * AnonymousCredentialPolicy is used with HTTP(S) requests that read public resources\n * or for use with Shared Access Signatures (SAS).\n */\nclass AnonymousCredentialPolicy extends _CredentialPolicy__WEBPACK_IMPORTED_MODULE_0__.CredentialPolicy {\n    /**\n     * Creates an instance of AnonymousCredentialPolicy.\n     * @param nextPolicy -\n     * @param options -\n     */\n    // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n    /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n    constructor(nextPolicy, options) {\n        super(nextPolicy, options);\n    }\n}\n//# sourceMappingURL=AnonymousCredentialPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGljaWVzL0Fub255bW91c0NyZWRlbnRpYWxQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ3NEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ08sd0NBQXdDLCtEQUFnQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvcG9saWNpZXMvQW5vbnltb3VzQ3JlZGVudGlhbFBvbGljeS5qcz83MmYxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgQ3JlZGVudGlhbFBvbGljeSB9IGZyb20gXCIuL0NyZWRlbnRpYWxQb2xpY3lcIjtcbi8qKlxuICogQW5vbnltb3VzQ3JlZGVudGlhbFBvbGljeSBpcyB1c2VkIHdpdGggSFRUUChTKSByZXF1ZXN0cyB0aGF0IHJlYWQgcHVibGljIHJlc291cmNlc1xuICogb3IgZm9yIHVzZSB3aXRoIFNoYXJlZCBBY2Nlc3MgU2lnbmF0dXJlcyAoU0FTKS5cbiAqL1xuZXhwb3J0IGNsYXNzIEFub255bW91c0NyZWRlbnRpYWxQb2xpY3kgZXh0ZW5kcyBDcmVkZW50aWFsUG9saWN5IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIEFub255bW91c0NyZWRlbnRpYWxQb2xpY3kuXG4gICAgICogQHBhcmFtIG5leHRQb2xpY3kgLVxuICAgICAqIEBwYXJhbSBvcHRpb25zIC1cbiAgICAgKi9cbiAgICAvLyBUaGUgYmFzZSBjbGFzcyBoYXMgYSBwcm90ZWN0ZWQgY29uc3RydWN0b3IuIEFkZGluZyBhIHB1YmxpYyBvbmUgdG8gZW5hYmxlIGNvbnN0cnVjdGluZyBvZiB0aGlzIGNsYXNzLlxuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlbGVzcy1jb25zdHJ1Y3RvciovXG4gICAgY29uc3RydWN0b3IobmV4dFBvbGljeSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihuZXh0UG9saWN5LCBvcHRpb25zKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bbm9ueW1vdXNDcmVkZW50aWFsUG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CredentialPolicy: () => (/* binding */ CredentialPolicy)\n/* harmony export */ });\n/* harmony import */ var _RequestPolicy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RequestPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Credential policy used to sign HTTP(S) requests before sending. This is an\n * abstract class.\n */\nclass CredentialPolicy extends _RequestPolicy__WEBPACK_IMPORTED_MODULE_0__.BaseRequestPolicy {\n    /**\n     * Sends out request.\n     *\n     * @param request -\n     */\n    sendRequest(request) {\n        return this._nextPolicy.sendRequest(this.signRequest(request));\n    }\n    /**\n     * Child classes must implement this method with request signing. This method\n     * will be executed in {@link sendRequest}.\n     *\n     * @param request -\n     */\n    signRequest(request) {\n        // Child classes must override this method with request signing. This method\n        // will be executed in sendRequest().\n        return request;\n    }\n}\n//# sourceMappingURL=CredentialPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGljaWVzL0NyZWRlbnRpYWxQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ29EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ08sK0JBQStCLDZEQUFpQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixrQkFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvcG9saWNpZXMvQ3JlZGVudGlhbFBvbGljeS5qcz8yMDZiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgQmFzZVJlcXVlc3RQb2xpY3kgfSBmcm9tIFwiLi9SZXF1ZXN0UG9saWN5XCI7XG4vKipcbiAqIENyZWRlbnRpYWwgcG9saWN5IHVzZWQgdG8gc2lnbiBIVFRQKFMpIHJlcXVlc3RzIGJlZm9yZSBzZW5kaW5nLiBUaGlzIGlzIGFuXG4gKiBhYnN0cmFjdCBjbGFzcy5cbiAqL1xuZXhwb3J0IGNsYXNzIENyZWRlbnRpYWxQb2xpY3kgZXh0ZW5kcyBCYXNlUmVxdWVzdFBvbGljeSB7XG4gICAgLyoqXG4gICAgICogU2VuZHMgb3V0IHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVxdWVzdCAtXG4gICAgICovXG4gICAgc2VuZFJlcXVlc3QocmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmV4dFBvbGljeS5zZW5kUmVxdWVzdCh0aGlzLnNpZ25SZXF1ZXN0KHJlcXVlc3QpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hpbGQgY2xhc3NlcyBtdXN0IGltcGxlbWVudCB0aGlzIG1ldGhvZCB3aXRoIHJlcXVlc3Qgc2lnbmluZy4gVGhpcyBtZXRob2RcbiAgICAgKiB3aWxsIGJlIGV4ZWN1dGVkIGluIHtAbGluayBzZW5kUmVxdWVzdH0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVxdWVzdCAtXG4gICAgICovXG4gICAgc2lnblJlcXVlc3QocmVxdWVzdCkge1xuICAgICAgICAvLyBDaGlsZCBjbGFzc2VzIG11c3Qgb3ZlcnJpZGUgdGhpcyBtZXRob2Qgd2l0aCByZXF1ZXN0IHNpZ25pbmcuIFRoaXMgbWV0aG9kXG4gICAgICAgIC8vIHdpbGwgYmUgZXhlY3V0ZWQgaW4gc2VuZFJlcXVlc3QoKS5cbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q3JlZGVudGlhbFBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseRequestPolicy: () => (/* binding */ BaseRequestPolicy)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The base class from which all request policies derive.\n */\nclass BaseRequestPolicy {\n    /**\n     * The main method to implement that manipulates a request/response.\n     */\n    constructor(\n    /**\n     * The next policy in the pipeline. Each policy is responsible for executing the next one if the request is to continue through the pipeline.\n     */\n    _nextPolicy, \n    /**\n     * The options that can be passed to a given request policy.\n     */\n    _options) {\n        this._nextPolicy = _nextPolicy;\n        this._options = _options;\n    }\n    /**\n     * Get whether or not a log with the provided log level should be logged.\n     * @param logLevel - The log level of the log that will be logged.\n     * @returns Whether or not a log with the provided log level should be logged.\n     */\n    shouldLog(logLevel) {\n        return this._options.shouldLog(logLevel);\n    }\n    /**\n     * Attempt to log the provided message to the provided logger. If no logger was provided or if\n     * the log level does not meat the logger's threshold, then nothing will be logged.\n     * @param logLevel - The log level of this log.\n     * @param message - The message of this log.\n     */\n    log(logLevel, message) {\n        this._options.log(logLevel, message);\n    }\n}\n//# sourceMappingURL=RequestPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGljaWVzL1JlcXVlc3RQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGljaWVzL1JlcXVlc3RQb2xpY3kuanM/OTJkOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8qKlxuICogVGhlIGJhc2UgY2xhc3MgZnJvbSB3aGljaCBhbGwgcmVxdWVzdCBwb2xpY2llcyBkZXJpdmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNlUmVxdWVzdFBvbGljeSB7XG4gICAgLyoqXG4gICAgICogVGhlIG1haW4gbWV0aG9kIHRvIGltcGxlbWVudCB0aGF0IG1hbmlwdWxhdGVzIGEgcmVxdWVzdC9yZXNwb25zZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBUaGUgbmV4dCBwb2xpY3kgaW4gdGhlIHBpcGVsaW5lLiBFYWNoIHBvbGljeSBpcyByZXNwb25zaWJsZSBmb3IgZXhlY3V0aW5nIHRoZSBuZXh0IG9uZSBpZiB0aGUgcmVxdWVzdCBpcyB0byBjb250aW51ZSB0aHJvdWdoIHRoZSBwaXBlbGluZS5cbiAgICAgKi9cbiAgICBfbmV4dFBvbGljeSwgXG4gICAgLyoqXG4gICAgICogVGhlIG9wdGlvbnMgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGEgZ2l2ZW4gcmVxdWVzdCBwb2xpY3kuXG4gICAgICovXG4gICAgX29wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fbmV4dFBvbGljeSA9IF9uZXh0UG9saWN5O1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gX29wdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB3aGV0aGVyIG9yIG5vdCBhIGxvZyB3aXRoIHRoZSBwcm92aWRlZCBsb2cgbGV2ZWwgc2hvdWxkIGJlIGxvZ2dlZC5cbiAgICAgKiBAcGFyYW0gbG9nTGV2ZWwgLSBUaGUgbG9nIGxldmVsIG9mIHRoZSBsb2cgdGhhdCB3aWxsIGJlIGxvZ2dlZC5cbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIG9yIG5vdCBhIGxvZyB3aXRoIHRoZSBwcm92aWRlZCBsb2cgbGV2ZWwgc2hvdWxkIGJlIGxvZ2dlZC5cbiAgICAgKi9cbiAgICBzaG91bGRMb2cobG9nTGV2ZWwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnMuc2hvdWxkTG9nKGxvZ0xldmVsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0ZW1wdCB0byBsb2cgdGhlIHByb3ZpZGVkIG1lc3NhZ2UgdG8gdGhlIHByb3ZpZGVkIGxvZ2dlci4gSWYgbm8gbG9nZ2VyIHdhcyBwcm92aWRlZCBvciBpZlxuICAgICAqIHRoZSBsb2cgbGV2ZWwgZG9lcyBub3QgbWVhdCB0aGUgbG9nZ2VyJ3MgdGhyZXNob2xkLCB0aGVuIG5vdGhpbmcgd2lsbCBiZSBsb2dnZWQuXG4gICAgICogQHBhcmFtIGxvZ0xldmVsIC0gVGhlIGxvZyBsZXZlbCBvZiB0aGlzIGxvZy5cbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIFRoZSBtZXNzYWdlIG9mIHRoaXMgbG9nLlxuICAgICAqL1xuICAgIGxvZyhsb2dMZXZlbCwgbWVzc2FnZSkge1xuICAgICAgICB0aGlzLl9vcHRpb25zLmxvZyhsb2dMZXZlbCwgbWVzc2FnZSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVxdWVzdFBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageBrowserPolicy: () => (/* binding */ StorageBrowserPolicy)\n/* harmony export */ });\n/* harmony import */ var _RequestPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RequestPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n/**\n * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:\n *\n * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.\n * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL\n * thus avoid the browser cache.\n *\n * 2. Remove cookie header for security\n *\n * 3. Remove content-length header to avoid browsers warning\n */\nclass StorageBrowserPolicy extends _RequestPolicy__WEBPACK_IMPORTED_MODULE_1__.BaseRequestPolicy {\n    /**\n     * Creates an instance of StorageBrowserPolicy.\n     * @param nextPolicy -\n     * @param options -\n     */\n    // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n    /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n    constructor(nextPolicy, options) {\n        super(nextPolicy, options);\n    }\n    /**\n     * Sends out request.\n     *\n     * @param request -\n     */\n    async sendRequest(request) {\n        if (_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNode) {\n            return this._nextPolicy.sendRequest(request);\n        }\n        if (request.method.toUpperCase() === \"GET\" || request.method.toUpperCase() === \"HEAD\") {\n            request.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.setURLParameter)(request.url, _utils_constants__WEBPACK_IMPORTED_MODULE_3__.URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());\n        }\n        request.headers.remove(_utils_constants__WEBPACK_IMPORTED_MODULE_3__.HeaderConstants.COOKIE);\n        // According to XHR standards, content-length should be fully controlled by browsers\n        request.headers.remove(_utils_constants__WEBPACK_IMPORTED_MODULE_3__.HeaderConstants.CONTENT_LENGTH);\n        return this._nextPolicy.sendRequest(request);\n    }\n}\n//# sourceMappingURL=StorageBrowserPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGljaWVzL1N0b3JhZ2VCcm93c2VyUG9saWN5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNvRDtBQUNWO0FBQ3lCO0FBQ1g7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLG1DQUFtQyw2REFBaUI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9EQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixvRUFBZSxjQUFjLDBEQUFZO0FBQ25FO0FBQ0EsK0JBQStCLDZEQUFlO0FBQzlDO0FBQ0EsK0JBQStCLDZEQUFlO0FBQzlDO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGljaWVzL1N0b3JhZ2VCcm93c2VyUG9saWN5LmpzPzQ3MDEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBCYXNlUmVxdWVzdFBvbGljeSB9IGZyb20gXCIuL1JlcXVlc3RQb2xpY3lcIjtcbmltcG9ydCB7IGlzTm9kZSB9IGZyb20gXCJAYXp1cmUvY29yZS11dGlsXCI7XG5pbXBvcnQgeyBIZWFkZXJDb25zdGFudHMsIFVSTENvbnN0YW50cyB9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHNcIjtcbmltcG9ydCB7IHNldFVSTFBhcmFtZXRlciB9IGZyb20gXCIuLi91dGlscy91dGlscy5jb21tb25cIjtcbi8qKlxuICogU3RvcmFnZUJyb3dzZXJQb2xpY3kgd2lsbCBoYW5kbGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBOb2RlLmpzIGFuZCBicm93c2VyIHJ1bnRpbWUsIGluY2x1ZGluZzpcbiAqXG4gKiAxLiBCcm93c2VycyBjYWNoZSBHRVQvSEVBRCByZXF1ZXN0cyBieSBhZGRpbmcgY29uZGl0aW9uYWwgaGVhZGVycyBzdWNoIGFzICdJRl9NT0RJRklFRF9TSU5DRScuXG4gKiBTdG9yYWdlQnJvd3NlclBvbGljeSBpcyBhIHBvbGljeSB1c2VkIHRvIGFkZCBhIHRpbWVzdGFtcCBxdWVyeSB0byBHRVQvSEVBRCByZXF1ZXN0IFVSTFxuICogdGh1cyBhdm9pZCB0aGUgYnJvd3NlciBjYWNoZS5cbiAqXG4gKiAyLiBSZW1vdmUgY29va2llIGhlYWRlciBmb3Igc2VjdXJpdHlcbiAqXG4gKiAzLiBSZW1vdmUgY29udGVudC1sZW5ndGggaGVhZGVyIHRvIGF2b2lkIGJyb3dzZXJzIHdhcm5pbmdcbiAqL1xuZXhwb3J0IGNsYXNzIFN0b3JhZ2VCcm93c2VyUG9saWN5IGV4dGVuZHMgQmFzZVJlcXVlc3RQb2xpY3kge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgU3RvcmFnZUJyb3dzZXJQb2xpY3kuXG4gICAgICogQHBhcmFtIG5leHRQb2xpY3kgLVxuICAgICAqIEBwYXJhbSBvcHRpb25zIC1cbiAgICAgKi9cbiAgICAvLyBUaGUgYmFzZSBjbGFzcyBoYXMgYSBwcm90ZWN0ZWQgY29uc3RydWN0b3IuIEFkZGluZyBhIHB1YmxpYyBvbmUgdG8gZW5hYmxlIGNvbnN0cnVjdGluZyBvZiB0aGlzIGNsYXNzLlxuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlbGVzcy1jb25zdHJ1Y3RvciovXG4gICAgY29uc3RydWN0b3IobmV4dFBvbGljeSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihuZXh0UG9saWN5LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgb3V0IHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVxdWVzdCAtXG4gICAgICovXG4gICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCkge1xuICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbmV4dFBvbGljeS5zZW5kUmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVxdWVzdC5tZXRob2QudG9VcHBlckNhc2UoKSA9PT0gXCJHRVRcIiB8fCByZXF1ZXN0Lm1ldGhvZC50b1VwcGVyQ2FzZSgpID09PSBcIkhFQURcIikge1xuICAgICAgICAgICAgcmVxdWVzdC51cmwgPSBzZXRVUkxQYXJhbWV0ZXIocmVxdWVzdC51cmwsIFVSTENvbnN0YW50cy5QYXJhbWV0ZXJzLkZPUkNFX0JST1dTRVJfTk9fQ0FDSEUsIG5ldyBEYXRlKCkuZ2V0VGltZSgpLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJlcXVlc3QuaGVhZGVycy5yZW1vdmUoSGVhZGVyQ29uc3RhbnRzLkNPT0tJRSk7XG4gICAgICAgIC8vIEFjY29yZGluZyB0byBYSFIgc3RhbmRhcmRzLCBjb250ZW50LWxlbmd0aCBzaG91bGQgYmUgZnVsbHkgY29udHJvbGxlZCBieSBicm93c2Vyc1xuICAgICAgICByZXF1ZXN0LmhlYWRlcnMucmVtb3ZlKEhlYWRlckNvbnN0YW50cy5DT05URU5UX0xFTkdUSCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9uZXh0UG9saWN5LnNlbmRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0b3JhZ2VCcm93c2VyUG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   storageBrowserPolicy: () => (/* binding */ storageBrowserPolicy),\n/* harmony export */   storageBrowserPolicyName: () => (/* binding */ storageBrowserPolicyName)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n/**\n * The programmatic identifier of the StorageBrowserPolicy.\n */\nconst storageBrowserPolicyName = \"storageBrowserPolicy\";\n/**\n * storageBrowserPolicy is a policy used to prevent browsers from caching requests\n * and to remove cookies and explicit content-length headers.\n */\nfunction storageBrowserPolicy() {\n    return {\n        name: storageBrowserPolicyName,\n        async sendRequest(request, next) {\n            if (_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNode) {\n                return next(request);\n            }\n            if (request.method === \"GET\" || request.method === \"HEAD\") {\n                request.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_1__.setURLParameter)(request.url, _utils_constants__WEBPACK_IMPORTED_MODULE_2__.URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());\n            }\n            request.headers.delete(_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.COOKIE);\n            // According to XHR standards, content-length should be fully controlled by browsers\n            request.headers.delete(_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.CONTENT_LENGTH);\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=StorageBrowserPolicyV2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGljaWVzL1N0b3JhZ2VCcm93c2VyUG9saWN5VjIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQzBDO0FBQ3lCO0FBQ1g7QUFDeEQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9EQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixvRUFBZSxjQUFjLDBEQUFZO0FBQ3ZFO0FBQ0EsbUNBQW1DLDZEQUFlO0FBQ2xEO0FBQ0EsbUNBQW1DLDZEQUFlO0FBQ2xEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9wb2xpY2llcy9TdG9yYWdlQnJvd3NlclBvbGljeVYyLmpzP2ZlOTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBpc05vZGUgfSBmcm9tIFwiQGF6dXJlL2NvcmUtdXRpbFwiO1xuaW1wb3J0IHsgSGVhZGVyQ29uc3RhbnRzLCBVUkxDb25zdGFudHMgfSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBzZXRVUkxQYXJhbWV0ZXIgfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHMuY29tbW9uXCI7XG4vKipcbiAqIFRoZSBwcm9ncmFtbWF0aWMgaWRlbnRpZmllciBvZiB0aGUgU3RvcmFnZUJyb3dzZXJQb2xpY3kuXG4gKi9cbmV4cG9ydCBjb25zdCBzdG9yYWdlQnJvd3NlclBvbGljeU5hbWUgPSBcInN0b3JhZ2VCcm93c2VyUG9saWN5XCI7XG4vKipcbiAqIHN0b3JhZ2VCcm93c2VyUG9saWN5IGlzIGEgcG9saWN5IHVzZWQgdG8gcHJldmVudCBicm93c2VycyBmcm9tIGNhY2hpbmcgcmVxdWVzdHNcbiAqIGFuZCB0byByZW1vdmUgY29va2llcyBhbmQgZXhwbGljaXQgY29udGVudC1sZW5ndGggaGVhZGVycy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0b3JhZ2VCcm93c2VyUG9saWN5KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IHN0b3JhZ2VCcm93c2VyUG9saWN5TmFtZSxcbiAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlcXVlc3QubWV0aG9kID09PSBcIkdFVFwiIHx8IHJlcXVlc3QubWV0aG9kID09PSBcIkhFQURcIikge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QudXJsID0gc2V0VVJMUGFyYW1ldGVyKHJlcXVlc3QudXJsLCBVUkxDb25zdGFudHMuUGFyYW1ldGVycy5GT1JDRV9CUk9XU0VSX05PX0NBQ0hFLCBuZXcgRGF0ZSgpLmdldFRpbWUoKS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVycy5kZWxldGUoSGVhZGVyQ29uc3RhbnRzLkNPT0tJRSk7XG4gICAgICAgICAgICAvLyBBY2NvcmRpbmcgdG8gWEhSIHN0YW5kYXJkcywgY29udGVudC1sZW5ndGggc2hvdWxkIGJlIGZ1bGx5IGNvbnRyb2xsZWQgYnkgYnJvd3NlcnNcbiAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVycy5kZWxldGUoSGVhZGVyQ29uc3RhbnRzLkNPTlRFTlRfTEVOR1RIKTtcbiAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcXVlc3QpO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdG9yYWdlQnJvd3NlclBvbGljeVYyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NewRetryPolicyFactory: () => (/* binding */ NewRetryPolicyFactory),\n/* harmony export */   StorageRetryPolicy: () => (/* binding */ StorageRetryPolicy),\n/* harmony export */   StorageRetryPolicyType: () => (/* binding */ StorageRetryPolicyType)\n/* harmony export */ });\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/abort-controller/dist-esm/src/AbortController.js\");\n/* harmony import */ var _RequestPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RequestPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../log */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\nfunction NewRetryPolicyFactory(retryOptions) {\n    return {\n        create: (nextPolicy, options) => {\n            return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n        },\n    };\n}\n/**\n * RetryPolicy types.\n */\nvar StorageRetryPolicyType;\n(function (StorageRetryPolicyType) {\n    /**\n     * Exponential retry. Retry time delay grows exponentially.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"EXPONENTIAL\"] = 0] = \"EXPONENTIAL\";\n    /**\n     * Linear retry. Retry time delay grows linearly.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"FIXED\"] = 1] = \"FIXED\";\n})(StorageRetryPolicyType || (StorageRetryPolicyType = {}));\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS = {\n    maxRetryDelayInMs: 120 * 1000,\n    maxTries: 4,\n    retryDelayInMs: 4 * 1000,\n    retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n    secondaryHost: \"\",\n    tryTimeoutInMs: undefined, // Use server side default timeout strategy\n};\nconst RETRY_ABORT_ERROR = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__.AbortError(\"The operation was aborted.\");\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nclass StorageRetryPolicy extends _RequestPolicy__WEBPACK_IMPORTED_MODULE_1__.BaseRequestPolicy {\n    /**\n     * Creates an instance of RetryPolicy.\n     *\n     * @param nextPolicy -\n     * @param options -\n     * @param retryOptions -\n     */\n    constructor(nextPolicy, options, retryOptions = DEFAULT_RETRY_OPTIONS) {\n        super(nextPolicy, options);\n        // Initialize retry options\n        this.retryOptions = {\n            retryPolicyType: retryOptions.retryPolicyType\n                ? retryOptions.retryPolicyType\n                : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n            maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1\n                ? Math.floor(retryOptions.maxTries)\n                : DEFAULT_RETRY_OPTIONS.maxTries,\n            tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0\n                ? retryOptions.tryTimeoutInMs\n                : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n            retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0\n                ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs\n                    ? retryOptions.maxRetryDelayInMs\n                    : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs)\n                : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n            maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0\n                ? retryOptions.maxRetryDelayInMs\n                : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n            secondaryHost: retryOptions.secondaryHost\n                ? retryOptions.secondaryHost\n                : DEFAULT_RETRY_OPTIONS.secondaryHost,\n        };\n    }\n    /**\n     * Sends request.\n     *\n     * @param request -\n     */\n    async sendRequest(request) {\n        return this.attemptSendRequest(request, false, 1);\n    }\n    /**\n     * Decide and perform next retry. Won't mutate request parameter.\n     *\n     * @param request -\n     * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n     *                                   the resource was not found. This may be due to replication delay. So, in this\n     *                                   case, we'll never try the secondary again for this operation.\n     * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n     *                                   the attempt will be performed by this method call.\n     */\n    async attemptSendRequest(request, secondaryHas404, attempt) {\n        const newRequest = request.clone();\n        const isPrimaryRetry = secondaryHas404 ||\n            !this.retryOptions.secondaryHost ||\n            !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") ||\n            attempt % 2 === 1;\n        if (!isPrimaryRetry) {\n            newRequest.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.setURLHost)(newRequest.url, this.retryOptions.secondaryHost);\n        }\n        // Set the server-side timeout query parameter \"timeout=[seconds]\"\n        if (this.retryOptions.tryTimeoutInMs) {\n            newRequest.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.setURLParameter)(newRequest.url, _utils_constants__WEBPACK_IMPORTED_MODULE_3__.URLConstants.Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1000).toString());\n        }\n        let response;\n        try {\n            _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n            response = await this._nextPolicy.sendRequest(newRequest);\n            if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n                return response;\n            }\n            secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n        }\n        catch (err) {\n            _log__WEBPACK_IMPORTED_MODULE_4__.logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);\n            if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n                throw err;\n            }\n        }\n        await this.delay(isPrimaryRetry, attempt, request.abortSignal);\n        return this.attemptSendRequest(request, secondaryHas404, ++attempt);\n    }\n    /**\n     * Decide whether to retry according to last HTTP response and retry counters.\n     *\n     * @param isPrimaryRetry -\n     * @param attempt -\n     * @param response -\n     * @param err -\n     */\n    shouldRetry(isPrimaryRetry, attempt, response, err) {\n        if (attempt >= this.retryOptions.maxTries) {\n            _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions\n                .maxTries}, no further try.`);\n            return false;\n        }\n        // Handle network failures, you may need to customize the list when you implement\n        // your own http client\n        const retriableErrors = [\n            \"ETIMEDOUT\",\n            \"ESOCKETTIMEDOUT\",\n            \"ECONNREFUSED\",\n            \"ECONNRESET\",\n            \"ENOENT\",\n            \"ENOTFOUND\",\n            \"TIMEOUT\",\n            \"EPIPE\",\n            \"REQUEST_SEND_ERROR\", // For default xhr based http client provided in ms-rest-js\n        ];\n        if (err) {\n            for (const retriableError of retriableErrors) {\n                if (err.name.toUpperCase().includes(retriableError) ||\n                    err.message.toUpperCase().includes(retriableError) ||\n                    (err.code && err.code.toString().toUpperCase() === retriableError)) {\n                    _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n                    return true;\n                }\n            }\n        }\n        // If attempt was against the secondary & it returned a StatusNotFound (404), then\n        // the resource was not found. This may be due to replication delay. So, in this\n        // case, we'll never try the secondary again for this operation.\n        if (response || err) {\n            const statusCode = response ? response.status : err ? err.statusCode : 0;\n            if (!isPrimaryRetry && statusCode === 404) {\n                _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n                return true;\n            }\n            // Server internal error or server timeout\n            if (statusCode === 503 || statusCode === 500) {\n                _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n                return true;\n            }\n        }\n        if ((err === null || err === void 0 ? void 0 : err.code) === \"PARSE_ERROR\" && (err === null || err === void 0 ? void 0 : err.message.startsWith(`Error \"Error: Unclosed root tag`))) {\n            _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(\"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\");\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Delay a calculated time between retries.\n     *\n     * @param isPrimaryRetry -\n     * @param attempt -\n     * @param abortSignal -\n     */\n    async delay(isPrimaryRetry, attempt, abortSignal) {\n        let delayTimeInMs = 0;\n        if (isPrimaryRetry) {\n            switch (this.retryOptions.retryPolicyType) {\n                case StorageRetryPolicyType.EXPONENTIAL:\n                    delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);\n                    break;\n                case StorageRetryPolicyType.FIXED:\n                    delayTimeInMs = this.retryOptions.retryDelayInMs;\n                    break;\n            }\n        }\n        else {\n            delayTimeInMs = Math.random() * 1000;\n        }\n        _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n        return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.delay)(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n    }\n}\n//# sourceMappingURL=StorageRetryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageRetryPolicyType: () => (/* binding */ StorageRetryPolicyType),\n/* harmony export */   storageRetryPolicy: () => (/* binding */ storageRetryPolicy),\n/* harmony export */   storageRetryPolicyName: () => (/* binding */ storageRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/abort-controller/dist-esm/src/AbortController.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../log */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n/**\n * Name of the {@link storageRetryPolicy}\n */\nconst storageRetryPolicyName = \"storageRetryPolicy\";\n/**\n * RetryPolicy types.\n */\nvar StorageRetryPolicyType;\n(function (StorageRetryPolicyType) {\n    /**\n     * Exponential retry. Retry time delay grows exponentially.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"EXPONENTIAL\"] = 0] = \"EXPONENTIAL\";\n    /**\n     * Linear retry. Retry time delay grows linearly.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"FIXED\"] = 1] = \"FIXED\";\n})(StorageRetryPolicyType || (StorageRetryPolicyType = {}));\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS = {\n    maxRetryDelayInMs: 120 * 1000,\n    maxTries: 4,\n    retryDelayInMs: 4 * 1000,\n    retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n    secondaryHost: \"\",\n    tryTimeoutInMs: undefined, // Use server side default timeout strategy\n};\nconst retriableErrors = [\n    \"ETIMEDOUT\",\n    \"ESOCKETTIMEDOUT\",\n    \"ECONNREFUSED\",\n    \"ECONNRESET\",\n    \"ENOENT\",\n    \"ENOTFOUND\",\n    \"TIMEOUT\",\n    \"EPIPE\",\n    \"REQUEST_SEND_ERROR\",\n];\nconst RETRY_ABORT_ERROR = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_2__.AbortError(\"The operation was aborted.\");\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nfunction storageRetryPolicy(options = {}) {\n    var _a, _b, _c, _d, _e, _f;\n    const retryPolicyType = (_a = options.retryPolicyType) !== null && _a !== void 0 ? _a : DEFAULT_RETRY_OPTIONS.retryPolicyType;\n    const maxTries = (_b = options.maxTries) !== null && _b !== void 0 ? _b : DEFAULT_RETRY_OPTIONS.maxTries;\n    const retryDelayInMs = (_c = options.retryDelayInMs) !== null && _c !== void 0 ? _c : DEFAULT_RETRY_OPTIONS.retryDelayInMs;\n    const maxRetryDelayInMs = (_d = options.maxRetryDelayInMs) !== null && _d !== void 0 ? _d : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs;\n    const secondaryHost = (_e = options.secondaryHost) !== null && _e !== void 0 ? _e : DEFAULT_RETRY_OPTIONS.secondaryHost;\n    const tryTimeoutInMs = (_f = options.tryTimeoutInMs) !== null && _f !== void 0 ? _f : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs;\n    function shouldRetry({ isPrimaryRetry, attempt, response, error, }) {\n        var _a, _b;\n        if (attempt >= maxTries) {\n            _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${maxTries}, no further try.`);\n            return false;\n        }\n        if (error) {\n            for (const retriableError of retriableErrors) {\n                if (error.name.toUpperCase().includes(retriableError) ||\n                    error.message.toUpperCase().includes(retriableError) ||\n                    (error.code && error.code.toString().toUpperCase() === retriableError)) {\n                    _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n                    return true;\n                }\n            }\n            if ((error === null || error === void 0 ? void 0 : error.code) === \"PARSE_ERROR\" &&\n                (error === null || error === void 0 ? void 0 : error.message.startsWith(`Error \"Error: Unclosed root tag`))) {\n                _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(\"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\");\n                return true;\n            }\n        }\n        // If attempt was against the secondary & it returned a StatusNotFound (404), then\n        // the resource was not found. This may be due to replication delay. So, in this\n        // case, we'll never try the secondary again for this operation.\n        if (response || error) {\n            const statusCode = (_b = (_a = response === null || response === void 0 ? void 0 : response.status) !== null && _a !== void 0 ? _a : error === null || error === void 0 ? void 0 : error.statusCode) !== null && _b !== void 0 ? _b : 0;\n            if (!isPrimaryRetry && statusCode === 404) {\n                _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n                return true;\n            }\n            // Server internal error or server timeout\n            if (statusCode === 503 || statusCode === 500) {\n                _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n                return true;\n            }\n        }\n        return false;\n    }\n    function calculateDelay(isPrimaryRetry, attempt) {\n        let delayTimeInMs = 0;\n        if (isPrimaryRetry) {\n            switch (retryPolicyType) {\n                case StorageRetryPolicyType.EXPONENTIAL:\n                    delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * retryDelayInMs, maxRetryDelayInMs);\n                    break;\n                case StorageRetryPolicyType.FIXED:\n                    delayTimeInMs = retryDelayInMs;\n                    break;\n            }\n        }\n        else {\n            delayTimeInMs = Math.random() * 1000;\n        }\n        _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n        return delayTimeInMs;\n    }\n    return {\n        name: storageRetryPolicyName,\n        async sendRequest(request, next) {\n            // Set the server-side timeout query parameter \"timeout=[seconds]\"\n            if (tryTimeoutInMs) {\n                request.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.setURLParameter)(request.url, _utils_constants__WEBPACK_IMPORTED_MODULE_5__.URLConstants.Parameters.TIMEOUT, String(Math.floor(tryTimeoutInMs / 1000)));\n            }\n            const primaryUrl = request.url;\n            const secondaryUrl = secondaryHost ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.setURLHost)(request.url, secondaryHost) : undefined;\n            let secondaryHas404 = false;\n            let attempt = 1;\n            let retryAgain = true;\n            let response;\n            let error;\n            while (retryAgain) {\n                const isPrimaryRetry = secondaryHas404 ||\n                    !secondaryUrl ||\n                    ![\"GET\", \"HEAD\", \"OPTIONS\"].includes(request.method) ||\n                    attempt % 2 === 1;\n                request.url = isPrimaryRetry ? primaryUrl : secondaryUrl;\n                response = undefined;\n                error = undefined;\n                try {\n                    _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n                    response = await next(request);\n                    secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n                }\n                catch (e) {\n                    if ((0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.isRestError)(e)) {\n                        _log__WEBPACK_IMPORTED_MODULE_3__.logger.error(`RetryPolicy: Caught error, message: ${e.message}, code: ${e.code}`);\n                        error = e;\n                    }\n                    else {\n                        _log__WEBPACK_IMPORTED_MODULE_3__.logger.error(`RetryPolicy: Caught error, message: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.getErrorMessage)(e)}`);\n                        throw e;\n                    }\n                }\n                retryAgain = shouldRetry({ isPrimaryRetry, attempt, response, error });\n                if (retryAgain) {\n                    await (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.delay)(calculateDelay(isPrimaryRetry, attempt), request.abortSignal, RETRY_ABORT_ERROR);\n                }\n                attempt++;\n            }\n            if (response) {\n                return response;\n            }\n            throw error !== null && error !== void 0 ? error : new _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.RestError(\"RetryPolicy failed without known error.\");\n        },\n    };\n}\n//# sourceMappingURL=StorageRetryPolicyV2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicy.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicy.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageSharedKeyCredentialPolicy: () => (/* binding */ StorageSharedKeyCredentialPolicy)\n/* harmony export */ });\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _CredentialPolicy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CredentialPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n/**\n * StorageSharedKeyCredentialPolicy is a policy used to sign HTTP request with a shared key.\n */\nclass StorageSharedKeyCredentialPolicy extends _CredentialPolicy__WEBPACK_IMPORTED_MODULE_0__.CredentialPolicy {\n    /**\n     * Creates an instance of StorageSharedKeyCredentialPolicy.\n     * @param nextPolicy -\n     * @param options -\n     * @param factory -\n     */\n    constructor(nextPolicy, options, factory) {\n        super(nextPolicy, options);\n        this.factory = factory;\n    }\n    /**\n     * Signs request.\n     *\n     * @param request -\n     */\n    signRequest(request) {\n        request.headers.set(_utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.X_MS_DATE, new Date().toUTCString());\n        if (request.body &&\n            (typeof request.body === \"string\" || request.body !== undefined) &&\n            request.body.length > 0) {\n            request.headers.set(_utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(request.body));\n        }\n        const stringToSign = [\n            request.method.toUpperCase(),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_LANGUAGE),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_ENCODING),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_LENGTH),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_MD5),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_TYPE),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.DATE),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.IF_MODIFIED_SINCE),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.IF_MATCH),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.IF_NONE_MATCH),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.IF_UNMODIFIED_SINCE),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.RANGE),\n        ].join(\"\\n\") +\n            \"\\n\" +\n            this.getCanonicalizedHeadersString(request) +\n            this.getCanonicalizedResourceString(request);\n        const signature = this.factory.computeHMACSHA256(stringToSign);\n        request.headers.set(_utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.AUTHORIZATION, `SharedKey ${this.factory.accountName}:${signature}`);\n        // console.log(`[URL]:${request.url}`);\n        // console.log(`[HEADERS]:${request.headers.toString()}`);\n        // console.log(`[STRING TO SIGN]:${JSON.stringify(stringToSign)}`);\n        // console.log(`[KEY]: ${request.headers.get(HeaderConstants.AUTHORIZATION)}`);\n        return request;\n    }\n    /**\n     * Retrieve header value according to shared key sign rules.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key\n     *\n     * @param request -\n     * @param headerName -\n     */\n    getHeaderValueToSign(request, headerName) {\n        const value = request.headers.get(headerName);\n        if (!value) {\n            return \"\";\n        }\n        // When using version 2015-02-21 or later, if Content-Length is zero, then\n        // set the Content-Length part of the StringToSign to an empty string.\n        // https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key\n        if (headerName === _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_LENGTH && value === \"0\") {\n            return \"\";\n        }\n        return value;\n    }\n    /**\n     * To construct the CanonicalizedHeaders portion of the signature string, follow these steps:\n     * 1. Retrieve all headers for the resource that begin with x-ms-, including the x-ms-date header.\n     * 2. Convert each HTTP header name to lowercase.\n     * 3. Sort the headers lexicographically by header name, in ascending order.\n     *    Each header may appear only once in the string.\n     * 4. Replace any linear whitespace in the header value with a single space.\n     * 5. Trim any whitespace around the colon in the header.\n     * 6. Finally, append a new-line character to each canonicalized header in the resulting list.\n     *    Construct the CanonicalizedHeaders string by concatenating all headers in this list into a single string.\n     *\n     * @param request -\n     */\n    getCanonicalizedHeadersString(request) {\n        let headersArray = request.headers.headersArray().filter((value) => {\n            return value.name.toLowerCase().startsWith(_utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.PREFIX_FOR_STORAGE);\n        });\n        headersArray.sort((a, b) => {\n            return a.name.toLowerCase().localeCompare(b.name.toLowerCase());\n        });\n        // Remove duplicate headers\n        headersArray = headersArray.filter((value, index, array) => {\n            if (index > 0 && value.name.toLowerCase() === array[index - 1].name.toLowerCase()) {\n                return false;\n            }\n            return true;\n        });\n        let canonicalizedHeadersStringToSign = \"\";\n        headersArray.forEach((header) => {\n            canonicalizedHeadersStringToSign += `${header.name\n                .toLowerCase()\n                .trimRight()}:${header.value.trimLeft()}\\n`;\n        });\n        return canonicalizedHeadersStringToSign;\n    }\n    /**\n     * Retrieves the webResource canonicalized resource string.\n     *\n     * @param request -\n     */\n    getCanonicalizedResourceString(request) {\n        const path = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.getURLPath)(request.url) || \"/\";\n        let canonicalizedResourceString = \"\";\n        canonicalizedResourceString += `/${this.factory.accountName}${path}`;\n        const queries = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.getURLQueries)(request.url);\n        const lowercaseQueries = {};\n        if (queries) {\n            const queryKeys = [];\n            for (const key in queries) {\n                if (Object.prototype.hasOwnProperty.call(queries, key)) {\n                    const lowercaseKey = key.toLowerCase();\n                    lowercaseQueries[lowercaseKey] = queries[key];\n                    queryKeys.push(lowercaseKey);\n                }\n            }\n            queryKeys.sort();\n            for (const key of queryKeys) {\n                canonicalizedResourceString += `\\n${key}:${decodeURIComponent(lowercaseQueries[key])}`;\n            }\n        }\n        return canonicalizedResourceString;\n    }\n}\n//# sourceMappingURL=StorageSharedKeyCredentialPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   storageSharedKeyCredentialPolicy: () => (/* binding */ storageSharedKeyCredentialPolicy),\n/* harmony export */   storageSharedKeyCredentialPolicyName: () => (/* binding */ storageSharedKeyCredentialPolicyName)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n/**\n * The programmatic identifier of the storageSharedKeyCredentialPolicy.\n */\nconst storageSharedKeyCredentialPolicyName = \"storageSharedKeyCredentialPolicy\";\n/**\n * storageSharedKeyCredentialPolicy handles signing requests using storage account keys.\n */\nfunction storageSharedKeyCredentialPolicy(options) {\n    function signRequest(request) {\n        request.headers.set(_utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.X_MS_DATE, new Date().toUTCString());\n        if (request.body &&\n            (typeof request.body === \"string\" || Buffer.isBuffer(request.body)) &&\n            request.body.length > 0) {\n            request.headers.set(_utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(request.body));\n        }\n        const stringToSign = [\n            request.method.toUpperCase(),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_LANGUAGE),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_ENCODING),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_LENGTH),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_MD5),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_TYPE),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.DATE),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.IF_MODIFIED_SINCE),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.IF_MATCH),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.IF_NONE_MATCH),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.IF_UNMODIFIED_SINCE),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.RANGE),\n        ].join(\"\\n\") +\n            \"\\n\" +\n            getCanonicalizedHeadersString(request) +\n            getCanonicalizedResourceString(request);\n        const signature = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac)(\"sha256\", options.accountKey)\n            .update(stringToSign, \"utf8\")\n            .digest(\"base64\");\n        request.headers.set(_utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.AUTHORIZATION, `SharedKey ${options.accountName}:${signature}`);\n        // console.log(`[URL]:${request.url}`);\n        // console.log(`[HEADERS]:${request.headers.toString()}`);\n        // console.log(`[STRING TO SIGN]:${JSON.stringify(stringToSign)}`);\n        // console.log(`[KEY]: ${request.headers.get(HeaderConstants.AUTHORIZATION)}`);\n    }\n    /**\n     * Retrieve header value according to shared key sign rules.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key\n     */\n    function getHeaderValueToSign(request, headerName) {\n        const value = request.headers.get(headerName);\n        if (!value) {\n            return \"\";\n        }\n        // When using version 2015-02-21 or later, if Content-Length is zero, then\n        // set the Content-Length part of the StringToSign to an empty string.\n        // https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key\n        if (headerName === _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_LENGTH && value === \"0\") {\n            return \"\";\n        }\n        return value;\n    }\n    /**\n     * To construct the CanonicalizedHeaders portion of the signature string, follow these steps:\n     * 1. Retrieve all headers for the resource that begin with x-ms-, including the x-ms-date header.\n     * 2. Convert each HTTP header name to lowercase.\n     * 3. Sort the headers lexicographically by header name, in ascending order.\n     *    Each header may appear only once in the string.\n     * 4. Replace any linear whitespace in the header value with a single space.\n     * 5. Trim any whitespace around the colon in the header.\n     * 6. Finally, append a new-line character to each canonicalized header in the resulting list.\n     *    Construct the CanonicalizedHeaders string by concatenating all headers in this list into a single string.\n     *\n     */\n    function getCanonicalizedHeadersString(request) {\n        let headersArray = [];\n        for (const [name, value] of request.headers) {\n            if (name.toLowerCase().startsWith(_utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.PREFIX_FOR_STORAGE)) {\n                headersArray.push({ name, value });\n            }\n        }\n        headersArray.sort((a, b) => {\n            return a.name.toLowerCase().localeCompare(b.name.toLowerCase());\n        });\n        // Remove duplicate headers\n        headersArray = headersArray.filter((value, index, array) => {\n            if (index > 0 && value.name.toLowerCase() === array[index - 1].name.toLowerCase()) {\n                return false;\n            }\n            return true;\n        });\n        let canonicalizedHeadersStringToSign = \"\";\n        headersArray.forEach((header) => {\n            canonicalizedHeadersStringToSign += `${header.name\n                .toLowerCase()\n                .trimRight()}:${header.value.trimLeft()}\\n`;\n        });\n        return canonicalizedHeadersStringToSign;\n    }\n    function getCanonicalizedResourceString(request) {\n        const path = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.getURLPath)(request.url) || \"/\";\n        let canonicalizedResourceString = \"\";\n        canonicalizedResourceString += `/${options.accountName}${path}`;\n        const queries = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.getURLQueries)(request.url);\n        const lowercaseQueries = {};\n        if (queries) {\n            const queryKeys = [];\n            for (const key in queries) {\n                if (Object.prototype.hasOwnProperty.call(queries, key)) {\n                    const lowercaseKey = key.toLowerCase();\n                    lowercaseQueries[lowercaseKey] = queries[key];\n                    queryKeys.push(lowercaseKey);\n                }\n            }\n            queryKeys.sort();\n            for (const key of queryKeys) {\n                canonicalizedResourceString += `\\n${key}:${decodeURIComponent(lowercaseQueries[key])}`;\n            }\n        }\n        return canonicalizedResourceString;\n    }\n    return {\n        name: storageSharedKeyCredentialPolicyName,\n        async sendRequest(request, next) {\n            signRequest(request);\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=StorageSharedKeyCredentialPolicyV2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobBeginCopyFromUrlPoller: () => (/* binding */ BlobBeginCopyFromUrlPoller)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _azure_core_lro__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-lro */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * This is the poller returned by {@link BlobClient.beginCopyFromURL}.\n * This can not be instantiated directly outside of this package.\n *\n * @hidden\n */\nclass BlobBeginCopyFromUrlPoller extends _azure_core_lro__WEBPACK_IMPORTED_MODULE_1__.Poller {\n    constructor(options) {\n        const { blobClient, copySource, intervalInMs = 15000, onProgress, resumeFrom, startCopyFromURLOptions, } = options;\n        let state;\n        if (resumeFrom) {\n            state = JSON.parse(resumeFrom).state;\n        }\n        const operation = makeBlobBeginCopyFromURLPollOperation(Object.assign(Object.assign({}, state), { blobClient,\n            copySource,\n            startCopyFromURLOptions }));\n        super(operation);\n        if (typeof onProgress === \"function\") {\n            this.onProgress(onProgress);\n        }\n        this.intervalInMs = intervalInMs;\n    }\n    delay() {\n        return (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.delay)(this.intervalInMs);\n    }\n}\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst cancel = async function cancel(options = {}) {\n    const state = this.state;\n    const { copyId } = state;\n    if (state.isCompleted) {\n        return makeBlobBeginCopyFromURLPollOperation(state);\n    }\n    if (!copyId) {\n        state.isCancelled = true;\n        return makeBlobBeginCopyFromURLPollOperation(state);\n    }\n    // if abortCopyFromURL throws, it will bubble up to user's poller.cancelOperation call\n    await state.blobClient.abortCopyFromURL(copyId, {\n        abortSignal: options.abortSignal,\n    });\n    state.isCancelled = true;\n    return makeBlobBeginCopyFromURLPollOperation(state);\n};\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst update = async function update(options = {}) {\n    const state = this.state;\n    const { blobClient, copySource, startCopyFromURLOptions } = state;\n    if (!state.isStarted) {\n        state.isStarted = true;\n        const result = await blobClient.startCopyFromURL(copySource, startCopyFromURLOptions);\n        // copyId is needed to abort\n        state.copyId = result.copyId;\n        if (result.copyStatus === \"success\") {\n            state.result = result;\n            state.isCompleted = true;\n        }\n    }\n    else if (!state.isCompleted) {\n        try {\n            const result = await state.blobClient.getProperties({ abortSignal: options.abortSignal });\n            const { copyStatus, copyProgress } = result;\n            const prevCopyProgress = state.copyProgress;\n            if (copyProgress) {\n                state.copyProgress = copyProgress;\n            }\n            if (copyStatus === \"pending\" &&\n                copyProgress !== prevCopyProgress &&\n                typeof options.fireProgress === \"function\") {\n                // trigger in setTimeout, or swallow error?\n                options.fireProgress(state);\n            }\n            else if (copyStatus === \"success\") {\n                state.result = result;\n                state.isCompleted = true;\n            }\n            else if (copyStatus === \"failed\") {\n                state.error = new Error(`Blob copy failed with reason: \"${result.copyStatusDescription || \"unknown\"}\"`);\n                state.isCompleted = true;\n            }\n        }\n        catch (err) {\n            state.error = err;\n            state.isCompleted = true;\n        }\n    }\n    return makeBlobBeginCopyFromURLPollOperation(state);\n};\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst toString = function toString() {\n    return JSON.stringify({ state: this.state }, (key, value) => {\n        // remove blobClient from serialized state since a client can't be hydrated from this info.\n        if (key === \"blobClient\") {\n            return undefined;\n        }\n        return value;\n    });\n};\n/**\n * Creates a poll operation given the provided state.\n * @hidden\n */\nfunction makeBlobBeginCopyFromURLPollOperation(state) {\n    return {\n        state: Object.assign({}, state),\n        cancel,\n        toString,\n        update,\n    };\n}\n//# sourceMappingURL=BlobStartCopyFromUrlPoller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGxlcnMvQmxvYlN0YXJ0Q29weUZyb21VcmxQb2xsZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUN5QztBQUNBO0FBQ3pDO0FBQ0EsbUNBQW1DLGtDQUFrQztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHlDQUF5QyxtREFBTTtBQUN0RDtBQUNBLGdCQUFnQixpR0FBaUc7QUFDakg7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RkFBOEYsWUFBWTtBQUMxRztBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsdURBQUs7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQSxZQUFZLGtEQUFrRDtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0Usa0NBQWtDO0FBQ3BHLG9CQUFvQiwyQkFBMkI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLDBDQUEwQztBQUNwSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLG1CQUFtQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9wb2xsZXJzL0Jsb2JTdGFydENvcHlGcm9tVXJsUG9sbGVyLmpzPzU1NTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBkZWxheSB9IGZyb20gXCJAYXp1cmUvY29yZS11dGlsXCI7XG5pbXBvcnQgeyBQb2xsZXIgfSBmcm9tIFwiQGF6dXJlL2NvcmUtbHJvXCI7XG4vKipcbiAqIFRoaXMgaXMgdGhlIHBvbGxlciByZXR1cm5lZCBieSB7QGxpbmsgQmxvYkNsaWVudC5iZWdpbkNvcHlGcm9tVVJMfS5cbiAqIFRoaXMgY2FuIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkgb3V0c2lkZSBvZiB0aGlzIHBhY2thZ2UuXG4gKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgQmxvYkJlZ2luQ29weUZyb21VcmxQb2xsZXIgZXh0ZW5kcyBQb2xsZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBibG9iQ2xpZW50LCBjb3B5U291cmNlLCBpbnRlcnZhbEluTXMgPSAxNTAwMCwgb25Qcm9ncmVzcywgcmVzdW1lRnJvbSwgc3RhcnRDb3B5RnJvbVVSTE9wdGlvbnMsIH0gPSBvcHRpb25zO1xuICAgICAgICBsZXQgc3RhdGU7XG4gICAgICAgIGlmIChyZXN1bWVGcm9tKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEpTT04ucGFyc2UocmVzdW1lRnJvbSkuc3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gbWFrZUJsb2JCZWdpbkNvcHlGcm9tVVJMUG9sbE9wZXJhdGlvbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHN0YXRlKSwgeyBibG9iQ2xpZW50LFxuICAgICAgICAgICAgY29weVNvdXJjZSxcbiAgICAgICAgICAgIHN0YXJ0Q29weUZyb21VUkxPcHRpb25zIH0pKTtcbiAgICAgICAgc3VwZXIob3BlcmF0aW9uKTtcbiAgICAgICAgaWYgKHR5cGVvZiBvblByb2dyZXNzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRoaXMub25Qcm9ncmVzcyhvblByb2dyZXNzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmludGVydmFsSW5NcyA9IGludGVydmFsSW5NcztcbiAgICB9XG4gICAgZGVsYXkoKSB7XG4gICAgICAgIHJldHVybiBkZWxheSh0aGlzLmludGVydmFsSW5Ncyk7XG4gICAgfVxufVxuLyoqXG4gKiBOb3RlOiBJbnRlbnRpb25hbGx5IHVzaW5nIGZ1bmN0aW9uIGV4cHJlc3Npb24gb3ZlciBhcnJvdyBmdW5jdGlvbiBleHByZXNzaW9uXG4gKiBzbyB0aGF0IHRoZSBmdW5jdGlvbiBjYW4gYmUgaW52b2tlZCB3aXRoIGEgZGlmZmVyZW50IGNvbnRleHQuXG4gKiBUaGlzIGFmZmVjdHMgd2hhdCBgdGhpc2AgcmVmZXJzIHRvLlxuICogQGhpZGRlblxuICovXG5jb25zdCBjYW5jZWwgPSBhc3luYyBmdW5jdGlvbiBjYW5jZWwob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgY29weUlkIH0gPSBzdGF0ZTtcbiAgICBpZiAoc3RhdGUuaXNDb21wbGV0ZWQpIHtcbiAgICAgICAgcmV0dXJuIG1ha2VCbG9iQmVnaW5Db3B5RnJvbVVSTFBvbGxPcGVyYXRpb24oc3RhdGUpO1xuICAgIH1cbiAgICBpZiAoIWNvcHlJZCkge1xuICAgICAgICBzdGF0ZS5pc0NhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBtYWtlQmxvYkJlZ2luQ29weUZyb21VUkxQb2xsT3BlcmF0aW9uKHN0YXRlKTtcbiAgICB9XG4gICAgLy8gaWYgYWJvcnRDb3B5RnJvbVVSTCB0aHJvd3MsIGl0IHdpbGwgYnViYmxlIHVwIHRvIHVzZXIncyBwb2xsZXIuY2FuY2VsT3BlcmF0aW9uIGNhbGxcbiAgICBhd2FpdCBzdGF0ZS5ibG9iQ2xpZW50LmFib3J0Q29weUZyb21VUkwoY29weUlkLCB7XG4gICAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgIH0pO1xuICAgIHN0YXRlLmlzQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gbWFrZUJsb2JCZWdpbkNvcHlGcm9tVVJMUG9sbE9wZXJhdGlvbihzdGF0ZSk7XG59O1xuLyoqXG4gKiBOb3RlOiBJbnRlbnRpb25hbGx5IHVzaW5nIGZ1bmN0aW9uIGV4cHJlc3Npb24gb3ZlciBhcnJvdyBmdW5jdGlvbiBleHByZXNzaW9uXG4gKiBzbyB0aGF0IHRoZSBmdW5jdGlvbiBjYW4gYmUgaW52b2tlZCB3aXRoIGEgZGlmZmVyZW50IGNvbnRleHQuXG4gKiBUaGlzIGFmZmVjdHMgd2hhdCBgdGhpc2AgcmVmZXJzIHRvLlxuICogQGhpZGRlblxuICovXG5jb25zdCB1cGRhdGUgPSBhc3luYyBmdW5jdGlvbiB1cGRhdGUob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgYmxvYkNsaWVudCwgY29weVNvdXJjZSwgc3RhcnRDb3B5RnJvbVVSTE9wdGlvbnMgfSA9IHN0YXRlO1xuICAgIGlmICghc3RhdGUuaXNTdGFydGVkKSB7XG4gICAgICAgIHN0YXRlLmlzU3RhcnRlZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGJsb2JDbGllbnQuc3RhcnRDb3B5RnJvbVVSTChjb3B5U291cmNlLCBzdGFydENvcHlGcm9tVVJMT3B0aW9ucyk7XG4gICAgICAgIC8vIGNvcHlJZCBpcyBuZWVkZWQgdG8gYWJvcnRcbiAgICAgICAgc3RhdGUuY29weUlkID0gcmVzdWx0LmNvcHlJZDtcbiAgICAgICAgaWYgKHJlc3VsdC5jb3B5U3RhdHVzID09PSBcInN1Y2Nlc3NcIikge1xuICAgICAgICAgICAgc3RhdGUucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICAgICAgc3RhdGUuaXNDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKCFzdGF0ZS5pc0NvbXBsZXRlZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3RhdGUuYmxvYkNsaWVudC5nZXRQcm9wZXJ0aWVzKHsgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwgfSk7XG4gICAgICAgICAgICBjb25zdCB7IGNvcHlTdGF0dXMsIGNvcHlQcm9ncmVzcyB9ID0gcmVzdWx0O1xuICAgICAgICAgICAgY29uc3QgcHJldkNvcHlQcm9ncmVzcyA9IHN0YXRlLmNvcHlQcm9ncmVzcztcbiAgICAgICAgICAgIGlmIChjb3B5UHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5jb3B5UHJvZ3Jlc3MgPSBjb3B5UHJvZ3Jlc3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29weVN0YXR1cyA9PT0gXCJwZW5kaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBjb3B5UHJvZ3Jlc3MgIT09IHByZXZDb3B5UHJvZ3Jlc3MgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5maXJlUHJvZ3Jlc3MgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIC8vIHRyaWdnZXIgaW4gc2V0VGltZW91dCwgb3Igc3dhbGxvdyBlcnJvcj9cbiAgICAgICAgICAgICAgICBvcHRpb25zLmZpcmVQcm9ncmVzcyhzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb3B5U3RhdHVzID09PSBcInN1Y2Nlc3NcIikge1xuICAgICAgICAgICAgICAgIHN0YXRlLnJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICBzdGF0ZS5pc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb3B5U3RhdHVzID09PSBcImZhaWxlZFwiKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuZXJyb3IgPSBuZXcgRXJyb3IoYEJsb2IgY29weSBmYWlsZWQgd2l0aCByZWFzb246IFwiJHtyZXN1bHQuY29weVN0YXR1c0Rlc2NyaXB0aW9uIHx8IFwidW5rbm93blwifVwiYCk7XG4gICAgICAgICAgICAgICAgc3RhdGUuaXNDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHN0YXRlLmVycm9yID0gZXJyO1xuICAgICAgICAgICAgc3RhdGUuaXNDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYWtlQmxvYkJlZ2luQ29weUZyb21VUkxQb2xsT3BlcmF0aW9uKHN0YXRlKTtcbn07XG4vKipcbiAqIE5vdGU6IEludGVudGlvbmFsbHkgdXNpbmcgZnVuY3Rpb24gZXhwcmVzc2lvbiBvdmVyIGFycm93IGZ1bmN0aW9uIGV4cHJlc3Npb25cbiAqIHNvIHRoYXQgdGhlIGZ1bmN0aW9uIGNhbiBiZSBpbnZva2VkIHdpdGggYSBkaWZmZXJlbnQgY29udGV4dC5cbiAqIFRoaXMgYWZmZWN0cyB3aGF0IGB0aGlzYCByZWZlcnMgdG8uXG4gKiBAaGlkZGVuXG4gKi9cbmNvbnN0IHRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHsgc3RhdGU6IHRoaXMuc3RhdGUgfSwgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgLy8gcmVtb3ZlIGJsb2JDbGllbnQgZnJvbSBzZXJpYWxpemVkIHN0YXRlIHNpbmNlIGEgY2xpZW50IGNhbid0IGJlIGh5ZHJhdGVkIGZyb20gdGhpcyBpbmZvLlxuICAgICAgICBpZiAoa2V5ID09PSBcImJsb2JDbGllbnRcIikge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG59O1xuLyoqXG4gKiBDcmVhdGVzIGEgcG9sbCBvcGVyYXRpb24gZ2l2ZW4gdGhlIHByb3ZpZGVkIHN0YXRlLlxuICogQGhpZGRlblxuICovXG5mdW5jdGlvbiBtYWtlQmxvYkJlZ2luQ29weUZyb21VUkxQb2xsT3BlcmF0aW9uKHN0YXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdGU6IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlKSxcbiAgICAgICAgY2FuY2VsLFxuICAgICAgICB0b1N0cmluZyxcbiAgICAgICAgdXBkYXRlLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CbG9iU3RhcnRDb3B5RnJvbVVybFBvbGxlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountSASPermissions: () => (/* binding */ AccountSASPermissions)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the\n * values are set, this should be serialized with toString and set as the permissions field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nclass AccountSASPermissions {\n    constructor() {\n        /**\n         * Permission to read resources and list queues and tables granted.\n         */\n        this.read = false;\n        /**\n         * Permission to write resources granted.\n         */\n        this.write = false;\n        /**\n         * Permission to delete blobs and files granted.\n         */\n        this.delete = false;\n        /**\n         * Permission to delete versions granted.\n         */\n        this.deleteVersion = false;\n        /**\n         * Permission to list blob containers, blobs, shares, directories, and files granted.\n         */\n        this.list = false;\n        /**\n         * Permission to add messages, table entities, and append to blobs granted.\n         */\n        this.add = false;\n        /**\n         * Permission to create blobs and files granted.\n         */\n        this.create = false;\n        /**\n         * Permissions to update messages and table entities granted.\n         */\n        this.update = false;\n        /**\n         * Permission to get and delete messages granted.\n         */\n        this.process = false;\n        /**\n         * Specfies Tag access granted.\n         */\n        this.tag = false;\n        /**\n         * Permission to filter blobs.\n         */\n        this.filter = false;\n        /**\n         * Permission to set immutability policy.\n         */\n        this.setImmutabilityPolicy = false;\n        /**\n         * Specifies that Permanent Delete is permitted.\n         */\n        this.permanentDelete = false;\n    }\n    /**\n     * Parse initializes the AccountSASPermissions fields from a string.\n     *\n     * @param permissions -\n     */\n    static parse(permissions) {\n        const accountSASPermissions = new AccountSASPermissions();\n        for (const c of permissions) {\n            switch (c) {\n                case \"r\":\n                    accountSASPermissions.read = true;\n                    break;\n                case \"w\":\n                    accountSASPermissions.write = true;\n                    break;\n                case \"d\":\n                    accountSASPermissions.delete = true;\n                    break;\n                case \"x\":\n                    accountSASPermissions.deleteVersion = true;\n                    break;\n                case \"l\":\n                    accountSASPermissions.list = true;\n                    break;\n                case \"a\":\n                    accountSASPermissions.add = true;\n                    break;\n                case \"c\":\n                    accountSASPermissions.create = true;\n                    break;\n                case \"u\":\n                    accountSASPermissions.update = true;\n                    break;\n                case \"p\":\n                    accountSASPermissions.process = true;\n                    break;\n                case \"t\":\n                    accountSASPermissions.tag = true;\n                    break;\n                case \"f\":\n                    accountSASPermissions.filter = true;\n                    break;\n                case \"i\":\n                    accountSASPermissions.setImmutabilityPolicy = true;\n                    break;\n                case \"y\":\n                    accountSASPermissions.permanentDelete = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid permission character: ${c}`);\n            }\n        }\n        return accountSASPermissions;\n    }\n    /**\n     * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it\n     * and boolean values for them.\n     *\n     * @param permissionLike -\n     */\n    static from(permissionLike) {\n        const accountSASPermissions = new AccountSASPermissions();\n        if (permissionLike.read) {\n            accountSASPermissions.read = true;\n        }\n        if (permissionLike.write) {\n            accountSASPermissions.write = true;\n        }\n        if (permissionLike.delete) {\n            accountSASPermissions.delete = true;\n        }\n        if (permissionLike.deleteVersion) {\n            accountSASPermissions.deleteVersion = true;\n        }\n        if (permissionLike.filter) {\n            accountSASPermissions.filter = true;\n        }\n        if (permissionLike.tag) {\n            accountSASPermissions.tag = true;\n        }\n        if (permissionLike.list) {\n            accountSASPermissions.list = true;\n        }\n        if (permissionLike.add) {\n            accountSASPermissions.add = true;\n        }\n        if (permissionLike.create) {\n            accountSASPermissions.create = true;\n        }\n        if (permissionLike.update) {\n            accountSASPermissions.update = true;\n        }\n        if (permissionLike.process) {\n            accountSASPermissions.process = true;\n        }\n        if (permissionLike.setImmutabilityPolicy) {\n            accountSASPermissions.setImmutabilityPolicy = true;\n        }\n        if (permissionLike.permanentDelete) {\n            accountSASPermissions.permanentDelete = true;\n        }\n        return accountSASPermissions;\n    }\n    /**\n     * Produces the SAS permissions string for an Azure Storage account.\n     * Call this method to set AccountSASSignatureValues Permissions field.\n     *\n     * Using this method will guarantee the resource types are in\n     * an order accepted by the service.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n     *\n     */\n    toString() {\n        // The order of the characters should be as specified here to ensure correctness:\n        // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n        // Use a string array instead of string concatenating += operator for performance\n        const permissions = [];\n        if (this.read) {\n            permissions.push(\"r\");\n        }\n        if (this.write) {\n            permissions.push(\"w\");\n        }\n        if (this.delete) {\n            permissions.push(\"d\");\n        }\n        if (this.deleteVersion) {\n            permissions.push(\"x\");\n        }\n        if (this.filter) {\n            permissions.push(\"f\");\n        }\n        if (this.tag) {\n            permissions.push(\"t\");\n        }\n        if (this.list) {\n            permissions.push(\"l\");\n        }\n        if (this.add) {\n            permissions.push(\"a\");\n        }\n        if (this.create) {\n            permissions.push(\"c\");\n        }\n        if (this.update) {\n            permissions.push(\"u\");\n        }\n        if (this.process) {\n            permissions.push(\"p\");\n        }\n        if (this.setImmutabilityPolicy) {\n            permissions.push(\"i\");\n        }\n        if (this.permanentDelete) {\n            permissions.push(\"y\");\n        }\n        return permissions.join(\"\");\n    }\n}\n//# sourceMappingURL=AccountSASPermissions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountSASResourceTypes: () => (/* binding */ AccountSASResourceTypes)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the resources accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that resource type. Once all the\n * values are set, this should be serialized with toString and set as the resources field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the resources string without this class, but\n * the order of the resources is particular and this class guarantees correctness.\n */\nclass AccountSASResourceTypes {\n    constructor() {\n        /**\n         * Permission to access service level APIs granted.\n         */\n        this.service = false;\n        /**\n         * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.\n         */\n        this.container = false;\n        /**\n         * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.\n         */\n        this.object = false;\n    }\n    /**\n     * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid resource type.\n     *\n     * @param resourceTypes -\n     */\n    static parse(resourceTypes) {\n        const accountSASResourceTypes = new AccountSASResourceTypes();\n        for (const c of resourceTypes) {\n            switch (c) {\n                case \"s\":\n                    accountSASResourceTypes.service = true;\n                    break;\n                case \"c\":\n                    accountSASResourceTypes.container = true;\n                    break;\n                case \"o\":\n                    accountSASResourceTypes.object = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid resource type: ${c}`);\n            }\n        }\n        return accountSASResourceTypes;\n    }\n    /**\n     * Converts the given resource types to a string.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n     *\n     */\n    toString() {\n        const resourceTypes = [];\n        if (this.service) {\n            resourceTypes.push(\"s\");\n        }\n        if (this.container) {\n            resourceTypes.push(\"c\");\n        }\n        if (this.object) {\n            resourceTypes.push(\"o\");\n        }\n        return resourceTypes.join(\"\");\n    }\n}\n//# sourceMappingURL=AccountSASResourceTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3Nhcy9BY2NvdW50U0FTUmVzb3VyY2VUeXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksaUNBQWlDO0FBQ3JDO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiwrQkFBK0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLEVBQUU7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvc2FzL0FjY291bnRTQVNSZXNvdXJjZVR5cGVzLmpzPzQxMzAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIE9OTFkgQVZBSUxBQkxFIElOIE5PREUuSlMgUlVOVElNRS5cbiAqXG4gKiBUaGlzIGlzIGEgaGVscGVyIGNsYXNzIHRvIGNvbnN0cnVjdCBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHJlc291cmNlcyBhY2Nlc3NpYmxlIGJ5IGFuIEFjY291bnRTQVMuIFNldHRpbmcgYSB2YWx1ZVxuICogdG8gdHJ1ZSBtZWFucyB0aGF0IGFueSBTQVMgd2hpY2ggdXNlcyB0aGVzZSBwZXJtaXNzaW9ucyB3aWxsIGdyYW50IGFjY2VzcyB0byB0aGF0IHJlc291cmNlIHR5cGUuIE9uY2UgYWxsIHRoZVxuICogdmFsdWVzIGFyZSBzZXQsIHRoaXMgc2hvdWxkIGJlIHNlcmlhbGl6ZWQgd2l0aCB0b1N0cmluZyBhbmQgc2V0IGFzIHRoZSByZXNvdXJjZXMgZmllbGQgb24gYW5cbiAqIHtAbGluayBBY2NvdW50U0FTU2lnbmF0dXJlVmFsdWVzfSBvYmplY3QuIEl0IGlzIHBvc3NpYmxlIHRvIGNvbnN0cnVjdCB0aGUgcmVzb3VyY2VzIHN0cmluZyB3aXRob3V0IHRoaXMgY2xhc3MsIGJ1dFxuICogdGhlIG9yZGVyIG9mIHRoZSByZXNvdXJjZXMgaXMgcGFydGljdWxhciBhbmQgdGhpcyBjbGFzcyBndWFyYW50ZWVzIGNvcnJlY3RuZXNzLlxuICovXG5leHBvcnQgY2xhc3MgQWNjb3VudFNBU1Jlc291cmNlVHlwZXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogUGVybWlzc2lvbiB0byBhY2Nlc3Mgc2VydmljZSBsZXZlbCBBUElzIGdyYW50ZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNlcnZpY2UgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBlcm1pc3Npb24gdG8gYWNjZXNzIGNvbnRhaW5lciBsZXZlbCBBUElzIChCbG9iIENvbnRhaW5lcnMsIFRhYmxlcywgUXVldWVzLCBGaWxlIFNoYXJlcykgZ3JhbnRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQZXJtaXNzaW9uIHRvIGFjY2VzcyBvYmplY3QgbGV2ZWwgQVBJcyAoQmxvYnMsIFRhYmxlIEVudGl0aWVzLCBRdWV1ZSBNZXNzYWdlcywgRmlsZXMpIGdyYW50ZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9iamVjdCA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIHtAbGluayBBY2NvdW50U0FTUmVzb3VyY2VUeXBlc30gZnJvbSB0aGUgc3BlY2lmaWVkIHJlc291cmNlIHR5cGVzIHN0cmluZy4gVGhpcyBtZXRob2Qgd2lsbCB0aHJvdyBhblxuICAgICAqIEVycm9yIGlmIGl0IGVuY291bnRlcnMgYSBjaGFyYWN0ZXIgdGhhdCBkb2VzIG5vdCBjb3JyZXNwb25kIHRvIGEgdmFsaWQgcmVzb3VyY2UgdHlwZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZXNvdXJjZVR5cGVzIC1cbiAgICAgKi9cbiAgICBzdGF0aWMgcGFyc2UocmVzb3VyY2VUeXBlcykge1xuICAgICAgICBjb25zdCBhY2NvdW50U0FTUmVzb3VyY2VUeXBlcyA9IG5ldyBBY2NvdW50U0FTUmVzb3VyY2VUeXBlcygpO1xuICAgICAgICBmb3IgKGNvbnN0IGMgb2YgcmVzb3VyY2VUeXBlcykge1xuICAgICAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFNBU1Jlc291cmNlVHlwZXMuc2VydmljZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRTQVNSZXNvdXJjZVR5cGVzLmNvbnRhaW5lciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJvXCI6XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRTQVNSZXNvdXJjZVR5cGVzLm9iamVjdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBJbnZhbGlkIHJlc291cmNlIHR5cGU6ICR7Y31gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjb3VudFNBU1Jlc291cmNlVHlwZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBnaXZlbiByZXNvdXJjZSB0eXBlcyB0byBhIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL2NvbnN0cnVjdGluZy1hbi1hY2NvdW50LXNhc1xuICAgICAqXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IHJlc291cmNlVHlwZXMgPSBbXTtcbiAgICAgICAgaWYgKHRoaXMuc2VydmljZSkge1xuICAgICAgICAgICAgcmVzb3VyY2VUeXBlcy5wdXNoKFwic1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb250YWluZXIpIHtcbiAgICAgICAgICAgIHJlc291cmNlVHlwZXMucHVzaChcImNcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub2JqZWN0KSB7XG4gICAgICAgICAgICByZXNvdXJjZVR5cGVzLnB1c2goXCJvXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNvdXJjZVR5cGVzLmpvaW4oXCJcIik7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWNjb3VudFNBU1Jlc291cmNlVHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountSASServices: () => (/* binding */ AccountSASServices)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that service. Once all the\n * values are set, this should be serialized with toString and set as the services field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but\n * the order of the services is particular and this class guarantees correctness.\n */\nclass AccountSASServices {\n    constructor() {\n        /**\n         * Permission to access blob resources granted.\n         */\n        this.blob = false;\n        /**\n         * Permission to access file resources granted.\n         */\n        this.file = false;\n        /**\n         * Permission to access queue resources granted.\n         */\n        this.queue = false;\n        /**\n         * Permission to access table resources granted.\n         */\n        this.table = false;\n    }\n    /**\n     * Creates an {@link AccountSASServices} from the specified services string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid service.\n     *\n     * @param services -\n     */\n    static parse(services) {\n        const accountSASServices = new AccountSASServices();\n        for (const c of services) {\n            switch (c) {\n                case \"b\":\n                    accountSASServices.blob = true;\n                    break;\n                case \"f\":\n                    accountSASServices.file = true;\n                    break;\n                case \"q\":\n                    accountSASServices.queue = true;\n                    break;\n                case \"t\":\n                    accountSASServices.table = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid service character: ${c}`);\n            }\n        }\n        return accountSASServices;\n    }\n    /**\n     * Converts the given services to a string.\n     *\n     */\n    toString() {\n        const services = [];\n        if (this.blob) {\n            services.push(\"b\");\n        }\n        if (this.table) {\n            services.push(\"t\");\n        }\n        if (this.queue) {\n            services.push(\"q\");\n        }\n        if (this.file) {\n            services.push(\"f\");\n        }\n        return services.join(\"\");\n    }\n}\n//# sourceMappingURL=AccountSASServices.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3Nhcy9BY2NvdW50U0FTU2VydmljZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGlDQUFpQztBQUNyQztBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiwwQkFBMEI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFLEVBQUU7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9zYXMvQWNjb3VudFNBU1NlcnZpY2VzLmpzPzg2NTciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIE9OTFkgQVZBSUxBQkxFIElOIE5PREUuSlMgUlVOVElNRS5cbiAqXG4gKiBUaGlzIGlzIGEgaGVscGVyIGNsYXNzIHRvIGNvbnN0cnVjdCBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHNlcnZpY2VzIGFjY2Vzc2libGUgYnkgYW4gQWNjb3VudFNBUy4gU2V0dGluZyBhIHZhbHVlXG4gKiB0byB0cnVlIG1lYW5zIHRoYXQgYW55IFNBUyB3aGljaCB1c2VzIHRoZXNlIHBlcm1pc3Npb25zIHdpbGwgZ3JhbnQgYWNjZXNzIHRvIHRoYXQgc2VydmljZS4gT25jZSBhbGwgdGhlXG4gKiB2YWx1ZXMgYXJlIHNldCwgdGhpcyBzaG91bGQgYmUgc2VyaWFsaXplZCB3aXRoIHRvU3RyaW5nIGFuZCBzZXQgYXMgdGhlIHNlcnZpY2VzIGZpZWxkIG9uIGFuXG4gKiB7QGxpbmsgQWNjb3VudFNBU1NpZ25hdHVyZVZhbHVlc30gb2JqZWN0LiBJdCBpcyBwb3NzaWJsZSB0byBjb25zdHJ1Y3QgdGhlIHNlcnZpY2VzIHN0cmluZyB3aXRob3V0IHRoaXMgY2xhc3MsIGJ1dFxuICogdGhlIG9yZGVyIG9mIHRoZSBzZXJ2aWNlcyBpcyBwYXJ0aWN1bGFyIGFuZCB0aGlzIGNsYXNzIGd1YXJhbnRlZXMgY29ycmVjdG5lc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBBY2NvdW50U0FTU2VydmljZXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogUGVybWlzc2lvbiB0byBhY2Nlc3MgYmxvYiByZXNvdXJjZXMgZ3JhbnRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYmxvYiA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogUGVybWlzc2lvbiB0byBhY2Nlc3MgZmlsZSByZXNvdXJjZXMgZ3JhbnRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZmlsZSA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogUGVybWlzc2lvbiB0byBhY2Nlc3MgcXVldWUgcmVzb3VyY2VzIGdyYW50ZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnF1ZXVlID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQZXJtaXNzaW9uIHRvIGFjY2VzcyB0YWJsZSByZXNvdXJjZXMgZ3JhbnRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudGFibGUgPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiB7QGxpbmsgQWNjb3VudFNBU1NlcnZpY2VzfSBmcm9tIHRoZSBzcGVjaWZpZWQgc2VydmljZXMgc3RyaW5nLiBUaGlzIG1ldGhvZCB3aWxsIHRocm93IGFuXG4gICAgICogRXJyb3IgaWYgaXQgZW5jb3VudGVycyBhIGNoYXJhY3RlciB0aGF0IGRvZXMgbm90IGNvcnJlc3BvbmQgdG8gYSB2YWxpZCBzZXJ2aWNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNlcnZpY2VzIC1cbiAgICAgKi9cbiAgICBzdGF0aWMgcGFyc2Uoc2VydmljZXMpIHtcbiAgICAgICAgY29uc3QgYWNjb3VudFNBU1NlcnZpY2VzID0gbmV3IEFjY291bnRTQVNTZXJ2aWNlcygpO1xuICAgICAgICBmb3IgKGNvbnN0IGMgb2Ygc2VydmljZXMpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJiXCI6XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRTQVNTZXJ2aWNlcy5ibG9iID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImZcIjpcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFNBU1NlcnZpY2VzLmZpbGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwicVwiOlxuICAgICAgICAgICAgICAgICAgICBhY2NvdW50U0FTU2VydmljZXMucXVldWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwidFwiOlxuICAgICAgICAgICAgICAgICAgICBhY2NvdW50U0FTU2VydmljZXMudGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgSW52YWxpZCBzZXJ2aWNlIGNoYXJhY3RlcjogJHtjfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2NvdW50U0FTU2VydmljZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBnaXZlbiBzZXJ2aWNlcyB0byBhIHN0cmluZy5cbiAgICAgKlxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBjb25zdCBzZXJ2aWNlcyA9IFtdO1xuICAgICAgICBpZiAodGhpcy5ibG9iKSB7XG4gICAgICAgICAgICBzZXJ2aWNlcy5wdXNoKFwiYlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50YWJsZSkge1xuICAgICAgICAgICAgc2VydmljZXMucHVzaChcInRcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucXVldWUpIHtcbiAgICAgICAgICAgIHNlcnZpY2VzLnB1c2goXCJxXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmZpbGUpIHtcbiAgICAgICAgICAgIHNlcnZpY2VzLnB1c2goXCJmXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXJ2aWNlcy5qb2luKFwiXCIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFjY291bnRTQVNTZXJ2aWNlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateAccountSASQueryParameters: () => (/* binding */ generateAccountSASQueryParameters)\n/* harmony export */ });\n/* harmony import */ var _AccountSASPermissions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AccountSASPermissions */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js\");\n/* harmony import */ var _AccountSASResourceTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AccountSASResourceTypes */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js\");\n/* harmony import */ var _AccountSASServices__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AccountSASServices */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js\");\n/* harmony import */ var _SasIPRange__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SasIPRange */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js\");\n/* harmony import */ var _SASQueryParameters__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SASQueryParameters */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Generates a {@link SASQueryParameters} object which contains all SAS query parameters needed to make an actual\n * REST request.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n *\n * @param accountSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateAccountSASQueryParameters(accountSASSignatureValues, sharedKeyCredential) {\n    const version = accountSASSignatureValues.version\n        ? accountSASSignatureValues.version\n        : _utils_constants__WEBPACK_IMPORTED_MODULE_0__.SERVICE_VERSION;\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.setImmutabilityPolicy &&\n        version < \"2020-08-04\") {\n        throw RangeError(\"'version' must be >= '2020-08-04' when provided 'i' permission.\");\n    }\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.deleteVersion &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when provided 'x' permission.\");\n    }\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.permanentDelete &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when provided 'y' permission.\");\n    }\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.tag &&\n        version < \"2019-12-12\") {\n        throw RangeError(\"'version' must be >= '2019-12-12' when provided 't' permission.\");\n    }\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.filter &&\n        version < \"2019-12-12\") {\n        throw RangeError(\"'version' must be >= '2019-12-12' when provided 'f' permission.\");\n    }\n    if (accountSASSignatureValues.encryptionScope && version < \"2020-12-06\") {\n        throw RangeError(\"'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.\");\n    }\n    const parsedPermissions = _AccountSASPermissions__WEBPACK_IMPORTED_MODULE_1__.AccountSASPermissions.parse(accountSASSignatureValues.permissions.toString());\n    const parsedServices = _AccountSASServices__WEBPACK_IMPORTED_MODULE_2__.AccountSASServices.parse(accountSASSignatureValues.services).toString();\n    const parsedResourceTypes = _AccountSASResourceTypes__WEBPACK_IMPORTED_MODULE_3__.AccountSASResourceTypes.parse(accountSASSignatureValues.resourceTypes).toString();\n    let stringToSign;\n    if (version >= \"2020-12-06\") {\n        stringToSign = [\n            sharedKeyCredential.accountName,\n            parsedPermissions,\n            parsedServices,\n            parsedResourceTypes,\n            accountSASSignatureValues.startsOn\n                ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(accountSASSignatureValues.startsOn, false)\n                : \"\",\n            (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(accountSASSignatureValues.expiresOn, false),\n            accountSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_5__.ipRangeToString)(accountSASSignatureValues.ipRange) : \"\",\n            accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\",\n            version,\n            accountSASSignatureValues.encryptionScope ? accountSASSignatureValues.encryptionScope : \"\",\n            \"\", // Account SAS requires an additional newline character\n        ].join(\"\\n\");\n    }\n    else {\n        stringToSign = [\n            sharedKeyCredential.accountName,\n            parsedPermissions,\n            parsedServices,\n            parsedResourceTypes,\n            accountSASSignatureValues.startsOn\n                ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(accountSASSignatureValues.startsOn, false)\n                : \"\",\n            (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(accountSASSignatureValues.expiresOn, false),\n            accountSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_5__.ipRangeToString)(accountSASSignatureValues.ipRange) : \"\",\n            accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\",\n            version,\n            \"\", // Account SAS requires an additional newline character\n        ].join(\"\\n\");\n    }\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_6__.SASQueryParameters(version, signature, parsedPermissions.toString(), parsedServices, parsedResourceTypes, accountSASSignatureValues.protocol, accountSASSignatureValues.startsOn, accountSASSignatureValues.expiresOn, accountSASSignatureValues.ipRange, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, accountSASSignatureValues.encryptionScope);\n}\n//# sourceMappingURL=AccountSASSignatureValues.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3Nhcy9BY2NvdW50U0FTU2lnbmF0dXJlVmFsdWVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNnRTtBQUNJO0FBQ1Y7QUFDWDtBQUNXO0FBQ0w7QUFDUTtBQUM3RDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMEJBQTBCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsVUFBVSw2REFBZTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qix5RUFBcUI7QUFDbkQsMkJBQTJCLG1FQUFrQjtBQUM3QyxnQ0FBZ0MsNkVBQXVCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IseUVBQW9CO0FBQ3RDO0FBQ0EsWUFBWSx5RUFBb0I7QUFDaEMsZ0RBQWdELDREQUFlO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHlFQUFvQjtBQUN0QztBQUNBLFlBQVkseUVBQW9CO0FBQ2hDLGdEQUFnRCw0REFBZTtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1FQUFrQjtBQUNqQztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3Nhcy9BY2NvdW50U0FTU2lnbmF0dXJlVmFsdWVzLmpzP2UxYmYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBBY2NvdW50U0FTUGVybWlzc2lvbnMgfSBmcm9tIFwiLi9BY2NvdW50U0FTUGVybWlzc2lvbnNcIjtcbmltcG9ydCB7IEFjY291bnRTQVNSZXNvdXJjZVR5cGVzIH0gZnJvbSBcIi4vQWNjb3VudFNBU1Jlc291cmNlVHlwZXNcIjtcbmltcG9ydCB7IEFjY291bnRTQVNTZXJ2aWNlcyB9IGZyb20gXCIuL0FjY291bnRTQVNTZXJ2aWNlc1wiO1xuaW1wb3J0IHsgaXBSYW5nZVRvU3RyaW5nIH0gZnJvbSBcIi4vU2FzSVBSYW5nZVwiO1xuaW1wb3J0IHsgU0FTUXVlcnlQYXJhbWV0ZXJzIH0gZnJvbSBcIi4vU0FTUXVlcnlQYXJhbWV0ZXJzXCI7XG5pbXBvcnQgeyBTRVJWSUNFX1ZFUlNJT04gfSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyB0cnVuY2F0ZWRJU084MDYxRGF0ZSB9IGZyb20gXCIuLi91dGlscy91dGlscy5jb21tb25cIjtcbi8qKlxuICogT05MWSBBVkFJTEFCTEUgSU4gTk9ERS5KUyBSVU5USU1FLlxuICpcbiAqIEdlbmVyYXRlcyBhIHtAbGluayBTQVNRdWVyeVBhcmFtZXRlcnN9IG9iamVjdCB3aGljaCBjb250YWlucyBhbGwgU0FTIHF1ZXJ5IHBhcmFtZXRlcnMgbmVlZGVkIHRvIG1ha2UgYW4gYWN0dWFsXG4gKiBSRVNUIHJlcXVlc3QuXG4gKlxuICogQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9yZXN0L2FwaS9zdG9yYWdlc2VydmljZXMvY29uc3RydWN0aW5nLWFuLWFjY291bnQtc2FzXG4gKlxuICogQHBhcmFtIGFjY291bnRTQVNTaWduYXR1cmVWYWx1ZXMgLVxuICogQHBhcmFtIHNoYXJlZEtleUNyZWRlbnRpYWwgLVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVBY2NvdW50U0FTUXVlcnlQYXJhbWV0ZXJzKGFjY291bnRTQVNTaWduYXR1cmVWYWx1ZXMsIHNoYXJlZEtleUNyZWRlbnRpYWwpIHtcbiAgICBjb25zdCB2ZXJzaW9uID0gYWNjb3VudFNBU1NpZ25hdHVyZVZhbHVlcy52ZXJzaW9uXG4gICAgICAgID8gYWNjb3VudFNBU1NpZ25hdHVyZVZhbHVlcy52ZXJzaW9uXG4gICAgICAgIDogU0VSVklDRV9WRVJTSU9OO1xuICAgIGlmIChhY2NvdW50U0FTU2lnbmF0dXJlVmFsdWVzLnBlcm1pc3Npb25zICYmXG4gICAgICAgIGFjY291bnRTQVNTaWduYXR1cmVWYWx1ZXMucGVybWlzc2lvbnMuc2V0SW1tdXRhYmlsaXR5UG9saWN5ICYmXG4gICAgICAgIHZlcnNpb24gPCBcIjIwMjAtMDgtMDRcIikge1xuICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiJ3ZlcnNpb24nIG11c3QgYmUgPj0gJzIwMjAtMDgtMDQnIHdoZW4gcHJvdmlkZWQgJ2knIHBlcm1pc3Npb24uXCIpO1xuICAgIH1cbiAgICBpZiAoYWNjb3VudFNBU1NpZ25hdHVyZVZhbHVlcy5wZXJtaXNzaW9ucyAmJlxuICAgICAgICBhY2NvdW50U0FTU2lnbmF0dXJlVmFsdWVzLnBlcm1pc3Npb25zLmRlbGV0ZVZlcnNpb24gJiZcbiAgICAgICAgdmVyc2lvbiA8IFwiMjAxOS0xMC0xMFwiKSB7XG4gICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCIndmVyc2lvbicgbXVzdCBiZSA+PSAnMjAxOS0xMC0xMCcgd2hlbiBwcm92aWRlZCAneCcgcGVybWlzc2lvbi5cIik7XG4gICAgfVxuICAgIGlmIChhY2NvdW50U0FTU2lnbmF0dXJlVmFsdWVzLnBlcm1pc3Npb25zICYmXG4gICAgICAgIGFjY291bnRTQVNTaWduYXR1cmVWYWx1ZXMucGVybWlzc2lvbnMucGVybWFuZW50RGVsZXRlICYmXG4gICAgICAgIHZlcnNpb24gPCBcIjIwMTktMTAtMTBcIikge1xuICAgICAgICB0aHJvdyBSYW5nZUVycm9yKFwiJ3ZlcnNpb24nIG11c3QgYmUgPj0gJzIwMTktMTAtMTAnIHdoZW4gcHJvdmlkZWQgJ3knIHBlcm1pc3Npb24uXCIpO1xuICAgIH1cbiAgICBpZiAoYWNjb3VudFNBU1NpZ25hdHVyZVZhbHVlcy5wZXJtaXNzaW9ucyAmJlxuICAgICAgICBhY2NvdW50U0FTU2lnbmF0dXJlVmFsdWVzLnBlcm1pc3Npb25zLnRhZyAmJlxuICAgICAgICB2ZXJzaW9uIDwgXCIyMDE5LTEyLTEyXCIpIHtcbiAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIid2ZXJzaW9uJyBtdXN0IGJlID49ICcyMDE5LTEyLTEyJyB3aGVuIHByb3ZpZGVkICd0JyBwZXJtaXNzaW9uLlwiKTtcbiAgICB9XG4gICAgaWYgKGFjY291bnRTQVNTaWduYXR1cmVWYWx1ZXMucGVybWlzc2lvbnMgJiZcbiAgICAgICAgYWNjb3VudFNBU1NpZ25hdHVyZVZhbHVlcy5wZXJtaXNzaW9ucy5maWx0ZXIgJiZcbiAgICAgICAgdmVyc2lvbiA8IFwiMjAxOS0xMi0xMlwiKSB7XG4gICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCIndmVyc2lvbicgbXVzdCBiZSA+PSAnMjAxOS0xMi0xMicgd2hlbiBwcm92aWRlZCAnZicgcGVybWlzc2lvbi5cIik7XG4gICAgfVxuICAgIGlmIChhY2NvdW50U0FTU2lnbmF0dXJlVmFsdWVzLmVuY3J5cHRpb25TY29wZSAmJiB2ZXJzaW9uIDwgXCIyMDIwLTEyLTA2XCIpIHtcbiAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihcIid2ZXJzaW9uJyBtdXN0IGJlID49ICcyMDIwLTEyLTA2JyB3aGVuIHByb3ZpZGVkICdlbmNyeXB0aW9uU2NvcGUnIGluIFNBUy5cIik7XG4gICAgfVxuICAgIGNvbnN0IHBhcnNlZFBlcm1pc3Npb25zID0gQWNjb3VudFNBU1Blcm1pc3Npb25zLnBhcnNlKGFjY291bnRTQVNTaWduYXR1cmVWYWx1ZXMucGVybWlzc2lvbnMudG9TdHJpbmcoKSk7XG4gICAgY29uc3QgcGFyc2VkU2VydmljZXMgPSBBY2NvdW50U0FTU2VydmljZXMucGFyc2UoYWNjb3VudFNBU1NpZ25hdHVyZVZhbHVlcy5zZXJ2aWNlcykudG9TdHJpbmcoKTtcbiAgICBjb25zdCBwYXJzZWRSZXNvdXJjZVR5cGVzID0gQWNjb3VudFNBU1Jlc291cmNlVHlwZXMucGFyc2UoYWNjb3VudFNBU1NpZ25hdHVyZVZhbHVlcy5yZXNvdXJjZVR5cGVzKS50b1N0cmluZygpO1xuICAgIGxldCBzdHJpbmdUb1NpZ247XG4gICAgaWYgKHZlcnNpb24gPj0gXCIyMDIwLTEyLTA2XCIpIHtcbiAgICAgICAgc3RyaW5nVG9TaWduID0gW1xuICAgICAgICAgICAgc2hhcmVkS2V5Q3JlZGVudGlhbC5hY2NvdW50TmFtZSxcbiAgICAgICAgICAgIHBhcnNlZFBlcm1pc3Npb25zLFxuICAgICAgICAgICAgcGFyc2VkU2VydmljZXMsXG4gICAgICAgICAgICBwYXJzZWRSZXNvdXJjZVR5cGVzLFxuICAgICAgICAgICAgYWNjb3VudFNBU1NpZ25hdHVyZVZhbHVlcy5zdGFydHNPblxuICAgICAgICAgICAgICAgID8gdHJ1bmNhdGVkSVNPODA2MURhdGUoYWNjb3VudFNBU1NpZ25hdHVyZVZhbHVlcy5zdGFydHNPbiwgZmFsc2UpXG4gICAgICAgICAgICAgICAgOiBcIlwiLFxuICAgICAgICAgICAgdHJ1bmNhdGVkSVNPODA2MURhdGUoYWNjb3VudFNBU1NpZ25hdHVyZVZhbHVlcy5leHBpcmVzT24sIGZhbHNlKSxcbiAgICAgICAgICAgIGFjY291bnRTQVNTaWduYXR1cmVWYWx1ZXMuaXBSYW5nZSA/IGlwUmFuZ2VUb1N0cmluZyhhY2NvdW50U0FTU2lnbmF0dXJlVmFsdWVzLmlwUmFuZ2UpIDogXCJcIixcbiAgICAgICAgICAgIGFjY291bnRTQVNTaWduYXR1cmVWYWx1ZXMucHJvdG9jb2wgPyBhY2NvdW50U0FTU2lnbmF0dXJlVmFsdWVzLnByb3RvY29sIDogXCJcIixcbiAgICAgICAgICAgIHZlcnNpb24sXG4gICAgICAgICAgICBhY2NvdW50U0FTU2lnbmF0dXJlVmFsdWVzLmVuY3J5cHRpb25TY29wZSA/IGFjY291bnRTQVNTaWduYXR1cmVWYWx1ZXMuZW5jcnlwdGlvblNjb3BlIDogXCJcIixcbiAgICAgICAgICAgIFwiXCIsIC8vIEFjY291bnQgU0FTIHJlcXVpcmVzIGFuIGFkZGl0aW9uYWwgbmV3bGluZSBjaGFyYWN0ZXJcbiAgICAgICAgXS5qb2luKFwiXFxuXCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3RyaW5nVG9TaWduID0gW1xuICAgICAgICAgICAgc2hhcmVkS2V5Q3JlZGVudGlhbC5hY2NvdW50TmFtZSxcbiAgICAgICAgICAgIHBhcnNlZFBlcm1pc3Npb25zLFxuICAgICAgICAgICAgcGFyc2VkU2VydmljZXMsXG4gICAgICAgICAgICBwYXJzZWRSZXNvdXJjZVR5cGVzLFxuICAgICAgICAgICAgYWNjb3VudFNBU1NpZ25hdHVyZVZhbHVlcy5zdGFydHNPblxuICAgICAgICAgICAgICAgID8gdHJ1bmNhdGVkSVNPODA2MURhdGUoYWNjb3VudFNBU1NpZ25hdHVyZVZhbHVlcy5zdGFydHNPbiwgZmFsc2UpXG4gICAgICAgICAgICAgICAgOiBcIlwiLFxuICAgICAgICAgICAgdHJ1bmNhdGVkSVNPODA2MURhdGUoYWNjb3VudFNBU1NpZ25hdHVyZVZhbHVlcy5leHBpcmVzT24sIGZhbHNlKSxcbiAgICAgICAgICAgIGFjY291bnRTQVNTaWduYXR1cmVWYWx1ZXMuaXBSYW5nZSA/IGlwUmFuZ2VUb1N0cmluZyhhY2NvdW50U0FTU2lnbmF0dXJlVmFsdWVzLmlwUmFuZ2UpIDogXCJcIixcbiAgICAgICAgICAgIGFjY291bnRTQVNTaWduYXR1cmVWYWx1ZXMucHJvdG9jb2wgPyBhY2NvdW50U0FTU2lnbmF0dXJlVmFsdWVzLnByb3RvY29sIDogXCJcIixcbiAgICAgICAgICAgIHZlcnNpb24sXG4gICAgICAgICAgICBcIlwiLCAvLyBBY2NvdW50IFNBUyByZXF1aXJlcyBhbiBhZGRpdGlvbmFsIG5ld2xpbmUgY2hhcmFjdGVyXG4gICAgICAgIF0uam9pbihcIlxcblwiKTtcbiAgICB9XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gc2hhcmVkS2V5Q3JlZGVudGlhbC5jb21wdXRlSE1BQ1NIQTI1NihzdHJpbmdUb1NpZ24pO1xuICAgIHJldHVybiBuZXcgU0FTUXVlcnlQYXJhbWV0ZXJzKHZlcnNpb24sIHNpZ25hdHVyZSwgcGFyc2VkUGVybWlzc2lvbnMudG9TdHJpbmcoKSwgcGFyc2VkU2VydmljZXMsIHBhcnNlZFJlc291cmNlVHlwZXMsIGFjY291bnRTQVNTaWduYXR1cmVWYWx1ZXMucHJvdG9jb2wsIGFjY291bnRTQVNTaWduYXR1cmVWYWx1ZXMuc3RhcnRzT24sIGFjY291bnRTQVNTaWduYXR1cmVWYWx1ZXMuZXhwaXJlc09uLCBhY2NvdW50U0FTU2lnbmF0dXJlVmFsdWVzLmlwUmFuZ2UsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYWNjb3VudFNBU1NpZ25hdHVyZVZhbHVlcy5lbmNyeXB0aW9uU2NvcGUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWNjb3VudFNBU1NpZ25hdHVyZVZhbHVlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobSASPermissions: () => (/* binding */ BlobSASPermissions)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting\n * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all\n * the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nclass BlobSASPermissions {\n    constructor() {\n        /**\n         * Specifies Read access granted.\n         */\n        this.read = false;\n        /**\n         * Specifies Add access granted.\n         */\n        this.add = false;\n        /**\n         * Specifies Create access granted.\n         */\n        this.create = false;\n        /**\n         * Specifies Write access granted.\n         */\n        this.write = false;\n        /**\n         * Specifies Delete access granted.\n         */\n        this.delete = false;\n        /**\n         * Specifies Delete version access granted.\n         */\n        this.deleteVersion = false;\n        /**\n         * Specfies Tag access granted.\n         */\n        this.tag = false;\n        /**\n         * Specifies Move access granted.\n         */\n        this.move = false;\n        /**\n         * Specifies Execute access granted.\n         */\n        this.execute = false;\n        /**\n         * Specifies SetImmutabilityPolicy access granted.\n         */\n        this.setImmutabilityPolicy = false;\n        /**\n         * Specifies that Permanent Delete is permitted.\n         */\n        this.permanentDelete = false;\n    }\n    /**\n     * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid permission.\n     *\n     * @param permissions -\n     */\n    static parse(permissions) {\n        const blobSASPermissions = new BlobSASPermissions();\n        for (const char of permissions) {\n            switch (char) {\n                case \"r\":\n                    blobSASPermissions.read = true;\n                    break;\n                case \"a\":\n                    blobSASPermissions.add = true;\n                    break;\n                case \"c\":\n                    blobSASPermissions.create = true;\n                    break;\n                case \"w\":\n                    blobSASPermissions.write = true;\n                    break;\n                case \"d\":\n                    blobSASPermissions.delete = true;\n                    break;\n                case \"x\":\n                    blobSASPermissions.deleteVersion = true;\n                    break;\n                case \"t\":\n                    blobSASPermissions.tag = true;\n                    break;\n                case \"m\":\n                    blobSASPermissions.move = true;\n                    break;\n                case \"e\":\n                    blobSASPermissions.execute = true;\n                    break;\n                case \"i\":\n                    blobSASPermissions.setImmutabilityPolicy = true;\n                    break;\n                case \"y\":\n                    blobSASPermissions.permanentDelete = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid permission: ${char}`);\n            }\n        }\n        return blobSASPermissions;\n    }\n    /**\n     * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it\n     * and boolean values for them.\n     *\n     * @param permissionLike -\n     */\n    static from(permissionLike) {\n        const blobSASPermissions = new BlobSASPermissions();\n        if (permissionLike.read) {\n            blobSASPermissions.read = true;\n        }\n        if (permissionLike.add) {\n            blobSASPermissions.add = true;\n        }\n        if (permissionLike.create) {\n            blobSASPermissions.create = true;\n        }\n        if (permissionLike.write) {\n            blobSASPermissions.write = true;\n        }\n        if (permissionLike.delete) {\n            blobSASPermissions.delete = true;\n        }\n        if (permissionLike.deleteVersion) {\n            blobSASPermissions.deleteVersion = true;\n        }\n        if (permissionLike.tag) {\n            blobSASPermissions.tag = true;\n        }\n        if (permissionLike.move) {\n            blobSASPermissions.move = true;\n        }\n        if (permissionLike.execute) {\n            blobSASPermissions.execute = true;\n        }\n        if (permissionLike.setImmutabilityPolicy) {\n            blobSASPermissions.setImmutabilityPolicy = true;\n        }\n        if (permissionLike.permanentDelete) {\n            blobSASPermissions.permanentDelete = true;\n        }\n        return blobSASPermissions;\n    }\n    /**\n     * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n     * order accepted by the service.\n     *\n     * @returns A string which represents the BlobSASPermissions\n     */\n    toString() {\n        const permissions = [];\n        if (this.read) {\n            permissions.push(\"r\");\n        }\n        if (this.add) {\n            permissions.push(\"a\");\n        }\n        if (this.create) {\n            permissions.push(\"c\");\n        }\n        if (this.write) {\n            permissions.push(\"w\");\n        }\n        if (this.delete) {\n            permissions.push(\"d\");\n        }\n        if (this.deleteVersion) {\n            permissions.push(\"x\");\n        }\n        if (this.tag) {\n            permissions.push(\"t\");\n        }\n        if (this.move) {\n            permissions.push(\"m\");\n        }\n        if (this.execute) {\n            permissions.push(\"e\");\n        }\n        if (this.setImmutabilityPolicy) {\n            permissions.push(\"i\");\n        }\n        if (this.permanentDelete) {\n            permissions.push(\"y\");\n        }\n        return permissions.join(\"\");\n    }\n}\n//# sourceMappingURL=BlobSASPermissions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateBlobSASQueryParameters: () => (/* binding */ generateBlobSASQueryParameters)\n/* harmony export */ });\n/* harmony import */ var _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BlobSASPermissions */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js\");\n/* harmony import */ var _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ContainerSASPermissions */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../credentials/StorageSharedKeyCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js\");\n/* harmony import */ var _credentials_UserDelegationKeyCredential__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../credentials/UserDelegationKeyCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.js\");\n/* harmony import */ var _SasIPRange__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SasIPRange */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js\");\n/* harmony import */ var _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./SASQueryParameters */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\nfunction generateBlobSASQueryParameters(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {\n    const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : _utils_constants__WEBPACK_IMPORTED_MODULE_0__.SERVICE_VERSION;\n    const sharedKeyCredential = sharedKeyCredentialOrUserDelegationKey instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_1__.StorageSharedKeyCredential\n        ? sharedKeyCredentialOrUserDelegationKey\n        : undefined;\n    let userDelegationKeyCredential;\n    if (sharedKeyCredential === undefined && accountName !== undefined) {\n        userDelegationKeyCredential = new _credentials_UserDelegationKeyCredential__WEBPACK_IMPORTED_MODULE_2__.UserDelegationKeyCredential(accountName, sharedKeyCredentialOrUserDelegationKey);\n    }\n    if (sharedKeyCredential === undefined && userDelegationKeyCredential === undefined) {\n        throw TypeError(\"Invalid sharedKeyCredential, userDelegationKey or accountName.\");\n    }\n    // Version 2020-12-06 adds support for encryptionscope in SAS.\n    if (version >= \"2020-12-06\") {\n        if (sharedKeyCredential !== undefined) {\n            return generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential);\n        }\n        else {\n            return generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential);\n        }\n    }\n    // Version 2019-12-12 adds support for the blob tags permission.\n    // Version 2018-11-09 adds support for the signed resource and signed blob snapshot time fields.\n    // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas#constructing-the-signature-string\n    if (version >= \"2018-11-09\") {\n        if (sharedKeyCredential !== undefined) {\n            return generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential);\n        }\n        else {\n            // Version 2020-02-10 delegation SAS signature construction includes preauthorizedAgentObjectId, agentObjectId, correlationId.\n            if (version >= \"2020-02-10\") {\n                return generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential);\n            }\n            else {\n                return generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential);\n            }\n        }\n    }\n    if (version >= \"2015-04-05\") {\n        if (sharedKeyCredential !== undefined) {\n            return generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential);\n        }\n        else {\n            throw new RangeError(\"'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.\");\n        }\n    }\n    throw new RangeError(\"'version' must be >= '2015-04-05'.\");\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2015-04-05 AND BEFORE 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    if (!blobSASSignatureValues.identifier &&\n        !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n    }\n    let resource = \"c\";\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        blobSASSignatureValues.identifier,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n    ].join(\"\\n\");\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType);\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    if (!blobSASSignatureValues.identifier &&\n        !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        blobSASSignatureValues.identifier,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n    ].join(\"\\n\");\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType);\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    if (!blobSASSignatureValues.identifier &&\n        !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        blobSASSignatureValues.identifier,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.encryptionScope,\n        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n    ].join(\"\\n\");\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, undefined, undefined, undefined, blobSASSignatureValues.encryptionScope);\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    // Stored access policies are not supported for a user delegation SAS.\n    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        userDelegationKeyCredential.userDelegationKey.signedObjectId,\n        userDelegationKeyCredential.userDelegationKey.signedTenantId,\n        userDelegationKeyCredential.userDelegationKey.signedStartsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedService,\n        userDelegationKeyCredential.userDelegationKey.signedVersion,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.cacheControl,\n        blobSASSignatureValues.contentDisposition,\n        blobSASSignatureValues.contentEncoding,\n        blobSASSignatureValues.contentLanguage,\n        blobSASSignatureValues.contentType,\n    ].join(\"\\n\");\n    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n    return new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey);\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-02-10.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    // Stored access policies are not supported for a user delegation SAS.\n    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        userDelegationKeyCredential.userDelegationKey.signedObjectId,\n        userDelegationKeyCredential.userDelegationKey.signedTenantId,\n        userDelegationKeyCredential.userDelegationKey.signedStartsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedService,\n        userDelegationKeyCredential.userDelegationKey.signedVersion,\n        blobSASSignatureValues.preauthorizedAgentObjectId,\n        undefined, // agentObjectId\n        blobSASSignatureValues.correlationId,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.cacheControl,\n        blobSASSignatureValues.contentDisposition,\n        blobSASSignatureValues.contentEncoding,\n        blobSASSignatureValues.contentLanguage,\n        blobSASSignatureValues.contentType,\n    ].join(\"\\n\");\n    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n    return new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId);\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    // Stored access policies are not supported for a user delegation SAS.\n    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        userDelegationKeyCredential.userDelegationKey.signedObjectId,\n        userDelegationKeyCredential.userDelegationKey.signedTenantId,\n        userDelegationKeyCredential.userDelegationKey.signedStartsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedService,\n        userDelegationKeyCredential.userDelegationKey.signedVersion,\n        blobSASSignatureValues.preauthorizedAgentObjectId,\n        undefined, // agentObjectId\n        blobSASSignatureValues.correlationId,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.encryptionScope,\n        blobSASSignatureValues.cacheControl,\n        blobSASSignatureValues.contentDisposition,\n        blobSASSignatureValues.contentEncoding,\n        blobSASSignatureValues.contentLanguage,\n        blobSASSignatureValues.contentType,\n    ].join(\"\\n\");\n    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n    return new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId, blobSASSignatureValues.encryptionScope);\n}\nfunction getCanonicalName(accountName, containerName, blobName) {\n    // Container: \"/blob/account/containerName\"\n    // Blob:      \"/blob/account/containerName/blobName\"\n    const elements = [`/blob/${accountName}/${containerName}`];\n    if (blobName) {\n        elements.push(`/${blobName}`);\n    }\n    return elements.join(\"\");\n}\nfunction SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues) {\n    const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : _utils_constants__WEBPACK_IMPORTED_MODULE_0__.SERVICE_VERSION;\n    if (blobSASSignatureValues.snapshotTime && version < \"2018-11-09\") {\n        throw RangeError(\"'version' must be >= '2018-11-09' when providing 'snapshotTime'.\");\n    }\n    if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.snapshotTime) {\n        throw RangeError(\"Must provide 'blobName' when providing 'snapshotTime'.\");\n    }\n    if (blobSASSignatureValues.versionId && version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when providing 'versionId'.\");\n    }\n    if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.versionId) {\n        throw RangeError(\"Must provide 'blobName' when providing 'versionId'.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.setImmutabilityPolicy &&\n        version < \"2020-08-04\") {\n        throw RangeError(\"'version' must be >= '2020-08-04' when provided 'i' permission.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.deleteVersion &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when providing 'x' permission.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.permanentDelete &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when providing 'y' permission.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.tag &&\n        version < \"2019-12-12\") {\n        throw RangeError(\"'version' must be >= '2019-12-12' when providing 't' permission.\");\n    }\n    if (version < \"2020-02-10\" &&\n        blobSASSignatureValues.permissions &&\n        (blobSASSignatureValues.permissions.move || blobSASSignatureValues.permissions.execute)) {\n        throw RangeError(\"'version' must be >= '2020-02-10' when providing the 'm' or 'e' permission.\");\n    }\n    if (version < \"2021-04-10\" &&\n        blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.filterByTags) {\n        throw RangeError(\"'version' must be >= '2021-04-10' when providing the 'f' permission.\");\n    }\n    if (version < \"2020-02-10\" &&\n        (blobSASSignatureValues.preauthorizedAgentObjectId || blobSASSignatureValues.correlationId)) {\n        throw RangeError(\"'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId' or 'correlationId'.\");\n    }\n    if (blobSASSignatureValues.encryptionScope && version < \"2020-12-06\") {\n        throw RangeError(\"'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.\");\n    }\n    blobSASSignatureValues.version = version;\n    return blobSASSignatureValues;\n}\n//# sourceMappingURL=BlobSASSignatureValues.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContainerSASPermissions: () => (/* binding */ ContainerSASPermissions)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.\n * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.\n * Once all the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nclass ContainerSASPermissions {\n    constructor() {\n        /**\n         * Specifies Read access granted.\n         */\n        this.read = false;\n        /**\n         * Specifies Add access granted.\n         */\n        this.add = false;\n        /**\n         * Specifies Create access granted.\n         */\n        this.create = false;\n        /**\n         * Specifies Write access granted.\n         */\n        this.write = false;\n        /**\n         * Specifies Delete access granted.\n         */\n        this.delete = false;\n        /**\n         * Specifies Delete version access granted.\n         */\n        this.deleteVersion = false;\n        /**\n         * Specifies List access granted.\n         */\n        this.list = false;\n        /**\n         * Specfies Tag access granted.\n         */\n        this.tag = false;\n        /**\n         * Specifies Move access granted.\n         */\n        this.move = false;\n        /**\n         * Specifies Execute access granted.\n         */\n        this.execute = false;\n        /**\n         * Specifies SetImmutabilityPolicy access granted.\n         */\n        this.setImmutabilityPolicy = false;\n        /**\n         * Specifies that Permanent Delete is permitted.\n         */\n        this.permanentDelete = false;\n        /**\n         * Specifies that Filter Blobs by Tags is permitted.\n         */\n        this.filterByTags = false;\n    }\n    /**\n     * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid permission.\n     *\n     * @param permissions -\n     */\n    static parse(permissions) {\n        const containerSASPermissions = new ContainerSASPermissions();\n        for (const char of permissions) {\n            switch (char) {\n                case \"r\":\n                    containerSASPermissions.read = true;\n                    break;\n                case \"a\":\n                    containerSASPermissions.add = true;\n                    break;\n                case \"c\":\n                    containerSASPermissions.create = true;\n                    break;\n                case \"w\":\n                    containerSASPermissions.write = true;\n                    break;\n                case \"d\":\n                    containerSASPermissions.delete = true;\n                    break;\n                case \"l\":\n                    containerSASPermissions.list = true;\n                    break;\n                case \"t\":\n                    containerSASPermissions.tag = true;\n                    break;\n                case \"x\":\n                    containerSASPermissions.deleteVersion = true;\n                    break;\n                case \"m\":\n                    containerSASPermissions.move = true;\n                    break;\n                case \"e\":\n                    containerSASPermissions.execute = true;\n                    break;\n                case \"i\":\n                    containerSASPermissions.setImmutabilityPolicy = true;\n                    break;\n                case \"y\":\n                    containerSASPermissions.permanentDelete = true;\n                    break;\n                case \"f\":\n                    containerSASPermissions.filterByTags = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid permission ${char}`);\n            }\n        }\n        return containerSASPermissions;\n    }\n    /**\n     * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it\n     * and boolean values for them.\n     *\n     * @param permissionLike -\n     */\n    static from(permissionLike) {\n        const containerSASPermissions = new ContainerSASPermissions();\n        if (permissionLike.read) {\n            containerSASPermissions.read = true;\n        }\n        if (permissionLike.add) {\n            containerSASPermissions.add = true;\n        }\n        if (permissionLike.create) {\n            containerSASPermissions.create = true;\n        }\n        if (permissionLike.write) {\n            containerSASPermissions.write = true;\n        }\n        if (permissionLike.delete) {\n            containerSASPermissions.delete = true;\n        }\n        if (permissionLike.list) {\n            containerSASPermissions.list = true;\n        }\n        if (permissionLike.deleteVersion) {\n            containerSASPermissions.deleteVersion = true;\n        }\n        if (permissionLike.tag) {\n            containerSASPermissions.tag = true;\n        }\n        if (permissionLike.move) {\n            containerSASPermissions.move = true;\n        }\n        if (permissionLike.execute) {\n            containerSASPermissions.execute = true;\n        }\n        if (permissionLike.setImmutabilityPolicy) {\n            containerSASPermissions.setImmutabilityPolicy = true;\n        }\n        if (permissionLike.permanentDelete) {\n            containerSASPermissions.permanentDelete = true;\n        }\n        if (permissionLike.filterByTags) {\n            containerSASPermissions.filterByTags = true;\n        }\n        return containerSASPermissions;\n    }\n    /**\n     * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n     * order accepted by the service.\n     *\n     * The order of the characters should be as specified here to ensure correctness.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     */\n    toString() {\n        const permissions = [];\n        if (this.read) {\n            permissions.push(\"r\");\n        }\n        if (this.add) {\n            permissions.push(\"a\");\n        }\n        if (this.create) {\n            permissions.push(\"c\");\n        }\n        if (this.write) {\n            permissions.push(\"w\");\n        }\n        if (this.delete) {\n            permissions.push(\"d\");\n        }\n        if (this.deleteVersion) {\n            permissions.push(\"x\");\n        }\n        if (this.list) {\n            permissions.push(\"l\");\n        }\n        if (this.tag) {\n            permissions.push(\"t\");\n        }\n        if (this.move) {\n            permissions.push(\"m\");\n        }\n        if (this.execute) {\n            permissions.push(\"e\");\n        }\n        if (this.setImmutabilityPolicy) {\n            permissions.push(\"i\");\n        }\n        if (this.permanentDelete) {\n            permissions.push(\"y\");\n        }\n        if (this.filterByTags) {\n            permissions.push(\"f\");\n        }\n        return permissions.join(\"\");\n    }\n}\n//# sourceMappingURL=ContainerSASPermissions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SASProtocol: () => (/* binding */ SASProtocol),\n/* harmony export */   SASQueryParameters: () => (/* binding */ SASQueryParameters)\n/* harmony export */ });\n/* harmony import */ var _SasIPRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SasIPRange */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * Protocols for generated SAS.\n */\nvar SASProtocol;\n(function (SASProtocol) {\n    /**\n     * Protocol that allows HTTPS only\n     */\n    SASProtocol[\"Https\"] = \"https\";\n    /**\n     * Protocol that allows both HTTPS and HTTP\n     */\n    SASProtocol[\"HttpsAndHttp\"] = \"https,http\";\n})(SASProtocol || (SASProtocol = {}));\n/**\n * Represents the components that make up an Azure Storage SAS' query parameters. This type is not constructed directly\n * by the user; it is only generated by the {@link AccountSASSignatureValues} and {@link BlobSASSignatureValues}\n * types. Once generated, it can be encoded into a {@link String} and appended to a URL directly (though caution should\n * be taken here in case there are existing query parameters, which might affect the appropriate means of appending\n * these query parameters).\n *\n * NOTE: Instances of this class are immutable.\n */\nclass SASQueryParameters {\n    /**\n     * Optional. IP range allowed for this SAS.\n     *\n     * @readonly\n     */\n    get ipRange() {\n        if (this.ipRangeInner) {\n            return {\n                end: this.ipRangeInner.end,\n                start: this.ipRangeInner.start,\n            };\n        }\n        return undefined;\n    }\n    constructor(version, signature, permissionsOrOptions, services, resourceTypes, protocol, startsOn, expiresOn, ipRange, identifier, resource, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, userDelegationKey, preauthorizedAgentObjectId, correlationId, encryptionScope) {\n        this.version = version;\n        this.signature = signature;\n        if (permissionsOrOptions !== undefined && typeof permissionsOrOptions !== \"string\") {\n            // SASQueryParametersOptions\n            this.permissions = permissionsOrOptions.permissions;\n            this.services = permissionsOrOptions.services;\n            this.resourceTypes = permissionsOrOptions.resourceTypes;\n            this.protocol = permissionsOrOptions.protocol;\n            this.startsOn = permissionsOrOptions.startsOn;\n            this.expiresOn = permissionsOrOptions.expiresOn;\n            this.ipRangeInner = permissionsOrOptions.ipRange;\n            this.identifier = permissionsOrOptions.identifier;\n            this.encryptionScope = permissionsOrOptions.encryptionScope;\n            this.resource = permissionsOrOptions.resource;\n            this.cacheControl = permissionsOrOptions.cacheControl;\n            this.contentDisposition = permissionsOrOptions.contentDisposition;\n            this.contentEncoding = permissionsOrOptions.contentEncoding;\n            this.contentLanguage = permissionsOrOptions.contentLanguage;\n            this.contentType = permissionsOrOptions.contentType;\n            if (permissionsOrOptions.userDelegationKey) {\n                this.signedOid = permissionsOrOptions.userDelegationKey.signedObjectId;\n                this.signedTenantId = permissionsOrOptions.userDelegationKey.signedTenantId;\n                this.signedStartsOn = permissionsOrOptions.userDelegationKey.signedStartsOn;\n                this.signedExpiresOn = permissionsOrOptions.userDelegationKey.signedExpiresOn;\n                this.signedService = permissionsOrOptions.userDelegationKey.signedService;\n                this.signedVersion = permissionsOrOptions.userDelegationKey.signedVersion;\n                this.preauthorizedAgentObjectId = permissionsOrOptions.preauthorizedAgentObjectId;\n                this.correlationId = permissionsOrOptions.correlationId;\n            }\n        }\n        else {\n            this.services = services;\n            this.resourceTypes = resourceTypes;\n            this.expiresOn = expiresOn;\n            this.permissions = permissionsOrOptions;\n            this.protocol = protocol;\n            this.startsOn = startsOn;\n            this.ipRangeInner = ipRange;\n            this.encryptionScope = encryptionScope;\n            this.identifier = identifier;\n            this.resource = resource;\n            this.cacheControl = cacheControl;\n            this.contentDisposition = contentDisposition;\n            this.contentEncoding = contentEncoding;\n            this.contentLanguage = contentLanguage;\n            this.contentType = contentType;\n            if (userDelegationKey) {\n                this.signedOid = userDelegationKey.signedObjectId;\n                this.signedTenantId = userDelegationKey.signedTenantId;\n                this.signedStartsOn = userDelegationKey.signedStartsOn;\n                this.signedExpiresOn = userDelegationKey.signedExpiresOn;\n                this.signedService = userDelegationKey.signedService;\n                this.signedVersion = userDelegationKey.signedVersion;\n                this.preauthorizedAgentObjectId = preauthorizedAgentObjectId;\n                this.correlationId = correlationId;\n            }\n        }\n    }\n    /**\n     * Encodes all SAS query parameters into a string that can be appended to a URL.\n     *\n     */\n    toString() {\n        const params = [\n            \"sv\",\n            \"ss\",\n            \"srt\",\n            \"spr\",\n            \"st\",\n            \"se\",\n            \"sip\",\n            \"si\",\n            \"ses\",\n            \"skoid\", // Signed object ID\n            \"sktid\", // Signed tenant ID\n            \"skt\", // Signed key start time\n            \"ske\", // Signed key expiry time\n            \"sks\", // Signed key service\n            \"skv\", // Signed key version\n            \"sr\",\n            \"sp\",\n            \"sig\",\n            \"rscc\",\n            \"rscd\",\n            \"rsce\",\n            \"rscl\",\n            \"rsct\",\n            \"saoid\",\n            \"scid\",\n        ];\n        const queries = [];\n        for (const param of params) {\n            switch (param) {\n                case \"sv\":\n                    this.tryAppendQueryParameter(queries, param, this.version);\n                    break;\n                case \"ss\":\n                    this.tryAppendQueryParameter(queries, param, this.services);\n                    break;\n                case \"srt\":\n                    this.tryAppendQueryParameter(queries, param, this.resourceTypes);\n                    break;\n                case \"spr\":\n                    this.tryAppendQueryParameter(queries, param, this.protocol);\n                    break;\n                case \"st\":\n                    this.tryAppendQueryParameter(queries, param, this.startsOn ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.truncatedISO8061Date)(this.startsOn, false) : undefined);\n                    break;\n                case \"se\":\n                    this.tryAppendQueryParameter(queries, param, this.expiresOn ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.truncatedISO8061Date)(this.expiresOn, false) : undefined);\n                    break;\n                case \"sip\":\n                    this.tryAppendQueryParameter(queries, param, this.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_1__.ipRangeToString)(this.ipRange) : undefined);\n                    break;\n                case \"si\":\n                    this.tryAppendQueryParameter(queries, param, this.identifier);\n                    break;\n                case \"ses\":\n                    this.tryAppendQueryParameter(queries, param, this.encryptionScope);\n                    break;\n                case \"skoid\": // Signed object ID\n                    this.tryAppendQueryParameter(queries, param, this.signedOid);\n                    break;\n                case \"sktid\": // Signed tenant ID\n                    this.tryAppendQueryParameter(queries, param, this.signedTenantId);\n                    break;\n                case \"skt\": // Signed key start time\n                    this.tryAppendQueryParameter(queries, param, this.signedStartsOn ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.truncatedISO8061Date)(this.signedStartsOn, false) : undefined);\n                    break;\n                case \"ske\": // Signed key expiry time\n                    this.tryAppendQueryParameter(queries, param, this.signedExpiresOn ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.truncatedISO8061Date)(this.signedExpiresOn, false) : undefined);\n                    break;\n                case \"sks\": // Signed key service\n                    this.tryAppendQueryParameter(queries, param, this.signedService);\n                    break;\n                case \"skv\": // Signed key version\n                    this.tryAppendQueryParameter(queries, param, this.signedVersion);\n                    break;\n                case \"sr\":\n                    this.tryAppendQueryParameter(queries, param, this.resource);\n                    break;\n                case \"sp\":\n                    this.tryAppendQueryParameter(queries, param, this.permissions);\n                    break;\n                case \"sig\":\n                    this.tryAppendQueryParameter(queries, param, this.signature);\n                    break;\n                case \"rscc\":\n                    this.tryAppendQueryParameter(queries, param, this.cacheControl);\n                    break;\n                case \"rscd\":\n                    this.tryAppendQueryParameter(queries, param, this.contentDisposition);\n                    break;\n                case \"rsce\":\n                    this.tryAppendQueryParameter(queries, param, this.contentEncoding);\n                    break;\n                case \"rscl\":\n                    this.tryAppendQueryParameter(queries, param, this.contentLanguage);\n                    break;\n                case \"rsct\":\n                    this.tryAppendQueryParameter(queries, param, this.contentType);\n                    break;\n                case \"saoid\":\n                    this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);\n                    break;\n                case \"scid\":\n                    this.tryAppendQueryParameter(queries, param, this.correlationId);\n                    break;\n            }\n        }\n        return queries.join(\"&\");\n    }\n    /**\n     * A private helper method used to filter and append query key/value pairs into an array.\n     *\n     * @param queries -\n     * @param key -\n     * @param value -\n     */\n    tryAppendQueryParameter(queries, key, value) {\n        if (!value) {\n            return;\n        }\n        key = encodeURIComponent(key);\n        value = encodeURIComponent(value);\n        if (key.length > 0 && value.length > 0) {\n            queries.push(`${key}=${value}`);\n        }\n    }\n}\n//# sourceMappingURL=SASQueryParameters.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ipRangeToString: () => (/* binding */ ipRangeToString)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Generate SasIPRange format string. For example:\n *\n * \"8.8.8.8\" or \"1.1.1.1-255.255.255.255\"\n *\n * @param ipRange -\n */\nfunction ipRangeToString(ipRange) {\n    return ipRange.end ? `${ipRange.start}-${ipRange.end}` : ipRange.start;\n}\n//# sourceMappingURL=SasIPRange.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3Nhcy9TYXNJUFJhbmdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLDRCQUE0QixjQUFjLEdBQUcsWUFBWTtBQUN6RDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3Nhcy9TYXNJUFJhbmdlLmpzP2FhMzciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIEdlbmVyYXRlIFNhc0lQUmFuZ2UgZm9ybWF0IHN0cmluZy4gRm9yIGV4YW1wbGU6XG4gKlxuICogXCI4LjguOC44XCIgb3IgXCIxLjEuMS4xLTI1NS4yNTUuMjU1LjI1NVwiXG4gKlxuICogQHBhcmFtIGlwUmFuZ2UgLVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXBSYW5nZVRvU3RyaW5nKGlwUmFuZ2UpIHtcbiAgICByZXR1cm4gaXBSYW5nZS5lbmQgPyBgJHtpcFJhbmdlLnN0YXJ0fS0ke2lwUmFuZ2UuZW5kfWAgOiBpcFJhbmdlLnN0YXJ0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2FzSVBSYW5nZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Batch: () => (/* binding */ Batch)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// In browser, during webpack or browserify bundling, this module will be replaced by 'events'\n// https://github.com/Gozala/events\n\n/**\n * States for Batch.\n */\nvar BatchStates;\n(function (BatchStates) {\n    BatchStates[BatchStates[\"Good\"] = 0] = \"Good\";\n    BatchStates[BatchStates[\"Error\"] = 1] = \"Error\";\n})(BatchStates || (BatchStates = {}));\n/**\n * Batch provides basic parallel execution with concurrency limits.\n * Will stop execute left operations when one of the executed operation throws an error.\n * But Batch cannot cancel ongoing operations, you need to cancel them by yourself.\n */\nclass Batch {\n    /**\n     * Creates an instance of Batch.\n     * @param concurrency -\n     */\n    constructor(concurrency = 5) {\n        /**\n         * Number of active operations under execution.\n         */\n        this.actives = 0;\n        /**\n         * Number of completed operations under execution.\n         */\n        this.completed = 0;\n        /**\n         * Offset of next operation to be executed.\n         */\n        this.offset = 0;\n        /**\n         * Operation array to be executed.\n         */\n        this.operations = [];\n        /**\n         * States of Batch. When an error happens, state will turn into error.\n         * Batch will stop execute left operations.\n         */\n        this.state = BatchStates.Good;\n        if (concurrency < 1) {\n            throw new RangeError(\"concurrency must be larger than 0\");\n        }\n        this.concurrency = concurrency;\n        this.emitter = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();\n    }\n    /**\n     * Add a operation into queue.\n     *\n     * @param operation -\n     */\n    addOperation(operation) {\n        this.operations.push(async () => {\n            try {\n                this.actives++;\n                await operation();\n                this.actives--;\n                this.completed++;\n                this.parallelExecute();\n            }\n            catch (error) {\n                this.emitter.emit(\"error\", error);\n            }\n        });\n    }\n    /**\n     * Start execute operations in the queue.\n     *\n     */\n    async do() {\n        if (this.operations.length === 0) {\n            return Promise.resolve();\n        }\n        this.parallelExecute();\n        return new Promise((resolve, reject) => {\n            this.emitter.on(\"finish\", resolve);\n            this.emitter.on(\"error\", (error) => {\n                this.state = BatchStates.Error;\n                reject(error);\n            });\n        });\n    }\n    /**\n     * Get next operation to be executed. Return null when reaching ends.\n     *\n     */\n    nextOperation() {\n        if (this.offset < this.operations.length) {\n            return this.operations[this.offset++];\n        }\n        return null;\n    }\n    /**\n     * Start execute operations. One one the most important difference between\n     * this method with do() is that do() wraps as an sync method.\n     *\n     */\n    parallelExecute() {\n        if (this.state === BatchStates.Error) {\n            return;\n        }\n        if (this.completed >= this.operations.length) {\n            this.emitter.emit(\"finish\");\n            return;\n        }\n        while (this.actives < this.concurrency) {\n            const operation = this.nextOperation();\n            if (operation) {\n                operation();\n            }\n            else {\n                return;\n            }\n        }\n    }\n}\n//# sourceMappingURL=Batch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3V0aWxzL0JhdGNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ3NDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrQ0FBa0M7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGdEQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy91dGlscy9CYXRjaC5qcz9hYTZkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLy8gSW4gYnJvd3NlciwgZHVyaW5nIHdlYnBhY2sgb3IgYnJvd3NlcmlmeSBidW5kbGluZywgdGhpcyBtb2R1bGUgd2lsbCBiZSByZXBsYWNlZCBieSAnZXZlbnRzJ1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL0dvemFsYS9ldmVudHNcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJldmVudHNcIjtcbi8qKlxuICogU3RhdGVzIGZvciBCYXRjaC5cbiAqL1xudmFyIEJhdGNoU3RhdGVzO1xuKGZ1bmN0aW9uIChCYXRjaFN0YXRlcykge1xuICAgIEJhdGNoU3RhdGVzW0JhdGNoU3RhdGVzW1wiR29vZFwiXSA9IDBdID0gXCJHb29kXCI7XG4gICAgQmF0Y2hTdGF0ZXNbQmF0Y2hTdGF0ZXNbXCJFcnJvclwiXSA9IDFdID0gXCJFcnJvclwiO1xufSkoQmF0Y2hTdGF0ZXMgfHwgKEJhdGNoU3RhdGVzID0ge30pKTtcbi8qKlxuICogQmF0Y2ggcHJvdmlkZXMgYmFzaWMgcGFyYWxsZWwgZXhlY3V0aW9uIHdpdGggY29uY3VycmVuY3kgbGltaXRzLlxuICogV2lsbCBzdG9wIGV4ZWN1dGUgbGVmdCBvcGVyYXRpb25zIHdoZW4gb25lIG9mIHRoZSBleGVjdXRlZCBvcGVyYXRpb24gdGhyb3dzIGFuIGVycm9yLlxuICogQnV0IEJhdGNoIGNhbm5vdCBjYW5jZWwgb25nb2luZyBvcGVyYXRpb25zLCB5b3UgbmVlZCB0byBjYW5jZWwgdGhlbSBieSB5b3Vyc2VsZi5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhdGNoIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIEJhdGNoLlxuICAgICAqIEBwYXJhbSBjb25jdXJyZW5jeSAtXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29uY3VycmVuY3kgPSA1KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOdW1iZXIgb2YgYWN0aXZlIG9wZXJhdGlvbnMgdW5kZXIgZXhlY3V0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hY3RpdmVzID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE51bWJlciBvZiBjb21wbGV0ZWQgb3BlcmF0aW9ucyB1bmRlciBleGVjdXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbXBsZXRlZCA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPZmZzZXQgb2YgbmV4dCBvcGVyYXRpb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPcGVyYXRpb24gYXJyYXkgdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9wZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0YXRlcyBvZiBCYXRjaC4gV2hlbiBhbiBlcnJvciBoYXBwZW5zLCBzdGF0ZSB3aWxsIHR1cm4gaW50byBlcnJvci5cbiAgICAgICAgICogQmF0Y2ggd2lsbCBzdG9wIGV4ZWN1dGUgbGVmdCBvcGVyYXRpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGF0ZSA9IEJhdGNoU3RhdGVzLkdvb2Q7XG4gICAgICAgIGlmIChjb25jdXJyZW5jeSA8IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiY29uY3VycmVuY3kgbXVzdCBiZSBsYXJnZXIgdGhhbiAwXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29uY3VycmVuY3kgPSBjb25jdXJyZW5jeTtcbiAgICAgICAgdGhpcy5lbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBvcGVyYXRpb24gaW50byBxdWV1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcGVyYXRpb24gLVxuICAgICAqL1xuICAgIGFkZE9wZXJhdGlvbihvcGVyYXRpb24pIHtcbiAgICAgICAgdGhpcy5vcGVyYXRpb25zLnB1c2goYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZXMrKztcbiAgICAgICAgICAgICAgICBhd2FpdCBvcGVyYXRpb24oKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZXMtLTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlZCsrO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyYWxsZWxFeGVjdXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdChcImVycm9yXCIsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0IGV4ZWN1dGUgb3BlcmF0aW9ucyBpbiB0aGUgcXVldWUuXG4gICAgICpcbiAgICAgKi9cbiAgICBhc3luYyBkbygpIHtcbiAgICAgICAgaWYgKHRoaXMub3BlcmF0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhcmFsbGVsRXhlY3V0ZSgpO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLm9uKFwiZmluaXNoXCIsIHJlc29sdmUpO1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLm9uKFwiZXJyb3JcIiwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IEJhdGNoU3RhdGVzLkVycm9yO1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBuZXh0IG9wZXJhdGlvbiB0byBiZSBleGVjdXRlZC4gUmV0dXJuIG51bGwgd2hlbiByZWFjaGluZyBlbmRzLlxuICAgICAqXG4gICAgICovXG4gICAgbmV4dE9wZXJhdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMub2Zmc2V0IDwgdGhpcy5vcGVyYXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3BlcmF0aW9uc1t0aGlzLm9mZnNldCsrXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnQgZXhlY3V0ZSBvcGVyYXRpb25zLiBPbmUgb25lIHRoZSBtb3N0IGltcG9ydGFudCBkaWZmZXJlbmNlIGJldHdlZW5cbiAgICAgKiB0aGlzIG1ldGhvZCB3aXRoIGRvKCkgaXMgdGhhdCBkbygpIHdyYXBzIGFzIGFuIHN5bmMgbWV0aG9kLlxuICAgICAqXG4gICAgICovXG4gICAgcGFyYWxsZWxFeGVjdXRlKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gQmF0Y2hTdGF0ZXMuRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb21wbGV0ZWQgPj0gdGhpcy5vcGVyYXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoXCJmaW5pc2hcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHRoaXMuYWN0aXZlcyA8IHRoaXMuY29uY3VycmVuY3kpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IHRoaXMubmV4dE9wZXJhdGlvbigpO1xuICAgICAgICAgICAgaWYgKG9wZXJhdGlvbikge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmF0Y2guanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/BlobQuickQueryStream.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/BlobQuickQueryStream.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobQuickQueryStream: () => (/* binding */ BlobQuickQueryStream)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _storage_internal_avro_src__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../storage-internal-avro/src */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReader.js\");\n/* harmony import */ var _storage_internal_avro_src__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../storage-internal-avro/src */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadableFromStream.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * A Node.js BlobQuickQueryStream will internally parse avro data stream for blob query.\n */\nclass BlobQuickQueryStream extends stream__WEBPACK_IMPORTED_MODULE_0__.Readable {\n    /**\n     * Creates an instance of BlobQuickQueryStream.\n     *\n     * @param source - The current ReadableStream returned from getter\n     * @param options -\n     */\n    constructor(source, options = {}) {\n        super();\n        this.avroPaused = true;\n        this.source = source;\n        this.onProgress = options.onProgress;\n        this.onError = options.onError;\n        this.avroReader = new _storage_internal_avro_src__WEBPACK_IMPORTED_MODULE_1__.AvroReader(new _storage_internal_avro_src__WEBPACK_IMPORTED_MODULE_2__.AvroReadableFromStream(this.source));\n        this.avroIter = this.avroReader.parseObjects({ abortSignal: options.abortSignal });\n    }\n    _read() {\n        if (this.avroPaused) {\n            this.readInternal().catch((err) => {\n                this.emit(\"error\", err);\n            });\n        }\n    }\n    async readInternal() {\n        this.avroPaused = false;\n        let avroNext;\n        do {\n            avroNext = await this.avroIter.next();\n            if (avroNext.done) {\n                break;\n            }\n            const obj = avroNext.value;\n            const schema = obj.$schema;\n            if (typeof schema !== \"string\") {\n                throw Error(\"Missing schema in avro record.\");\n            }\n            switch (schema) {\n                case \"com.microsoft.azure.storage.queryBlobContents.resultData\":\n                    {\n                        const data = obj.data;\n                        if (data instanceof Uint8Array === false) {\n                            throw Error(\"Invalid data in avro result record.\");\n                        }\n                        if (!this.push(Buffer.from(data))) {\n                            this.avroPaused = true;\n                        }\n                    }\n                    break;\n                case \"com.microsoft.azure.storage.queryBlobContents.progress\":\n                    {\n                        const bytesScanned = obj.bytesScanned;\n                        if (typeof bytesScanned !== \"number\") {\n                            throw Error(\"Invalid bytesScanned in avro progress record.\");\n                        }\n                        if (this.onProgress) {\n                            this.onProgress({ loadedBytes: bytesScanned });\n                        }\n                    }\n                    break;\n                case \"com.microsoft.azure.storage.queryBlobContents.end\":\n                    if (this.onProgress) {\n                        const totalBytes = obj.totalBytes;\n                        if (typeof totalBytes !== \"number\") {\n                            throw Error(\"Invalid totalBytes in avro end record.\");\n                        }\n                        this.onProgress({ loadedBytes: totalBytes });\n                    }\n                    this.push(null);\n                    break;\n                case \"com.microsoft.azure.storage.queryBlobContents.error\":\n                    if (this.onError) {\n                        const fatal = obj.fatal;\n                        if (typeof fatal !== \"boolean\") {\n                            throw Error(\"Invalid fatal in avro error record.\");\n                        }\n                        const name = obj.name;\n                        if (typeof name !== \"string\") {\n                            throw Error(\"Invalid name in avro error record.\");\n                        }\n                        const description = obj.description;\n                        if (typeof description !== \"string\") {\n                            throw Error(\"Invalid description in avro error record.\");\n                        }\n                        const position = obj.position;\n                        if (typeof position !== \"number\") {\n                            throw Error(\"Invalid position in avro error record.\");\n                        }\n                        this.onError({\n                            position,\n                            name,\n                            isFatal: fatal,\n                            description,\n                        });\n                    }\n                    break;\n                default:\n                    throw Error(`Unknown schema ${schema} in avro progress record.`);\n            }\n        } while (!avroNext.done && !this.avroPaused);\n    }\n}\n//# sourceMappingURL=BlobQuickQueryStream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3V0aWxzL0Jsb2JRdWlja1F1ZXJ5U3RyZWFtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNrQztBQUNzRDtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sbUNBQW1DLDRDQUFRO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtFQUFVLEtBQUssOEVBQXNCO0FBQ25FLHVEQUF1RCxrQ0FBa0M7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QywyQkFBMkI7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHlCQUF5QjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxRQUFRO0FBQzFEO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy91dGlscy9CbG9iUXVpY2tRdWVyeVN0cmVhbS5qcz80NWZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XG5pbXBvcnQgeyBBdnJvUmVhZGFibGVGcm9tU3RyZWFtLCBBdnJvUmVhZGVyIH0gZnJvbSBcIi4uLy4uLy4uL3N0b3JhZ2UtaW50ZXJuYWwtYXZyby9zcmNcIjtcbi8qKlxuICogT05MWSBBVkFJTEFCTEUgSU4gTk9ERS5KUyBSVU5USU1FLlxuICpcbiAqIEEgTm9kZS5qcyBCbG9iUXVpY2tRdWVyeVN0cmVhbSB3aWxsIGludGVybmFsbHkgcGFyc2UgYXZybyBkYXRhIHN0cmVhbSBmb3IgYmxvYiBxdWVyeS5cbiAqL1xuZXhwb3J0IGNsYXNzIEJsb2JRdWlja1F1ZXJ5U3RyZWFtIGV4dGVuZHMgUmVhZGFibGUge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQmxvYlF1aWNrUXVlcnlTdHJlYW0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc291cmNlIC0gVGhlIGN1cnJlbnQgUmVhZGFibGVTdHJlYW0gcmV0dXJuZWQgZnJvbSBnZXR0ZXJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc291cmNlLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5hdnJvUGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHRoaXMub25Qcm9ncmVzcyA9IG9wdGlvbnMub25Qcm9ncmVzcztcbiAgICAgICAgdGhpcy5vbkVycm9yID0gb3B0aW9ucy5vbkVycm9yO1xuICAgICAgICB0aGlzLmF2cm9SZWFkZXIgPSBuZXcgQXZyb1JlYWRlcihuZXcgQXZyb1JlYWRhYmxlRnJvbVN0cmVhbSh0aGlzLnNvdXJjZSkpO1xuICAgICAgICB0aGlzLmF2cm9JdGVyID0gdGhpcy5hdnJvUmVhZGVyLnBhcnNlT2JqZWN0cyh7IGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsIH0pO1xuICAgIH1cbiAgICBfcmVhZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuYXZyb1BhdXNlZCkge1xuICAgICAgICAgICAgdGhpcy5yZWFkSW50ZXJuYWwoKS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHJlYWRJbnRlcm5hbCgpIHtcbiAgICAgICAgdGhpcy5hdnJvUGF1c2VkID0gZmFsc2U7XG4gICAgICAgIGxldCBhdnJvTmV4dDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgYXZyb05leHQgPSBhd2FpdCB0aGlzLmF2cm9JdGVyLm5leHQoKTtcbiAgICAgICAgICAgIGlmIChhdnJvTmV4dC5kb25lKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvYmogPSBhdnJvTmV4dC52YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IG9iai4kc2NoZW1hO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIk1pc3Npbmcgc2NoZW1hIGluIGF2cm8gcmVjb3JkLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoc2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNvbS5taWNyb3NvZnQuYXp1cmUuc3RvcmFnZS5xdWVyeUJsb2JDb250ZW50cy5yZXN1bHREYXRhXCI6XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBvYmouZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgZGF0YSBpbiBhdnJvIHJlc3VsdCByZWNvcmQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnB1c2goQnVmZmVyLmZyb20oZGF0YSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hdnJvUGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiY29tLm1pY3Jvc29mdC5henVyZS5zdG9yYWdlLnF1ZXJ5QmxvYkNvbnRlbnRzLnByb2dyZXNzXCI6XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ5dGVzU2Nhbm5lZCA9IG9iai5ieXRlc1NjYW5uZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJ5dGVzU2Nhbm5lZCAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiSW52YWxpZCBieXRlc1NjYW5uZWQgaW4gYXZybyBwcm9ncmVzcyByZWNvcmQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25Qcm9ncmVzcyh7IGxvYWRlZEJ5dGVzOiBieXRlc1NjYW5uZWQgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNvbS5taWNyb3NvZnQuYXp1cmUuc3RvcmFnZS5xdWVyeUJsb2JDb250ZW50cy5lbmRcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG90YWxCeXRlcyA9IG9iai50b3RhbEJ5dGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0b3RhbEJ5dGVzICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIHRvdGFsQnl0ZXMgaW4gYXZybyBlbmQgcmVjb3JkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25Qcm9ncmVzcyh7IGxvYWRlZEJ5dGVzOiB0b3RhbEJ5dGVzIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaChudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNvbS5taWNyb3NvZnQuYXp1cmUuc3RvcmFnZS5xdWVyeUJsb2JDb250ZW50cy5lcnJvclwiOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmYXRhbCA9IG9iai5mYXRhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZmF0YWwgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGZhdGFsIGluIGF2cm8gZXJyb3IgcmVjb3JkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBvYmoubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiSW52YWxpZCBuYW1lIGluIGF2cm8gZXJyb3IgcmVjb3JkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gb2JqLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXNjcmlwdGlvbiAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiSW52YWxpZCBkZXNjcmlwdGlvbiBpbiBhdnJvIGVycm9yIHJlY29yZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IG9iai5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcG9zaXRpb24gIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgcG9zaXRpb24gaW4gYXZybyBlcnJvciByZWNvcmQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRmF0YWw6IGZhdGFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFVua25vd24gc2NoZW1hICR7c2NoZW1hfSBpbiBhdnJvIHByb2dyZXNzIHJlY29yZC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoIWF2cm9OZXh0LmRvbmUgJiYgIXRoaXMuYXZyb1BhdXNlZCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmxvYlF1aWNrUXVlcnlTdHJlYW0uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/BlobQuickQueryStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mutex: () => (/* binding */ Mutex)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nvar MutexLockStatus;\n(function (MutexLockStatus) {\n    MutexLockStatus[MutexLockStatus[\"LOCKED\"] = 0] = \"LOCKED\";\n    MutexLockStatus[MutexLockStatus[\"UNLOCKED\"] = 1] = \"UNLOCKED\";\n})(MutexLockStatus || (MutexLockStatus = {}));\n/**\n * An async mutex lock.\n */\nclass Mutex {\n    /**\n     * Lock for a specific key. If the lock has been acquired by another customer, then\n     * will wait until getting the lock.\n     *\n     * @param key - lock key\n     */\n    static async lock(key) {\n        return new Promise((resolve) => {\n            if (this.keys[key] === undefined || this.keys[key] === MutexLockStatus.UNLOCKED) {\n                this.keys[key] = MutexLockStatus.LOCKED;\n                resolve();\n            }\n            else {\n                this.onUnlockEvent(key, () => {\n                    this.keys[key] = MutexLockStatus.LOCKED;\n                    resolve();\n                });\n            }\n        });\n    }\n    /**\n     * Unlock a key.\n     *\n     * @param key -\n     */\n    static async unlock(key) {\n        return new Promise((resolve) => {\n            if (this.keys[key] === MutexLockStatus.LOCKED) {\n                this.emitUnlockEvent(key);\n            }\n            delete this.keys[key];\n            resolve();\n        });\n    }\n    static onUnlockEvent(key, handler) {\n        if (this.listeners[key] === undefined) {\n            this.listeners[key] = [handler];\n        }\n        else {\n            this.listeners[key].push(handler);\n        }\n    }\n    static emitUnlockEvent(key) {\n        if (this.listeners[key] !== undefined && this.listeners[key].length > 0) {\n            const handler = this.listeners[key].shift();\n            setImmediate(() => {\n                handler.call(this);\n            });\n        }\n    }\n}\nMutex.keys = {};\nMutex.listeners = {};\n//# sourceMappingURL=Mutex.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3V0aWxzL011dGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBDQUEwQztBQUMzQztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3V0aWxzL011dGV4LmpzPzg1NjEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG52YXIgTXV0ZXhMb2NrU3RhdHVzO1xuKGZ1bmN0aW9uIChNdXRleExvY2tTdGF0dXMpIHtcbiAgICBNdXRleExvY2tTdGF0dXNbTXV0ZXhMb2NrU3RhdHVzW1wiTE9DS0VEXCJdID0gMF0gPSBcIkxPQ0tFRFwiO1xuICAgIE11dGV4TG9ja1N0YXR1c1tNdXRleExvY2tTdGF0dXNbXCJVTkxPQ0tFRFwiXSA9IDFdID0gXCJVTkxPQ0tFRFwiO1xufSkoTXV0ZXhMb2NrU3RhdHVzIHx8IChNdXRleExvY2tTdGF0dXMgPSB7fSkpO1xuLyoqXG4gKiBBbiBhc3luYyBtdXRleCBsb2NrLlxuICovXG5leHBvcnQgY2xhc3MgTXV0ZXgge1xuICAgIC8qKlxuICAgICAqIExvY2sgZm9yIGEgc3BlY2lmaWMga2V5LiBJZiB0aGUgbG9jayBoYXMgYmVlbiBhY3F1aXJlZCBieSBhbm90aGVyIGN1c3RvbWVyLCB0aGVuXG4gICAgICogd2lsbCB3YWl0IHVudGlsIGdldHRpbmcgdGhlIGxvY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5IC0gbG9jayBrZXlcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgbG9jayhrZXkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5rZXlzW2tleV0gPT09IHVuZGVmaW5lZCB8fCB0aGlzLmtleXNba2V5XSA9PT0gTXV0ZXhMb2NrU3RhdHVzLlVOTE9DS0VEKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzW2tleV0gPSBNdXRleExvY2tTdGF0dXMuTE9DS0VEO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub25VbmxvY2tFdmVudChrZXksICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5rZXlzW2tleV0gPSBNdXRleExvY2tTdGF0dXMuTE9DS0VEO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVbmxvY2sgYSBrZXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5IC1cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgdW5sb2NrKGtleSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmtleXNba2V5XSA9PT0gTXV0ZXhMb2NrU3RhdHVzLkxPQ0tFRCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFVubG9ja0V2ZW50KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5rZXlzW2tleV07XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgb25VbmxvY2tFdmVudChrZXksIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKHRoaXMubGlzdGVuZXJzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnNba2V5XSA9IFtoYW5kbGVyXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzW2tleV0ucHVzaChoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZW1pdFVubG9ja0V2ZW50KGtleSkge1xuICAgICAgICBpZiAodGhpcy5saXN0ZW5lcnNba2V5XSAhPT0gdW5kZWZpbmVkICYmIHRoaXMubGlzdGVuZXJzW2tleV0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IHRoaXMubGlzdGVuZXJzW2tleV0uc2hpZnQoKTtcbiAgICAgICAgICAgIHNldEltbWVkaWF0ZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5NdXRleC5rZXlzID0ge307XG5NdXRleC5saXN0ZW5lcnMgPSB7fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU11dGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/RetriableReadableStream.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/RetriableReadableStream.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RetriableReadableStream: () => (/* binding */ RetriableReadableStream)\n/* harmony export */ });\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/abort-controller/dist-esm/src/AbortController.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_0__);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * A Node.js ReadableStream will internally retry when internal ReadableStream unexpected ends.\n */\nclass RetriableReadableStream extends stream__WEBPACK_IMPORTED_MODULE_0__.Readable {\n    /**\n     * Creates an instance of RetriableReadableStream.\n     *\n     * @param source - The current ReadableStream returned from getter\n     * @param getter - A method calling downloading request returning\n     *                                      a new ReadableStream from specified offset\n     * @param offset - Offset position in original data source to read\n     * @param count - How much data in original data source to read\n     * @param options -\n     */\n    constructor(source, getter, offset, count, options = {}) {\n        super({ highWaterMark: options.highWaterMark });\n        this.retries = 0;\n        this.sourceDataHandler = (data) => {\n            if (this.options.doInjectErrorOnce) {\n                this.options.doInjectErrorOnce = undefined;\n                this.source.pause();\n                this.sourceErrorOrEndHandler();\n                this.source.destroy();\n                return;\n            }\n            // console.log(\n            //   `Offset: ${this.offset}, Received ${data.length} from internal stream`\n            // );\n            this.offset += data.length;\n            if (this.onProgress) {\n                this.onProgress({ loadedBytes: this.offset - this.start });\n            }\n            if (!this.push(data)) {\n                this.source.pause();\n            }\n        };\n        this.sourceAbortedHandler = () => {\n            const abortError = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_1__.AbortError(\"The operation was aborted.\");\n            this.destroy(abortError);\n        };\n        this.sourceErrorOrEndHandler = (err) => {\n            if (err && err.name === \"AbortError\") {\n                this.destroy(err);\n                return;\n            }\n            // console.log(\n            //   `Source stream emits end or error, offset: ${\n            //     this.offset\n            //   }, dest end : ${this.end}`\n            // );\n            this.removeSourceEventHandlers();\n            if (this.offset - 1 === this.end) {\n                this.push(null);\n            }\n            else if (this.offset <= this.end) {\n                // console.log(\n                //   `retries: ${this.retries}, max retries: ${this.maxRetries}`\n                // );\n                if (this.retries < this.maxRetryRequests) {\n                    this.retries += 1;\n                    this.getter(this.offset)\n                        .then((newSource) => {\n                        this.source = newSource;\n                        this.setSourceEventHandlers();\n                        return;\n                    })\n                        .catch((error) => {\n                        this.destroy(error);\n                    });\n                }\n                else {\n                    this.destroy(new Error(`Data corruption failure: received less data than required and reached maxRetires limitation. Received data offset: ${this.offset - 1}, data needed offset: ${this.end}, retries: ${this.retries}, max retries: ${this.maxRetryRequests}`));\n                }\n            }\n            else {\n                this.destroy(new Error(`Data corruption failure: Received more data than original request, data needed offset is ${this.end}, received offset: ${this.offset - 1}`));\n            }\n        };\n        this.getter = getter;\n        this.source = source;\n        this.start = offset;\n        this.offset = offset;\n        this.end = offset + count - 1;\n        this.maxRetryRequests =\n            options.maxRetryRequests && options.maxRetryRequests >= 0 ? options.maxRetryRequests : 0;\n        this.onProgress = options.onProgress;\n        this.options = options;\n        this.setSourceEventHandlers();\n    }\n    _read() {\n        this.source.resume();\n    }\n    setSourceEventHandlers() {\n        this.source.on(\"data\", this.sourceDataHandler);\n        this.source.on(\"end\", this.sourceErrorOrEndHandler);\n        this.source.on(\"error\", this.sourceErrorOrEndHandler);\n        // needed for Node14\n        this.source.on(\"aborted\", this.sourceAbortedHandler);\n    }\n    removeSourceEventHandlers() {\n        this.source.removeListener(\"data\", this.sourceDataHandler);\n        this.source.removeListener(\"end\", this.sourceErrorOrEndHandler);\n        this.source.removeListener(\"error\", this.sourceErrorOrEndHandler);\n        this.source.removeListener(\"aborted\", this.sourceAbortedHandler);\n    }\n    _destroy(error, callback) {\n        // remove listener from source and release source\n        this.removeSourceEventHandlers();\n        this.source.destroy();\n        callback(error === null ? undefined : error);\n    }\n}\n//# sourceMappingURL=RetriableReadableStream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/RetriableReadableStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCachedDefaultHttpClient: () => (/* binding */ getCachedDefaultHttpClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nlet _defaultHttpClient;\nfunction getCachedDefaultHttpClient() {\n    if (!_defaultHttpClient) {\n        _defaultHttpClient = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createDefaultHttpClient)();\n    }\n    return _defaultHttpClient;\n}\n//# sourceMappingURL=cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3V0aWxzL2NhY2hlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNvRTtBQUNwRTtBQUNPO0FBQ1A7QUFDQSw2QkFBNkIsa0ZBQXVCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3V0aWxzL2NhY2hlLmpzP2M4YzUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVEZWZhdWx0SHR0cENsaWVudCB9IGZyb20gXCJAYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lXCI7XG5sZXQgX2RlZmF1bHRIdHRwQ2xpZW50O1xuZXhwb3J0IGZ1bmN0aW9uIGdldENhY2hlZERlZmF1bHRIdHRwQ2xpZW50KCkge1xuICAgIGlmICghX2RlZmF1bHRIdHRwQ2xpZW50KSB7XG4gICAgICAgIF9kZWZhdWx0SHR0cENsaWVudCA9IGNyZWF0ZURlZmF1bHRIdHRwQ2xpZW50KCk7XG4gICAgfVxuICAgIHJldHVybiBfZGVmYXVsdEh0dHBDbGllbnQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWNoZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BATCH_MAX_PAYLOAD_IN_BYTES: () => (/* binding */ BATCH_MAX_PAYLOAD_IN_BYTES),\n/* harmony export */   BATCH_MAX_REQUEST: () => (/* binding */ BATCH_MAX_REQUEST),\n/* harmony export */   BLOCK_BLOB_MAX_BLOCKS: () => (/* binding */ BLOCK_BLOB_MAX_BLOCKS),\n/* harmony export */   BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES: () => (/* binding */ BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES),\n/* harmony export */   BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES: () => (/* binding */ BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES),\n/* harmony export */   BlobDoesNotUseCustomerSpecifiedEncryption: () => (/* binding */ BlobDoesNotUseCustomerSpecifiedEncryption),\n/* harmony export */   BlobUsesCustomerSpecifiedEncryptionMsg: () => (/* binding */ BlobUsesCustomerSpecifiedEncryptionMsg),\n/* harmony export */   DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES: () => (/* binding */ DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES),\n/* harmony export */   DEFAULT_BLOCK_BUFFER_SIZE_BYTES: () => (/* binding */ DEFAULT_BLOCK_BUFFER_SIZE_BYTES),\n/* harmony export */   DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS: () => (/* binding */ DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS),\n/* harmony export */   DevelopmentConnectionString: () => (/* binding */ DevelopmentConnectionString),\n/* harmony export */   ETagAny: () => (/* binding */ ETagAny),\n/* harmony export */   ETagNone: () => (/* binding */ ETagNone),\n/* harmony export */   EncryptionAlgorithmAES25: () => (/* binding */ EncryptionAlgorithmAES25),\n/* harmony export */   HTTPURLConnection: () => (/* binding */ HTTPURLConnection),\n/* harmony export */   HTTP_LINE_ENDING: () => (/* binding */ HTTP_LINE_ENDING),\n/* harmony export */   HTTP_VERSION_1_1: () => (/* binding */ HTTP_VERSION_1_1),\n/* harmony export */   HeaderConstants: () => (/* binding */ HeaderConstants),\n/* harmony export */   PathStylePorts: () => (/* binding */ PathStylePorts),\n/* harmony export */   REQUEST_TIMEOUT: () => (/* binding */ REQUEST_TIMEOUT),\n/* harmony export */   SDK_VERSION: () => (/* binding */ SDK_VERSION),\n/* harmony export */   SERVICE_VERSION: () => (/* binding */ SERVICE_VERSION),\n/* harmony export */   SIZE_1_MB: () => (/* binding */ SIZE_1_MB),\n/* harmony export */   StorageBlobLoggingAllowedHeaderNames: () => (/* binding */ StorageBlobLoggingAllowedHeaderNames),\n/* harmony export */   StorageBlobLoggingAllowedQueryParameters: () => (/* binding */ StorageBlobLoggingAllowedQueryParameters),\n/* harmony export */   StorageOAuthScopes: () => (/* binding */ StorageOAuthScopes),\n/* harmony export */   URLConstants: () => (/* binding */ URLConstants)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst SDK_VERSION = \"12.23.0\";\nconst SERVICE_VERSION = \"2024-05-04\";\nconst BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = 256 * 1024 * 1024; // 256MB\nconst BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = 4000 * 1024 * 1024; // 4000MB\nconst BLOCK_BLOB_MAX_BLOCKS = 50000;\nconst DEFAULT_BLOCK_BUFFER_SIZE_BYTES = 8 * 1024 * 1024; // 8MB\nconst DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = 4 * 1024 * 1024; // 4MB\nconst DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = 5;\nconst REQUEST_TIMEOUT = 100 * 1000; // In ms\n/**\n * The OAuth scope to use with Azure Storage.\n */\nconst StorageOAuthScopes = \"https://storage.azure.com/.default\";\nconst URLConstants = {\n    Parameters: {\n        FORCE_BROWSER_NO_CACHE: \"_\",\n        SIGNATURE: \"sig\",\n        SNAPSHOT: \"snapshot\",\n        VERSIONID: \"versionid\",\n        TIMEOUT: \"timeout\",\n    },\n};\nconst HTTPURLConnection = {\n    HTTP_ACCEPTED: 202,\n    HTTP_CONFLICT: 409,\n    HTTP_NOT_FOUND: 404,\n    HTTP_PRECON_FAILED: 412,\n    HTTP_RANGE_NOT_SATISFIABLE: 416,\n};\nconst HeaderConstants = {\n    AUTHORIZATION: \"Authorization\",\n    AUTHORIZATION_SCHEME: \"Bearer\",\n    CONTENT_ENCODING: \"Content-Encoding\",\n    CONTENT_ID: \"Content-ID\",\n    CONTENT_LANGUAGE: \"Content-Language\",\n    CONTENT_LENGTH: \"Content-Length\",\n    CONTENT_MD5: \"Content-Md5\",\n    CONTENT_TRANSFER_ENCODING: \"Content-Transfer-Encoding\",\n    CONTENT_TYPE: \"Content-Type\",\n    COOKIE: \"Cookie\",\n    DATE: \"date\",\n    IF_MATCH: \"if-match\",\n    IF_MODIFIED_SINCE: \"if-modified-since\",\n    IF_NONE_MATCH: \"if-none-match\",\n    IF_UNMODIFIED_SINCE: \"if-unmodified-since\",\n    PREFIX_FOR_STORAGE: \"x-ms-\",\n    RANGE: \"Range\",\n    USER_AGENT: \"User-Agent\",\n    X_MS_CLIENT_REQUEST_ID: \"x-ms-client-request-id\",\n    X_MS_COPY_SOURCE: \"x-ms-copy-source\",\n    X_MS_DATE: \"x-ms-date\",\n    X_MS_ERROR_CODE: \"x-ms-error-code\",\n    X_MS_VERSION: \"x-ms-version\",\n};\nconst ETagNone = \"\";\nconst ETagAny = \"*\";\nconst SIZE_1_MB = 1 * 1024 * 1024;\nconst BATCH_MAX_REQUEST = 256;\nconst BATCH_MAX_PAYLOAD_IN_BYTES = 4 * SIZE_1_MB;\nconst HTTP_LINE_ENDING = \"\\r\\n\";\nconst HTTP_VERSION_1_1 = \"HTTP/1.1\";\nconst EncryptionAlgorithmAES25 = \"AES256\";\nconst DevelopmentConnectionString = `DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;`;\nconst StorageBlobLoggingAllowedHeaderNames = [\n    \"Access-Control-Allow-Origin\",\n    \"Cache-Control\",\n    \"Content-Length\",\n    \"Content-Type\",\n    \"Date\",\n    \"Request-Id\",\n    \"traceparent\",\n    \"Transfer-Encoding\",\n    \"User-Agent\",\n    \"x-ms-client-request-id\",\n    \"x-ms-date\",\n    \"x-ms-error-code\",\n    \"x-ms-request-id\",\n    \"x-ms-return-client-request-id\",\n    \"x-ms-version\",\n    \"Accept-Ranges\",\n    \"Content-Disposition\",\n    \"Content-Encoding\",\n    \"Content-Language\",\n    \"Content-MD5\",\n    \"Content-Range\",\n    \"ETag\",\n    \"Last-Modified\",\n    \"Server\",\n    \"Vary\",\n    \"x-ms-content-crc64\",\n    \"x-ms-copy-action\",\n    \"x-ms-copy-completion-time\",\n    \"x-ms-copy-id\",\n    \"x-ms-copy-progress\",\n    \"x-ms-copy-status\",\n    \"x-ms-has-immutability-policy\",\n    \"x-ms-has-legal-hold\",\n    \"x-ms-lease-state\",\n    \"x-ms-lease-status\",\n    \"x-ms-range\",\n    \"x-ms-request-server-encrypted\",\n    \"x-ms-server-encrypted\",\n    \"x-ms-snapshot\",\n    \"x-ms-source-range\",\n    \"If-Match\",\n    \"If-Modified-Since\",\n    \"If-None-Match\",\n    \"If-Unmodified-Since\",\n    \"x-ms-access-tier\",\n    \"x-ms-access-tier-change-time\",\n    \"x-ms-access-tier-inferred\",\n    \"x-ms-account-kind\",\n    \"x-ms-archive-status\",\n    \"x-ms-blob-append-offset\",\n    \"x-ms-blob-cache-control\",\n    \"x-ms-blob-committed-block-count\",\n    \"x-ms-blob-condition-appendpos\",\n    \"x-ms-blob-condition-maxsize\",\n    \"x-ms-blob-content-disposition\",\n    \"x-ms-blob-content-encoding\",\n    \"x-ms-blob-content-language\",\n    \"x-ms-blob-content-length\",\n    \"x-ms-blob-content-md5\",\n    \"x-ms-blob-content-type\",\n    \"x-ms-blob-public-access\",\n    \"x-ms-blob-sequence-number\",\n    \"x-ms-blob-type\",\n    \"x-ms-copy-destination-snapshot\",\n    \"x-ms-creation-time\",\n    \"x-ms-default-encryption-scope\",\n    \"x-ms-delete-snapshots\",\n    \"x-ms-delete-type-permanent\",\n    \"x-ms-deny-encryption-scope-override\",\n    \"x-ms-encryption-algorithm\",\n    \"x-ms-if-sequence-number-eq\",\n    \"x-ms-if-sequence-number-le\",\n    \"x-ms-if-sequence-number-lt\",\n    \"x-ms-incremental-copy\",\n    \"x-ms-lease-action\",\n    \"x-ms-lease-break-period\",\n    \"x-ms-lease-duration\",\n    \"x-ms-lease-id\",\n    \"x-ms-lease-time\",\n    \"x-ms-page-write\",\n    \"x-ms-proposed-lease-id\",\n    \"x-ms-range-get-content-md5\",\n    \"x-ms-rehydrate-priority\",\n    \"x-ms-sequence-number-action\",\n    \"x-ms-sku-name\",\n    \"x-ms-source-content-md5\",\n    \"x-ms-source-if-match\",\n    \"x-ms-source-if-modified-since\",\n    \"x-ms-source-if-none-match\",\n    \"x-ms-source-if-unmodified-since\",\n    \"x-ms-tag-count\",\n    \"x-ms-encryption-key-sha256\",\n    \"x-ms-if-tags\",\n    \"x-ms-source-if-tags\",\n];\nconst StorageBlobLoggingAllowedQueryParameters = [\n    \"comp\",\n    \"maxresults\",\n    \"rscc\",\n    \"rscd\",\n    \"rsce\",\n    \"rscl\",\n    \"rsct\",\n    \"se\",\n    \"si\",\n    \"sip\",\n    \"sp\",\n    \"spr\",\n    \"sr\",\n    \"srt\",\n    \"ss\",\n    \"st\",\n    \"sv\",\n    \"include\",\n    \"marker\",\n    \"prefix\",\n    \"copyid\",\n    \"restype\",\n    \"blockid\",\n    \"blocklisttype\",\n    \"delimiter\",\n    \"prevsnapshot\",\n    \"ske\",\n    \"skoid\",\n    \"sks\",\n    \"skt\",\n    \"sktid\",\n    \"skv\",\n    \"snapshot\",\n];\nconst BlobUsesCustomerSpecifiedEncryptionMsg = \"BlobUsesCustomerSpecifiedEncryption\";\nconst BlobDoesNotUseCustomerSpecifiedEncryption = \"BlobDoesNotUseCustomerSpecifiedEncryption\";\n/// List of ports used for path style addressing.\n/// Path style addressing means that storage account is put in URI's Path segment in instead of in host.\nconst PathStylePorts = [\n    \"10000\",\n    \"10001\",\n    \"10002\",\n    \"10003\",\n    \"10004\",\n    \"10100\",\n    \"10101\",\n    \"10102\",\n    \"10103\",\n    \"10104\",\n    \"11000\",\n    \"11001\",\n    \"11002\",\n    \"11003\",\n    \"11004\",\n    \"11100\",\n    \"11101\",\n    \"11102\",\n    \"11103\",\n    \"11104\",\n];\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ087QUFDQTtBQUNBLDREQUE0RDtBQUM1RCw2REFBNkQ7QUFDN0Q7QUFDQSx5REFBeUQ7QUFDekQsMkRBQTJEO0FBQzNEO0FBQ0Esb0NBQW9DO0FBQzNDO0FBQ0E7QUFDQTtBQUNPO0FBQ0E7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRSw2QkFBNkIsb0dBQW9HLHFEQUFxRDtBQUN6UDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDQTtBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3V0aWxzL2NvbnN0YW50cy5qcz84MjM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuZXhwb3J0IGNvbnN0IFNES19WRVJTSU9OID0gXCIxMi4yMy4wXCI7XG5leHBvcnQgY29uc3QgU0VSVklDRV9WRVJTSU9OID0gXCIyMDI0LTA1LTA0XCI7XG5leHBvcnQgY29uc3QgQkxPQ0tfQkxPQl9NQVhfVVBMT0FEX0JMT0JfQllURVMgPSAyNTYgKiAxMDI0ICogMTAyNDsgLy8gMjU2TUJcbmV4cG9ydCBjb25zdCBCTE9DS19CTE9CX01BWF9TVEFHRV9CTE9DS19CWVRFUyA9IDQwMDAgKiAxMDI0ICogMTAyNDsgLy8gNDAwME1CXG5leHBvcnQgY29uc3QgQkxPQ0tfQkxPQl9NQVhfQkxPQ0tTID0gNTAwMDA7XG5leHBvcnQgY29uc3QgREVGQVVMVF9CTE9DS19CVUZGRVJfU0laRV9CWVRFUyA9IDggKiAxMDI0ICogMTAyNDsgLy8gOE1CXG5leHBvcnQgY29uc3QgREVGQVVMVF9CTE9CX0RPV05MT0FEX0JMT0NLX0JZVEVTID0gNCAqIDEwMjQgKiAxMDI0OyAvLyA0TUJcbmV4cG9ydCBjb25zdCBERUZBVUxUX01BWF9ET1dOTE9BRF9SRVRSWV9SRVFVRVNUUyA9IDU7XG5leHBvcnQgY29uc3QgUkVRVUVTVF9USU1FT1VUID0gMTAwICogMTAwMDsgLy8gSW4gbXNcbi8qKlxuICogVGhlIE9BdXRoIHNjb3BlIHRvIHVzZSB3aXRoIEF6dXJlIFN0b3JhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBTdG9yYWdlT0F1dGhTY29wZXMgPSBcImh0dHBzOi8vc3RvcmFnZS5henVyZS5jb20vLmRlZmF1bHRcIjtcbmV4cG9ydCBjb25zdCBVUkxDb25zdGFudHMgPSB7XG4gICAgUGFyYW1ldGVyczoge1xuICAgICAgICBGT1JDRV9CUk9XU0VSX05PX0NBQ0hFOiBcIl9cIixcbiAgICAgICAgU0lHTkFUVVJFOiBcInNpZ1wiLFxuICAgICAgICBTTkFQU0hPVDogXCJzbmFwc2hvdFwiLFxuICAgICAgICBWRVJTSU9OSUQ6IFwidmVyc2lvbmlkXCIsXG4gICAgICAgIFRJTUVPVVQ6IFwidGltZW91dFwiLFxuICAgIH0sXG59O1xuZXhwb3J0IGNvbnN0IEhUVFBVUkxDb25uZWN0aW9uID0ge1xuICAgIEhUVFBfQUNDRVBURUQ6IDIwMixcbiAgICBIVFRQX0NPTkZMSUNUOiA0MDksXG4gICAgSFRUUF9OT1RfRk9VTkQ6IDQwNCxcbiAgICBIVFRQX1BSRUNPTl9GQUlMRUQ6IDQxMixcbiAgICBIVFRQX1JBTkdFX05PVF9TQVRJU0ZJQUJMRTogNDE2LFxufTtcbmV4cG9ydCBjb25zdCBIZWFkZXJDb25zdGFudHMgPSB7XG4gICAgQVVUSE9SSVpBVElPTjogXCJBdXRob3JpemF0aW9uXCIsXG4gICAgQVVUSE9SSVpBVElPTl9TQ0hFTUU6IFwiQmVhcmVyXCIsXG4gICAgQ09OVEVOVF9FTkNPRElORzogXCJDb250ZW50LUVuY29kaW5nXCIsXG4gICAgQ09OVEVOVF9JRDogXCJDb250ZW50LUlEXCIsXG4gICAgQ09OVEVOVF9MQU5HVUFHRTogXCJDb250ZW50LUxhbmd1YWdlXCIsXG4gICAgQ09OVEVOVF9MRU5HVEg6IFwiQ29udGVudC1MZW5ndGhcIixcbiAgICBDT05URU5UX01ENTogXCJDb250ZW50LU1kNVwiLFxuICAgIENPTlRFTlRfVFJBTlNGRVJfRU5DT0RJTkc6IFwiQ29udGVudC1UcmFuc2Zlci1FbmNvZGluZ1wiLFxuICAgIENPTlRFTlRfVFlQRTogXCJDb250ZW50LVR5cGVcIixcbiAgICBDT09LSUU6IFwiQ29va2llXCIsXG4gICAgREFURTogXCJkYXRlXCIsXG4gICAgSUZfTUFUQ0g6IFwiaWYtbWF0Y2hcIixcbiAgICBJRl9NT0RJRklFRF9TSU5DRTogXCJpZi1tb2RpZmllZC1zaW5jZVwiLFxuICAgIElGX05PTkVfTUFUQ0g6IFwiaWYtbm9uZS1tYXRjaFwiLFxuICAgIElGX1VOTU9ESUZJRURfU0lOQ0U6IFwiaWYtdW5tb2RpZmllZC1zaW5jZVwiLFxuICAgIFBSRUZJWF9GT1JfU1RPUkFHRTogXCJ4LW1zLVwiLFxuICAgIFJBTkdFOiBcIlJhbmdlXCIsXG4gICAgVVNFUl9BR0VOVDogXCJVc2VyLUFnZW50XCIsXG4gICAgWF9NU19DTElFTlRfUkVRVUVTVF9JRDogXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgWF9NU19DT1BZX1NPVVJDRTogXCJ4LW1zLWNvcHktc291cmNlXCIsXG4gICAgWF9NU19EQVRFOiBcIngtbXMtZGF0ZVwiLFxuICAgIFhfTVNfRVJST1JfQ09ERTogXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICBYX01TX1ZFUlNJT046IFwieC1tcy12ZXJzaW9uXCIsXG59O1xuZXhwb3J0IGNvbnN0IEVUYWdOb25lID0gXCJcIjtcbmV4cG9ydCBjb25zdCBFVGFnQW55ID0gXCIqXCI7XG5leHBvcnQgY29uc3QgU0laRV8xX01CID0gMSAqIDEwMjQgKiAxMDI0O1xuZXhwb3J0IGNvbnN0IEJBVENIX01BWF9SRVFVRVNUID0gMjU2O1xuZXhwb3J0IGNvbnN0IEJBVENIX01BWF9QQVlMT0FEX0lOX0JZVEVTID0gNCAqIFNJWkVfMV9NQjtcbmV4cG9ydCBjb25zdCBIVFRQX0xJTkVfRU5ESU5HID0gXCJcXHJcXG5cIjtcbmV4cG9ydCBjb25zdCBIVFRQX1ZFUlNJT05fMV8xID0gXCJIVFRQLzEuMVwiO1xuZXhwb3J0IGNvbnN0IEVuY3J5cHRpb25BbGdvcml0aG1BRVMyNSA9IFwiQUVTMjU2XCI7XG5leHBvcnQgY29uc3QgRGV2ZWxvcG1lbnRDb25uZWN0aW9uU3RyaW5nID0gYERlZmF1bHRFbmRwb2ludHNQcm90b2NvbD1odHRwO0FjY291bnROYW1lPWRldnN0b3JlYWNjb3VudDE7QWNjb3VudEtleT1FYnk4dmRNMDJ4Tk9jcUZscVV3SlBMbG1FdGxDRFhKMU9VekZUNTB1U1JaNklGc3VGcTJVVkVyQ3o0STZ0cS9LMVNaRlBUT3RyL0tCSEJla3NvR01Hdz09O0Jsb2JFbmRwb2ludD1odHRwOi8vMTI3LjAuMC4xOjEwMDAwL2RldnN0b3JlYWNjb3VudDE7YDtcbmV4cG9ydCBjb25zdCBTdG9yYWdlQmxvYkxvZ2dpbmdBbGxvd2VkSGVhZGVyTmFtZXMgPSBbXG4gICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIixcbiAgICBcIkNhY2hlLUNvbnRyb2xcIixcbiAgICBcIkNvbnRlbnQtTGVuZ3RoXCIsXG4gICAgXCJDb250ZW50LVR5cGVcIixcbiAgICBcIkRhdGVcIixcbiAgICBcIlJlcXVlc3QtSWRcIixcbiAgICBcInRyYWNlcGFyZW50XCIsXG4gICAgXCJUcmFuc2Zlci1FbmNvZGluZ1wiLFxuICAgIFwiVXNlci1BZ2VudFwiLFxuICAgIFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgIFwieC1tcy1kYXRlXCIsXG4gICAgXCJ4LW1zLWVycm9yLWNvZGVcIixcbiAgICBcIngtbXMtcmVxdWVzdC1pZFwiLFxuICAgIFwieC1tcy1yZXR1cm4tY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICBcIngtbXMtdmVyc2lvblwiLFxuICAgIFwiQWNjZXB0LVJhbmdlc1wiLFxuICAgIFwiQ29udGVudC1EaXNwb3NpdGlvblwiLFxuICAgIFwiQ29udGVudC1FbmNvZGluZ1wiLFxuICAgIFwiQ29udGVudC1MYW5ndWFnZVwiLFxuICAgIFwiQ29udGVudC1NRDVcIixcbiAgICBcIkNvbnRlbnQtUmFuZ2VcIixcbiAgICBcIkVUYWdcIixcbiAgICBcIkxhc3QtTW9kaWZpZWRcIixcbiAgICBcIlNlcnZlclwiLFxuICAgIFwiVmFyeVwiLFxuICAgIFwieC1tcy1jb250ZW50LWNyYzY0XCIsXG4gICAgXCJ4LW1zLWNvcHktYWN0aW9uXCIsXG4gICAgXCJ4LW1zLWNvcHktY29tcGxldGlvbi10aW1lXCIsXG4gICAgXCJ4LW1zLWNvcHktaWRcIixcbiAgICBcIngtbXMtY29weS1wcm9ncmVzc1wiLFxuICAgIFwieC1tcy1jb3B5LXN0YXR1c1wiLFxuICAgIFwieC1tcy1oYXMtaW1tdXRhYmlsaXR5LXBvbGljeVwiLFxuICAgIFwieC1tcy1oYXMtbGVnYWwtaG9sZFwiLFxuICAgIFwieC1tcy1sZWFzZS1zdGF0ZVwiLFxuICAgIFwieC1tcy1sZWFzZS1zdGF0dXNcIixcbiAgICBcIngtbXMtcmFuZ2VcIixcbiAgICBcIngtbXMtcmVxdWVzdC1zZXJ2ZXItZW5jcnlwdGVkXCIsXG4gICAgXCJ4LW1zLXNlcnZlci1lbmNyeXB0ZWRcIixcbiAgICBcIngtbXMtc25hcHNob3RcIixcbiAgICBcIngtbXMtc291cmNlLXJhbmdlXCIsXG4gICAgXCJJZi1NYXRjaFwiLFxuICAgIFwiSWYtTW9kaWZpZWQtU2luY2VcIixcbiAgICBcIklmLU5vbmUtTWF0Y2hcIixcbiAgICBcIklmLVVubW9kaWZpZWQtU2luY2VcIixcbiAgICBcIngtbXMtYWNjZXNzLXRpZXJcIixcbiAgICBcIngtbXMtYWNjZXNzLXRpZXItY2hhbmdlLXRpbWVcIixcbiAgICBcIngtbXMtYWNjZXNzLXRpZXItaW5mZXJyZWRcIixcbiAgICBcIngtbXMtYWNjb3VudC1raW5kXCIsXG4gICAgXCJ4LW1zLWFyY2hpdmUtc3RhdHVzXCIsXG4gICAgXCJ4LW1zLWJsb2ItYXBwZW5kLW9mZnNldFwiLFxuICAgIFwieC1tcy1ibG9iLWNhY2hlLWNvbnRyb2xcIixcbiAgICBcIngtbXMtYmxvYi1jb21taXR0ZWQtYmxvY2stY291bnRcIixcbiAgICBcIngtbXMtYmxvYi1jb25kaXRpb24tYXBwZW5kcG9zXCIsXG4gICAgXCJ4LW1zLWJsb2ItY29uZGl0aW9uLW1heHNpemVcIixcbiAgICBcIngtbXMtYmxvYi1jb250ZW50LWRpc3Bvc2l0aW9uXCIsXG4gICAgXCJ4LW1zLWJsb2ItY29udGVudC1lbmNvZGluZ1wiLFxuICAgIFwieC1tcy1ibG9iLWNvbnRlbnQtbGFuZ3VhZ2VcIixcbiAgICBcIngtbXMtYmxvYi1jb250ZW50LWxlbmd0aFwiLFxuICAgIFwieC1tcy1ibG9iLWNvbnRlbnQtbWQ1XCIsXG4gICAgXCJ4LW1zLWJsb2ItY29udGVudC10eXBlXCIsXG4gICAgXCJ4LW1zLWJsb2ItcHVibGljLWFjY2Vzc1wiLFxuICAgIFwieC1tcy1ibG9iLXNlcXVlbmNlLW51bWJlclwiLFxuICAgIFwieC1tcy1ibG9iLXR5cGVcIixcbiAgICBcIngtbXMtY29weS1kZXN0aW5hdGlvbi1zbmFwc2hvdFwiLFxuICAgIFwieC1tcy1jcmVhdGlvbi10aW1lXCIsXG4gICAgXCJ4LW1zLWRlZmF1bHQtZW5jcnlwdGlvbi1zY29wZVwiLFxuICAgIFwieC1tcy1kZWxldGUtc25hcHNob3RzXCIsXG4gICAgXCJ4LW1zLWRlbGV0ZS10eXBlLXBlcm1hbmVudFwiLFxuICAgIFwieC1tcy1kZW55LWVuY3J5cHRpb24tc2NvcGUtb3ZlcnJpZGVcIixcbiAgICBcIngtbXMtZW5jcnlwdGlvbi1hbGdvcml0aG1cIixcbiAgICBcIngtbXMtaWYtc2VxdWVuY2UtbnVtYmVyLWVxXCIsXG4gICAgXCJ4LW1zLWlmLXNlcXVlbmNlLW51bWJlci1sZVwiLFxuICAgIFwieC1tcy1pZi1zZXF1ZW5jZS1udW1iZXItbHRcIixcbiAgICBcIngtbXMtaW5jcmVtZW50YWwtY29weVwiLFxuICAgIFwieC1tcy1sZWFzZS1hY3Rpb25cIixcbiAgICBcIngtbXMtbGVhc2UtYnJlYWstcGVyaW9kXCIsXG4gICAgXCJ4LW1zLWxlYXNlLWR1cmF0aW9uXCIsXG4gICAgXCJ4LW1zLWxlYXNlLWlkXCIsXG4gICAgXCJ4LW1zLWxlYXNlLXRpbWVcIixcbiAgICBcIngtbXMtcGFnZS13cml0ZVwiLFxuICAgIFwieC1tcy1wcm9wb3NlZC1sZWFzZS1pZFwiLFxuICAgIFwieC1tcy1yYW5nZS1nZXQtY29udGVudC1tZDVcIixcbiAgICBcIngtbXMtcmVoeWRyYXRlLXByaW9yaXR5XCIsXG4gICAgXCJ4LW1zLXNlcXVlbmNlLW51bWJlci1hY3Rpb25cIixcbiAgICBcIngtbXMtc2t1LW5hbWVcIixcbiAgICBcIngtbXMtc291cmNlLWNvbnRlbnQtbWQ1XCIsXG4gICAgXCJ4LW1zLXNvdXJjZS1pZi1tYXRjaFwiLFxuICAgIFwieC1tcy1zb3VyY2UtaWYtbW9kaWZpZWQtc2luY2VcIixcbiAgICBcIngtbXMtc291cmNlLWlmLW5vbmUtbWF0Y2hcIixcbiAgICBcIngtbXMtc291cmNlLWlmLXVubW9kaWZpZWQtc2luY2VcIixcbiAgICBcIngtbXMtdGFnLWNvdW50XCIsXG4gICAgXCJ4LW1zLWVuY3J5cHRpb24ta2V5LXNoYTI1NlwiLFxuICAgIFwieC1tcy1pZi10YWdzXCIsXG4gICAgXCJ4LW1zLXNvdXJjZS1pZi10YWdzXCIsXG5dO1xuZXhwb3J0IGNvbnN0IFN0b3JhZ2VCbG9iTG9nZ2luZ0FsbG93ZWRRdWVyeVBhcmFtZXRlcnMgPSBbXG4gICAgXCJjb21wXCIsXG4gICAgXCJtYXhyZXN1bHRzXCIsXG4gICAgXCJyc2NjXCIsXG4gICAgXCJyc2NkXCIsXG4gICAgXCJyc2NlXCIsXG4gICAgXCJyc2NsXCIsXG4gICAgXCJyc2N0XCIsXG4gICAgXCJzZVwiLFxuICAgIFwic2lcIixcbiAgICBcInNpcFwiLFxuICAgIFwic3BcIixcbiAgICBcInNwclwiLFxuICAgIFwic3JcIixcbiAgICBcInNydFwiLFxuICAgIFwic3NcIixcbiAgICBcInN0XCIsXG4gICAgXCJzdlwiLFxuICAgIFwiaW5jbHVkZVwiLFxuICAgIFwibWFya2VyXCIsXG4gICAgXCJwcmVmaXhcIixcbiAgICBcImNvcHlpZFwiLFxuICAgIFwicmVzdHlwZVwiLFxuICAgIFwiYmxvY2tpZFwiLFxuICAgIFwiYmxvY2tsaXN0dHlwZVwiLFxuICAgIFwiZGVsaW1pdGVyXCIsXG4gICAgXCJwcmV2c25hcHNob3RcIixcbiAgICBcInNrZVwiLFxuICAgIFwic2tvaWRcIixcbiAgICBcInNrc1wiLFxuICAgIFwic2t0XCIsXG4gICAgXCJza3RpZFwiLFxuICAgIFwic2t2XCIsXG4gICAgXCJzbmFwc2hvdFwiLFxuXTtcbmV4cG9ydCBjb25zdCBCbG9iVXNlc0N1c3RvbWVyU3BlY2lmaWVkRW5jcnlwdGlvbk1zZyA9IFwiQmxvYlVzZXNDdXN0b21lclNwZWNpZmllZEVuY3J5cHRpb25cIjtcbmV4cG9ydCBjb25zdCBCbG9iRG9lc05vdFVzZUN1c3RvbWVyU3BlY2lmaWVkRW5jcnlwdGlvbiA9IFwiQmxvYkRvZXNOb3RVc2VDdXN0b21lclNwZWNpZmllZEVuY3J5cHRpb25cIjtcbi8vLyBMaXN0IG9mIHBvcnRzIHVzZWQgZm9yIHBhdGggc3R5bGUgYWRkcmVzc2luZy5cbi8vLyBQYXRoIHN0eWxlIGFkZHJlc3NpbmcgbWVhbnMgdGhhdCBzdG9yYWdlIGFjY291bnQgaXMgcHV0IGluIFVSSSdzIFBhdGggc2VnbWVudCBpbiBpbnN0ZWFkIG9mIGluIGhvc3QuXG5leHBvcnQgY29uc3QgUGF0aFN0eWxlUG9ydHMgPSBbXG4gICAgXCIxMDAwMFwiLFxuICAgIFwiMTAwMDFcIixcbiAgICBcIjEwMDAyXCIsXG4gICAgXCIxMDAwM1wiLFxuICAgIFwiMTAwMDRcIixcbiAgICBcIjEwMTAwXCIsXG4gICAgXCIxMDEwMVwiLFxuICAgIFwiMTAxMDJcIixcbiAgICBcIjEwMTAzXCIsXG4gICAgXCIxMDEwNFwiLFxuICAgIFwiMTEwMDBcIixcbiAgICBcIjExMDAxXCIsXG4gICAgXCIxMTAwMlwiLFxuICAgIFwiMTEwMDNcIixcbiAgICBcIjExMDA0XCIsXG4gICAgXCIxMTEwMFwiLFxuICAgIFwiMTExMDFcIixcbiAgICBcIjExMTAyXCIsXG4gICAgXCIxMTEwM1wiLFxuICAgIFwiMTExMDRcIixcbl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tracingClient: () => (/* binding */ tracingClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_tracing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-tracing */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * Creates a span using the global tracer.\n * @internal\n */\nconst tracingClient = (0,_azure_core_tracing__WEBPACK_IMPORTED_MODULE_0__.createTracingClient)({\n    packageName: \"@azure/storage-blob\",\n    packageVersion: _constants__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION,\n    namespace: \"Microsoft.Storage\",\n});\n//# sourceMappingURL=tracing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3V0aWxzL3RyYWNpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUMwRDtBQUNoQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNPLHNCQUFzQix3RUFBbUI7QUFDaEQ7QUFDQSxvQkFBb0IsbURBQVc7QUFDL0I7QUFDQSxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvdXRpbHMvdHJhY2luZy5qcz8xZDBhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlVHJhY2luZ0NsaWVudCB9IGZyb20gXCJAYXp1cmUvY29yZS10cmFjaW5nXCI7XG5pbXBvcnQgeyBTREtfVkVSU0lPTiB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuLyoqXG4gKiBDcmVhdGVzIGEgc3BhbiB1c2luZyB0aGUgZ2xvYmFsIHRyYWNlci5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgdHJhY2luZ0NsaWVudCA9IGNyZWF0ZVRyYWNpbmdDbGllbnQoe1xuICAgIHBhY2thZ2VOYW1lOiBcIkBhenVyZS9zdG9yYWdlLWJsb2JcIixcbiAgICBwYWNrYWdlVmVyc2lvbjogU0RLX1ZFUlNJT04sXG4gICAgbmFtZXNwYWNlOiBcIk1pY3Jvc29mdC5TdG9yYWdlXCIsXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYWNpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobNameToString: () => (/* binding */ BlobNameToString),\n/* harmony export */   ConvertInternalResponseOfListBlobFlat: () => (/* binding */ ConvertInternalResponseOfListBlobFlat),\n/* harmony export */   ConvertInternalResponseOfListBlobHierarchy: () => (/* binding */ ConvertInternalResponseOfListBlobHierarchy),\n/* harmony export */   EscapePath: () => (/* binding */ EscapePath),\n/* harmony export */   ExtractPageRangeInfoItems: () => (/* binding */ ExtractPageRangeInfoItems),\n/* harmony export */   appendToURLPath: () => (/* binding */ appendToURLPath),\n/* harmony export */   appendToURLQuery: () => (/* binding */ appendToURLQuery),\n/* harmony export */   assertResponse: () => (/* binding */ assertResponse),\n/* harmony export */   attachCredential: () => (/* binding */ attachCredential),\n/* harmony export */   base64decode: () => (/* binding */ base64decode),\n/* harmony export */   base64encode: () => (/* binding */ base64encode),\n/* harmony export */   delay: () => (/* binding */ delay),\n/* harmony export */   escapeURLPath: () => (/* binding */ escapeURLPath),\n/* harmony export */   extractConnectionStringParts: () => (/* binding */ extractConnectionStringParts),\n/* harmony export */   generateBlockID: () => (/* binding */ generateBlockID),\n/* harmony export */   getAccountNameFromUrl: () => (/* binding */ getAccountNameFromUrl),\n/* harmony export */   getURLParameter: () => (/* binding */ getURLParameter),\n/* harmony export */   getURLPath: () => (/* binding */ getURLPath),\n/* harmony export */   getURLPathAndQuery: () => (/* binding */ getURLPathAndQuery),\n/* harmony export */   getURLQueries: () => (/* binding */ getURLQueries),\n/* harmony export */   getURLScheme: () => (/* binding */ getURLScheme),\n/* harmony export */   getValueInConnString: () => (/* binding */ getValueInConnString),\n/* harmony export */   httpAuthorizationToString: () => (/* binding */ httpAuthorizationToString),\n/* harmony export */   iEqual: () => (/* binding */ iEqual),\n/* harmony export */   isIpEndpointStyle: () => (/* binding */ isIpEndpointStyle),\n/* harmony export */   padStart: () => (/* binding */ padStart),\n/* harmony export */   parseObjectReplicationRecord: () => (/* binding */ parseObjectReplicationRecord),\n/* harmony export */   sanitizeHeaders: () => (/* binding */ sanitizeHeaders),\n/* harmony export */   sanitizeURL: () => (/* binding */ sanitizeURL),\n/* harmony export */   setURLHost: () => (/* binding */ setURLHost),\n/* harmony export */   setURLParameter: () => (/* binding */ setURLParameter),\n/* harmony export */   toBlobTags: () => (/* binding */ toBlobTags),\n/* harmony export */   toBlobTagsString: () => (/* binding */ toBlobTagsString),\n/* harmony export */   toQuerySerialization: () => (/* binding */ toQuerySerialization),\n/* harmony export */   toTags: () => (/* binding */ toTags),\n/* harmony export */   truncatedISO8061Date: () => (/* binding */ truncatedISO8061Date)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n/**\n * Reserved URL characters must be properly escaped for Storage services like Blob or File.\n *\n * ## URL encode and escape strategy for JS SDKs\n *\n * When customers pass a URL string into XxxClient classes constructor, the URL string may already be URL encoded or not.\n * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL\n * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XxxClient constructors.\n *\n * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.\n *\n * This is what legacy V2 SDK does, simple and works for most of the cases.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%253A\" and send to server. A blob named \"b%3A\" will be created.\n *\n * But this strategy will make it not possible to create a blob with \"?\" in it's name. Because when customer URL string is\n * \"http://account.blob.core.windows.net/con/blob?name\", the \"?name\" will be treated as URL paramter instead of blob name.\n * If customer URL string is \"http://account.blob.core.windows.net/con/blob%3Fname\", a blob named \"blob%3Fname\" will be created.\n * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.\n * We cannot accept a SDK cannot create a blob name with \"?\". So we implement strategy two:\n *\n * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.\n *\n * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will escape \":\" like \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%3A\" to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%253A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%253A\" to server. A blob named \"b%3A\" will be created.\n *\n * This strategy gives us flexibility to create with any special characters. But \"%\" will be treated as a special characters, if the URL string\n * is not encoded, there shouldn't a \"%\" in the URL string, otherwise the URL is not a valid URL.\n * If customer needs to create a blob with \"%\" in it's blob name, use \"%25\" instead of \"%\". Just like above 3rd sample.\n * And following URL strings are invalid:\n * - \"http://account.blob.core.windows.net/con/b%\"\n * - \"http://account.blob.core.windows.net/con/b%2\"\n * - \"http://account.blob.core.windows.net/con/b%G\"\n *\n * Another special character is \"?\", use \"%2F\" to represent a blob name with \"?\" in a URL string.\n *\n * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `containerClient.getBlobClient(blobName)`\n *\n * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata\n *\n * @param url -\n */\nfunction escapeURLPath(url) {\n    const urlParsed = new URL(url);\n    let path = urlParsed.pathname;\n    path = path || \"/\";\n    path = escape(path);\n    urlParsed.pathname = path;\n    return urlParsed.toString();\n}\nfunction getProxyUriFromDevConnString(connectionString) {\n    // Development Connection String\n    // https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string#connect-to-the-emulator-account-using-the-well-known-account-name-and-key\n    let proxyUri = \"\";\n    if (connectionString.search(\"DevelopmentStorageProxyUri=\") !== -1) {\n        // CONNECTION_STRING=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://myProxyUri\n        const matchCredentials = connectionString.split(\";\");\n        for (const element of matchCredentials) {\n            if (element.trim().startsWith(\"DevelopmentStorageProxyUri=\")) {\n                proxyUri = element.trim().match(\"DevelopmentStorageProxyUri=(.*)\")[1];\n            }\n        }\n    }\n    return proxyUri;\n}\nfunction getValueInConnString(connectionString, argument) {\n    const elements = connectionString.split(\";\");\n    for (const element of elements) {\n        if (element.trim().startsWith(argument)) {\n            return element.trim().match(argument + \"=(.*)\")[1];\n        }\n    }\n    return \"\";\n}\n/**\n * Extracts the parts of an Azure Storage account connection string.\n *\n * @param connectionString - Connection string.\n * @returns String key value pairs of the storage account's url and credentials.\n */\nfunction extractConnectionStringParts(connectionString) {\n    let proxyUri = \"\";\n    if (connectionString.startsWith(\"UseDevelopmentStorage=true\")) {\n        // Development connection string\n        proxyUri = getProxyUriFromDevConnString(connectionString);\n        connectionString = _constants__WEBPACK_IMPORTED_MODULE_2__.DevelopmentConnectionString;\n    }\n    // Matching BlobEndpoint in the Account connection string\n    let blobEndpoint = getValueInConnString(connectionString, \"BlobEndpoint\");\n    // Slicing off '/' at the end if exists\n    // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)\n    blobEndpoint = blobEndpoint.endsWith(\"/\") ? blobEndpoint.slice(0, -1) : blobEndpoint;\n    if (connectionString.search(\"DefaultEndpointsProtocol=\") !== -1 &&\n        connectionString.search(\"AccountKey=\") !== -1) {\n        // Account connection string\n        let defaultEndpointsProtocol = \"\";\n        let accountName = \"\";\n        let accountKey = Buffer.from(\"accountKey\", \"base64\");\n        let endpointSuffix = \"\";\n        // Get account name and key\n        accountName = getValueInConnString(connectionString, \"AccountName\");\n        accountKey = Buffer.from(getValueInConnString(connectionString, \"AccountKey\"), \"base64\");\n        if (!blobEndpoint) {\n            // BlobEndpoint is not present in the Account connection string\n            // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`\n            defaultEndpointsProtocol = getValueInConnString(connectionString, \"DefaultEndpointsProtocol\");\n            const protocol = defaultEndpointsProtocol.toLowerCase();\n            if (protocol !== \"https\" && protocol !== \"http\") {\n                throw new Error(\"Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'\");\n            }\n            endpointSuffix = getValueInConnString(connectionString, \"EndpointSuffix\");\n            if (!endpointSuffix) {\n                throw new Error(\"Invalid EndpointSuffix in the provided Connection String\");\n            }\n            blobEndpoint = `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n        }\n        if (!accountName) {\n            throw new Error(\"Invalid AccountName in the provided Connection String\");\n        }\n        else if (accountKey.length === 0) {\n            throw new Error(\"Invalid AccountKey in the provided Connection String\");\n        }\n        return {\n            kind: \"AccountConnString\",\n            url: blobEndpoint,\n            accountName,\n            accountKey,\n            proxyUri,\n        };\n    }\n    else {\n        // SAS connection string\n        let accountSas = getValueInConnString(connectionString, \"SharedAccessSignature\");\n        let accountName = getValueInConnString(connectionString, \"AccountName\");\n        // if accountName is empty, try to read it from BlobEndpoint\n        if (!accountName) {\n            accountName = getAccountNameFromUrl(blobEndpoint);\n        }\n        if (!blobEndpoint) {\n            throw new Error(\"Invalid BlobEndpoint in the provided SAS Connection String\");\n        }\n        else if (!accountSas) {\n            throw new Error(\"Invalid SharedAccessSignature in the provided SAS Connection String\");\n        }\n        // client constructors assume accountSas does *not* start with ?\n        if (accountSas.startsWith(\"?\")) {\n            accountSas = accountSas.substring(1);\n        }\n        return { kind: \"SASConnString\", url: blobEndpoint, accountName, accountSas };\n    }\n}\n/**\n * Internal escape method implemented Strategy Two mentioned in escapeURL() description.\n *\n * @param text -\n */\nfunction escape(text) {\n    return encodeURIComponent(text)\n        .replace(/%2F/g, \"/\") // Don't escape for \"/\"\n        .replace(/'/g, \"%27\") // Escape for \"'\"\n        .replace(/\\+/g, \"%20\")\n        .replace(/%25/g, \"%\"); // Revert encoded \"%\"\n}\n/**\n * Append a string to URL path. Will remove duplicated \"/\" in front of the string\n * when URL path ends with a \"/\".\n *\n * @param url - Source URL string\n * @param name - String to be appended to URL\n * @returns An updated URL string\n */\nfunction appendToURLPath(url, name) {\n    const urlParsed = new URL(url);\n    let path = urlParsed.pathname;\n    path = path ? (path.endsWith(\"/\") ? `${path}${name}` : `${path}/${name}`) : name;\n    urlParsed.pathname = path;\n    return urlParsed.toString();\n}\n/**\n * Set URL parameter name and value. If name exists in URL parameters, old value\n * will be replaced by name key. If not provide value, the parameter will be deleted.\n *\n * @param url - Source URL string\n * @param name - Parameter name\n * @param value - Parameter value\n * @returns An updated URL string\n */\nfunction setURLParameter(url, name, value) {\n    const urlParsed = new URL(url);\n    const encodedName = encodeURIComponent(name);\n    const encodedValue = value ? encodeURIComponent(value) : undefined;\n    // mutating searchParams will change the encoding, so we have to do this ourselves\n    const searchString = urlParsed.search === \"\" ? \"?\" : urlParsed.search;\n    const searchPieces = [];\n    for (const pair of searchString.slice(1).split(\"&\")) {\n        if (pair) {\n            const [key] = pair.split(\"=\", 2);\n            if (key !== encodedName) {\n                searchPieces.push(pair);\n            }\n        }\n    }\n    if (encodedValue) {\n        searchPieces.push(`${encodedName}=${encodedValue}`);\n    }\n    urlParsed.search = searchPieces.length ? `?${searchPieces.join(\"&\")}` : \"\";\n    return urlParsed.toString();\n}\n/**\n * Get URL parameter by name.\n *\n * @param url -\n * @param name -\n */\nfunction getURLParameter(url, name) {\n    var _a;\n    const urlParsed = new URL(url);\n    return (_a = urlParsed.searchParams.get(name)) !== null && _a !== void 0 ? _a : undefined;\n}\n/**\n * Set URL host.\n *\n * @param url - Source URL string\n * @param host - New host string\n * @returns An updated URL string\n */\nfunction setURLHost(url, host) {\n    const urlParsed = new URL(url);\n    urlParsed.hostname = host;\n    return urlParsed.toString();\n}\n/**\n * Get URL path from an URL string.\n *\n * @param url - Source URL string\n */\nfunction getURLPath(url) {\n    try {\n        const urlParsed = new URL(url);\n        return urlParsed.pathname;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n/**\n * Get URL scheme from an URL string.\n *\n * @param url - Source URL string\n */\nfunction getURLScheme(url) {\n    try {\n        const urlParsed = new URL(url);\n        return urlParsed.protocol.endsWith(\":\") ? urlParsed.protocol.slice(0, -1) : urlParsed.protocol;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n/**\n * Get URL path and query from an URL string.\n *\n * @param url - Source URL string\n */\nfunction getURLPathAndQuery(url) {\n    const urlParsed = new URL(url);\n    const pathString = urlParsed.pathname;\n    if (!pathString) {\n        throw new RangeError(\"Invalid url without valid path.\");\n    }\n    let queryString = urlParsed.search || \"\";\n    queryString = queryString.trim();\n    if (queryString !== \"\") {\n        queryString = queryString.startsWith(\"?\") ? queryString : `?${queryString}`; // Ensure query string start with '?'\n    }\n    return `${pathString}${queryString}`;\n}\n/**\n * Get URL query key value pairs from an URL string.\n *\n * @param url -\n */\nfunction getURLQueries(url) {\n    let queryString = new URL(url).search;\n    if (!queryString) {\n        return {};\n    }\n    queryString = queryString.trim();\n    queryString = queryString.startsWith(\"?\") ? queryString.substring(1) : queryString;\n    let querySubStrings = queryString.split(\"&\");\n    querySubStrings = querySubStrings.filter((value) => {\n        const indexOfEqual = value.indexOf(\"=\");\n        const lastIndexOfEqual = value.lastIndexOf(\"=\");\n        return (indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1);\n    });\n    const queries = {};\n    for (const querySubString of querySubStrings) {\n        const splitResults = querySubString.split(\"=\");\n        const key = splitResults[0];\n        const value = splitResults[1];\n        queries[key] = value;\n    }\n    return queries;\n}\n/**\n * Append a string to URL query.\n *\n * @param url - Source URL string.\n * @param queryParts - String to be appended to the URL query.\n * @returns An updated URL string.\n */\nfunction appendToURLQuery(url, queryParts) {\n    const urlParsed = new URL(url);\n    let query = urlParsed.search;\n    if (query) {\n        query += \"&\" + queryParts;\n    }\n    else {\n        query = queryParts;\n    }\n    urlParsed.search = query;\n    return urlParsed.toString();\n}\n/**\n * Rounds a date off to seconds.\n *\n * @param date -\n * @param withMilliseconds - If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;\n *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.\n * @returns Date string in ISO8061 format, with or without 7 milliseconds component\n */\nfunction truncatedISO8061Date(date, withMilliseconds = true) {\n    // Date.toISOString() will return like \"2018-10-29T06:34:36.139Z\"\n    const dateString = date.toISOString();\n    return withMilliseconds\n        ? dateString.substring(0, dateString.length - 1) + \"0000\" + \"Z\"\n        : dateString.substring(0, dateString.length - 5) + \"Z\";\n}\n/**\n * Base64 encode.\n *\n * @param content -\n */\nfunction base64encode(content) {\n    return !_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.isNode ? btoa(content) : Buffer.from(content).toString(\"base64\");\n}\n/**\n * Base64 decode.\n *\n * @param encodedString -\n */\nfunction base64decode(encodedString) {\n    return !_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.isNode ? atob(encodedString) : Buffer.from(encodedString, \"base64\").toString();\n}\n/**\n * Generate a 64 bytes base64 block ID string.\n *\n * @param blockIndex -\n */\nfunction generateBlockID(blockIDPrefix, blockIndex) {\n    // To generate a 64 bytes base64 string, source string should be 48\n    const maxSourceStringLength = 48;\n    // A blob can have a maximum of 100,000 uncommitted blocks at any given time\n    const maxBlockIndexLength = 6;\n    const maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;\n    if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {\n        blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);\n    }\n    const res = blockIDPrefix +\n        padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, \"0\");\n    return base64encode(res);\n}\n/**\n * Delay specified time interval.\n *\n * @param timeInMs -\n * @param aborter -\n * @param abortError -\n */\nasync function delay(timeInMs, aborter, abortError) {\n    return new Promise((resolve, reject) => {\n        /* eslint-disable-next-line prefer-const */\n        let timeout;\n        const abortHandler = () => {\n            if (timeout !== undefined) {\n                clearTimeout(timeout);\n            }\n            reject(abortError);\n        };\n        const resolveHandler = () => {\n            if (aborter !== undefined) {\n                aborter.removeEventListener(\"abort\", abortHandler);\n            }\n            resolve();\n        };\n        timeout = setTimeout(resolveHandler, timeInMs);\n        if (aborter !== undefined) {\n            aborter.addEventListener(\"abort\", abortHandler);\n        }\n    });\n}\n/**\n * String.prototype.padStart()\n *\n * @param currentString -\n * @param targetLength -\n * @param padString -\n */\nfunction padStart(currentString, targetLength, padString = \" \") {\n    // @ts-expect-error: TS doesn't know this code needs to run downlevel sometimes\n    if (String.prototype.padStart) {\n        return currentString.padStart(targetLength, padString);\n    }\n    padString = padString || \" \";\n    if (currentString.length > targetLength) {\n        return currentString;\n    }\n    else {\n        targetLength = targetLength - currentString.length;\n        if (targetLength > padString.length) {\n            padString += padString.repeat(targetLength / padString.length);\n        }\n        return padString.slice(0, targetLength) + currentString;\n    }\n}\nfunction sanitizeURL(url) {\n    let safeURL = url;\n    if (getURLParameter(safeURL, _constants__WEBPACK_IMPORTED_MODULE_2__.URLConstants.Parameters.SIGNATURE)) {\n        safeURL = setURLParameter(safeURL, _constants__WEBPACK_IMPORTED_MODULE_2__.URLConstants.Parameters.SIGNATURE, \"*****\");\n    }\n    return safeURL;\n}\nfunction sanitizeHeaders(originalHeader) {\n    const headers = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)();\n    for (const [name, value] of originalHeader) {\n        if (name.toLowerCase() === _constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.AUTHORIZATION.toLowerCase()) {\n            headers.set(name, \"*****\");\n        }\n        else if (name.toLowerCase() === _constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.X_MS_COPY_SOURCE) {\n            headers.set(name, sanitizeURL(value));\n        }\n        else {\n            headers.set(name, value);\n        }\n    }\n    return headers;\n}\n/**\n * If two strings are equal when compared case insensitive.\n *\n * @param str1 -\n * @param str2 -\n */\nfunction iEqual(str1, str2) {\n    return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();\n}\n/**\n * Extracts account name from the url\n * @param url - url to extract the account name from\n * @returns with the account name\n */\nfunction getAccountNameFromUrl(url) {\n    const parsedUrl = new URL(url);\n    let accountName;\n    try {\n        if (parsedUrl.hostname.split(\".\")[1] === \"blob\") {\n            // `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n            accountName = parsedUrl.hostname.split(\".\")[0];\n        }\n        else if (isIpEndpointStyle(parsedUrl)) {\n            // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/\n            // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/\n            // .getPath() -> /devstoreaccount1/\n            accountName = parsedUrl.pathname.split(\"/\")[1];\n        }\n        else {\n            // Custom domain case: \"https://customdomain.com/containername/blob\".\n            accountName = \"\";\n        }\n        return accountName;\n    }\n    catch (error) {\n        throw new Error(\"Unable to extract accountName with provided information.\");\n    }\n}\nfunction isIpEndpointStyle(parsedUrl) {\n    const host = parsedUrl.host;\n    // Case 1: Ipv6, use a broad regex to find out candidates whose host contains two ':'.\n    // Case 2: localhost(:port) or host.docker.internal, use broad regex to match port part.\n    // Case 3: Ipv4, use broad regex which just check if host contains Ipv4.\n    // For valid host please refer to https://man7.org/linux/man-pages/man7/hostname.7.html.\n    return (/^.*:.*:.*$|^(localhost|host.docker.internal)(:[0-9]+)?$|^(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])){3}(:[0-9]+)?$/.test(host) ||\n        (Boolean(parsedUrl.port) && _constants__WEBPACK_IMPORTED_MODULE_2__.PathStylePorts.includes(parsedUrl.port)));\n}\n/**\n * Convert Tags to encoded string.\n *\n * @param tags -\n */\nfunction toBlobTagsString(tags) {\n    if (tags === undefined) {\n        return undefined;\n    }\n    const tagPairs = [];\n    for (const key in tags) {\n        if (Object.prototype.hasOwnProperty.call(tags, key)) {\n            const value = tags[key];\n            tagPairs.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n        }\n    }\n    return tagPairs.join(\"&\");\n}\n/**\n * Convert Tags type to BlobTags.\n *\n * @param tags -\n */\nfunction toBlobTags(tags) {\n    if (tags === undefined) {\n        return undefined;\n    }\n    const res = {\n        blobTagSet: [],\n    };\n    for (const key in tags) {\n        if (Object.prototype.hasOwnProperty.call(tags, key)) {\n            const value = tags[key];\n            res.blobTagSet.push({\n                key,\n                value,\n            });\n        }\n    }\n    return res;\n}\n/**\n * Covert BlobTags to Tags type.\n *\n * @param tags -\n */\nfunction toTags(tags) {\n    if (tags === undefined) {\n        return undefined;\n    }\n    const res = {};\n    for (const blobTag of tags.blobTagSet) {\n        res[blobTag.key] = blobTag.value;\n    }\n    return res;\n}\n/**\n * Convert BlobQueryTextConfiguration to QuerySerialization type.\n *\n * @param textConfiguration -\n */\nfunction toQuerySerialization(textConfiguration) {\n    if (textConfiguration === undefined) {\n        return undefined;\n    }\n    switch (textConfiguration.kind) {\n        case \"csv\":\n            return {\n                format: {\n                    type: \"delimited\",\n                    delimitedTextConfiguration: {\n                        columnSeparator: textConfiguration.columnSeparator || \",\",\n                        fieldQuote: textConfiguration.fieldQuote || \"\",\n                        recordSeparator: textConfiguration.recordSeparator,\n                        escapeChar: textConfiguration.escapeCharacter || \"\",\n                        headersPresent: textConfiguration.hasHeaders || false,\n                    },\n                },\n            };\n        case \"json\":\n            return {\n                format: {\n                    type: \"json\",\n                    jsonTextConfiguration: {\n                        recordSeparator: textConfiguration.recordSeparator,\n                    },\n                },\n            };\n        case \"arrow\":\n            return {\n                format: {\n                    type: \"arrow\",\n                    arrowConfiguration: {\n                        schema: textConfiguration.schema,\n                    },\n                },\n            };\n        case \"parquet\":\n            return {\n                format: {\n                    type: \"parquet\",\n                },\n            };\n        default:\n            throw Error(\"Invalid BlobQueryTextConfiguration.\");\n    }\n}\nfunction parseObjectReplicationRecord(objectReplicationRecord) {\n    if (!objectReplicationRecord) {\n        return undefined;\n    }\n    if (\"policy-id\" in objectReplicationRecord) {\n        // If the dictionary contains a key with policy id, we are not required to do any parsing since\n        // the policy id should already be stored in the ObjectReplicationDestinationPolicyId.\n        return undefined;\n    }\n    const orProperties = [];\n    for (const key in objectReplicationRecord) {\n        const ids = key.split(\"_\");\n        const policyPrefix = \"or-\";\n        if (ids[0].startsWith(policyPrefix)) {\n            ids[0] = ids[0].substring(policyPrefix.length);\n        }\n        const rule = {\n            ruleId: ids[1],\n            replicationStatus: objectReplicationRecord[key],\n        };\n        const policyIndex = orProperties.findIndex((policy) => policy.policyId === ids[0]);\n        if (policyIndex > -1) {\n            orProperties[policyIndex].rules.push(rule);\n        }\n        else {\n            orProperties.push({\n                policyId: ids[0],\n                rules: [rule],\n            });\n        }\n    }\n    return orProperties;\n}\n/**\n * Attach a TokenCredential to an object.\n *\n * @param thing -\n * @param credential -\n */\nfunction attachCredential(thing, credential) {\n    thing.credential = credential;\n    return thing;\n}\nfunction httpAuthorizationToString(httpAuthorization) {\n    return httpAuthorization ? httpAuthorization.scheme + \" \" + httpAuthorization.value : undefined;\n}\nfunction BlobNameToString(name) {\n    if (name.encoded) {\n        return decodeURIComponent(name.content);\n    }\n    else {\n        return name.content;\n    }\n}\nfunction ConvertInternalResponseOfListBlobFlat(internalResponse) {\n    return Object.assign(Object.assign({}, internalResponse), { segment: {\n            blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {\n                const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name) });\n                return blobItem;\n            }),\n        } });\n}\nfunction ConvertInternalResponseOfListBlobHierarchy(internalResponse) {\n    var _a;\n    return Object.assign(Object.assign({}, internalResponse), { segment: {\n            blobPrefixes: (_a = internalResponse.segment.blobPrefixes) === null || _a === void 0 ? void 0 : _a.map((blobPrefixInternal) => {\n                const blobPrefix = Object.assign(Object.assign({}, blobPrefixInternal), { name: BlobNameToString(blobPrefixInternal.name) });\n                return blobPrefix;\n            }),\n            blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {\n                const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name) });\n                return blobItem;\n            }),\n        } });\n}\nfunction* ExtractPageRangeInfoItems(getPageRangesSegment) {\n    let pageRange = [];\n    let clearRange = [];\n    if (getPageRangesSegment.pageRange)\n        pageRange = getPageRangesSegment.pageRange;\n    if (getPageRangesSegment.clearRange)\n        clearRange = getPageRangesSegment.clearRange;\n    let pageRangeIndex = 0;\n    let clearRangeIndex = 0;\n    while (pageRangeIndex < pageRange.length && clearRangeIndex < clearRange.length) {\n        if (pageRange[pageRangeIndex].start < clearRange[clearRangeIndex].start) {\n            yield {\n                start: pageRange[pageRangeIndex].start,\n                end: pageRange[pageRangeIndex].end,\n                isClear: false,\n            };\n            ++pageRangeIndex;\n        }\n        else {\n            yield {\n                start: clearRange[clearRangeIndex].start,\n                end: clearRange[clearRangeIndex].end,\n                isClear: true,\n            };\n            ++clearRangeIndex;\n        }\n    }\n    for (; pageRangeIndex < pageRange.length; ++pageRangeIndex) {\n        yield {\n            start: pageRange[pageRangeIndex].start,\n            end: pageRange[pageRangeIndex].end,\n            isClear: false,\n        };\n    }\n    for (; clearRangeIndex < clearRange.length; ++clearRangeIndex) {\n        yield {\n            start: clearRange[clearRangeIndex].start,\n            end: clearRange[clearRangeIndex].end,\n            isClear: true,\n        };\n    }\n}\n/**\n * Escape the blobName but keep path separator ('/').\n */\nfunction EscapePath(blobName) {\n    const split = blobName.split(\"/\");\n    for (let i = 0; i < split.length; i++) {\n        split[i] = encodeURIComponent(split[i]);\n    }\n    return split.join(\"/\");\n}\n/**\n * A typesafe helper for ensuring that a given response object has\n * the original _response attached.\n * @param response - A response object from calling a client operation\n * @returns The same object, but with known _response property\n */\nfunction assertResponse(response) {\n    if (`_response` in response) {\n        return response;\n    }\n    throw new TypeError(`Unexpected response object ${response}`);\n}\n//# sourceMappingURL=utils.common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.node.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.node.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fsCreateReadStream: () => (/* binding */ fsCreateReadStream),\n/* harmony export */   fsStat: () => (/* binding */ fsStat),\n/* harmony export */   readStreamToLocalFile: () => (/* binding */ readStreamToLocalFile),\n/* harmony export */   streamToBuffer: () => (/* binding */ streamToBuffer),\n/* harmony export */   streamToBuffer2: () => (/* binding */ streamToBuffer2),\n/* harmony export */   streamToBuffer3: () => (/* binding */ streamToBuffer3)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n/**\n * Reads a readable stream into buffer. Fill the buffer from offset to end.\n *\n * @param stream - A Node.js Readable stream\n * @param buffer - Buffer to be filled, length must greater than or equal to offset\n * @param offset - From which position in the buffer to be filled, inclusive\n * @param end - To which position in the buffer to be filled, exclusive\n * @param encoding - Encoding of the Readable stream\n */\nasync function streamToBuffer(stream, buffer, offset, end, encoding) {\n    let pos = 0; // Position in stream\n    const count = end - offset; // Total amount of data needed in stream\n    return new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => reject(new Error(`The operation cannot be completed in timeout.`)), _constants__WEBPACK_IMPORTED_MODULE_2__.REQUEST_TIMEOUT);\n        stream.on(\"readable\", () => {\n            if (pos >= count) {\n                clearTimeout(timeout);\n                resolve();\n                return;\n            }\n            let chunk = stream.read();\n            if (!chunk) {\n                return;\n            }\n            if (typeof chunk === \"string\") {\n                chunk = Buffer.from(chunk, encoding);\n            }\n            // How much data needed in this chunk\n            const chunkLength = pos + chunk.length > count ? count - pos : chunk.length;\n            buffer.fill(chunk.slice(0, chunkLength), offset + pos, offset + pos + chunkLength);\n            pos += chunkLength;\n        });\n        stream.on(\"end\", () => {\n            clearTimeout(timeout);\n            if (pos < count) {\n                reject(new Error(`Stream drains before getting enough data needed. Data read: ${pos}, data need: ${count}`));\n            }\n            resolve();\n        });\n        stream.on(\"error\", (msg) => {\n            clearTimeout(timeout);\n            reject(msg);\n        });\n    });\n}\n/**\n * Reads a readable stream into buffer entirely.\n *\n * @param stream - A Node.js Readable stream\n * @param buffer - Buffer to be filled, length must greater than or equal to offset\n * @param encoding - Encoding of the Readable stream\n * @returns with the count of bytes read.\n * @throws `RangeError` If buffer size is not big enough.\n */\nasync function streamToBuffer2(stream, buffer, encoding) {\n    let pos = 0; // Position in stream\n    const bufferSize = buffer.length;\n    return new Promise((resolve, reject) => {\n        stream.on(\"readable\", () => {\n            let chunk = stream.read();\n            if (!chunk) {\n                return;\n            }\n            if (typeof chunk === \"string\") {\n                chunk = Buffer.from(chunk, encoding);\n            }\n            if (pos + chunk.length > bufferSize) {\n                reject(new Error(`Stream exceeds buffer size. Buffer size: ${bufferSize}`));\n                return;\n            }\n            buffer.fill(chunk, pos, pos + chunk.length);\n            pos += chunk.length;\n        });\n        stream.on(\"end\", () => {\n            resolve(pos);\n        });\n        stream.on(\"error\", reject);\n    });\n}\n/**\n * Reads a readable stream into a buffer.\n *\n * @param stream - A Node.js Readable stream\n * @param encoding - Encoding of the Readable stream\n * @returns with the count of bytes read.\n */\nasync function streamToBuffer3(readableStream, encoding) {\n    return new Promise((resolve, reject) => {\n        const chunks = [];\n        readableStream.on(\"data\", (data) => {\n            chunks.push(data instanceof Buffer ? data : Buffer.from(data, encoding));\n        });\n        readableStream.on(\"end\", () => {\n            resolve(Buffer.concat(chunks));\n        });\n        readableStream.on(\"error\", reject);\n    });\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Writes the content of a readstream to a local file. Returns a Promise which is completed after the file handle is closed.\n *\n * @param rs - The read stream.\n * @param file - Destination file path.\n */\nasync function readStreamToLocalFile(rs, file) {\n    return new Promise((resolve, reject) => {\n        const ws = fs__WEBPACK_IMPORTED_MODULE_0__.createWriteStream(file);\n        rs.on(\"error\", (err) => {\n            reject(err);\n        });\n        ws.on(\"error\", (err) => {\n            reject(err);\n        });\n        ws.on(\"close\", resolve);\n        rs.pipe(ws);\n    });\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Promisified version of fs.stat().\n */\nconst fsStat = util__WEBPACK_IMPORTED_MODULE_1__.promisify(fs__WEBPACK_IMPORTED_MODULE_0__.stat);\nconst fsCreateReadStream = fs__WEBPACK_IMPORTED_MODULE_0__.createReadStream;\n//# sourceMappingURL=utils.node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3V0aWxzL3V0aWxzLm5vZGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ3lCO0FBQ0k7QUFDaUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxpQkFBaUI7QUFDakIsZ0NBQWdDO0FBQ2hDO0FBQ0EsNkdBQTZHLHVEQUFlO0FBQzVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZ0dBQWdHLElBQUksZUFBZSxNQUFNO0FBQ3pIO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkUsV0FBVztBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG1CQUFtQixpREFBb0I7QUFDdkM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sZUFBZSwyQ0FBYyxDQUFDLG9DQUFPO0FBQ3JDLDJCQUEyQixnREFBbUI7QUFDckQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvdXRpbHMvdXRpbHMubm9kZS5qcz8yOGFkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gXCJ1dGlsXCI7XG5pbXBvcnQgeyBSRVFVRVNUX1RJTUVPVVQgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbi8qKlxuICogUmVhZHMgYSByZWFkYWJsZSBzdHJlYW0gaW50byBidWZmZXIuIEZpbGwgdGhlIGJ1ZmZlciBmcm9tIG9mZnNldCB0byBlbmQuXG4gKlxuICogQHBhcmFtIHN0cmVhbSAtIEEgTm9kZS5qcyBSZWFkYWJsZSBzdHJlYW1cbiAqIEBwYXJhbSBidWZmZXIgLSBCdWZmZXIgdG8gYmUgZmlsbGVkLCBsZW5ndGggbXVzdCBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gb2Zmc2V0XG4gKiBAcGFyYW0gb2Zmc2V0IC0gRnJvbSB3aGljaCBwb3NpdGlvbiBpbiB0aGUgYnVmZmVyIHRvIGJlIGZpbGxlZCwgaW5jbHVzaXZlXG4gKiBAcGFyYW0gZW5kIC0gVG8gd2hpY2ggcG9zaXRpb24gaW4gdGhlIGJ1ZmZlciB0byBiZSBmaWxsZWQsIGV4Y2x1c2l2ZVxuICogQHBhcmFtIGVuY29kaW5nIC0gRW5jb2Rpbmcgb2YgdGhlIFJlYWRhYmxlIHN0cmVhbVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RyZWFtVG9CdWZmZXIoc3RyZWFtLCBidWZmZXIsIG9mZnNldCwgZW5kLCBlbmNvZGluZykge1xuICAgIGxldCBwb3MgPSAwOyAvLyBQb3NpdGlvbiBpbiBzdHJlYW1cbiAgICBjb25zdCBjb3VudCA9IGVuZCAtIG9mZnNldDsgLy8gVG90YWwgYW1vdW50IG9mIGRhdGEgbmVlZGVkIGluIHN0cmVhbVxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHJlamVjdChuZXcgRXJyb3IoYFRoZSBvcGVyYXRpb24gY2Fubm90IGJlIGNvbXBsZXRlZCBpbiB0aW1lb3V0LmApKSwgUkVRVUVTVF9USU1FT1VUKTtcbiAgICAgICAgc3RyZWFtLm9uKFwicmVhZGFibGVcIiwgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBvcyA+PSBjb3VudCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNodW5rID0gc3RyZWFtLnJlYWQoKTtcbiAgICAgICAgICAgIGlmICghY2h1bmspIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSG93IG11Y2ggZGF0YSBuZWVkZWQgaW4gdGhpcyBjaHVua1xuICAgICAgICAgICAgY29uc3QgY2h1bmtMZW5ndGggPSBwb3MgKyBjaHVuay5sZW5ndGggPiBjb3VudCA/IGNvdW50IC0gcG9zIDogY2h1bmsubGVuZ3RoO1xuICAgICAgICAgICAgYnVmZmVyLmZpbGwoY2h1bmsuc2xpY2UoMCwgY2h1bmtMZW5ndGgpLCBvZmZzZXQgKyBwb3MsIG9mZnNldCArIHBvcyArIGNodW5rTGVuZ3RoKTtcbiAgICAgICAgICAgIHBvcyArPSBjaHVua0xlbmd0aDtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0cmVhbS5vbihcImVuZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICBpZiAocG9zIDwgY291bnQpIHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBTdHJlYW0gZHJhaW5zIGJlZm9yZSBnZXR0aW5nIGVub3VnaCBkYXRhIG5lZWRlZC4gRGF0YSByZWFkOiAke3Bvc30sIGRhdGEgbmVlZDogJHtjb3VudH1gKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBzdHJlYW0ub24oXCJlcnJvclwiLCAobXNnKSA9PiB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICByZWplY3QobXNnKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vKipcbiAqIFJlYWRzIGEgcmVhZGFibGUgc3RyZWFtIGludG8gYnVmZmVyIGVudGlyZWx5LlxuICpcbiAqIEBwYXJhbSBzdHJlYW0gLSBBIE5vZGUuanMgUmVhZGFibGUgc3RyZWFtXG4gKiBAcGFyYW0gYnVmZmVyIC0gQnVmZmVyIHRvIGJlIGZpbGxlZCwgbGVuZ3RoIG11c3QgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIG9mZnNldFxuICogQHBhcmFtIGVuY29kaW5nIC0gRW5jb2Rpbmcgb2YgdGhlIFJlYWRhYmxlIHN0cmVhbVxuICogQHJldHVybnMgd2l0aCB0aGUgY291bnQgb2YgYnl0ZXMgcmVhZC5cbiAqIEB0aHJvd3MgYFJhbmdlRXJyb3JgIElmIGJ1ZmZlciBzaXplIGlzIG5vdCBiaWcgZW5vdWdoLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RyZWFtVG9CdWZmZXIyKHN0cmVhbSwgYnVmZmVyLCBlbmNvZGluZykge1xuICAgIGxldCBwb3MgPSAwOyAvLyBQb3NpdGlvbiBpbiBzdHJlYW1cbiAgICBjb25zdCBidWZmZXJTaXplID0gYnVmZmVyLmxlbmd0aDtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBzdHJlYW0ub24oXCJyZWFkYWJsZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgY2h1bmsgPSBzdHJlYW0ucmVhZCgpO1xuICAgICAgICAgICAgaWYgKCFjaHVuaykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2h1bmsgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocG9zICsgY2h1bmsubGVuZ3RoID4gYnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFN0cmVhbSBleGNlZWRzIGJ1ZmZlciBzaXplLiBCdWZmZXIgc2l6ZTogJHtidWZmZXJTaXplfWApKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIuZmlsbChjaHVuaywgcG9zLCBwb3MgKyBjaHVuay5sZW5ndGgpO1xuICAgICAgICAgICAgcG9zICs9IGNodW5rLmxlbmd0aDtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0cmVhbS5vbihcImVuZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHBvcyk7XG4gICAgICAgIH0pO1xuICAgICAgICBzdHJlYW0ub24oXCJlcnJvclwiLCByZWplY3QpO1xuICAgIH0pO1xufVxuLyoqXG4gKiBSZWFkcyBhIHJlYWRhYmxlIHN0cmVhbSBpbnRvIGEgYnVmZmVyLlxuICpcbiAqIEBwYXJhbSBzdHJlYW0gLSBBIE5vZGUuanMgUmVhZGFibGUgc3RyZWFtXG4gKiBAcGFyYW0gZW5jb2RpbmcgLSBFbmNvZGluZyBvZiB0aGUgUmVhZGFibGUgc3RyZWFtXG4gKiBAcmV0dXJucyB3aXRoIHRoZSBjb3VudCBvZiBieXRlcyByZWFkLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RyZWFtVG9CdWZmZXIzKHJlYWRhYmxlU3RyZWFtLCBlbmNvZGluZykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgICAgICByZWFkYWJsZVN0cmVhbS5vbihcImRhdGFcIiwgKGRhdGEpID0+IHtcbiAgICAgICAgICAgIGNodW5rcy5wdXNoKGRhdGEgaW5zdGFuY2VvZiBCdWZmZXIgPyBkYXRhIDogQnVmZmVyLmZyb20oZGF0YSwgZW5jb2RpbmcpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlYWRhYmxlU3RyZWFtLm9uKFwiZW5kXCIsICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoQnVmZmVyLmNvbmNhdChjaHVua3MpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlYWRhYmxlU3RyZWFtLm9uKFwiZXJyb3JcIiwgcmVqZWN0KTtcbiAgICB9KTtcbn1cbi8qKlxuICogT05MWSBBVkFJTEFCTEUgSU4gTk9ERS5KUyBSVU5USU1FLlxuICpcbiAqIFdyaXRlcyB0aGUgY29udGVudCBvZiBhIHJlYWRzdHJlYW0gdG8gYSBsb2NhbCBmaWxlLiBSZXR1cm5zIGEgUHJvbWlzZSB3aGljaCBpcyBjb21wbGV0ZWQgYWZ0ZXIgdGhlIGZpbGUgaGFuZGxlIGlzIGNsb3NlZC5cbiAqXG4gKiBAcGFyYW0gcnMgLSBUaGUgcmVhZCBzdHJlYW0uXG4gKiBAcGFyYW0gZmlsZSAtIERlc3RpbmF0aW9uIGZpbGUgcGF0aC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlYWRTdHJlYW1Ub0xvY2FsRmlsZShycywgZmlsZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHdzID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0oZmlsZSk7XG4gICAgICAgIHJzLm9uKFwiZXJyb3JcIiwgKGVycikgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICB3cy5vbihcImVycm9yXCIsIChlcnIpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICAgICAgd3Mub24oXCJjbG9zZVwiLCByZXNvbHZlKTtcbiAgICAgICAgcnMucGlwZSh3cyk7XG4gICAgfSk7XG59XG4vKipcbiAqIE9OTFkgQVZBSUxBQkxFIElOIE5PREUuSlMgUlVOVElNRS5cbiAqXG4gKiBQcm9taXNpZmllZCB2ZXJzaW9uIG9mIGZzLnN0YXQoKS5cbiAqL1xuZXhwb3J0IGNvbnN0IGZzU3RhdCA9IHV0aWwucHJvbWlzaWZ5KGZzLnN0YXQpO1xuZXhwb3J0IGNvbnN0IGZzQ3JlYXRlUmVhZFN0cmVhbSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5ub2RlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BufferScheduler: () => (/* binding */ BufferScheduler)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _PooledBuffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PooledBuffer */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/PooledBuffer.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * This class accepts a Node.js Readable stream as input, and keeps reading data\n * from the stream into the internal buffer structure, until it reaches maxBuffers.\n * Every available buffer will try to trigger outgoingHandler.\n *\n * The internal buffer structure includes an incoming buffer array, and a outgoing\n * buffer array. The incoming buffer array includes the \"empty\" buffers can be filled\n * with new incoming data. The outgoing array includes the filled buffers to be\n * handled by outgoingHandler. Every above buffer size is defined by parameter bufferSize.\n *\n * NUM_OF_ALL_BUFFERS = BUFFERS_IN_INCOMING + BUFFERS_IN_OUTGOING + BUFFERS_UNDER_HANDLING\n *\n * NUM_OF_ALL_BUFFERS lesser than or equal to maxBuffers\n *\n * PERFORMANCE IMPROVEMENT TIPS:\n * 1. Input stream highWaterMark is better to set a same value with bufferSize\n *    parameter, which will avoid Buffer.concat() operations.\n * 2. concurrency should set a smaller value than maxBuffers, which is helpful to\n *    reduce the possibility when a outgoing handler waits for the stream data.\n *    in this situation, outgoing handlers are blocked.\n *    Outgoing queue shouldn't be empty.\n */\nclass BufferScheduler {\n    /**\n     * Creates an instance of BufferScheduler.\n     *\n     * @param readable - A Node.js Readable stream\n     * @param bufferSize - Buffer size of every maintained buffer\n     * @param maxBuffers - How many buffers can be allocated\n     * @param outgoingHandler - An async function scheduled to be\n     *                                          triggered when a buffer fully filled\n     *                                          with stream data\n     * @param concurrency - Concurrency of executing outgoingHandlers (>0)\n     * @param encoding - [Optional] Encoding of Readable stream when it's a string stream\n     */\n    constructor(readable, bufferSize, maxBuffers, outgoingHandler, concurrency, encoding) {\n        /**\n         * An internal event emitter.\n         */\n        this.emitter = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();\n        /**\n         * An internal offset marker to track data offset in bytes of next outgoingHandler.\n         */\n        this.offset = 0;\n        /**\n         * An internal marker to track whether stream is end.\n         */\n        this.isStreamEnd = false;\n        /**\n         * An internal marker to track whether stream or outgoingHandler returns error.\n         */\n        this.isError = false;\n        /**\n         * How many handlers are executing.\n         */\n        this.executingOutgoingHandlers = 0;\n        /**\n         * How many buffers have been allocated.\n         */\n        this.numBuffers = 0;\n        /**\n         * Because this class doesn't know how much data every time stream pops, which\n         * is defined by highWaterMarker of the stream. So BufferScheduler will cache\n         * data received from the stream, when data in unresolvedDataArray exceeds the\n         * blockSize defined, it will try to concat a blockSize of buffer, fill into available\n         * buffers from incoming and push to outgoing array.\n         */\n        this.unresolvedDataArray = [];\n        /**\n         * How much data consisted in unresolvedDataArray.\n         */\n        this.unresolvedLength = 0;\n        /**\n         * The array includes all the available buffers can be used to fill data from stream.\n         */\n        this.incoming = [];\n        /**\n         * The array (queue) includes all the buffers filled from stream data.\n         */\n        this.outgoing = [];\n        if (bufferSize <= 0) {\n            throw new RangeError(`bufferSize must be larger than 0, current is ${bufferSize}`);\n        }\n        if (maxBuffers <= 0) {\n            throw new RangeError(`maxBuffers must be larger than 0, current is ${maxBuffers}`);\n        }\n        if (concurrency <= 0) {\n            throw new RangeError(`concurrency must be larger than 0, current is ${concurrency}`);\n        }\n        this.bufferSize = bufferSize;\n        this.maxBuffers = maxBuffers;\n        this.readable = readable;\n        this.outgoingHandler = outgoingHandler;\n        this.concurrency = concurrency;\n        this.encoding = encoding;\n    }\n    /**\n     * Start the scheduler, will return error when stream of any of the outgoingHandlers\n     * returns error.\n     *\n     */\n    async do() {\n        return new Promise((resolve, reject) => {\n            this.readable.on(\"data\", (data) => {\n                data = typeof data === \"string\" ? Buffer.from(data, this.encoding) : data;\n                this.appendUnresolvedData(data);\n                if (!this.resolveData()) {\n                    this.readable.pause();\n                }\n            });\n            this.readable.on(\"error\", (err) => {\n                this.emitter.emit(\"error\", err);\n            });\n            this.readable.on(\"end\", () => {\n                this.isStreamEnd = true;\n                this.emitter.emit(\"checkEnd\");\n            });\n            this.emitter.on(\"error\", (err) => {\n                this.isError = true;\n                this.readable.pause();\n                reject(err);\n            });\n            this.emitter.on(\"checkEnd\", () => {\n                if (this.outgoing.length > 0) {\n                    this.triggerOutgoingHandlers();\n                    return;\n                }\n                if (this.isStreamEnd && this.executingOutgoingHandlers === 0) {\n                    if (this.unresolvedLength > 0 && this.unresolvedLength < this.bufferSize) {\n                        const buffer = this.shiftBufferFromUnresolvedDataArray();\n                        this.outgoingHandler(() => buffer.getReadableStream(), buffer.size, this.offset)\n                            .then(resolve)\n                            .catch(reject);\n                    }\n                    else if (this.unresolvedLength >= this.bufferSize) {\n                        return;\n                    }\n                    else {\n                        resolve();\n                    }\n                }\n            });\n        });\n    }\n    /**\n     * Insert a new data into unresolved array.\n     *\n     * @param data -\n     */\n    appendUnresolvedData(data) {\n        this.unresolvedDataArray.push(data);\n        this.unresolvedLength += data.length;\n    }\n    /**\n     * Try to shift a buffer with size in blockSize. The buffer returned may be less\n     * than blockSize when data in unresolvedDataArray is less than bufferSize.\n     *\n     */\n    shiftBufferFromUnresolvedDataArray(buffer) {\n        if (!buffer) {\n            buffer = new _PooledBuffer__WEBPACK_IMPORTED_MODULE_1__.PooledBuffer(this.bufferSize, this.unresolvedDataArray, this.unresolvedLength);\n        }\n        else {\n            buffer.fill(this.unresolvedDataArray, this.unresolvedLength);\n        }\n        this.unresolvedLength -= buffer.size;\n        return buffer;\n    }\n    /**\n     * Resolve data in unresolvedDataArray. For every buffer with size in blockSize\n     * shifted, it will try to get (or allocate a buffer) from incoming, and fill it,\n     * then push it into outgoing to be handled by outgoing handler.\n     *\n     * Return false when available buffers in incoming are not enough, else true.\n     *\n     * @returns Return false when buffers in incoming are not enough, else true.\n     */\n    resolveData() {\n        while (this.unresolvedLength >= this.bufferSize) {\n            let buffer;\n            if (this.incoming.length > 0) {\n                buffer = this.incoming.shift();\n                this.shiftBufferFromUnresolvedDataArray(buffer);\n            }\n            else {\n                if (this.numBuffers < this.maxBuffers) {\n                    buffer = this.shiftBufferFromUnresolvedDataArray();\n                    this.numBuffers++;\n                }\n                else {\n                    // No available buffer, wait for buffer returned\n                    return false;\n                }\n            }\n            this.outgoing.push(buffer);\n            this.triggerOutgoingHandlers();\n        }\n        return true;\n    }\n    /**\n     * Try to trigger a outgoing handler for every buffer in outgoing. Stop when\n     * concurrency reaches.\n     */\n    async triggerOutgoingHandlers() {\n        let buffer;\n        do {\n            if (this.executingOutgoingHandlers >= this.concurrency) {\n                return;\n            }\n            buffer = this.outgoing.shift();\n            if (buffer) {\n                this.triggerOutgoingHandler(buffer);\n            }\n        } while (buffer);\n    }\n    /**\n     * Trigger a outgoing handler for a buffer shifted from outgoing.\n     *\n     * @param buffer -\n     */\n    async triggerOutgoingHandler(buffer) {\n        const bufferLength = buffer.size;\n        this.executingOutgoingHandlers++;\n        this.offset += bufferLength;\n        try {\n            await this.outgoingHandler(() => buffer.getReadableStream(), bufferLength, this.offset - bufferLength);\n        }\n        catch (err) {\n            this.emitter.emit(\"error\", err);\n            return;\n        }\n        this.executingOutgoingHandlers--;\n        this.reuseBuffer(buffer);\n        this.emitter.emit(\"checkEnd\");\n    }\n    /**\n     * Return buffer used by outgoing handler into incoming.\n     *\n     * @param buffer -\n     */\n    reuseBuffer(buffer) {\n        this.incoming.push(buffer);\n        if (!this.isError && this.resolveData() && !this.isStreamEnd) {\n            this.readable.resume();\n        }\n    }\n}\n//# sourceMappingURL=BufferScheduler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BuffersStream.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BuffersStream.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BuffersStream: () => (/* binding */ BuffersStream)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_0__);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This class generates a readable stream from the data in an array of buffers.\n */\nclass BuffersStream extends stream__WEBPACK_IMPORTED_MODULE_0__.Readable {\n    /**\n     * Creates an instance of BuffersStream that will emit the data\n     * contained in the array of buffers.\n     *\n     * @param buffers - Array of buffers containing the data\n     * @param byteLength - The total length of data contained in the buffers\n     */\n    constructor(buffers, byteLength, options) {\n        super(options);\n        this.buffers = buffers;\n        this.byteLength = byteLength;\n        this.byteOffsetInCurrentBuffer = 0;\n        this.bufferIndex = 0;\n        this.pushedBytesLength = 0;\n        // check byteLength is no larger than buffers[] total length\n        let buffersLength = 0;\n        for (const buf of this.buffers) {\n            buffersLength += buf.byteLength;\n        }\n        if (buffersLength < this.byteLength) {\n            throw new Error(\"Data size shouldn't be larger than the total length of buffers.\");\n        }\n    }\n    /**\n     * Internal _read() that will be called when the stream wants to pull more data in.\n     *\n     * @param size - Optional. The size of data to be read\n     */\n    _read(size) {\n        if (this.pushedBytesLength >= this.byteLength) {\n            this.push(null);\n        }\n        if (!size) {\n            size = this.readableHighWaterMark;\n        }\n        const outBuffers = [];\n        let i = 0;\n        while (i < size && this.pushedBytesLength < this.byteLength) {\n            // The last buffer may be longer than the data it contains.\n            const remainingDataInAllBuffers = this.byteLength - this.pushedBytesLength;\n            const remainingCapacityInThisBuffer = this.buffers[this.bufferIndex].byteLength - this.byteOffsetInCurrentBuffer;\n            const remaining = Math.min(remainingCapacityInThisBuffer, remainingDataInAllBuffers);\n            if (remaining > size - i) {\n                // chunkSize = size - i\n                const end = this.byteOffsetInCurrentBuffer + size - i;\n                outBuffers.push(this.buffers[this.bufferIndex].slice(this.byteOffsetInCurrentBuffer, end));\n                this.pushedBytesLength += size - i;\n                this.byteOffsetInCurrentBuffer = end;\n                i = size;\n                break;\n            }\n            else {\n                // chunkSize = remaining\n                const end = this.byteOffsetInCurrentBuffer + remaining;\n                outBuffers.push(this.buffers[this.bufferIndex].slice(this.byteOffsetInCurrentBuffer, end));\n                if (remaining === remainingCapacityInThisBuffer) {\n                    // this.buffers[this.bufferIndex] used up, shift to next one\n                    this.byteOffsetInCurrentBuffer = 0;\n                    this.bufferIndex++;\n                }\n                else {\n                    this.byteOffsetInCurrentBuffer = end;\n                }\n                this.pushedBytesLength += remaining;\n                i += remaining;\n            }\n        }\n        if (outBuffers.length > 1) {\n            this.push(Buffer.concat(outBuffers));\n        }\n        else if (outBuffers.length === 1) {\n            this.push(outBuffers[0]);\n        }\n    }\n}\n//# sourceMappingURL=BuffersStream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWNvbW1vbi9zcmMvQnVmZmVyc1N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ2tDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNPLDRCQUE0Qiw0Q0FBUTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1jb21tb24vc3JjL0J1ZmZlcnNTdHJlYW0uanM/NTM3MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IFJlYWRhYmxlIH0gZnJvbSBcInN0cmVhbVwiO1xuLyoqXG4gKiBUaGlzIGNsYXNzIGdlbmVyYXRlcyBhIHJlYWRhYmxlIHN0cmVhbSBmcm9tIHRoZSBkYXRhIGluIGFuIGFycmF5IG9mIGJ1ZmZlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBCdWZmZXJzU3RyZWFtIGV4dGVuZHMgUmVhZGFibGUge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQnVmZmVyc1N0cmVhbSB0aGF0IHdpbGwgZW1pdCB0aGUgZGF0YVxuICAgICAqIGNvbnRhaW5lZCBpbiB0aGUgYXJyYXkgb2YgYnVmZmVycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBidWZmZXJzIC0gQXJyYXkgb2YgYnVmZmVycyBjb250YWluaW5nIHRoZSBkYXRhXG4gICAgICogQHBhcmFtIGJ5dGVMZW5ndGggLSBUaGUgdG90YWwgbGVuZ3RoIG9mIGRhdGEgY29udGFpbmVkIGluIHRoZSBidWZmZXJzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYnVmZmVycywgYnl0ZUxlbmd0aCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5idWZmZXJzID0gYnVmZmVycztcbiAgICAgICAgdGhpcy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aDtcbiAgICAgICAgdGhpcy5ieXRlT2Zmc2V0SW5DdXJyZW50QnVmZmVyID0gMDtcbiAgICAgICAgdGhpcy5idWZmZXJJbmRleCA9IDA7XG4gICAgICAgIHRoaXMucHVzaGVkQnl0ZXNMZW5ndGggPSAwO1xuICAgICAgICAvLyBjaGVjayBieXRlTGVuZ3RoIGlzIG5vIGxhcmdlciB0aGFuIGJ1ZmZlcnNbXSB0b3RhbCBsZW5ndGhcbiAgICAgICAgbGV0IGJ1ZmZlcnNMZW5ndGggPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1ZiBvZiB0aGlzLmJ1ZmZlcnMpIHtcbiAgICAgICAgICAgIGJ1ZmZlcnNMZW5ndGggKz0gYnVmLmJ5dGVMZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ1ZmZlcnNMZW5ndGggPCB0aGlzLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRhdGEgc2l6ZSBzaG91bGRuJ3QgYmUgbGFyZ2VyIHRoYW4gdGhlIHRvdGFsIGxlbmd0aCBvZiBidWZmZXJzLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBfcmVhZCgpIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgc3RyZWFtIHdhbnRzIHRvIHB1bGwgbW9yZSBkYXRhIGluLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNpemUgLSBPcHRpb25hbC4gVGhlIHNpemUgb2YgZGF0YSB0byBiZSByZWFkXG4gICAgICovXG4gICAgX3JlYWQoc2l6ZSkge1xuICAgICAgICBpZiAodGhpcy5wdXNoZWRCeXRlc0xlbmd0aCA+PSB0aGlzLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNpemUpIHtcbiAgICAgICAgICAgIHNpemUgPSB0aGlzLnJlYWRhYmxlSGlnaFdhdGVyTWFyaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvdXRCdWZmZXJzID0gW107XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzaXplICYmIHRoaXMucHVzaGVkQnl0ZXNMZW5ndGggPCB0aGlzLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIFRoZSBsYXN0IGJ1ZmZlciBtYXkgYmUgbG9uZ2VyIHRoYW4gdGhlIGRhdGEgaXQgY29udGFpbnMuXG4gICAgICAgICAgICBjb25zdCByZW1haW5pbmdEYXRhSW5BbGxCdWZmZXJzID0gdGhpcy5ieXRlTGVuZ3RoIC0gdGhpcy5wdXNoZWRCeXRlc0xlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IHJlbWFpbmluZ0NhcGFjaXR5SW5UaGlzQnVmZmVyID0gdGhpcy5idWZmZXJzW3RoaXMuYnVmZmVySW5kZXhdLmJ5dGVMZW5ndGggLSB0aGlzLmJ5dGVPZmZzZXRJbkN1cnJlbnRCdWZmZXI7XG4gICAgICAgICAgICBjb25zdCByZW1haW5pbmcgPSBNYXRoLm1pbihyZW1haW5pbmdDYXBhY2l0eUluVGhpc0J1ZmZlciwgcmVtYWluaW5nRGF0YUluQWxsQnVmZmVycyk7XG4gICAgICAgICAgICBpZiAocmVtYWluaW5nID4gc2l6ZSAtIGkpIHtcbiAgICAgICAgICAgICAgICAvLyBjaHVua1NpemUgPSBzaXplIC0gaVxuICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9IHRoaXMuYnl0ZU9mZnNldEluQ3VycmVudEJ1ZmZlciArIHNpemUgLSBpO1xuICAgICAgICAgICAgICAgIG91dEJ1ZmZlcnMucHVzaCh0aGlzLmJ1ZmZlcnNbdGhpcy5idWZmZXJJbmRleF0uc2xpY2UodGhpcy5ieXRlT2Zmc2V0SW5DdXJyZW50QnVmZmVyLCBlbmQpKTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2hlZEJ5dGVzTGVuZ3RoICs9IHNpemUgLSBpO1xuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZU9mZnNldEluQ3VycmVudEJ1ZmZlciA9IGVuZDtcbiAgICAgICAgICAgICAgICBpID0gc2l6ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGNodW5rU2l6ZSA9IHJlbWFpbmluZ1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9IHRoaXMuYnl0ZU9mZnNldEluQ3VycmVudEJ1ZmZlciArIHJlbWFpbmluZztcbiAgICAgICAgICAgICAgICBvdXRCdWZmZXJzLnB1c2godGhpcy5idWZmZXJzW3RoaXMuYnVmZmVySW5kZXhdLnNsaWNlKHRoaXMuYnl0ZU9mZnNldEluQ3VycmVudEJ1ZmZlciwgZW5kKSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlbWFpbmluZyA9PT0gcmVtYWluaW5nQ2FwYWNpdHlJblRoaXNCdWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5idWZmZXJzW3RoaXMuYnVmZmVySW5kZXhdIHVzZWQgdXAsIHNoaWZ0IHRvIG5leHQgb25lXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnl0ZU9mZnNldEluQ3VycmVudEJ1ZmZlciA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVySW5kZXgrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnl0ZU9mZnNldEluQ3VycmVudEJ1ZmZlciA9IGVuZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoZWRCeXRlc0xlbmd0aCArPSByZW1haW5pbmc7XG4gICAgICAgICAgICAgICAgaSArPSByZW1haW5pbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG91dEJ1ZmZlcnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdGhpcy5wdXNoKEJ1ZmZlci5jb25jYXQob3V0QnVmZmVycykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG91dEJ1ZmZlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2gob3V0QnVmZmVyc1swXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CdWZmZXJzU3RyZWFtLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BuffersStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/PooledBuffer.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-common/src/PooledBuffer.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PooledBuffer: () => (/* binding */ PooledBuffer)\n/* harmony export */ });\n/* harmony import */ var _BuffersStream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BuffersStream */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BuffersStream.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_0__);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * maxBufferLength is max size of each buffer in the pooled buffers.\n */\n\nconst maxBufferLength = (buffer__WEBPACK_IMPORTED_MODULE_0___default().constants).MAX_LENGTH;\n/**\n * This class provides a buffer container which conceptually has no hard size limit.\n * It accepts a capacity, an array of input buffers and the total length of input data.\n * It will allocate an internal \"buffer\" of the capacity and fill the data in the input buffers\n * into the internal \"buffer\" serially with respect to the total length.\n * Then by calling PooledBuffer.getReadableStream(), you can get a readable stream\n * assembled from all the data in the internal \"buffer\".\n */\nclass PooledBuffer {\n    /**\n     * The size of the data contained in the pooled buffers.\n     */\n    get size() {\n        return this._size;\n    }\n    constructor(capacity, buffers, totalLength) {\n        /**\n         * Internal buffers used to keep the data.\n         * Each buffer has a length of the maxBufferLength except last one.\n         */\n        this.buffers = [];\n        this.capacity = capacity;\n        this._size = 0;\n        // allocate\n        const bufferNum = Math.ceil(capacity / maxBufferLength);\n        for (let i = 0; i < bufferNum; i++) {\n            let len = i === bufferNum - 1 ? capacity % maxBufferLength : maxBufferLength;\n            if (len === 0) {\n                len = maxBufferLength;\n            }\n            this.buffers.push(Buffer.allocUnsafe(len));\n        }\n        if (buffers) {\n            this.fill(buffers, totalLength);\n        }\n    }\n    /**\n     * Fill the internal buffers with data in the input buffers serially\n     * with respect to the total length and the total capacity of the internal buffers.\n     * Data copied will be shift out of the input buffers.\n     *\n     * @param buffers - Input buffers containing the data to be filled in the pooled buffer\n     * @param totalLength - Total length of the data to be filled in.\n     *\n     */\n    fill(buffers, totalLength) {\n        this._size = Math.min(this.capacity, totalLength);\n        let i = 0, j = 0, targetOffset = 0, sourceOffset = 0, totalCopiedNum = 0;\n        while (totalCopiedNum < this._size) {\n            const source = buffers[i];\n            const target = this.buffers[j];\n            const copiedNum = source.copy(target, targetOffset, sourceOffset);\n            totalCopiedNum += copiedNum;\n            sourceOffset += copiedNum;\n            targetOffset += copiedNum;\n            if (sourceOffset === source.length) {\n                i++;\n                sourceOffset = 0;\n            }\n            if (targetOffset === target.length) {\n                j++;\n                targetOffset = 0;\n            }\n        }\n        // clear copied from source buffers\n        buffers.splice(0, i);\n        if (buffers.length > 0) {\n            buffers[0] = buffers[0].slice(sourceOffset);\n        }\n    }\n    /**\n     * Get the readable stream assembled from all the data in the internal buffers.\n     *\n     */\n    getReadableStream() {\n        return new _BuffersStream__WEBPACK_IMPORTED_MODULE_1__.BuffersStream(this.buffers, this.size);\n    }\n}\n//# sourceMappingURL=PooledBuffer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWNvbW1vbi9zcmMvUG9vbGVkQnVmZmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ2dEO0FBQ2hEO0FBQ0E7QUFDQTtBQUM0QjtBQUM1Qix3QkFBd0IseURBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIseURBQWE7QUFDaEM7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWNvbW1vbi9zcmMvUG9vbGVkQnVmZmVyLmpzP2NiMzUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBCdWZmZXJzU3RyZWFtIH0gZnJvbSBcIi4vQnVmZmVyc1N0cmVhbVwiO1xuLyoqXG4gKiBtYXhCdWZmZXJMZW5ndGggaXMgbWF4IHNpemUgb2YgZWFjaCBidWZmZXIgaW4gdGhlIHBvb2xlZCBidWZmZXJzLlxuICovXG5pbXBvcnQgYnVmZmVyIGZyb20gXCJidWZmZXJcIjtcbmNvbnN0IG1heEJ1ZmZlckxlbmd0aCA9IGJ1ZmZlci5jb25zdGFudHMuTUFYX0xFTkdUSDtcbi8qKlxuICogVGhpcyBjbGFzcyBwcm92aWRlcyBhIGJ1ZmZlciBjb250YWluZXIgd2hpY2ggY29uY2VwdHVhbGx5IGhhcyBubyBoYXJkIHNpemUgbGltaXQuXG4gKiBJdCBhY2NlcHRzIGEgY2FwYWNpdHksIGFuIGFycmF5IG9mIGlucHV0IGJ1ZmZlcnMgYW5kIHRoZSB0b3RhbCBsZW5ndGggb2YgaW5wdXQgZGF0YS5cbiAqIEl0IHdpbGwgYWxsb2NhdGUgYW4gaW50ZXJuYWwgXCJidWZmZXJcIiBvZiB0aGUgY2FwYWNpdHkgYW5kIGZpbGwgdGhlIGRhdGEgaW4gdGhlIGlucHV0IGJ1ZmZlcnNcbiAqIGludG8gdGhlIGludGVybmFsIFwiYnVmZmVyXCIgc2VyaWFsbHkgd2l0aCByZXNwZWN0IHRvIHRoZSB0b3RhbCBsZW5ndGguXG4gKiBUaGVuIGJ5IGNhbGxpbmcgUG9vbGVkQnVmZmVyLmdldFJlYWRhYmxlU3RyZWFtKCksIHlvdSBjYW4gZ2V0IGEgcmVhZGFibGUgc3RyZWFtXG4gKiBhc3NlbWJsZWQgZnJvbSBhbGwgdGhlIGRhdGEgaW4gdGhlIGludGVybmFsIFwiYnVmZmVyXCIuXG4gKi9cbmV4cG9ydCBjbGFzcyBQb29sZWRCdWZmZXIge1xuICAgIC8qKlxuICAgICAqIFRoZSBzaXplIG9mIHRoZSBkYXRhIGNvbnRhaW5lZCBpbiB0aGUgcG9vbGVkIGJ1ZmZlcnMuXG4gICAgICovXG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaXplO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihjYXBhY2l0eSwgYnVmZmVycywgdG90YWxMZW5ndGgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEludGVybmFsIGJ1ZmZlcnMgdXNlZCB0byBrZWVwIHRoZSBkYXRhLlxuICAgICAgICAgKiBFYWNoIGJ1ZmZlciBoYXMgYSBsZW5ndGggb2YgdGhlIG1heEJ1ZmZlckxlbmd0aCBleGNlcHQgbGFzdCBvbmUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5jYXBhY2l0eSA9IGNhcGFjaXR5O1xuICAgICAgICB0aGlzLl9zaXplID0gMDtcbiAgICAgICAgLy8gYWxsb2NhdGVcbiAgICAgICAgY29uc3QgYnVmZmVyTnVtID0gTWF0aC5jZWlsKGNhcGFjaXR5IC8gbWF4QnVmZmVyTGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJOdW07IGkrKykge1xuICAgICAgICAgICAgbGV0IGxlbiA9IGkgPT09IGJ1ZmZlck51bSAtIDEgPyBjYXBhY2l0eSAlIG1heEJ1ZmZlckxlbmd0aCA6IG1heEJ1ZmZlckxlbmd0aDtcbiAgICAgICAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgICAgICAgICBsZW4gPSBtYXhCdWZmZXJMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcnMucHVzaChCdWZmZXIuYWxsb2NVbnNhZmUobGVuKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ1ZmZlcnMpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsbChidWZmZXJzLCB0b3RhbExlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlsbCB0aGUgaW50ZXJuYWwgYnVmZmVycyB3aXRoIGRhdGEgaW4gdGhlIGlucHV0IGJ1ZmZlcnMgc2VyaWFsbHlcbiAgICAgKiB3aXRoIHJlc3BlY3QgdG8gdGhlIHRvdGFsIGxlbmd0aCBhbmQgdGhlIHRvdGFsIGNhcGFjaXR5IG9mIHRoZSBpbnRlcm5hbCBidWZmZXJzLlxuICAgICAqIERhdGEgY29waWVkIHdpbGwgYmUgc2hpZnQgb3V0IG9mIHRoZSBpbnB1dCBidWZmZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJ1ZmZlcnMgLSBJbnB1dCBidWZmZXJzIGNvbnRhaW5pbmcgdGhlIGRhdGEgdG8gYmUgZmlsbGVkIGluIHRoZSBwb29sZWQgYnVmZmVyXG4gICAgICogQHBhcmFtIHRvdGFsTGVuZ3RoIC0gVG90YWwgbGVuZ3RoIG9mIHRoZSBkYXRhIHRvIGJlIGZpbGxlZCBpbi5cbiAgICAgKlxuICAgICAqL1xuICAgIGZpbGwoYnVmZmVycywgdG90YWxMZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IE1hdGgubWluKHRoaXMuY2FwYWNpdHksIHRvdGFsTGVuZ3RoKTtcbiAgICAgICAgbGV0IGkgPSAwLCBqID0gMCwgdGFyZ2V0T2Zmc2V0ID0gMCwgc291cmNlT2Zmc2V0ID0gMCwgdG90YWxDb3BpZWROdW0gPSAwO1xuICAgICAgICB3aGlsZSAodG90YWxDb3BpZWROdW0gPCB0aGlzLl9zaXplKSB7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBidWZmZXJzW2ldO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5idWZmZXJzW2pdO1xuICAgICAgICAgICAgY29uc3QgY29waWVkTnVtID0gc291cmNlLmNvcHkodGFyZ2V0LCB0YXJnZXRPZmZzZXQsIHNvdXJjZU9mZnNldCk7XG4gICAgICAgICAgICB0b3RhbENvcGllZE51bSArPSBjb3BpZWROdW07XG4gICAgICAgICAgICBzb3VyY2VPZmZzZXQgKz0gY29waWVkTnVtO1xuICAgICAgICAgICAgdGFyZ2V0T2Zmc2V0ICs9IGNvcGllZE51bTtcbiAgICAgICAgICAgIGlmIChzb3VyY2VPZmZzZXQgPT09IHNvdXJjZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgc291cmNlT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0YXJnZXRPZmZzZXQgPT09IHRhcmdldC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICAgICAgdGFyZ2V0T2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBjbGVhciBjb3BpZWQgZnJvbSBzb3VyY2UgYnVmZmVyc1xuICAgICAgICBidWZmZXJzLnNwbGljZSgwLCBpKTtcbiAgICAgICAgaWYgKGJ1ZmZlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgYnVmZmVyc1swXSA9IGJ1ZmZlcnNbMF0uc2xpY2Uoc291cmNlT2Zmc2V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHJlYWRhYmxlIHN0cmVhbSBhc3NlbWJsZWQgZnJvbSBhbGwgdGhlIGRhdGEgaW4gdGhlIGludGVybmFsIGJ1ZmZlcnMuXG4gICAgICpcbiAgICAgKi9cbiAgICBnZXRSZWFkYWJsZVN0cmVhbSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXJzU3RyZWFtKHRoaXMuYnVmZmVycywgdGhpcy5zaXplKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qb29sZWRCdWZmZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/PooledBuffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroConstants.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroConstants.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AVRO_CODEC_KEY: () => (/* binding */ AVRO_CODEC_KEY),\n/* harmony export */   AVRO_INIT_BYTES: () => (/* binding */ AVRO_INIT_BYTES),\n/* harmony export */   AVRO_SCHEMA_KEY: () => (/* binding */ AVRO_SCHEMA_KEY),\n/* harmony export */   AVRO_SYNC_MARKER_SIZE: () => (/* binding */ AVRO_SYNC_MARKER_SIZE)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst AVRO_SYNC_MARKER_SIZE = 16;\nconst AVRO_INIT_BYTES = new Uint8Array([79, 98, 106, 1]);\nconst AVRO_CODEC_KEY = \"avro.codec\";\nconst AVRO_SCHEMA_KEY = \"avro.schema\";\n//# sourceMappingURL=AvroConstants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWludGVybmFsLWF2cm8vc3JjL0F2cm9Db25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDTztBQUNBO0FBQ0E7QUFDQTtBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWludGVybmFsLWF2cm8vc3JjL0F2cm9Db25zdGFudHMuanM/Y2RmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmV4cG9ydCBjb25zdCBBVlJPX1NZTkNfTUFSS0VSX1NJWkUgPSAxNjtcbmV4cG9ydCBjb25zdCBBVlJPX0lOSVRfQllURVMgPSBuZXcgVWludDhBcnJheShbNzksIDk4LCAxMDYsIDFdKTtcbmV4cG9ydCBjb25zdCBBVlJPX0NPREVDX0tFWSA9IFwiYXZyby5jb2RlY1wiO1xuZXhwb3J0IGNvbnN0IEFWUk9fU0NIRU1BX0tFWSA9IFwiYXZyby5zY2hlbWFcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF2cm9Db25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroConstants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroParser.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroParser.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AvroParser: () => (/* binding */ AvroParser),\n/* harmony export */   AvroType: () => (/* binding */ AvroType)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nclass AvroParser {\n    /**\n     * Reads a fixed number of bytes from the stream.\n     *\n     * @param stream -\n     * @param length -\n     * @param options -\n     */\n    static async readFixedBytes(stream, length, options = {}) {\n        const bytes = await stream.read(length, { abortSignal: options.abortSignal });\n        if (bytes.length !== length) {\n            throw new Error(\"Hit stream end.\");\n        }\n        return bytes;\n    }\n    /**\n     * Reads a single byte from the stream.\n     *\n     * @param stream -\n     * @param options -\n     */\n    static async readByte(stream, options = {}) {\n        const buf = await AvroParser.readFixedBytes(stream, 1, options);\n        return buf[0];\n    }\n    // int and long are stored in variable-length zig-zag coding.\n    // variable-length: https://lucene.apache.org/core/3_5_0/fileformats.html#VInt\n    // zig-zag: https://developers.google.com/protocol-buffers/docs/encoding?csw=1#types\n    static async readZigZagLong(stream, options = {}) {\n        let zigZagEncoded = 0;\n        let significanceInBit = 0;\n        let byte, haveMoreByte, significanceInFloat;\n        do {\n            byte = await AvroParser.readByte(stream, options);\n            haveMoreByte = byte & 0x80;\n            zigZagEncoded |= (byte & 0x7f) << significanceInBit;\n            significanceInBit += 7;\n        } while (haveMoreByte && significanceInBit < 28); // bitwise operation only works for 32-bit integers\n        if (haveMoreByte) {\n            // Switch to float arithmetic\n            // eslint-disable-next-line no-self-assign\n            zigZagEncoded = zigZagEncoded;\n            significanceInFloat = 268435456; // 2 ** 28.\n            do {\n                byte = await AvroParser.readByte(stream, options);\n                zigZagEncoded += (byte & 0x7f) * significanceInFloat;\n                significanceInFloat *= 128; // 2 ** 7\n            } while (byte & 0x80);\n            const res = (zigZagEncoded % 2 ? -(zigZagEncoded + 1) : zigZagEncoded) / 2;\n            if (res < Number.MIN_SAFE_INTEGER || res > Number.MAX_SAFE_INTEGER) {\n                throw new Error(\"Integer overflow.\");\n            }\n            return res;\n        }\n        return (zigZagEncoded >> 1) ^ -(zigZagEncoded & 1);\n    }\n    static async readLong(stream, options = {}) {\n        return AvroParser.readZigZagLong(stream, options);\n    }\n    static async readInt(stream, options = {}) {\n        return AvroParser.readZigZagLong(stream, options);\n    }\n    static async readNull() {\n        return null;\n    }\n    static async readBoolean(stream, options = {}) {\n        const b = await AvroParser.readByte(stream, options);\n        if (b === 1) {\n            return true;\n        }\n        else if (b === 0) {\n            return false;\n        }\n        else {\n            throw new Error(\"Byte was not a boolean.\");\n        }\n    }\n    static async readFloat(stream, options = {}) {\n        const u8arr = await AvroParser.readFixedBytes(stream, 4, options);\n        const view = new DataView(u8arr.buffer, u8arr.byteOffset, u8arr.byteLength);\n        return view.getFloat32(0, true); // littleEndian = true\n    }\n    static async readDouble(stream, options = {}) {\n        const u8arr = await AvroParser.readFixedBytes(stream, 8, options);\n        const view = new DataView(u8arr.buffer, u8arr.byteOffset, u8arr.byteLength);\n        return view.getFloat64(0, true); // littleEndian = true\n    }\n    static async readBytes(stream, options = {}) {\n        const size = await AvroParser.readLong(stream, options);\n        if (size < 0) {\n            throw new Error(\"Bytes size was negative.\");\n        }\n        return stream.read(size, { abortSignal: options.abortSignal });\n    }\n    static async readString(stream, options = {}) {\n        const u8arr = await AvroParser.readBytes(stream, options);\n        const utf8decoder = new TextDecoder();\n        return utf8decoder.decode(u8arr);\n    }\n    static async readMapPair(stream, readItemMethod, options = {}) {\n        const key = await AvroParser.readString(stream, options);\n        // FUTURE: this won't work with readFixed (currently not supported) which needs a length as the parameter.\n        const value = await readItemMethod(stream, options);\n        return { key, value };\n    }\n    static async readMap(stream, readItemMethod, options = {}) {\n        const readPairMethod = (s, opts = {}) => {\n            return AvroParser.readMapPair(s, readItemMethod, opts);\n        };\n        const pairs = await AvroParser.readArray(stream, readPairMethod, options);\n        const dict = {};\n        for (const pair of pairs) {\n            dict[pair.key] = pair.value;\n        }\n        return dict;\n    }\n    static async readArray(stream, readItemMethod, options = {}) {\n        const items = [];\n        for (let count = await AvroParser.readLong(stream, options); count !== 0; count = await AvroParser.readLong(stream, options)) {\n            if (count < 0) {\n                // Ignore block sizes\n                await AvroParser.readLong(stream, options);\n                count = -count;\n            }\n            while (count--) {\n                const item = await readItemMethod(stream, options);\n                items.push(item);\n            }\n        }\n        return items;\n    }\n}\nvar AvroComplex;\n(function (AvroComplex) {\n    AvroComplex[\"RECORD\"] = \"record\";\n    AvroComplex[\"ENUM\"] = \"enum\";\n    AvroComplex[\"ARRAY\"] = \"array\";\n    AvroComplex[\"MAP\"] = \"map\";\n    AvroComplex[\"UNION\"] = \"union\";\n    AvroComplex[\"FIXED\"] = \"fixed\";\n})(AvroComplex || (AvroComplex = {}));\nvar AvroPrimitive;\n(function (AvroPrimitive) {\n    AvroPrimitive[\"NULL\"] = \"null\";\n    AvroPrimitive[\"BOOLEAN\"] = \"boolean\";\n    AvroPrimitive[\"INT\"] = \"int\";\n    AvroPrimitive[\"LONG\"] = \"long\";\n    AvroPrimitive[\"FLOAT\"] = \"float\";\n    AvroPrimitive[\"DOUBLE\"] = \"double\";\n    AvroPrimitive[\"BYTES\"] = \"bytes\";\n    AvroPrimitive[\"STRING\"] = \"string\";\n})(AvroPrimitive || (AvroPrimitive = {}));\nclass AvroType {\n    /**\n     * Determines the AvroType from the Avro Schema.\n     */\n    static fromSchema(schema) {\n        if (typeof schema === \"string\") {\n            return AvroType.fromStringSchema(schema);\n        }\n        else if (Array.isArray(schema)) {\n            return AvroType.fromArraySchema(schema);\n        }\n        else {\n            return AvroType.fromObjectSchema(schema);\n        }\n    }\n    static fromStringSchema(schema) {\n        switch (schema) {\n            case AvroPrimitive.NULL:\n            case AvroPrimitive.BOOLEAN:\n            case AvroPrimitive.INT:\n            case AvroPrimitive.LONG:\n            case AvroPrimitive.FLOAT:\n            case AvroPrimitive.DOUBLE:\n            case AvroPrimitive.BYTES:\n            case AvroPrimitive.STRING:\n                return new AvroPrimitiveType(schema);\n            default:\n                throw new Error(`Unexpected Avro type ${schema}`);\n        }\n    }\n    static fromArraySchema(schema) {\n        return new AvroUnionType(schema.map(AvroType.fromSchema));\n    }\n    static fromObjectSchema(schema) {\n        const type = schema.type;\n        // Primitives can be defined as strings or objects\n        try {\n            return AvroType.fromStringSchema(type);\n        }\n        catch (err) {\n            // eslint-disable-line no-empty\n        }\n        switch (type) {\n            case AvroComplex.RECORD:\n                if (schema.aliases) {\n                    throw new Error(`aliases currently is not supported, schema: ${schema}`);\n                }\n                if (!schema.name) {\n                    throw new Error(`Required attribute 'name' doesn't exist on schema: ${schema}`);\n                }\n                // eslint-disable-next-line no-case-declarations\n                const fields = {};\n                if (!schema.fields) {\n                    throw new Error(`Required attribute 'fields' doesn't exist on schema: ${schema}`);\n                }\n                for (const field of schema.fields) {\n                    fields[field.name] = AvroType.fromSchema(field.type);\n                }\n                return new AvroRecordType(fields, schema.name);\n            case AvroComplex.ENUM:\n                if (schema.aliases) {\n                    throw new Error(`aliases currently is not supported, schema: ${schema}`);\n                }\n                if (!schema.symbols) {\n                    throw new Error(`Required attribute 'symbols' doesn't exist on schema: ${schema}`);\n                }\n                return new AvroEnumType(schema.symbols);\n            case AvroComplex.MAP:\n                if (!schema.values) {\n                    throw new Error(`Required attribute 'values' doesn't exist on schema: ${schema}`);\n                }\n                return new AvroMapType(AvroType.fromSchema(schema.values));\n            case AvroComplex.ARRAY: // Unused today\n            case AvroComplex.FIXED: // Unused today\n            default:\n                throw new Error(`Unexpected Avro type ${type} in ${schema}`);\n        }\n    }\n}\nclass AvroPrimitiveType extends AvroType {\n    constructor(primitive) {\n        super();\n        this._primitive = primitive;\n    }\n    read(stream, options = {}) {\n        switch (this._primitive) {\n            case AvroPrimitive.NULL:\n                return AvroParser.readNull();\n            case AvroPrimitive.BOOLEAN:\n                return AvroParser.readBoolean(stream, options);\n            case AvroPrimitive.INT:\n                return AvroParser.readInt(stream, options);\n            case AvroPrimitive.LONG:\n                return AvroParser.readLong(stream, options);\n            case AvroPrimitive.FLOAT:\n                return AvroParser.readFloat(stream, options);\n            case AvroPrimitive.DOUBLE:\n                return AvroParser.readDouble(stream, options);\n            case AvroPrimitive.BYTES:\n                return AvroParser.readBytes(stream, options);\n            case AvroPrimitive.STRING:\n                return AvroParser.readString(stream, options);\n            default:\n                throw new Error(\"Unknown Avro Primitive\");\n        }\n    }\n}\nclass AvroEnumType extends AvroType {\n    constructor(symbols) {\n        super();\n        this._symbols = symbols;\n    }\n    async read(stream, options = {}) {\n        const value = await AvroParser.readInt(stream, options);\n        return this._symbols[value];\n    }\n}\nclass AvroUnionType extends AvroType {\n    constructor(types) {\n        super();\n        this._types = types;\n    }\n    async read(stream, options = {}) {\n        // eslint-disable-line @typescript-eslint/ban-types\n        const typeIndex = await AvroParser.readInt(stream, options);\n        return this._types[typeIndex].read(stream, options);\n    }\n}\nclass AvroMapType extends AvroType {\n    constructor(itemType) {\n        super();\n        this._itemType = itemType;\n    }\n    read(stream, options = {}) {\n        const readItemMethod = (s, opts) => {\n            return this._itemType.read(s, opts);\n        };\n        return AvroParser.readMap(stream, readItemMethod, options);\n    }\n}\nclass AvroRecordType extends AvroType {\n    constructor(fields, name) {\n        super();\n        this._fields = fields;\n        this._name = name;\n    }\n    async read(stream, options = {}) {\n        const record = {};\n        record[\"$schema\"] = this._name;\n        for (const key in this._fields) {\n            if (Object.prototype.hasOwnProperty.call(this._fields, key)) {\n                record[key] = await this._fields[key].read(stream, options);\n            }\n        }\n        return record;\n    }\n}\n//# sourceMappingURL=AvroParser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadable.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadable.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AvroReadable: () => (/* binding */ AvroReadable)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nclass AvroReadable {\n}\n//# sourceMappingURL=AvroReadable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWludGVybmFsLWF2cm8vc3JjL0F2cm9SZWFkYWJsZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1pbnRlcm5hbC1hdnJvL3NyYy9BdnJvUmVhZGFibGUuanM/NGFiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmV4cG9ydCBjbGFzcyBBdnJvUmVhZGFibGUge1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXZyb1JlYWRhYmxlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadable.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadableFromStream.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadableFromStream.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AvroReadableFromStream: () => (/* binding */ AvroReadableFromStream)\n/* harmony export */ });\n/* harmony import */ var _AvroReadable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AvroReadable */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadable.js\");\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/abort-controller/dist-esm/src/AbortController.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\nconst ABORT_ERROR = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__.AbortError(\"Reading from the avro stream was aborted.\");\nclass AvroReadableFromStream extends _AvroReadable__WEBPACK_IMPORTED_MODULE_1__.AvroReadable {\n    toUint8Array(data) {\n        if (typeof data === \"string\") {\n            return Buffer.from(data);\n        }\n        return data;\n    }\n    constructor(readable) {\n        super();\n        this._readable = readable;\n        this._position = 0;\n    }\n    get position() {\n        return this._position;\n    }\n    async read(size, options = {}) {\n        var _a;\n        if ((_a = options.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted) {\n            throw ABORT_ERROR;\n        }\n        if (size < 0) {\n            throw new Error(`size parameter should be positive: ${size}`);\n        }\n        if (size === 0) {\n            return new Uint8Array();\n        }\n        if (!this._readable.readable) {\n            throw new Error(\"Stream no longer readable.\");\n        }\n        // See if there is already enough data.\n        const chunk = this._readable.read(size);\n        if (chunk) {\n            this._position += chunk.length;\n            // chunk.length maybe less than desired size if the stream ends.\n            return this.toUint8Array(chunk);\n        }\n        else {\n            // register callback to wait for enough data to read\n            return new Promise((resolve, reject) => {\n                /* eslint-disable @typescript-eslint/no-use-before-define */\n                const cleanUp = () => {\n                    this._readable.removeListener(\"readable\", readableCallback);\n                    this._readable.removeListener(\"error\", rejectCallback);\n                    this._readable.removeListener(\"end\", rejectCallback);\n                    this._readable.removeListener(\"close\", rejectCallback);\n                    if (options.abortSignal) {\n                        options.abortSignal.removeEventListener(\"abort\", abortHandler);\n                    }\n                };\n                const readableCallback = () => {\n                    const callbackChunk = this._readable.read(size);\n                    if (callbackChunk) {\n                        this._position += callbackChunk.length;\n                        cleanUp();\n                        // callbackChunk.length maybe less than desired size if the stream ends.\n                        resolve(this.toUint8Array(callbackChunk));\n                    }\n                };\n                const rejectCallback = () => {\n                    cleanUp();\n                    reject();\n                };\n                const abortHandler = () => {\n                    cleanUp();\n                    reject(ABORT_ERROR);\n                };\n                this._readable.on(\"readable\", readableCallback);\n                this._readable.once(\"error\", rejectCallback);\n                this._readable.once(\"end\", rejectCallback);\n                this._readable.once(\"close\", rejectCallback);\n                if (options.abortSignal) {\n                    options.abortSignal.addEventListener(\"abort\", abortHandler);\n                }\n                /* eslint-enable @typescript-eslint/no-use-before-define */\n            });\n        }\n    }\n}\n//# sourceMappingURL=AvroReadableFromStream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWludGVybmFsLWF2cm8vc3JjL0F2cm9SZWFkYWJsZUZyb21TdHJlYW0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUM4QztBQUNPO0FBQ3JELHdCQUF3QiwrREFBVTtBQUMzQixxQ0FBcUMsdURBQVk7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLEtBQUs7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtaW50ZXJuYWwtYXZyby9zcmMvQXZyb1JlYWRhYmxlRnJvbVN0cmVhbS5qcz85ZmE0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgQXZyb1JlYWRhYmxlIH0gZnJvbSBcIi4vQXZyb1JlYWRhYmxlXCI7XG5pbXBvcnQgeyBBYm9ydEVycm9yIH0gZnJvbSBcIkBhenVyZS9hYm9ydC1jb250cm9sbGVyXCI7XG5jb25zdCBBQk9SVF9FUlJPUiA9IG5ldyBBYm9ydEVycm9yKFwiUmVhZGluZyBmcm9tIHRoZSBhdnJvIHN0cmVhbSB3YXMgYWJvcnRlZC5cIik7XG5leHBvcnQgY2xhc3MgQXZyb1JlYWRhYmxlRnJvbVN0cmVhbSBleHRlbmRzIEF2cm9SZWFkYWJsZSB7XG4gICAgdG9VaW50OEFycmF5KGRhdGEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHJlYWRhYmxlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX3JlYWRhYmxlID0gcmVhZGFibGU7XG4gICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gMDtcbiAgICB9XG4gICAgZ2V0IHBvc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9zaXRpb247XG4gICAgfVxuICAgIGFzeW5jIHJlYWQoc2l6ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKChfYSA9IG9wdGlvbnMuYWJvcnRTaWduYWwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hYm9ydGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBBQk9SVF9FUlJPUjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2l6ZSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgc2l6ZSBwYXJhbWV0ZXIgc2hvdWxkIGJlIHBvc2l0aXZlOiAke3NpemV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNpemUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fcmVhZGFibGUucmVhZGFibGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN0cmVhbSBubyBsb25nZXIgcmVhZGFibGUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNlZSBpZiB0aGVyZSBpcyBhbHJlYWR5IGVub3VnaCBkYXRhLlxuICAgICAgICBjb25zdCBjaHVuayA9IHRoaXMuX3JlYWRhYmxlLnJlYWQoc2l6ZSk7XG4gICAgICAgIGlmIChjaHVuaykge1xuICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24gKz0gY2h1bmsubGVuZ3RoO1xuICAgICAgICAgICAgLy8gY2h1bmsubGVuZ3RoIG1heWJlIGxlc3MgdGhhbiBkZXNpcmVkIHNpemUgaWYgdGhlIHN0cmVhbSBlbmRzLlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9VaW50OEFycmF5KGNodW5rKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHJlZ2lzdGVyIGNhbGxiYWNrIHRvIHdhaXQgZm9yIGVub3VnaCBkYXRhIHRvIHJlYWRcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lICovXG4gICAgICAgICAgICAgICAgY29uc3QgY2xlYW5VcCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZGFibGUucmVtb3ZlTGlzdGVuZXIoXCJyZWFkYWJsZVwiLCByZWFkYWJsZUNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZGFibGUucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCByZWplY3RDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRhYmxlLnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsIHJlamVjdENhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZGFibGUucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLCByZWplY3RDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmFib3J0U2lnbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmFib3J0U2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydEhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWFkYWJsZUNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYWxsYmFja0NodW5rID0gdGhpcy5fcmVhZGFibGUucmVhZChzaXplKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrQ2h1bmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uICs9IGNhbGxiYWNrQ2h1bmsubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYW5VcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbGJhY2tDaHVuay5sZW5ndGggbWF5YmUgbGVzcyB0aGFuIGRlc2lyZWQgc2l6ZSBpZiB0aGUgc3RyZWFtIGVuZHMuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMudG9VaW50OEFycmF5KGNhbGxiYWNrQ2h1bmspKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgcmVqZWN0Q2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFuVXAoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBhYm9ydEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFuVXAoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KEFCT1JUX0VSUk9SKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRhYmxlLm9uKFwicmVhZGFibGVcIiwgcmVhZGFibGVDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhZGFibGUub25jZShcImVycm9yXCIsIHJlamVjdENhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkYWJsZS5vbmNlKFwiZW5kXCIsIHJlamVjdENhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkYWJsZS5vbmNlKFwiY2xvc2VcIiwgcmVqZWN0Q2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmFib3J0U2lnbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuYWJvcnRTaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lICovXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF2cm9SZWFkYWJsZUZyb21TdHJlYW0uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadableFromStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReader.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReader.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AvroReader: () => (/* binding */ AvroReader)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _AvroConstants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AvroConstants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroConstants.js\");\n/* harmony import */ var _AvroParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AvroParser */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroParser.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// TODO: Do a review of non-interfaces\n/* eslint-disable @azure/azure-sdk/ts-use-interface-parameters */\n\n\n\nclass AvroReader {\n    get blockOffset() {\n        return this._blockOffset;\n    }\n    get objectIndex() {\n        return this._objectIndex;\n    }\n    constructor(dataStream, headerStream, currentBlockOffset, indexWithinCurrentBlock) {\n        this._dataStream = dataStream;\n        this._headerStream = headerStream || dataStream;\n        this._initialized = false;\n        this._blockOffset = currentBlockOffset || 0;\n        this._objectIndex = indexWithinCurrentBlock || 0;\n        this._initialBlockOffset = currentBlockOffset || 0;\n    }\n    async initialize(options = {}) {\n        const header = await _AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readFixedBytes(this._headerStream, _AvroConstants__WEBPACK_IMPORTED_MODULE_1__.AVRO_INIT_BYTES.length, {\n            abortSignal: options.abortSignal,\n        });\n        if (!(0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.arraysEqual)(header, _AvroConstants__WEBPACK_IMPORTED_MODULE_1__.AVRO_INIT_BYTES)) {\n            throw new Error(\"Stream is not an Avro file.\");\n        }\n        // File metadata is written as if defined by the following map schema:\n        // { \"type\": \"map\", \"values\": \"bytes\"}\n        this._metadata = await _AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readMap(this._headerStream, _AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readString, {\n            abortSignal: options.abortSignal,\n        });\n        // Validate codec\n        const codec = this._metadata[_AvroConstants__WEBPACK_IMPORTED_MODULE_1__.AVRO_CODEC_KEY];\n        if (!(codec === undefined || codec === null || codec === \"null\")) {\n            throw new Error(\"Codecs are not supported\");\n        }\n        // The 16-byte, randomly-generated sync marker for this file.\n        this._syncMarker = await _AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readFixedBytes(this._headerStream, _AvroConstants__WEBPACK_IMPORTED_MODULE_1__.AVRO_SYNC_MARKER_SIZE, {\n            abortSignal: options.abortSignal,\n        });\n        // Parse the schema\n        const schema = JSON.parse(this._metadata[_AvroConstants__WEBPACK_IMPORTED_MODULE_1__.AVRO_SCHEMA_KEY]);\n        this._itemType = _AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroType.fromSchema(schema);\n        if (this._blockOffset === 0) {\n            this._blockOffset = this._initialBlockOffset + this._dataStream.position;\n        }\n        this._itemsRemainingInBlock = await _AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readLong(this._dataStream, {\n            abortSignal: options.abortSignal,\n        });\n        // skip block length\n        await _AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readLong(this._dataStream, { abortSignal: options.abortSignal });\n        this._initialized = true;\n        if (this._objectIndex && this._objectIndex > 0) {\n            for (let i = 0; i < this._objectIndex; i++) {\n                await this._itemType.read(this._dataStream, { abortSignal: options.abortSignal });\n                this._itemsRemainingInBlock--;\n            }\n        }\n    }\n    hasNext() {\n        return !this._initialized || this._itemsRemainingInBlock > 0;\n    }\n    parseObjects() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__asyncGenerator)(this, arguments, function* parseObjects_1(options = {}) {\n            if (!this._initialized) {\n                yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(this.initialize(options));\n            }\n            while (this.hasNext()) {\n                const result = yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(this._itemType.read(this._dataStream, {\n                    abortSignal: options.abortSignal,\n                }));\n                this._itemsRemainingInBlock--;\n                this._objectIndex++;\n                if (this._itemsRemainingInBlock === 0) {\n                    const marker = yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(_AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readFixedBytes(this._dataStream, _AvroConstants__WEBPACK_IMPORTED_MODULE_1__.AVRO_SYNC_MARKER_SIZE, {\n                        abortSignal: options.abortSignal,\n                    }));\n                    this._blockOffset = this._initialBlockOffset + this._dataStream.position;\n                    this._objectIndex = 0;\n                    if (!(0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.arraysEqual)(this._syncMarker, marker)) {\n                        throw new Error(\"Stream is not a valid Avro file.\");\n                    }\n                    try {\n                        this._itemsRemainingInBlock = yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(_AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readLong(this._dataStream, {\n                            abortSignal: options.abortSignal,\n                        }));\n                    }\n                    catch (err) {\n                        // We hit the end of the stream.\n                        this._itemsRemainingInBlock = 0;\n                    }\n                    if (this._itemsRemainingInBlock > 0) {\n                        // Ignore block size\n                        yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(_AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readLong(this._dataStream, { abortSignal: options.abortSignal }));\n                    }\n                }\n                yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(result);\n            }\n        });\n    }\n}\n//# sourceMappingURL=AvroReader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/utils/utils.common.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/utils/utils.common.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arraysEqual: () => (/* binding */ arraysEqual)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction arraysEqual(a, b) {\n    if (a === b)\n        return true;\n    // eslint-disable-next-line eqeqeq\n    if (a == null || b == null)\n        return false;\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; ++i) {\n        if (a[i] !== b[i])\n            return false;\n    }\n    return true;\n}\n//# sourceMappingURL=utils.common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWludGVybmFsLWF2cm8vc3JjL3V0aWxzL3V0aWxzLmNvbW1vbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsY0FBYztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtaW50ZXJuYWwtYXZyby9zcmMvdXRpbHMvdXRpbHMuY29tbW9uLmpzPzcyMTEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlzRXF1YWwoYSwgYikge1xuICAgIGlmIChhID09PSBiKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG4gICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChhW2ldICE9PSBiW2ldKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmNvbW1vbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/utils/utils.common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/state.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/state.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.state = void 0;\n/**\n * Holds the singleton operationRequestMap, to be shared across CJS and ESM imports.\n */\nexports.state = {\n    operationRequestMap: new WeakMap(),\n};\n//# sourceMappingURL=state-cjs.cjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvY29tbW9uanMvc3RhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvY29tbW9uanMvc3RhdGUuanM/YzVjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdGF0ZSA9IHZvaWQgMDtcbi8qKlxuICogSG9sZHMgdGhlIHNpbmdsZXRvbiBvcGVyYXRpb25SZXF1ZXN0TWFwLCB0byBiZSBzaGFyZWQgYWNyb3NzIENKUyBhbmQgRVNNIGltcG9ydHMuXG4gKi9cbmV4cG9ydHMuc3RhdGUgPSB7XG4gICAgb3BlcmF0aW9uUmVxdWVzdE1hcDogbmV3IFdlYWtNYXAoKSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0ZS1janMuY2pzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/state.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/commonjs/state.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.state = void 0;\n/**\n * @internal\n *\n * Holds the singleton instrumenter, to be shared across CJS and ESM imports.\n */\nexports.state = {\n    instrumenterImplementation: undefined,\n};\n//# sourceMappingURL=state-cjs.cjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2NvbW1vbmpzL3N0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS10cmFjaW5nL2Rpc3QvY29tbW9uanMvc3RhdGUuanM/ZDk1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdGF0ZSA9IHZvaWQgMDtcbi8qKlxuICogQGludGVybmFsXG4gKlxuICogSG9sZHMgdGhlIHNpbmdsZXRvbiBpbnN0cnVtZW50ZXIsIHRvIGJlIHNoYXJlZCBhY3Jvc3MgQ0pTIGFuZCBFU00gaW1wb3J0cy5cbiAqL1xuZXhwb3J0cy5zdGF0ZSA9IHtcbiAgICBpbnN0cnVtZW50ZXJJbXBsZW1lbnRhdGlvbjogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRlLWNqcy5janMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/esm/azureKeyCredential.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/esm/azureKeyCredential.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureKeyCredential: () => (/* binding */ AzureKeyCredential)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A static-key-based credential that supports updating\n * the underlying key value.\n */\nclass AzureKeyCredential {\n    /**\n     * The value of the key to be used in authentication\n     */\n    get key() {\n        return this._key;\n    }\n    /**\n     * Create an instance of an AzureKeyCredential for use\n     * with a service client.\n     *\n     * @param key - The initial value of the key to use in authentication\n     */\n    constructor(key) {\n        if (!key) {\n            throw new Error(\"key must be a non-empty string\");\n        }\n        this._key = key;\n    }\n    /**\n     * Change the value of the key.\n     *\n     * Updates will take effect upon the next request after\n     * updating the key value.\n     *\n     * @param newKey - The new key value to be used\n     */\n    update(newKey) {\n        this._key = newKey;\n    }\n}\n//# sourceMappingURL=azureKeyCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2VzbS9henVyZUtleUNyZWRlbnRpYWwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1hdXRoL2Rpc3QvZXNtL2F6dXJlS2V5Q3JlZGVudGlhbC5qcz9mOWQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBBIHN0YXRpYy1rZXktYmFzZWQgY3JlZGVudGlhbCB0aGF0IHN1cHBvcnRzIHVwZGF0aW5nXG4gKiB0aGUgdW5kZXJseWluZyBrZXkgdmFsdWUuXG4gKi9cbmV4cG9ydCBjbGFzcyBBenVyZUtleUNyZWRlbnRpYWwge1xuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBvZiB0aGUga2V5IHRvIGJlIHVzZWQgaW4gYXV0aGVudGljYXRpb25cbiAgICAgKi9cbiAgICBnZXQga2V5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fa2V5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgYW4gQXp1cmVLZXlDcmVkZW50aWFsIGZvciB1c2VcbiAgICAgKiB3aXRoIGEgc2VydmljZSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5IC0gVGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIGtleSB0byB1c2UgaW4gYXV0aGVudGljYXRpb25cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihrZXkpIHtcbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImtleSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9rZXkgPSBrZXk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoYW5nZSB0aGUgdmFsdWUgb2YgdGhlIGtleS5cbiAgICAgKlxuICAgICAqIFVwZGF0ZXMgd2lsbCB0YWtlIGVmZmVjdCB1cG9uIHRoZSBuZXh0IHJlcXVlc3QgYWZ0ZXJcbiAgICAgKiB1cGRhdGluZyB0aGUga2V5IHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5ld0tleSAtIFRoZSBuZXcga2V5IHZhbHVlIHRvIGJlIHVzZWRcbiAgICAgKi9cbiAgICB1cGRhdGUobmV3S2V5KSB7XG4gICAgICAgIHRoaXMuX2tleSA9IG5ld0tleTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1henVyZUtleUNyZWRlbnRpYWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/esm/azureKeyCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/esm/azureNamedKeyCredential.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/esm/azureNamedKeyCredential.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureNamedKeyCredential: () => (/* binding */ AzureNamedKeyCredential),\n/* harmony export */   isNamedKeyCredential: () => (/* binding */ isNamedKeyCredential)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * A static name/key-based credential that supports updating\n * the underlying name and key values.\n */\nclass AzureNamedKeyCredential {\n    /**\n     * The value of the key to be used in authentication.\n     */\n    get key() {\n        return this._key;\n    }\n    /**\n     * The value of the name to be used in authentication.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Create an instance of an AzureNamedKeyCredential for use\n     * with a service client.\n     *\n     * @param name - The initial value of the name to use in authentication.\n     * @param key - The initial value of the key to use in authentication.\n     */\n    constructor(name, key) {\n        if (!name || !key) {\n            throw new TypeError(\"name and key must be non-empty strings\");\n        }\n        this._name = name;\n        this._key = key;\n    }\n    /**\n     * Change the value of the key.\n     *\n     * Updates will take effect upon the next request after\n     * updating the key value.\n     *\n     * @param newName - The new name value to be used.\n     * @param newKey - The new key value to be used.\n     */\n    update(newName, newKey) {\n        if (!newName || !newKey) {\n            throw new TypeError(\"newName and newKey must be non-empty strings\");\n        }\n        this._name = newName;\n        this._key = newKey;\n    }\n}\n/**\n * Tests an object to determine whether it implements NamedKeyCredential.\n *\n * @param credential - The assumed NamedKeyCredential to be tested.\n */\nfunction isNamedKeyCredential(credential) {\n    return ((0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isObjectWithProperties)(credential, [\"name\", \"key\"]) &&\n        typeof credential.key === \"string\" &&\n        typeof credential.name === \"string\");\n}\n//# sourceMappingURL=azureNamedKeyCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2VzbS9henVyZU5hbWVkS2V5Q3JlZGVudGlhbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQzBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFlBQVksd0VBQXNCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2VzbS9henVyZU5hbWVkS2V5Q3JlZGVudGlhbC5qcz9hZTYzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgaXNPYmplY3RXaXRoUHJvcGVydGllcyB9IGZyb20gXCJAYXp1cmUvY29yZS11dGlsXCI7XG4vKipcbiAqIEEgc3RhdGljIG5hbWUva2V5LWJhc2VkIGNyZWRlbnRpYWwgdGhhdCBzdXBwb3J0cyB1cGRhdGluZ1xuICogdGhlIHVuZGVybHlpbmcgbmFtZSBhbmQga2V5IHZhbHVlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEF6dXJlTmFtZWRLZXlDcmVkZW50aWFsIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgb2YgdGhlIGtleSB0byBiZSB1c2VkIGluIGF1dGhlbnRpY2F0aW9uLlxuICAgICAqL1xuICAgIGdldCBrZXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBvZiB0aGUgbmFtZSB0byBiZSB1c2VkIGluIGF1dGhlbnRpY2F0aW9uLlxuICAgICAqL1xuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIGFuIEF6dXJlTmFtZWRLZXlDcmVkZW50aWFsIGZvciB1c2VcbiAgICAgKiB3aXRoIGEgc2VydmljZSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBpbml0aWFsIHZhbHVlIG9mIHRoZSBuYW1lIHRvIHVzZSBpbiBhdXRoZW50aWNhdGlvbi5cbiAgICAgKiBAcGFyYW0ga2V5IC0gVGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIGtleSB0byB1c2UgaW4gYXV0aGVudGljYXRpb24uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZSwga2V5KSB7XG4gICAgICAgIGlmICghbmFtZSB8fCAha2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwibmFtZSBhbmQga2V5IG11c3QgYmUgbm9uLWVtcHR5IHN0cmluZ3NcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuX2tleSA9IGtleTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSB2YWx1ZSBvZiB0aGUga2V5LlxuICAgICAqXG4gICAgICogVXBkYXRlcyB3aWxsIHRha2UgZWZmZWN0IHVwb24gdGhlIG5leHQgcmVxdWVzdCBhZnRlclxuICAgICAqIHVwZGF0aW5nIHRoZSBrZXkgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmV3TmFtZSAtIFRoZSBuZXcgbmFtZSB2YWx1ZSB0byBiZSB1c2VkLlxuICAgICAqIEBwYXJhbSBuZXdLZXkgLSBUaGUgbmV3IGtleSB2YWx1ZSB0byBiZSB1c2VkLlxuICAgICAqL1xuICAgIHVwZGF0ZShuZXdOYW1lLCBuZXdLZXkpIHtcbiAgICAgICAgaWYgKCFuZXdOYW1lIHx8ICFuZXdLZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJuZXdOYW1lIGFuZCBuZXdLZXkgbXVzdCBiZSBub24tZW1wdHkgc3RyaW5nc1wiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9uYW1lID0gbmV3TmFtZTtcbiAgICAgICAgdGhpcy5fa2V5ID0gbmV3S2V5O1xuICAgIH1cbn1cbi8qKlxuICogVGVzdHMgYW4gb2JqZWN0IHRvIGRldGVybWluZSB3aGV0aGVyIGl0IGltcGxlbWVudHMgTmFtZWRLZXlDcmVkZW50aWFsLlxuICpcbiAqIEBwYXJhbSBjcmVkZW50aWFsIC0gVGhlIGFzc3VtZWQgTmFtZWRLZXlDcmVkZW50aWFsIHRvIGJlIHRlc3RlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTmFtZWRLZXlDcmVkZW50aWFsKGNyZWRlbnRpYWwpIHtcbiAgICByZXR1cm4gKGlzT2JqZWN0V2l0aFByb3BlcnRpZXMoY3JlZGVudGlhbCwgW1wibmFtZVwiLCBcImtleVwiXSkgJiZcbiAgICAgICAgdHlwZW9mIGNyZWRlbnRpYWwua2V5ID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgIHR5cGVvZiBjcmVkZW50aWFsLm5hbWUgPT09IFwic3RyaW5nXCIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXp1cmVOYW1lZEtleUNyZWRlbnRpYWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/esm/azureNamedKeyCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/esm/azureSASCredential.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/esm/azureSASCredential.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureSASCredential: () => (/* binding */ AzureSASCredential),\n/* harmony export */   isSASCredential: () => (/* binding */ isSASCredential)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * A static-signature-based credential that supports updating\n * the underlying signature value.\n */\nclass AzureSASCredential {\n    /**\n     * The value of the shared access signature to be used in authentication\n     */\n    get signature() {\n        return this._signature;\n    }\n    /**\n     * Create an instance of an AzureSASCredential for use\n     * with a service client.\n     *\n     * @param signature - The initial value of the shared access signature to use in authentication\n     */\n    constructor(signature) {\n        if (!signature) {\n            throw new Error(\"shared access signature must be a non-empty string\");\n        }\n        this._signature = signature;\n    }\n    /**\n     * Change the value of the signature.\n     *\n     * Updates will take effect upon the next request after\n     * updating the signature value.\n     *\n     * @param newSignature - The new shared access signature value to be used\n     */\n    update(newSignature) {\n        if (!newSignature) {\n            throw new Error(\"shared access signature must be a non-empty string\");\n        }\n        this._signature = newSignature;\n    }\n}\n/**\n * Tests an object to determine whether it implements SASCredential.\n *\n * @param credential - The assumed SASCredential to be tested.\n */\nfunction isSASCredential(credential) {\n    return ((0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isObjectWithProperties)(credential, [\"signature\"]) && typeof credential.signature === \"string\");\n}\n//# sourceMappingURL=azureSASCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2VzbS9henVyZVNBU0NyZWRlbnRpYWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUMwRDtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSx3RUFBc0I7QUFDbEM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWF1dGgvZGlzdC9lc20vYXp1cmVTQVNDcmVkZW50aWFsLmpzPzJhNzIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBpc09iamVjdFdpdGhQcm9wZXJ0aWVzIH0gZnJvbSBcIkBhenVyZS9jb3JlLXV0aWxcIjtcbi8qKlxuICogQSBzdGF0aWMtc2lnbmF0dXJlLWJhc2VkIGNyZWRlbnRpYWwgdGhhdCBzdXBwb3J0cyB1cGRhdGluZ1xuICogdGhlIHVuZGVybHlpbmcgc2lnbmF0dXJlIHZhbHVlLlxuICovXG5leHBvcnQgY2xhc3MgQXp1cmVTQVNDcmVkZW50aWFsIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgb2YgdGhlIHNoYXJlZCBhY2Nlc3Mgc2lnbmF0dXJlIHRvIGJlIHVzZWQgaW4gYXV0aGVudGljYXRpb25cbiAgICAgKi9cbiAgICBnZXQgc2lnbmF0dXJlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmF0dXJlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgYW4gQXp1cmVTQVNDcmVkZW50aWFsIGZvciB1c2VcbiAgICAgKiB3aXRoIGEgc2VydmljZSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2lnbmF0dXJlIC0gVGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIHNoYXJlZCBhY2Nlc3Mgc2lnbmF0dXJlIHRvIHVzZSBpbiBhdXRoZW50aWNhdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNpZ25hdHVyZSkge1xuICAgICAgICBpZiAoIXNpZ25hdHVyZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2hhcmVkIGFjY2VzcyBzaWduYXR1cmUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmdcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2lnbmF0dXJlID0gc2lnbmF0dXJlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGFuZ2UgdGhlIHZhbHVlIG9mIHRoZSBzaWduYXR1cmUuXG4gICAgICpcbiAgICAgKiBVcGRhdGVzIHdpbGwgdGFrZSBlZmZlY3QgdXBvbiB0aGUgbmV4dCByZXF1ZXN0IGFmdGVyXG4gICAgICogdXBkYXRpbmcgdGhlIHNpZ25hdHVyZSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuZXdTaWduYXR1cmUgLSBUaGUgbmV3IHNoYXJlZCBhY2Nlc3Mgc2lnbmF0dXJlIHZhbHVlIHRvIGJlIHVzZWRcbiAgICAgKi9cbiAgICB1cGRhdGUobmV3U2lnbmF0dXJlKSB7XG4gICAgICAgIGlmICghbmV3U2lnbmF0dXJlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzaGFyZWQgYWNjZXNzIHNpZ25hdHVyZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zaWduYXR1cmUgPSBuZXdTaWduYXR1cmU7XG4gICAgfVxufVxuLyoqXG4gKiBUZXN0cyBhbiBvYmplY3QgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgaXQgaW1wbGVtZW50cyBTQVNDcmVkZW50aWFsLlxuICpcbiAqIEBwYXJhbSBjcmVkZW50aWFsIC0gVGhlIGFzc3VtZWQgU0FTQ3JlZGVudGlhbCB0byBiZSB0ZXN0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NBU0NyZWRlbnRpYWwoY3JlZGVudGlhbCkge1xuICAgIHJldHVybiAoaXNPYmplY3RXaXRoUHJvcGVydGllcyhjcmVkZW50aWFsLCBbXCJzaWduYXR1cmVcIl0pICYmIHR5cGVvZiBjcmVkZW50aWFsLnNpZ25hdHVyZSA9PT0gXCJzdHJpbmdcIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1henVyZVNBU0NyZWRlbnRpYWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/esm/azureSASCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureKeyCredential: () => (/* reexport safe */ _azureKeyCredential_js__WEBPACK_IMPORTED_MODULE_0__.AzureKeyCredential),\n/* harmony export */   AzureNamedKeyCredential: () => (/* reexport safe */ _azureNamedKeyCredential_js__WEBPACK_IMPORTED_MODULE_2__.AzureNamedKeyCredential),\n/* harmony export */   AzureSASCredential: () => (/* reexport safe */ _azureSASCredential_js__WEBPACK_IMPORTED_MODULE_3__.AzureSASCredential),\n/* harmony export */   isKeyCredential: () => (/* reexport safe */ _keyCredential_js__WEBPACK_IMPORTED_MODULE_1__.isKeyCredential),\n/* harmony export */   isNamedKeyCredential: () => (/* reexport safe */ _azureNamedKeyCredential_js__WEBPACK_IMPORTED_MODULE_2__.isNamedKeyCredential),\n/* harmony export */   isSASCredential: () => (/* reexport safe */ _azureSASCredential_js__WEBPACK_IMPORTED_MODULE_3__.isSASCredential),\n/* harmony export */   isTokenCredential: () => (/* reexport safe */ _tokenCredential_js__WEBPACK_IMPORTED_MODULE_4__.isTokenCredential)\n/* harmony export */ });\n/* harmony import */ var _azureKeyCredential_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./azureKeyCredential.js */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/azureKeyCredential.js\");\n/* harmony import */ var _keyCredential_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keyCredential.js */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/keyCredential.js\");\n/* harmony import */ var _azureNamedKeyCredential_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./azureNamedKeyCredential.js */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/azureNamedKeyCredential.js\");\n/* harmony import */ var _azureSASCredential_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./azureSASCredential.js */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/azureSASCredential.js\");\n/* harmony import */ var _tokenCredential_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tokenCredential.js */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/tokenCredential.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQzZEO0FBQ1I7QUFDeUM7QUFDaEI7QUFDcEI7QUFDMUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1hdXRoL2Rpc3QvZXNtL2luZGV4LmpzP2YxZTEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5leHBvcnQgeyBBenVyZUtleUNyZWRlbnRpYWwgfSBmcm9tIFwiLi9henVyZUtleUNyZWRlbnRpYWwuanNcIjtcbmV4cG9ydCB7IGlzS2V5Q3JlZGVudGlhbCB9IGZyb20gXCIuL2tleUNyZWRlbnRpYWwuanNcIjtcbmV4cG9ydCB7IEF6dXJlTmFtZWRLZXlDcmVkZW50aWFsLCBpc05hbWVkS2V5Q3JlZGVudGlhbCwgfSBmcm9tIFwiLi9henVyZU5hbWVkS2V5Q3JlZGVudGlhbC5qc1wiO1xuZXhwb3J0IHsgQXp1cmVTQVNDcmVkZW50aWFsLCBpc1NBU0NyZWRlbnRpYWwgfSBmcm9tIFwiLi9henVyZVNBU0NyZWRlbnRpYWwuanNcIjtcbmV4cG9ydCB7IGlzVG9rZW5DcmVkZW50aWFsLCB9IGZyb20gXCIuL3Rva2VuQ3JlZGVudGlhbC5qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/esm/keyCredential.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/esm/keyCredential.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isKeyCredential: () => (/* binding */ isKeyCredential)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Tests an object to determine whether it implements KeyCredential.\n *\n * @param credential - The assumed KeyCredential to be tested.\n */\nfunction isKeyCredential(credential) {\n    return (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isObjectWithProperties)(credential, [\"key\"]) && typeof credential.key === \"string\";\n}\n//# sourceMappingURL=keyCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2VzbS9rZXlDcmVkZW50aWFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUMwRDtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLHdFQUFzQjtBQUNqQztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2VzbS9rZXlDcmVkZW50aWFsLmpzPzI1YTYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBpc09iamVjdFdpdGhQcm9wZXJ0aWVzIH0gZnJvbSBcIkBhenVyZS9jb3JlLXV0aWxcIjtcbi8qKlxuICogVGVzdHMgYW4gb2JqZWN0IHRvIGRldGVybWluZSB3aGV0aGVyIGl0IGltcGxlbWVudHMgS2V5Q3JlZGVudGlhbC5cbiAqXG4gKiBAcGFyYW0gY3JlZGVudGlhbCAtIFRoZSBhc3N1bWVkIEtleUNyZWRlbnRpYWwgdG8gYmUgdGVzdGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNLZXlDcmVkZW50aWFsKGNyZWRlbnRpYWwpIHtcbiAgICByZXR1cm4gaXNPYmplY3RXaXRoUHJvcGVydGllcyhjcmVkZW50aWFsLCBbXCJrZXlcIl0pICYmIHR5cGVvZiBjcmVkZW50aWFsLmtleSA9PT0gXCJzdHJpbmdcIjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtleUNyZWRlbnRpYWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/esm/keyCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/esm/tokenCredential.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/esm/tokenCredential.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isTokenCredential: () => (/* binding */ isTokenCredential)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Tests an object to determine whether it implements TokenCredential.\n *\n * @param credential - The assumed TokenCredential to be tested.\n */\nfunction isTokenCredential(credential) {\n    // Check for an object with a 'getToken' function and possibly with\n    // a 'signRequest' function.  We do this check to make sure that\n    // a ServiceClientCredentials implementor (like TokenClientCredentials\n    // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if\n    // it doesn't actually implement TokenCredential also.\n    const castCredential = credential;\n    return (castCredential &&\n        typeof castCredential.getToken === \"function\" &&\n        (castCredential.signRequest === undefined || castCredential.getToken.length > 0));\n}\n//# sourceMappingURL=tokenCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2VzbS90b2tlbkNyZWRlbnRpYWwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2VzbS90b2tlbkNyZWRlbnRpYWwuanM/Y2FmOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8qKlxuICogVGVzdHMgYW4gb2JqZWN0IHRvIGRldGVybWluZSB3aGV0aGVyIGl0IGltcGxlbWVudHMgVG9rZW5DcmVkZW50aWFsLlxuICpcbiAqIEBwYXJhbSBjcmVkZW50aWFsIC0gVGhlIGFzc3VtZWQgVG9rZW5DcmVkZW50aWFsIHRvIGJlIHRlc3RlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVG9rZW5DcmVkZW50aWFsKGNyZWRlbnRpYWwpIHtcbiAgICAvLyBDaGVjayBmb3IgYW4gb2JqZWN0IHdpdGggYSAnZ2V0VG9rZW4nIGZ1bmN0aW9uIGFuZCBwb3NzaWJseSB3aXRoXG4gICAgLy8gYSAnc2lnblJlcXVlc3QnIGZ1bmN0aW9uLiAgV2UgZG8gdGhpcyBjaGVjayB0byBtYWtlIHN1cmUgdGhhdFxuICAgIC8vIGEgU2VydmljZUNsaWVudENyZWRlbnRpYWxzIGltcGxlbWVudG9yIChsaWtlIFRva2VuQ2xpZW50Q3JlZGVudGlhbHNcbiAgICAvLyBpbiBtcy1yZXN0LW5vZGVhdXRoKSBkb2Vzbid0IGdldCBtaXN0YWtlbiBmb3IgYSBUb2tlbkNyZWRlbnRpYWwgaWZcbiAgICAvLyBpdCBkb2Vzbid0IGFjdHVhbGx5IGltcGxlbWVudCBUb2tlbkNyZWRlbnRpYWwgYWxzby5cbiAgICBjb25zdCBjYXN0Q3JlZGVudGlhbCA9IGNyZWRlbnRpYWw7XG4gICAgcmV0dXJuIChjYXN0Q3JlZGVudGlhbCAmJlxuICAgICAgICB0eXBlb2YgY2FzdENyZWRlbnRpYWwuZ2V0VG9rZW4gPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICAoY2FzdENyZWRlbnRpYWwuc2lnblJlcXVlc3QgPT09IHVuZGVmaW5lZCB8fCBjYXN0Q3JlZGVudGlhbC5nZXRUb2tlbi5sZW5ndGggPiAwKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b2tlbkNyZWRlbnRpYWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/esm/tokenCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnClaimChallenge.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/authorizeRequestOnClaimChallenge.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authorizeRequestOnClaimChallenge: () => (/* binding */ authorizeRequestOnClaimChallenge),\n/* harmony export */   parseCAEChallenge: () => (/* binding */ parseCAEChallenge)\n/* harmony export */ });\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./log.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/log.js\");\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base64.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/base64.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Bearer d=\"e\", f=\"g\"`.\n * Into: `[ { a: 'b', c: 'd' }, { d: 'e', f: 'g' } ]`.\n *\n * @internal\n */\nfunction parseCAEChallenge(challenges) {\n    const bearerChallenges = `, ${challenges.trim()}`.split(\", Bearer \").filter((x) => x);\n    return bearerChallenges.map((challenge) => {\n        const challengeParts = `${challenge.trim()}, `.split('\", ').filter((x) => x);\n        const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split('=\"')));\n        // Key-value pairs to plain object:\n        return keyValuePairs.reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});\n    });\n}\n/**\n * This function can be used as a callback for the `bearerTokenAuthenticationPolicy` of `@azure/core-rest-pipeline`, to support CAE challenges:\n * [Continuous Access Evaluation](https://docs.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation).\n *\n * Call the `bearerTokenAuthenticationPolicy` with the following options:\n *\n * ```ts\n * import { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\n * import { authorizeRequestOnClaimChallenge } from \"@azure/core-client\";\n *\n * const bearerTokenAuthenticationPolicy = bearerTokenAuthenticationPolicy({\n *   authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge\n * });\n * ```\n *\n * Once provided, the `bearerTokenAuthenticationPolicy` policy will internally handle Continuous Access Evaluation (CAE) challenges.\n * When it can't complete a challenge it will return the 401 (unauthorized) response from ARM.\n *\n * Example challenge with claims:\n *\n * ```\n * Bearer authorization_uri=\"https://login.windows-ppe.net/\", error=\"invalid_token\",\n * error_description=\"User session has been revoked\",\n * claims=\"eyJhY2Nlc3NfdG9rZW4iOnsibmJmIjp7ImVzc2VudGlhbCI6dHJ1ZSwgInZhbHVlIjoiMTYwMzc0MjgwMCJ9fX0=\"\n * ```\n */\nasync function authorizeRequestOnClaimChallenge(onChallengeOptions) {\n    const { scopes, response } = onChallengeOptions;\n    const logger = onChallengeOptions.logger || _log_js__WEBPACK_IMPORTED_MODULE_0__.logger;\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (!challenge) {\n        logger.info(`The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.`);\n        return false;\n    }\n    const challenges = parseCAEChallenge(challenge) || [];\n    const parsedChallenge = challenges.find((x) => x.claims);\n    if (!parsedChallenge) {\n        logger.info(`The WWW-Authenticate header was missing the necessary \"claims\" to perform the Continuous Access Evaluation authentication flow.`);\n        return false;\n    }\n    const accessToken = await onChallengeOptions.getAccessToken(parsedChallenge.scope ? [parsedChallenge.scope] : scopes, {\n        claims: (0,_base64_js__WEBPACK_IMPORTED_MODULE_1__.decodeStringToString)(parsedChallenge.claims),\n    });\n    if (!accessToken) {\n        return false;\n    }\n    onChallengeOptions.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n    return true;\n}\n//# sourceMappingURL=authorizeRequestOnClaimChallenge.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2F1dGhvcml6ZVJlcXVlc3RPbkNsYWltQ2hhbGxlbmdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ3NEO0FBQ0g7QUFDbkQ7QUFDQTtBQUNBLGNBQWMsZ0JBQWdCLElBQUksaUJBQWlCO0FBQ25EO0FBQ0E7QUFDQTtBQUNPO0FBQ1Asa0NBQWtDLGtCQUFrQjtBQUNwRDtBQUNBLGtDQUFrQyxpQkFBaUI7QUFDbkQscUZBQXFGLGNBQWM7QUFDbkc7QUFDQSw2RUFBNkUsYUFBYTtBQUMxRixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksa0NBQWtDO0FBQzlDLFlBQVksbUNBQW1DO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSxtQkFBbUI7QUFDL0IsZ0RBQWdELDJDQUFnQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZ0VBQW9CO0FBQ3BDLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxzRUFBc0Usa0JBQWtCO0FBQ3hGO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2VzbS9hdXRob3JpemVSZXF1ZXN0T25DbGFpbUNoYWxsZW5nZS5qcz8yZTY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgbG9nZ2VyIGFzIGNvcmVDbGllbnRMb2dnZXIgfSBmcm9tIFwiLi9sb2cuanNcIjtcbmltcG9ydCB7IGRlY29kZVN0cmluZ1RvU3RyaW5nIH0gZnJvbSBcIi4vYmFzZTY0LmpzXCI7XG4vKipcbiAqIENvbnZlcnRzOiBgQmVhcmVyIGE9XCJiXCIsIGM9XCJkXCIsIEJlYXJlciBkPVwiZVwiLCBmPVwiZ1wiYC5cbiAqIEludG86IGBbIHsgYTogJ2InLCBjOiAnZCcgfSwgeyBkOiAnZScsIGY6ICdnJyB9IF1gLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDQUVDaGFsbGVuZ2UoY2hhbGxlbmdlcykge1xuICAgIGNvbnN0IGJlYXJlckNoYWxsZW5nZXMgPSBgLCAke2NoYWxsZW5nZXMudHJpbSgpfWAuc3BsaXQoXCIsIEJlYXJlciBcIikuZmlsdGVyKCh4KSA9PiB4KTtcbiAgICByZXR1cm4gYmVhcmVyQ2hhbGxlbmdlcy5tYXAoKGNoYWxsZW5nZSkgPT4ge1xuICAgICAgICBjb25zdCBjaGFsbGVuZ2VQYXJ0cyA9IGAke2NoYWxsZW5nZS50cmltKCl9LCBgLnNwbGl0KCdcIiwgJykuZmlsdGVyKCh4KSA9PiB4KTtcbiAgICAgICAgY29uc3Qga2V5VmFsdWVQYWlycyA9IGNoYWxsZW5nZVBhcnRzLm1hcCgoa2V5VmFsdWUpID0+ICgoW2tleSwgdmFsdWVdKSA9PiAoeyBba2V5XTogdmFsdWUgfSkpKGtleVZhbHVlLnRyaW0oKS5zcGxpdCgnPVwiJykpKTtcbiAgICAgICAgLy8gS2V5LXZhbHVlIHBhaXJzIHRvIHBsYWluIG9iamVjdDpcbiAgICAgICAgcmV0dXJuIGtleVZhbHVlUGFpcnMucmVkdWNlKChhLCBiKSA9PiAoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhKSwgYikpLCB7fSk7XG4gICAgfSk7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgYXMgYSBjYWxsYmFjayBmb3IgdGhlIGBiZWFyZXJUb2tlbkF1dGhlbnRpY2F0aW9uUG9saWN5YCBvZiBgQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZWAsIHRvIHN1cHBvcnQgQ0FFIGNoYWxsZW5nZXM6XG4gKiBbQ29udGludW91cyBBY2Nlc3MgRXZhbHVhdGlvbl0oaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vYXp1cmUvYWN0aXZlLWRpcmVjdG9yeS9jb25kaXRpb25hbC1hY2Nlc3MvY29uY2VwdC1jb250aW51b3VzLWFjY2Vzcy1ldmFsdWF0aW9uKS5cbiAqXG4gKiBDYWxsIHRoZSBgYmVhcmVyVG9rZW5BdXRoZW50aWNhdGlvblBvbGljeWAgd2l0aCB0aGUgZm9sbG93aW5nIG9wdGlvbnM6XG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3kgfSBmcm9tIFwiQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZVwiO1xuICogaW1wb3J0IHsgYXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2UgfSBmcm9tIFwiQGF6dXJlL2NvcmUtY2xpZW50XCI7XG4gKlxuICogY29uc3QgYmVhcmVyVG9rZW5BdXRoZW50aWNhdGlvblBvbGljeSA9IGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3koe1xuICogICBhdXRob3JpemVSZXF1ZXN0T25DaGFsbGVuZ2U6IGF1dGhvcml6ZVJlcXVlc3RPbkNsYWltQ2hhbGxlbmdlXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIE9uY2UgcHJvdmlkZWQsIHRoZSBgYmVhcmVyVG9rZW5BdXRoZW50aWNhdGlvblBvbGljeWAgcG9saWN5IHdpbGwgaW50ZXJuYWxseSBoYW5kbGUgQ29udGludW91cyBBY2Nlc3MgRXZhbHVhdGlvbiAoQ0FFKSBjaGFsbGVuZ2VzLlxuICogV2hlbiBpdCBjYW4ndCBjb21wbGV0ZSBhIGNoYWxsZW5nZSBpdCB3aWxsIHJldHVybiB0aGUgNDAxICh1bmF1dGhvcml6ZWQpIHJlc3BvbnNlIGZyb20gQVJNLlxuICpcbiAqIEV4YW1wbGUgY2hhbGxlbmdlIHdpdGggY2xhaW1zOlxuICpcbiAqIGBgYFxuICogQmVhcmVyIGF1dGhvcml6YXRpb25fdXJpPVwiaHR0cHM6Ly9sb2dpbi53aW5kb3dzLXBwZS5uZXQvXCIsIGVycm9yPVwiaW52YWxpZF90b2tlblwiLFxuICogZXJyb3JfZGVzY3JpcHRpb249XCJVc2VyIHNlc3Npb24gaGFzIGJlZW4gcmV2b2tlZFwiLFxuICogY2xhaW1zPVwiZXlKaFkyTmxjM05mZEc5clpXNGlPbnNpYm1KbUlqcDdJbVZ6YzJWdWRHbGhiQ0k2ZEhKMVpTd2dJblpoYkhWbElqb2lNVFl3TXpjME1qZ3dNQ0o5ZlgwPVwiXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGF1dGhvcml6ZVJlcXVlc3RPbkNsYWltQ2hhbGxlbmdlKG9uQ2hhbGxlbmdlT3B0aW9ucykge1xuICAgIGNvbnN0IHsgc2NvcGVzLCByZXNwb25zZSB9ID0gb25DaGFsbGVuZ2VPcHRpb25zO1xuICAgIGNvbnN0IGxvZ2dlciA9IG9uQ2hhbGxlbmdlT3B0aW9ucy5sb2dnZXIgfHwgY29yZUNsaWVudExvZ2dlcjtcbiAgICBjb25zdCBjaGFsbGVuZ2UgPSByZXNwb25zZS5oZWFkZXJzLmdldChcIldXVy1BdXRoZW50aWNhdGVcIik7XG4gICAgaWYgKCFjaGFsbGVuZ2UpIHtcbiAgICAgICAgbG9nZ2VyLmluZm8oYFRoZSBXV1ctQXV0aGVudGljYXRlIGhlYWRlciB3YXMgbWlzc2luZy4gRmFpbGVkIHRvIHBlcmZvcm0gdGhlIENvbnRpbnVvdXMgQWNjZXNzIEV2YWx1YXRpb24gYXV0aGVudGljYXRpb24gZmxvdy5gKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBjaGFsbGVuZ2VzID0gcGFyc2VDQUVDaGFsbGVuZ2UoY2hhbGxlbmdlKSB8fCBbXTtcbiAgICBjb25zdCBwYXJzZWRDaGFsbGVuZ2UgPSBjaGFsbGVuZ2VzLmZpbmQoKHgpID0+IHguY2xhaW1zKTtcbiAgICBpZiAoIXBhcnNlZENoYWxsZW5nZSkge1xuICAgICAgICBsb2dnZXIuaW5mbyhgVGhlIFdXVy1BdXRoZW50aWNhdGUgaGVhZGVyIHdhcyBtaXNzaW5nIHRoZSBuZWNlc3NhcnkgXCJjbGFpbXNcIiB0byBwZXJmb3JtIHRoZSBDb250aW51b3VzIEFjY2VzcyBFdmFsdWF0aW9uIGF1dGhlbnRpY2F0aW9uIGZsb3cuYCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgYWNjZXNzVG9rZW4gPSBhd2FpdCBvbkNoYWxsZW5nZU9wdGlvbnMuZ2V0QWNjZXNzVG9rZW4ocGFyc2VkQ2hhbGxlbmdlLnNjb3BlID8gW3BhcnNlZENoYWxsZW5nZS5zY29wZV0gOiBzY29wZXMsIHtcbiAgICAgICAgY2xhaW1zOiBkZWNvZGVTdHJpbmdUb1N0cmluZyhwYXJzZWRDaGFsbGVuZ2UuY2xhaW1zKSxcbiAgICB9KTtcbiAgICBpZiAoIWFjY2Vzc1Rva2VuKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb25DaGFsbGVuZ2VPcHRpb25zLnJlcXVlc3QuaGVhZGVycy5zZXQoXCJBdXRob3JpemF0aW9uXCIsIGBCZWFyZXIgJHthY2Nlc3NUb2tlbi50b2tlbn1gKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGhvcml6ZVJlcXVlc3RPbkNsYWltQ2hhbGxlbmdlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnClaimChallenge.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authorizeRequestOnTenantChallenge: () => (/* binding */ authorizeRequestOnTenantChallenge)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A set of constants used internally when processing requests.\n */\nconst Constants = {\n    DefaultScope: \"/.default\",\n    /**\n     * Defines constants for use with HTTP headers.\n     */\n    HeaderConstants: {\n        /**\n         * The Authorization header.\n         */\n        AUTHORIZATION: \"authorization\",\n    },\n};\nfunction isUuid(text) {\n    return /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/.test(text);\n}\n/**\n * Defines a callback to handle auth challenge for Storage APIs.\n * This implements the bearer challenge process described here: https://docs.microsoft.com/rest/api/storageservices/authorize-with-azure-active-directory#bearer-challenge\n * Handling has specific features for storage that departs to the general AAD challenge docs.\n **/\nconst authorizeRequestOnTenantChallenge = async (challengeOptions) => {\n    const requestOptions = requestToOptions(challengeOptions.request);\n    const challenge = getChallenge(challengeOptions.response);\n    if (challenge) {\n        const challengeInfo = parseChallenge(challenge);\n        const challengeScopes = buildScopes(challengeOptions, challengeInfo);\n        const tenantId = extractTenantId(challengeInfo);\n        if (!tenantId) {\n            return false;\n        }\n        const accessToken = await challengeOptions.getAccessToken(challengeScopes, Object.assign(Object.assign({}, requestOptions), { tenantId }));\n        if (!accessToken) {\n            return false;\n        }\n        challengeOptions.request.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${accessToken.token}`);\n        return true;\n    }\n    return false;\n};\n/**\n * Extracts the tenant id from the challenge information\n * The tenant id is contained in the authorization_uri as the first\n * path part.\n */\nfunction extractTenantId(challengeInfo) {\n    const parsedAuthUri = new URL(challengeInfo.authorization_uri);\n    const pathSegments = parsedAuthUri.pathname.split(\"/\");\n    const tenantId = pathSegments[1];\n    if (tenantId && isUuid(tenantId)) {\n        return tenantId;\n    }\n    return undefined;\n}\n/**\n * Builds the authentication scopes based on the information that comes in the\n * challenge information. Scopes url is present in the resource_id, if it is empty\n * we keep using the original scopes.\n */\nfunction buildScopes(challengeOptions, challengeInfo) {\n    if (!challengeInfo.resource_id) {\n        return challengeOptions.scopes;\n    }\n    const challengeScopes = new URL(challengeInfo.resource_id);\n    challengeScopes.pathname = Constants.DefaultScope;\n    let scope = challengeScopes.toString();\n    if (scope === \"https://disk.azure.com/.default\") {\n        // the extra slash is required by the service\n        scope = \"https://disk.azure.com//.default\";\n    }\n    return [scope];\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response) {\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (response.status === 401 && challenge) {\n        return challenge;\n    }\n    return;\n}\n/**\n * Converts: `Bearer a=\"b\" c=\"d\"`.\n * Into: `[ { a: 'b', c: 'd' }]`.\n *\n * @internal\n */\nfunction parseChallenge(challenge) {\n    const bearerChallenge = challenge.slice(\"Bearer \".length);\n    const challengeParts = `${bearerChallenge.trim()} `.split(\" \").filter((x) => x);\n    const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split(\"=\")));\n    // Key-value pairs to plain object:\n    return keyValuePairs.reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});\n}\n/**\n * Extracts the options form a Pipeline Request for later re-use\n */\nfunction requestToOptions(request) {\n    return {\n        abortSignal: request.abortSignal,\n        requestOptions: {\n            timeout: request.timeout,\n        },\n        tracingOptions: request.tracingOptions,\n    };\n}\n//# sourceMappingURL=authorizeRequestOnTenantChallenge.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2F1dGhvcml6ZVJlcXVlc3RPblRlbmFudENoYWxsZW5nZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSx5QkFBeUIsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxlQUFlLEdBQUc7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpSEFBaUgscUJBQXFCLFVBQVU7QUFDaEo7QUFDQTtBQUNBO0FBQ0EsZ0dBQWdHLGtCQUFrQjtBQUNsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsZ0JBQWdCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsd0JBQXdCO0FBQ3RELGlGQUFpRixjQUFjO0FBQy9GO0FBQ0EseUVBQXlFLGFBQWE7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2F1dGhvcml6ZVJlcXVlc3RPblRlbmFudENoYWxsZW5nZS5qcz83MmRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBBIHNldCBvZiBjb25zdGFudHMgdXNlZCBpbnRlcm5hbGx5IHdoZW4gcHJvY2Vzc2luZyByZXF1ZXN0cy5cbiAqL1xuY29uc3QgQ29uc3RhbnRzID0ge1xuICAgIERlZmF1bHRTY29wZTogXCIvLmRlZmF1bHRcIixcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIGNvbnN0YW50cyBmb3IgdXNlIHdpdGggSFRUUCBoZWFkZXJzLlxuICAgICAqL1xuICAgIEhlYWRlckNvbnN0YW50czoge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIEF1dGhvcml6YXRpb24gaGVhZGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgQVVUSE9SSVpBVElPTjogXCJhdXRob3JpemF0aW9uXCIsXG4gICAgfSxcbn07XG5mdW5jdGlvbiBpc1V1aWQodGV4dCkge1xuICAgIHJldHVybiAvXlswLTlhLWZBLUZdezh9XFxiLVswLTlhLWZBLUZdezR9XFxiLVswLTlhLWZBLUZdezR9XFxiLVswLTlhLWZBLUZdezR9XFxiLVswLTlhLWZBLUZdezEyfSQvLnRlc3QodGV4dCk7XG59XG4vKipcbiAqIERlZmluZXMgYSBjYWxsYmFjayB0byBoYW5kbGUgYXV0aCBjaGFsbGVuZ2UgZm9yIFN0b3JhZ2UgQVBJcy5cbiAqIFRoaXMgaW1wbGVtZW50cyB0aGUgYmVhcmVyIGNoYWxsZW5nZSBwcm9jZXNzIGRlc2NyaWJlZCBoZXJlOiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9yZXN0L2FwaS9zdG9yYWdlc2VydmljZXMvYXV0aG9yaXplLXdpdGgtYXp1cmUtYWN0aXZlLWRpcmVjdG9yeSNiZWFyZXItY2hhbGxlbmdlXG4gKiBIYW5kbGluZyBoYXMgc3BlY2lmaWMgZmVhdHVyZXMgZm9yIHN0b3JhZ2UgdGhhdCBkZXBhcnRzIHRvIHRoZSBnZW5lcmFsIEFBRCBjaGFsbGVuZ2UgZG9jcy5cbiAqKi9cbmV4cG9ydCBjb25zdCBhdXRob3JpemVSZXF1ZXN0T25UZW5hbnRDaGFsbGVuZ2UgPSBhc3luYyAoY2hhbGxlbmdlT3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHJlcXVlc3RPcHRpb25zID0gcmVxdWVzdFRvT3B0aW9ucyhjaGFsbGVuZ2VPcHRpb25zLnJlcXVlc3QpO1xuICAgIGNvbnN0IGNoYWxsZW5nZSA9IGdldENoYWxsZW5nZShjaGFsbGVuZ2VPcHRpb25zLnJlc3BvbnNlKTtcbiAgICBpZiAoY2hhbGxlbmdlKSB7XG4gICAgICAgIGNvbnN0IGNoYWxsZW5nZUluZm8gPSBwYXJzZUNoYWxsZW5nZShjaGFsbGVuZ2UpO1xuICAgICAgICBjb25zdCBjaGFsbGVuZ2VTY29wZXMgPSBidWlsZFNjb3BlcyhjaGFsbGVuZ2VPcHRpb25zLCBjaGFsbGVuZ2VJbmZvKTtcbiAgICAgICAgY29uc3QgdGVuYW50SWQgPSBleHRyYWN0VGVuYW50SWQoY2hhbGxlbmdlSW5mbyk7XG4gICAgICAgIGlmICghdGVuYW50SWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGF3YWl0IGNoYWxsZW5nZU9wdGlvbnMuZ2V0QWNjZXNzVG9rZW4oY2hhbGxlbmdlU2NvcGVzLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlcXVlc3RPcHRpb25zKSwgeyB0ZW5hbnRJZCB9KSk7XG4gICAgICAgIGlmICghYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjaGFsbGVuZ2VPcHRpb25zLnJlcXVlc3QuaGVhZGVycy5zZXQoQ29uc3RhbnRzLkhlYWRlckNvbnN0YW50cy5BVVRIT1JJWkFUSU9OLCBgQmVhcmVyICR7YWNjZXNzVG9rZW4udG9rZW59YCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLyoqXG4gKiBFeHRyYWN0cyB0aGUgdGVuYW50IGlkIGZyb20gdGhlIGNoYWxsZW5nZSBpbmZvcm1hdGlvblxuICogVGhlIHRlbmFudCBpZCBpcyBjb250YWluZWQgaW4gdGhlIGF1dGhvcml6YXRpb25fdXJpIGFzIHRoZSBmaXJzdFxuICogcGF0aCBwYXJ0LlxuICovXG5mdW5jdGlvbiBleHRyYWN0VGVuYW50SWQoY2hhbGxlbmdlSW5mbykge1xuICAgIGNvbnN0IHBhcnNlZEF1dGhVcmkgPSBuZXcgVVJMKGNoYWxsZW5nZUluZm8uYXV0aG9yaXphdGlvbl91cmkpO1xuICAgIGNvbnN0IHBhdGhTZWdtZW50cyA9IHBhcnNlZEF1dGhVcmkucGF0aG5hbWUuc3BsaXQoXCIvXCIpO1xuICAgIGNvbnN0IHRlbmFudElkID0gcGF0aFNlZ21lbnRzWzFdO1xuICAgIGlmICh0ZW5hbnRJZCAmJiBpc1V1aWQodGVuYW50SWQpKSB7XG4gICAgICAgIHJldHVybiB0ZW5hbnRJZDtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbi8qKlxuICogQnVpbGRzIHRoZSBhdXRoZW50aWNhdGlvbiBzY29wZXMgYmFzZWQgb24gdGhlIGluZm9ybWF0aW9uIHRoYXQgY29tZXMgaW4gdGhlXG4gKiBjaGFsbGVuZ2UgaW5mb3JtYXRpb24uIFNjb3BlcyB1cmwgaXMgcHJlc2VudCBpbiB0aGUgcmVzb3VyY2VfaWQsIGlmIGl0IGlzIGVtcHR5XG4gKiB3ZSBrZWVwIHVzaW5nIHRoZSBvcmlnaW5hbCBzY29wZXMuXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkU2NvcGVzKGNoYWxsZW5nZU9wdGlvbnMsIGNoYWxsZW5nZUluZm8pIHtcbiAgICBpZiAoIWNoYWxsZW5nZUluZm8ucmVzb3VyY2VfaWQpIHtcbiAgICAgICAgcmV0dXJuIGNoYWxsZW5nZU9wdGlvbnMuc2NvcGVzO1xuICAgIH1cbiAgICBjb25zdCBjaGFsbGVuZ2VTY29wZXMgPSBuZXcgVVJMKGNoYWxsZW5nZUluZm8ucmVzb3VyY2VfaWQpO1xuICAgIGNoYWxsZW5nZVNjb3Blcy5wYXRobmFtZSA9IENvbnN0YW50cy5EZWZhdWx0U2NvcGU7XG4gICAgbGV0IHNjb3BlID0gY2hhbGxlbmdlU2NvcGVzLnRvU3RyaW5nKCk7XG4gICAgaWYgKHNjb3BlID09PSBcImh0dHBzOi8vZGlzay5henVyZS5jb20vLmRlZmF1bHRcIikge1xuICAgICAgICAvLyB0aGUgZXh0cmEgc2xhc2ggaXMgcmVxdWlyZWQgYnkgdGhlIHNlcnZpY2VcbiAgICAgICAgc2NvcGUgPSBcImh0dHBzOi8vZGlzay5henVyZS5jb20vLy5kZWZhdWx0XCI7XG4gICAgfVxuICAgIHJldHVybiBbc2NvcGVdO1xufVxuLyoqXG4gKiBXZSB3aWxsIHJldHJpZXZlIHRoZSBjaGFsbGVuZ2Ugb25seSBpZiB0aGUgcmVzcG9uc2Ugc3RhdHVzIGNvZGUgd2FzIDQwMSxcbiAqIGFuZCBpZiB0aGUgcmVzcG9uc2UgY29udGFpbmVkIHRoZSBoZWFkZXIgXCJXV1ctQXV0aGVudGljYXRlXCIgd2l0aCBhIG5vbi1lbXB0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0Q2hhbGxlbmdlKHJlc3BvbnNlKSB7XG4gICAgY29uc3QgY2hhbGxlbmdlID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJXV1ctQXV0aGVudGljYXRlXCIpO1xuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSAmJiBjaGFsbGVuZ2UpIHtcbiAgICAgICAgcmV0dXJuIGNoYWxsZW5nZTtcbiAgICB9XG4gICAgcmV0dXJuO1xufVxuLyoqXG4gKiBDb252ZXJ0czogYEJlYXJlciBhPVwiYlwiIGM9XCJkXCJgLlxuICogSW50bzogYFsgeyBhOiAnYicsIGM6ICdkJyB9XWAuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQ2hhbGxlbmdlKGNoYWxsZW5nZSkge1xuICAgIGNvbnN0IGJlYXJlckNoYWxsZW5nZSA9IGNoYWxsZW5nZS5zbGljZShcIkJlYXJlciBcIi5sZW5ndGgpO1xuICAgIGNvbnN0IGNoYWxsZW5nZVBhcnRzID0gYCR7YmVhcmVyQ2hhbGxlbmdlLnRyaW0oKX0gYC5zcGxpdChcIiBcIikuZmlsdGVyKCh4KSA9PiB4KTtcbiAgICBjb25zdCBrZXlWYWx1ZVBhaXJzID0gY2hhbGxlbmdlUGFydHMubWFwKChrZXlWYWx1ZSkgPT4gKChba2V5LCB2YWx1ZV0pID0+ICh7IFtrZXldOiB2YWx1ZSB9KSkoa2V5VmFsdWUudHJpbSgpLnNwbGl0KFwiPVwiKSkpO1xuICAgIC8vIEtleS12YWx1ZSBwYWlycyB0byBwbGFpbiBvYmplY3Q6XG4gICAgcmV0dXJuIGtleVZhbHVlUGFpcnMucmVkdWNlKChhLCBiKSA9PiAoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhKSwgYikpLCB7fSk7XG59XG4vKipcbiAqIEV4dHJhY3RzIHRoZSBvcHRpb25zIGZvcm0gYSBQaXBlbGluZSBSZXF1ZXN0IGZvciBsYXRlciByZS11c2VcbiAqL1xuZnVuY3Rpb24gcmVxdWVzdFRvT3B0aW9ucyhyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWJvcnRTaWduYWw6IHJlcXVlc3QuYWJvcnRTaWduYWwsXG4gICAgICAgIHJlcXVlc3RPcHRpb25zOiB7XG4gICAgICAgICAgICB0aW1lb3V0OiByZXF1ZXN0LnRpbWVvdXQsXG4gICAgICAgIH0sXG4gICAgICAgIHRyYWNpbmdPcHRpb25zOiByZXF1ZXN0LnRyYWNpbmdPcHRpb25zLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRob3JpemVSZXF1ZXN0T25UZW5hbnRDaGFsbGVuZ2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/base64.js":
/*!************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/base64.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeString: () => (/* binding */ decodeString),\n/* harmony export */   decodeStringToString: () => (/* binding */ decodeStringToString),\n/* harmony export */   encodeByteArray: () => (/* binding */ encodeByteArray),\n/* harmony export */   encodeString: () => (/* binding */ encodeString)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Encodes a string in base64 format.\n * @param value - the string to encode\n * @internal\n */\nfunction encodeString(value) {\n    return Buffer.from(value).toString(\"base64\");\n}\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Aray to encode\n * @internal\n */\nfunction encodeByteArray(value) {\n    const bufferValue = value instanceof Buffer ? value : Buffer.from(value.buffer);\n    return bufferValue.toString(\"base64\");\n}\n/**\n * Decodes a base64 string into a byte array.\n * @param value - the base64 string to decode\n * @internal\n */\nfunction decodeString(value) {\n    return Buffer.from(value, \"base64\");\n}\n/**\n * Decodes a base64 string into a string.\n * @param value - the base64 string to decode\n * @internal\n */\nfunction decodeStringToString(value) {\n    return Buffer.from(value, \"base64\").toString();\n}\n//# sourceMappingURL=base64.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2Jhc2U2NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2Jhc2U2NC5qcz8yMTdhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBFbmNvZGVzIGEgc3RyaW5nIGluIGJhc2U2NCBmb3JtYXQuXG4gKiBAcGFyYW0gdmFsdWUgLSB0aGUgc3RyaW5nIHRvIGVuY29kZVxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWUpLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xufVxuLyoqXG4gKiBFbmNvZGVzIGEgYnl0ZSBhcnJheSBpbiBiYXNlNjQgZm9ybWF0LlxuICogQHBhcmFtIHZhbHVlIC0gdGhlIFVpbnQ4QXJheSB0byBlbmNvZGVcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlQnl0ZUFycmF5KHZhbHVlKSB7XG4gICAgY29uc3QgYnVmZmVyVmFsdWUgPSB2YWx1ZSBpbnN0YW5jZW9mIEJ1ZmZlciA/IHZhbHVlIDogQnVmZmVyLmZyb20odmFsdWUuYnVmZmVyKTtcbiAgICByZXR1cm4gYnVmZmVyVmFsdWUudG9TdHJpbmcoXCJiYXNlNjRcIik7XG59XG4vKipcbiAqIERlY29kZXMgYSBiYXNlNjQgc3RyaW5nIGludG8gYSBieXRlIGFycmF5LlxuICogQHBhcmFtIHZhbHVlIC0gdGhlIGJhc2U2NCBzdHJpbmcgdG8gZGVjb2RlXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVN0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZSwgXCJiYXNlNjRcIik7XG59XG4vKipcbiAqIERlY29kZXMgYSBiYXNlNjQgc3RyaW5nIGludG8gYSBzdHJpbmcuXG4gKiBAcGFyYW0gdmFsdWUgLSB0aGUgYmFzZTY0IHN0cmluZyB0byBkZWNvZGVcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlU3RyaW5nVG9TdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWUsIFwiYmFzZTY0XCIpLnRvU3RyaW5nKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/base64.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/deserializationPolicy.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/deserializationPolicy.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deserializationPolicy: () => (/* binding */ deserializationPolicy),\n/* harmony export */   deserializationPolicyName: () => (/* binding */ deserializationPolicyName)\n/* harmony export */ });\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interfaces.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./serializer.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js\");\n/* harmony import */ var _operationHelpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operationHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\nconst defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nconst defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n/**\n * The programmatic identifier of the deserializationPolicy.\n */\nconst deserializationPolicyName = \"deserializationPolicy\";\n/**\n * This policy handles parsing out responses according to OperationSpecs on the request.\n */\nfunction deserializationPolicy(options = {}) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const jsonContentTypes = (_b = (_a = options.expectedContentTypes) === null || _a === void 0 ? void 0 : _a.json) !== null && _b !== void 0 ? _b : defaultJsonContentTypes;\n    const xmlContentTypes = (_d = (_c = options.expectedContentTypes) === null || _c === void 0 ? void 0 : _c.xml) !== null && _d !== void 0 ? _d : defaultXmlContentTypes;\n    const parseXML = options.parseXML;\n    const serializerOptions = options.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_e = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _e !== void 0 ? _e : \"\",\n            includeRoot: (_f = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _f !== void 0 ? _f : false,\n            xmlCharKey: (_g = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _g !== void 0 ? _g : _interfaces_js__WEBPACK_IMPORTED_MODULE_0__.XML_CHARKEY,\n        },\n    };\n    return {\n        name: deserializationPolicyName,\n        async sendRequest(request, next) {\n            const response = await next(request);\n            return deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, updatedOptions, parseXML);\n        },\n    };\n}\nfunction getOperationResponseMap(parsedResponse) {\n    let result;\n    const request = parsedResponse.request;\n    const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getOperationRequestInfo)(request);\n    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n    if (operationSpec) {\n        if (!(operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter)) {\n            result = operationSpec.responses[parsedResponse.status];\n        }\n        else {\n            result = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter(operationSpec, parsedResponse);\n        }\n    }\n    return result;\n}\nfunction shouldDeserializeResponse(parsedResponse) {\n    const request = parsedResponse.request;\n    const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getOperationRequestInfo)(request);\n    const shouldDeserialize = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.shouldDeserialize;\n    let result;\n    if (shouldDeserialize === undefined) {\n        result = true;\n    }\n    else if (typeof shouldDeserialize === \"boolean\") {\n        result = shouldDeserialize;\n    }\n    else {\n        result = shouldDeserialize(parsedResponse);\n    }\n    return result;\n}\nasync function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options, parseXML) {\n    const parsedResponse = await parse(jsonContentTypes, xmlContentTypes, response, options, parseXML);\n    if (!shouldDeserializeResponse(parsedResponse)) {\n        return parsedResponse;\n    }\n    const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getOperationRequestInfo)(parsedResponse.request);\n    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n    if (!operationSpec || !operationSpec.responses) {\n        return parsedResponse;\n    }\n    const responseSpec = getOperationResponseMap(parsedResponse);\n    const { error, shouldReturnResponse } = handleErrorResponse(parsedResponse, operationSpec, responseSpec, options);\n    if (error) {\n        throw error;\n    }\n    else if (shouldReturnResponse) {\n        return parsedResponse;\n    }\n    // An operation response spec does exist for current status code, so\n    // use it to deserialize the response.\n    if (responseSpec) {\n        if (responseSpec.bodyMapper) {\n            let valueToDeserialize = parsedResponse.parsedBody;\n            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.Sequence) {\n                valueToDeserialize =\n                    typeof valueToDeserialize === \"object\"\n                        ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName]\n                        : [];\n            }\n            try {\n                parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\", options);\n            }\n            catch (deserializeError) {\n                const restError = new _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError(`Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, {\n                    statusCode: parsedResponse.status,\n                    request: parsedResponse.request,\n                    response: parsedResponse,\n                });\n                throw restError;\n            }\n        }\n        else if (operationSpec.httpMethod === \"HEAD\") {\n            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n        }\n        if (responseSpec.headersMapper) {\n            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\", { xml: {}, ignoreUnknownProperties: true });\n        }\n    }\n    return parsedResponse;\n}\nfunction isOperationSpecEmpty(operationSpec) {\n    const expectedStatusCodes = Object.keys(operationSpec.responses);\n    return (expectedStatusCodes.length === 0 ||\n        (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\"));\n}\nfunction handleErrorResponse(parsedResponse, operationSpec, responseSpec, options) {\n    var _a;\n    const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n    const isExpectedStatusCode = isOperationSpecEmpty(operationSpec)\n        ? isSuccessByStatus\n        : !!responseSpec;\n    if (isExpectedStatusCode) {\n        if (responseSpec) {\n            if (!responseSpec.isError) {\n                return { error: null, shouldReturnResponse: false };\n            }\n        }\n        else {\n            return { error: null, shouldReturnResponse: false };\n        }\n    }\n    const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;\n    const initialErrorMessage = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status))\n        ? `Unexpected status code: ${parsedResponse.status}`\n        : parsedResponse.bodyAsText;\n    const error = new _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError(initialErrorMessage, {\n        statusCode: parsedResponse.status,\n        request: parsedResponse.request,\n        response: parsedResponse,\n    });\n    // If the item failed but there's no error spec or default spec to deserialize the error,\n    // we should fail so we just throw the parsed response\n    if (!errorResponseSpec) {\n        throw error;\n    }\n    const defaultBodyMapper = errorResponseSpec.bodyMapper;\n    const defaultHeadersMapper = errorResponseSpec.headersMapper;\n    try {\n        // If error response has a body, try to deserialize it using default body mapper.\n        // Then try to extract error code & message from it\n        if (parsedResponse.parsedBody) {\n            const parsedBody = parsedResponse.parsedBody;\n            let deserializedError;\n            if (defaultBodyMapper) {\n                let valueToDeserialize = parsedBody;\n                if (operationSpec.isXML && defaultBodyMapper.type.name === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.Sequence) {\n                    valueToDeserialize = [];\n                    const elementName = defaultBodyMapper.xmlElementName;\n                    if (typeof parsedBody === \"object\" && elementName) {\n                        valueToDeserialize = parsedBody[elementName];\n                    }\n                }\n                deserializedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, \"error.response.parsedBody\", options);\n            }\n            const internalError = parsedBody.error || deserializedError || parsedBody;\n            error.code = internalError.code;\n            if (internalError.message) {\n                error.message = internalError.message;\n            }\n            if (defaultBodyMapper) {\n                error.response.parsedBody = deserializedError;\n            }\n        }\n        // If error response has headers, try to deserialize it using default header mapper\n        if (parsedResponse.headers && defaultHeadersMapper) {\n            error.response.parsedHeaders =\n                operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\");\n        }\n    }\n    catch (defaultError) {\n        error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n    }\n    return { error, shouldReturnResponse: false };\n}\nasync function parse(jsonContentTypes, xmlContentTypes, operationResponse, opts, parseXML) {\n    var _a;\n    if (!((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) &&\n        operationResponse.bodyAsText) {\n        const text = operationResponse.bodyAsText;\n        const contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n        const contentComponents = !contentType\n            ? []\n            : contentType.split(\";\").map((component) => component.toLowerCase());\n        try {\n            if (contentComponents.length === 0 ||\n                contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)) {\n                operationResponse.parsedBody = JSON.parse(text);\n                return operationResponse;\n            }\n            else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n                if (!parseXML) {\n                    throw new Error(\"Parsing XML not supported.\");\n                }\n                const body = await parseXML(text, opts.xml);\n                operationResponse.parsedBody = body;\n                return operationResponse;\n            }\n        }\n        catch (err) {\n            const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n            const errCode = err.code || _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError.PARSE_ERROR;\n            const e = new _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError(msg, {\n                code: errCode,\n                statusCode: operationResponse.status,\n                request: operationResponse.request,\n                response: operationResponse,\n            });\n            throw e;\n        }\n    }\n    return operationResponse;\n}\n//# sourceMappingURL=deserializationPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/deserializationPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/httpClientCache.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/httpClientCache.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCachedDefaultHttpClient: () => (/* binding */ getCachedDefaultHttpClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nlet cachedHttpClient;\nfunction getCachedDefaultHttpClient() {\n    if (!cachedHttpClient) {\n        cachedHttpClient = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createDefaultHttpClient)();\n    }\n    return cachedHttpClient;\n}\n//# sourceMappingURL=httpClientCache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2h0dHBDbGllbnRDYWNoZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDb0U7QUFDcEU7QUFDTztBQUNQO0FBQ0EsMkJBQTJCLGtGQUF1QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2VzbS9odHRwQ2xpZW50Q2FjaGUuanM/NDQ1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZURlZmF1bHRIdHRwQ2xpZW50IH0gZnJvbSBcIkBhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmVcIjtcbmxldCBjYWNoZWRIdHRwQ2xpZW50O1xuZXhwb3J0IGZ1bmN0aW9uIGdldENhY2hlZERlZmF1bHRIdHRwQ2xpZW50KCkge1xuICAgIGlmICghY2FjaGVkSHR0cENsaWVudCkge1xuICAgICAgICBjYWNoZWRIdHRwQ2xpZW50ID0gY3JlYXRlRGVmYXVsdEh0dHBDbGllbnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlZEh0dHBDbGllbnQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwQ2xpZW50Q2FjaGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/httpClientCache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapperTypeNames: () => (/* reexport safe */ _serializer_js__WEBPACK_IMPORTED_MODULE_0__.MapperTypeNames),\n/* harmony export */   ServiceClient: () => (/* reexport safe */ _serviceClient_js__WEBPACK_IMPORTED_MODULE_1__.ServiceClient),\n/* harmony export */   XML_ATTRKEY: () => (/* reexport safe */ _interfaces_js__WEBPACK_IMPORTED_MODULE_3__.XML_ATTRKEY),\n/* harmony export */   XML_CHARKEY: () => (/* reexport safe */ _interfaces_js__WEBPACK_IMPORTED_MODULE_3__.XML_CHARKEY),\n/* harmony export */   authorizeRequestOnClaimChallenge: () => (/* reexport safe */ _authorizeRequestOnClaimChallenge_js__WEBPACK_IMPORTED_MODULE_6__.authorizeRequestOnClaimChallenge),\n/* harmony export */   authorizeRequestOnTenantChallenge: () => (/* reexport safe */ _authorizeRequestOnTenantChallenge_js__WEBPACK_IMPORTED_MODULE_7__.authorizeRequestOnTenantChallenge),\n/* harmony export */   createClientPipeline: () => (/* reexport safe */ _pipeline_js__WEBPACK_IMPORTED_MODULE_2__.createClientPipeline),\n/* harmony export */   createSerializer: () => (/* reexport safe */ _serializer_js__WEBPACK_IMPORTED_MODULE_0__.createSerializer),\n/* harmony export */   deserializationPolicy: () => (/* reexport safe */ _deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_4__.deserializationPolicy),\n/* harmony export */   deserializationPolicyName: () => (/* reexport safe */ _deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_4__.deserializationPolicyName),\n/* harmony export */   serializationPolicy: () => (/* reexport safe */ _serializationPolicy_js__WEBPACK_IMPORTED_MODULE_5__.serializationPolicy),\n/* harmony export */   serializationPolicyName: () => (/* reexport safe */ _serializationPolicy_js__WEBPACK_IMPORTED_MODULE_5__.serializationPolicyName)\n/* harmony export */ });\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializer.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js\");\n/* harmony import */ var _serviceClient_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serviceClient.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serviceClient.js\");\n/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pipeline.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/pipeline.js\");\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interfaces.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js\");\n/* harmony import */ var _deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./deserializationPolicy.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/deserializationPolicy.js\");\n/* harmony import */ var _serializationPolicy_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./serializationPolicy.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializationPolicy.js\");\n/* harmony import */ var _authorizeRequestOnClaimChallenge_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./authorizeRequestOnClaimChallenge.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnClaimChallenge.js\");\n/* harmony import */ var _authorizeRequestOnTenantChallenge_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./authorizeRequestOnTenantChallenge.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNvRTtBQUNqQjtBQUNFO0FBQ087QUFDbUM7QUFDTjtBQUNBO0FBQ0U7QUFDM0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1jbGllbnQvZGlzdC9lc20vaW5kZXguanM/ZGEwNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmV4cG9ydCB7IGNyZWF0ZVNlcmlhbGl6ZXIsIE1hcHBlclR5cGVOYW1lcyB9IGZyb20gXCIuL3NlcmlhbGl6ZXIuanNcIjtcbmV4cG9ydCB7IFNlcnZpY2VDbGllbnQgfSBmcm9tIFwiLi9zZXJ2aWNlQ2xpZW50LmpzXCI7XG5leHBvcnQgeyBjcmVhdGVDbGllbnRQaXBlbGluZSB9IGZyb20gXCIuL3BpcGVsaW5lLmpzXCI7XG5leHBvcnQgeyBYTUxfQVRUUktFWSwgWE1MX0NIQVJLRVksIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy5qc1wiO1xuZXhwb3J0IHsgZGVzZXJpYWxpemF0aW9uUG9saWN5LCBkZXNlcmlhbGl6YXRpb25Qb2xpY3lOYW1lLCB9IGZyb20gXCIuL2Rlc2VyaWFsaXphdGlvblBvbGljeS5qc1wiO1xuZXhwb3J0IHsgc2VyaWFsaXphdGlvblBvbGljeSwgc2VyaWFsaXphdGlvblBvbGljeU5hbWUsIH0gZnJvbSBcIi4vc2VyaWFsaXphdGlvblBvbGljeS5qc1wiO1xuZXhwb3J0IHsgYXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2UgfSBmcm9tIFwiLi9hdXRob3JpemVSZXF1ZXN0T25DbGFpbUNoYWxsZW5nZS5qc1wiO1xuZXhwb3J0IHsgYXV0aG9yaXplUmVxdWVzdE9uVGVuYW50Q2hhbGxlbmdlIH0gZnJvbSBcIi4vYXV0aG9yaXplUmVxdWVzdE9uVGVuYW50Q2hhbGxlbmdlLmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPathStringFromParameter: () => (/* binding */ getPathStringFromParameter),\n/* harmony export */   getStreamingResponseStatusCodes: () => (/* binding */ getStreamingResponseStatusCodes)\n/* harmony export */ });\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializer.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nfunction getStreamingResponseStatusCodes(operationSpec) {\n    const result = new Set();\n    for (const statusCode in operationSpec.responses) {\n        const operationResponse = operationSpec.responses[statusCode];\n        if (operationResponse.bodyMapper &&\n            operationResponse.bodyMapper.type.name === _serializer_js__WEBPACK_IMPORTED_MODULE_0__.MapperTypeNames.Stream) {\n            result.add(Number(statusCode));\n        }\n    }\n    return result;\n}\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n * @internal\n */\nfunction getPathStringFromParameter(parameter) {\n    const { parameterPath, mapper } = parameter;\n    let result;\n    if (typeof parameterPath === \"string\") {\n        result = parameterPath;\n    }\n    else if (Array.isArray(parameterPath)) {\n        result = parameterPath.join(\".\");\n    }\n    else {\n        result = mapper.serializedName;\n    }\n    return result;\n}\n//# sourceMappingURL=interfaceHelpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2ludGVyZmFjZUhlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsMkRBQWU7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSx3QkFBd0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1jbGllbnQvZGlzdC9lc20vaW50ZXJmYWNlSGVscGVycy5qcz85MGRjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgTWFwcGVyVHlwZU5hbWVzIH0gZnJvbSBcIi4vc2VyaWFsaXplci5qc1wiO1xuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IG9mIHN0YXR1cyBjb2RlcyBmb3Igc3RyZWFtaW5nIHJlc3BvbnNlcy5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RyZWFtaW5nUmVzcG9uc2VTdGF0dXNDb2RlcyhvcGVyYXRpb25TcGVjKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFNldCgpO1xuICAgIGZvciAoY29uc3Qgc3RhdHVzQ29kZSBpbiBvcGVyYXRpb25TcGVjLnJlc3BvbnNlcykge1xuICAgICAgICBjb25zdCBvcGVyYXRpb25SZXNwb25zZSA9IG9wZXJhdGlvblNwZWMucmVzcG9uc2VzW3N0YXR1c0NvZGVdO1xuICAgICAgICBpZiAob3BlcmF0aW9uUmVzcG9uc2UuYm9keU1hcHBlciAmJlxuICAgICAgICAgICAgb3BlcmF0aW9uUmVzcG9uc2UuYm9keU1hcHBlci50eXBlLm5hbWUgPT09IE1hcHBlclR5cGVOYW1lcy5TdHJlYW0pIHtcbiAgICAgICAgICAgIHJlc3VsdC5hZGQoTnVtYmVyKHN0YXR1c0NvZGUpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBHZXQgdGhlIHBhdGggdG8gdGhpcyBwYXJhbWV0ZXIncyB2YWx1ZSBhcyBhIGRvdHRlZCBzdHJpbmcgKGEuYi5jKS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXIgLSBUaGUgcGFyYW1ldGVyIHRvIGdldCB0aGUgcGF0aCBzdHJpbmcgZm9yLlxuICogQHJldHVybnMgVGhlIHBhdGggdG8gdGhpcyBwYXJhbWV0ZXIncyB2YWx1ZSBhcyBhIGRvdHRlZCBzdHJpbmcuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhdGhTdHJpbmdGcm9tUGFyYW1ldGVyKHBhcmFtZXRlcikge1xuICAgIGNvbnN0IHsgcGFyYW1ldGVyUGF0aCwgbWFwcGVyIH0gPSBwYXJhbWV0ZXI7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBpZiAodHlwZW9mIHBhcmFtZXRlclBhdGggPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmVzdWx0ID0gcGFyYW1ldGVyUGF0aDtcbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShwYXJhbWV0ZXJQYXRoKSkge1xuICAgICAgICByZXN1bHQgPSBwYXJhbWV0ZXJQYXRoLmpvaW4oXCIuXCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gbWFwcGVyLnNlcmlhbGl6ZWROYW1lO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJmYWNlSGVscGVycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/interfaces.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XML_ATTRKEY: () => (/* binding */ XML_ATTRKEY),\n/* harmony export */   XML_CHARKEY: () => (/* binding */ XML_CHARKEY)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Default key used to access the XML attributes.\n */\nconst XML_ATTRKEY = \"$\";\n/**\n * Default key used to access the XML value content.\n */\nconst XML_CHARKEY = \"_\";\n//# sourceMappingURL=interfaces.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2ludGVyZmFjZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2ludGVyZmFjZXMuanM/Nzc0NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8qKlxuICogRGVmYXVsdCBrZXkgdXNlZCB0byBhY2Nlc3MgdGhlIFhNTCBhdHRyaWJ1dGVzLlxuICovXG5leHBvcnQgY29uc3QgWE1MX0FUVFJLRVkgPSBcIiRcIjtcbi8qKlxuICogRGVmYXVsdCBrZXkgdXNlZCB0byBhY2Nlc3MgdGhlIFhNTCB2YWx1ZSBjb250ZW50LlxuICovXG5leHBvcnQgY29uc3QgWE1MX0NIQVJLRVkgPSBcIl9cIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVyZmFjZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/log.js":
/*!*********************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/log.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst logger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_0__.createClientLogger)(\"core-client\");\n//# sourceMappingURL=log.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2xvZy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDbUQ7QUFDNUMsZUFBZSxpRUFBa0I7QUFDeEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1jbGllbnQvZGlzdC9lc20vbG9nLmpzPzYzYTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVDbGllbnRMb2dnZXIgfSBmcm9tIFwiQGF6dXJlL2xvZ2dlclwiO1xuZXhwb3J0IGNvbnN0IGxvZ2dlciA9IGNyZWF0ZUNsaWVudExvZ2dlcihcImNvcmUtY2xpZW50XCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/log.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/operationHelpers.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOperationArgumentValueFromParameter: () => (/* binding */ getOperationArgumentValueFromParameter),\n/* harmony export */   getOperationRequestInfo: () => (/* binding */ getOperationRequestInfo)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/state.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * @internal\n * Retrieves the value to use for a given operation argument\n * @param operationArguments - The arguments passed from the generated client\n * @param parameter - The parameter description\n * @param fallbackObject - If something isn't found in the arguments bag, look here.\n *  Generally used to look at the service client properties.\n */\nfunction getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {\n    let parameterPath = parameter.parameterPath;\n    const parameterMapper = parameter.mapper;\n    let value;\n    if (typeof parameterPath === \"string\") {\n        parameterPath = [parameterPath];\n    }\n    if (Array.isArray(parameterPath)) {\n        if (parameterPath.length > 0) {\n            if (parameterMapper.isConstant) {\n                value = parameterMapper.defaultValue;\n            }\n            else {\n                let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n                if (!propertySearchResult.propertyFound && fallbackObject) {\n                    propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);\n                }\n                let useDefaultValue = false;\n                if (!propertySearchResult.propertyFound) {\n                    useDefaultValue =\n                        parameterMapper.required ||\n                            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n                }\n                value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n            }\n        }\n    }\n    else {\n        if (parameterMapper.required) {\n            value = {};\n        }\n        for (const propertyName in parameterPath) {\n            const propertyMapper = parameterMapper.type.modelProperties[propertyName];\n            const propertyPath = parameterPath[propertyName];\n            const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {\n                parameterPath: propertyPath,\n                mapper: propertyMapper,\n            }, fallbackObject);\n            if (propertyValue !== undefined) {\n                if (!value) {\n                    value = {};\n                }\n                value[propertyName] = propertyValue;\n            }\n        }\n    }\n    return value;\n}\nfunction getPropertyFromParameterPath(parent, parameterPath) {\n    const result = { propertyFound: false };\n    let i = 0;\n    for (; i < parameterPath.length; ++i) {\n        const parameterPathPart = parameterPath[i];\n        // Make sure to check inherited properties too, so don't use hasOwnProperty().\n        if (parent && parameterPathPart in parent) {\n            parent = parent[parameterPathPart];\n        }\n        else {\n            break;\n        }\n    }\n    if (i === parameterPath.length) {\n        result.propertyValue = parent;\n        result.propertyFound = true;\n    }\n    return result;\n}\nconst originalRequestSymbol = Symbol.for(\"@azure/core-client original request\");\nfunction hasOriginalRequest(request) {\n    return originalRequestSymbol in request;\n}\nfunction getOperationRequestInfo(request) {\n    if (hasOriginalRequest(request)) {\n        return getOperationRequestInfo(request[originalRequestSymbol]);\n    }\n    let info = _state_js__WEBPACK_IMPORTED_MODULE_0__.state.operationRequestMap.get(request);\n    if (!info) {\n        info = {};\n        _state_js__WEBPACK_IMPORTED_MODULE_0__.state.operationRequestMap.set(request, info);\n    }\n    return info;\n}\n//# sourceMappingURL=operationHelpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL29wZXJhdGlvbkhlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLFdBQVcsMEJBQTBCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxlQUFlLDRDQUFLO0FBQ3BCO0FBQ0E7QUFDQSxRQUFRLDRDQUFLO0FBQ2I7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1jbGllbnQvZGlzdC9lc20vb3BlcmF0aW9uSGVscGVycy5qcz85Yzc0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgc3RhdGUgfSBmcm9tIFwiLi9zdGF0ZS5qc1wiO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIFJldHJpZXZlcyB0aGUgdmFsdWUgdG8gdXNlIGZvciBhIGdpdmVuIG9wZXJhdGlvbiBhcmd1bWVudFxuICogQHBhcmFtIG9wZXJhdGlvbkFyZ3VtZW50cyAtIFRoZSBhcmd1bWVudHMgcGFzc2VkIGZyb20gdGhlIGdlbmVyYXRlZCBjbGllbnRcbiAqIEBwYXJhbSBwYXJhbWV0ZXIgLSBUaGUgcGFyYW1ldGVyIGRlc2NyaXB0aW9uXG4gKiBAcGFyYW0gZmFsbGJhY2tPYmplY3QgLSBJZiBzb21ldGhpbmcgaXNuJ3QgZm91bmQgaW4gdGhlIGFyZ3VtZW50cyBiYWcsIGxvb2sgaGVyZS5cbiAqICBHZW5lcmFsbHkgdXNlZCB0byBsb29rIGF0IHRoZSBzZXJ2aWNlIGNsaWVudCBwcm9wZXJ0aWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3BlcmF0aW9uQXJndW1lbnRWYWx1ZUZyb21QYXJhbWV0ZXIob3BlcmF0aW9uQXJndW1lbnRzLCBwYXJhbWV0ZXIsIGZhbGxiYWNrT2JqZWN0KSB7XG4gICAgbGV0IHBhcmFtZXRlclBhdGggPSBwYXJhbWV0ZXIucGFyYW1ldGVyUGF0aDtcbiAgICBjb25zdCBwYXJhbWV0ZXJNYXBwZXIgPSBwYXJhbWV0ZXIubWFwcGVyO1xuICAgIGxldCB2YWx1ZTtcbiAgICBpZiAodHlwZW9mIHBhcmFtZXRlclBhdGggPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcGFyYW1ldGVyUGF0aCA9IFtwYXJhbWV0ZXJQYXRoXTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGFyYW1ldGVyUGF0aCkpIHtcbiAgICAgICAgaWYgKHBhcmFtZXRlclBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKHBhcmFtZXRlck1hcHBlci5pc0NvbnN0YW50KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJhbWV0ZXJNYXBwZXIuZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHByb3BlcnR5U2VhcmNoUmVzdWx0ID0gZ2V0UHJvcGVydHlGcm9tUGFyYW1ldGVyUGF0aChvcGVyYXRpb25Bcmd1bWVudHMsIHBhcmFtZXRlclBhdGgpO1xuICAgICAgICAgICAgICAgIGlmICghcHJvcGVydHlTZWFyY2hSZXN1bHQucHJvcGVydHlGb3VuZCAmJiBmYWxsYmFja09iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eVNlYXJjaFJlc3VsdCA9IGdldFByb3BlcnR5RnJvbVBhcmFtZXRlclBhdGgoZmFsbGJhY2tPYmplY3QsIHBhcmFtZXRlclBhdGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgdXNlRGVmYXVsdFZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKCFwcm9wZXJ0eVNlYXJjaFJlc3VsdC5wcm9wZXJ0eUZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHVzZURlZmF1bHRWYWx1ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJNYXBwZXIucmVxdWlyZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocGFyYW1ldGVyUGF0aFswXSA9PT0gXCJvcHRpb25zXCIgJiYgcGFyYW1ldGVyUGF0aC5sZW5ndGggPT09IDIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHVzZURlZmF1bHRWYWx1ZSA/IHBhcmFtZXRlck1hcHBlci5kZWZhdWx0VmFsdWUgOiBwcm9wZXJ0eVNlYXJjaFJlc3VsdC5wcm9wZXJ0eVZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAocGFyYW1ldGVyTWFwcGVyLnJlcXVpcmVkKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgcHJvcGVydHlOYW1lIGluIHBhcmFtZXRlclBhdGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5TWFwcGVyID0gcGFyYW1ldGVyTWFwcGVyLnR5cGUubW9kZWxQcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eVBhdGggPSBwYXJhbWV0ZXJQYXRoW3Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eVZhbHVlID0gZ2V0T3BlcmF0aW9uQXJndW1lbnRWYWx1ZUZyb21QYXJhbWV0ZXIob3BlcmF0aW9uQXJndW1lbnRzLCB7XG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyUGF0aDogcHJvcGVydHlQYXRoLFxuICAgICAgICAgICAgICAgIG1hcHBlcjogcHJvcGVydHlNYXBwZXIsXG4gICAgICAgICAgICB9LCBmYWxsYmFja09iamVjdCk7XG4gICAgICAgICAgICBpZiAocHJvcGVydHlWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YWx1ZVtwcm9wZXJ0eU5hbWVdID0gcHJvcGVydHlWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBnZXRQcm9wZXJ0eUZyb21QYXJhbWV0ZXJQYXRoKHBhcmVudCwgcGFyYW1ldGVyUGF0aCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHsgcHJvcGVydHlGb3VuZDogZmFsc2UgfTtcbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBwYXJhbWV0ZXJQYXRoLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHBhcmFtZXRlclBhdGhQYXJ0ID0gcGFyYW1ldGVyUGF0aFtpXTtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRvIGNoZWNrIGluaGVyaXRlZCBwcm9wZXJ0aWVzIHRvbywgc28gZG9uJ3QgdXNlIGhhc093blByb3BlcnR5KCkuXG4gICAgICAgIGlmIChwYXJlbnQgJiYgcGFyYW1ldGVyUGF0aFBhcnQgaW4gcGFyZW50KSB7XG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnRbcGFyYW1ldGVyUGF0aFBhcnRdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgPT09IHBhcmFtZXRlclBhdGgubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdC5wcm9wZXJ0eVZhbHVlID0gcGFyZW50O1xuICAgICAgICByZXN1bHQucHJvcGVydHlGb3VuZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5jb25zdCBvcmlnaW5hbFJlcXVlc3RTeW1ib2wgPSBTeW1ib2wuZm9yKFwiQGF6dXJlL2NvcmUtY2xpZW50IG9yaWdpbmFsIHJlcXVlc3RcIik7XG5mdW5jdGlvbiBoYXNPcmlnaW5hbFJlcXVlc3QocmVxdWVzdCkge1xuICAgIHJldHVybiBvcmlnaW5hbFJlcXVlc3RTeW1ib2wgaW4gcmVxdWVzdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVyYXRpb25SZXF1ZXN0SW5mbyhyZXF1ZXN0KSB7XG4gICAgaWYgKGhhc09yaWdpbmFsUmVxdWVzdChyZXF1ZXN0KSkge1xuICAgICAgICByZXR1cm4gZ2V0T3BlcmF0aW9uUmVxdWVzdEluZm8ocmVxdWVzdFtvcmlnaW5hbFJlcXVlc3RTeW1ib2xdKTtcbiAgICB9XG4gICAgbGV0IGluZm8gPSBzdGF0ZS5vcGVyYXRpb25SZXF1ZXN0TWFwLmdldChyZXF1ZXN0KTtcbiAgICBpZiAoIWluZm8pIHtcbiAgICAgICAgaW5mbyA9IHt9O1xuICAgICAgICBzdGF0ZS5vcGVyYXRpb25SZXF1ZXN0TWFwLnNldChyZXF1ZXN0LCBpbmZvKTtcbiAgICB9XG4gICAgcmV0dXJuIGluZm87XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVyYXRpb25IZWxwZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/pipeline.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/pipeline.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClientPipeline: () => (/* binding */ createClientPipeline)\n/* harmony export */ });\n/* harmony import */ var _deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deserializationPolicy.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/deserializationPolicy.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _serializationPolicy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./serializationPolicy.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializationPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n/**\n * Creates a new Pipeline for use with a Service Client.\n * Adds in deserializationPolicy by default.\n * Also adds in bearerTokenAuthenticationPolicy if passed a TokenCredential.\n * @param options - Options to customize the created pipeline.\n */\nfunction createClientPipeline(options = {}) {\n    const pipeline = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.createPipelineFromOptions)(options !== null && options !== void 0 ? options : {});\n    if (options.credentialOptions) {\n        pipeline.addPolicy((0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.bearerTokenAuthenticationPolicy)({\n            credential: options.credentialOptions.credential,\n            scopes: options.credentialOptions.credentialScopes,\n        }));\n    }\n    pipeline.addPolicy((0,_serializationPolicy_js__WEBPACK_IMPORTED_MODULE_2__.serializationPolicy)(options.serializationOptions), { phase: \"Serialize\" });\n    pipeline.addPolicy((0,_deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_0__.deserializationPolicy)(options.deserializationOptions), {\n        phase: \"Deserialize\",\n    });\n    return pipeline;\n}\n//# sourceMappingURL=pipeline.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL3BpcGVsaW5lLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ21FO0FBQ3FDO0FBQ3pDO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDBDQUEwQztBQUNqRCxxQkFBcUIsb0ZBQXlCLHNEQUFzRDtBQUNwRztBQUNBLDJCQUEyQiwwRkFBK0I7QUFDMUQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLHVCQUF1Qiw0RUFBbUIsa0NBQWtDLG9CQUFvQjtBQUNoRyx1QkFBdUIsZ0ZBQXFCO0FBQzVDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2VzbS9waXBlbGluZS5qcz83MGQ4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgZGVzZXJpYWxpemF0aW9uUG9saWN5IH0gZnJvbSBcIi4vZGVzZXJpYWxpemF0aW9uUG9saWN5LmpzXCI7XG5pbXBvcnQgeyBiZWFyZXJUb2tlbkF1dGhlbnRpY2F0aW9uUG9saWN5LCBjcmVhdGVQaXBlbGluZUZyb21PcHRpb25zLCB9IGZyb20gXCJAYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lXCI7XG5pbXBvcnQgeyBzZXJpYWxpemF0aW9uUG9saWN5IH0gZnJvbSBcIi4vc2VyaWFsaXphdGlvblBvbGljeS5qc1wiO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFBpcGVsaW5lIGZvciB1c2Ugd2l0aCBhIFNlcnZpY2UgQ2xpZW50LlxuICogQWRkcyBpbiBkZXNlcmlhbGl6YXRpb25Qb2xpY3kgYnkgZGVmYXVsdC5cbiAqIEFsc28gYWRkcyBpbiBiZWFyZXJUb2tlbkF1dGhlbnRpY2F0aW9uUG9saWN5IGlmIHBhc3NlZCBhIFRva2VuQ3JlZGVudGlhbC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBjdXN0b21pemUgdGhlIGNyZWF0ZWQgcGlwZWxpbmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDbGllbnRQaXBlbGluZShvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBwaXBlbGluZSA9IGNyZWF0ZVBpcGVsaW5lRnJvbU9wdGlvbnMob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDoge30pO1xuICAgIGlmIChvcHRpb25zLmNyZWRlbnRpYWxPcHRpb25zKSB7XG4gICAgICAgIHBpcGVsaW5lLmFkZFBvbGljeShiZWFyZXJUb2tlbkF1dGhlbnRpY2F0aW9uUG9saWN5KHtcbiAgICAgICAgICAgIGNyZWRlbnRpYWw6IG9wdGlvbnMuY3JlZGVudGlhbE9wdGlvbnMuY3JlZGVudGlhbCxcbiAgICAgICAgICAgIHNjb3Blczogb3B0aW9ucy5jcmVkZW50aWFsT3B0aW9ucy5jcmVkZW50aWFsU2NvcGVzLFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHBpcGVsaW5lLmFkZFBvbGljeShzZXJpYWxpemF0aW9uUG9saWN5KG9wdGlvbnMuc2VyaWFsaXphdGlvbk9wdGlvbnMpLCB7IHBoYXNlOiBcIlNlcmlhbGl6ZVwiIH0pO1xuICAgIHBpcGVsaW5lLmFkZFBvbGljeShkZXNlcmlhbGl6YXRpb25Qb2xpY3kob3B0aW9ucy5kZXNlcmlhbGl6YXRpb25PcHRpb25zKSwge1xuICAgICAgICBwaGFzZTogXCJEZXNlcmlhbGl6ZVwiLFxuICAgIH0pO1xuICAgIHJldHVybiBwaXBlbGluZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGVsaW5lLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/pipeline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/serializationPolicy.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/serializationPolicy.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serializationPolicy: () => (/* binding */ serializationPolicy),\n/* harmony export */   serializationPolicyName: () => (/* binding */ serializationPolicyName),\n/* harmony export */   serializeHeaders: () => (/* binding */ serializeHeaders),\n/* harmony export */   serializeRequestBody: () => (/* binding */ serializeRequestBody)\n/* harmony export */ });\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interfaces.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js\");\n/* harmony import */ var _operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operationHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js\");\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./serializer.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js\");\n/* harmony import */ var _interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interfaceHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n/**\n * The programmatic identifier of the serializationPolicy.\n */\nconst serializationPolicyName = \"serializationPolicy\";\n/**\n * This policy handles assembling the request body and headers using\n * an OperationSpec and OperationArguments on the request.\n */\nfunction serializationPolicy(options = {}) {\n    const stringifyXML = options.stringifyXML;\n    return {\n        name: serializationPolicyName,\n        async sendRequest(request, next) {\n            const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getOperationRequestInfo)(request);\n            const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n            const operationArguments = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationArguments;\n            if (operationSpec && operationArguments) {\n                serializeHeaders(request, operationArguments, operationSpec);\n                serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);\n            }\n            return next(request);\n        },\n    };\n}\n/**\n * @internal\n */\nfunction serializeHeaders(request, operationArguments, operationSpec) {\n    var _a, _b;\n    if (operationSpec.headerParameters) {\n        for (const headerParameter of operationSpec.headerParameters) {\n            let headerValue = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getOperationArgumentValueFromParameter)(operationArguments, headerParameter);\n            if ((headerValue !== null && headerValue !== undefined) || headerParameter.mapper.required) {\n                headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(headerParameter));\n                const headerCollectionPrefix = headerParameter.mapper\n                    .headerCollectionPrefix;\n                if (headerCollectionPrefix) {\n                    for (const key of Object.keys(headerValue)) {\n                        request.headers.set(headerCollectionPrefix + key, headerValue[key]);\n                    }\n                }\n                else {\n                    request.headers.set(headerParameter.mapper.serializedName || (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(headerParameter), headerValue);\n                }\n            }\n        }\n    }\n    const customHeaders = (_b = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.requestOptions) === null || _b === void 0 ? void 0 : _b.customHeaders;\n    if (customHeaders) {\n        for (const customHeaderName of Object.keys(customHeaders)) {\n            request.headers.set(customHeaderName, customHeaders[customHeaderName]);\n        }\n    }\n}\n/**\n * @internal\n */\nfunction serializeRequestBody(request, operationArguments, operationSpec, stringifyXML = function () {\n    throw new Error(\"XML serialization unsupported!\");\n}) {\n    var _a, _b, _c, _d, _e;\n    const serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_b = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _b !== void 0 ? _b : \"\",\n            includeRoot: (_c = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _c !== void 0 ? _c : false,\n            xmlCharKey: (_d = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _d !== void 0 ? _d : _interfaces_js__WEBPACK_IMPORTED_MODULE_0__.XML_CHARKEY,\n        },\n    };\n    const xmlCharKey = updatedOptions.xml.xmlCharKey;\n    if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n        request.body = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getOperationArgumentValueFromParameter)(operationArguments, operationSpec.requestBody);\n        const bodyMapper = operationSpec.requestBody.mapper;\n        const { required, serializedName, xmlName, xmlElementName, xmlNamespace, xmlNamespacePrefix, nullable, } = bodyMapper;\n        const typeName = bodyMapper.type.name;\n        try {\n            if ((request.body !== undefined && request.body !== null) ||\n                (nullable && request.body === null) ||\n                required) {\n                const requestBodyParameterPathString = (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(operationSpec.requestBody);\n                request.body = operationSpec.serializer.serialize(bodyMapper, request.body, requestBodyParameterPathString, updatedOptions);\n                const isStream = typeName === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.Stream;\n                if (operationSpec.isXML) {\n                    const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : \"xmlns\";\n                    const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, request.body, updatedOptions);\n                    if (typeName === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.Sequence) {\n                        request.body = stringifyXML(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), { rootName: xmlName || serializedName, xmlCharKey });\n                    }\n                    else if (!isStream) {\n                        request.body = stringifyXML(value, {\n                            rootName: xmlName || serializedName,\n                            xmlCharKey,\n                        });\n                    }\n                }\n                else if (typeName === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.String &&\n                    (((_e = operationSpec.contentType) === null || _e === void 0 ? void 0 : _e.match(\"text/plain\")) || operationSpec.mediaType === \"text\")) {\n                    // the String serializer has validated that request body is a string\n                    // so just send the string.\n                    return;\n                }\n                else if (!isStream) {\n                    request.body = JSON.stringify(request.body);\n                }\n            }\n        }\n        catch (error) {\n            throw new Error(`Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, \"  \")}.`);\n        }\n    }\n    else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n        request.formData = {};\n        for (const formDataParameter of operationSpec.formDataParameters) {\n            const formDataParameterValue = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getOperationArgumentValueFromParameter)(operationArguments, formDataParameter);\n            if (formDataParameterValue !== undefined && formDataParameterValue !== null) {\n                const formDataParameterPropertyName = formDataParameter.mapper.serializedName || (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(formDataParameter);\n                request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(formDataParameter), updatedOptions);\n            }\n        }\n    }\n}\n/**\n * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself\n */\nfunction getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {\n    // Composite and Sequence schemas already got their root namespace set during serialization\n    // We just need to add xmlns to the other schema types\n    if (xmlNamespace && ![\"Composite\", \"Sequence\", \"Dictionary\"].includes(typeName)) {\n        const result = {};\n        result[options.xml.xmlCharKey] = serializedValue;\n        result[_interfaces_js__WEBPACK_IMPORTED_MODULE_0__.XML_ATTRKEY] = { [xmlnsKey]: xmlNamespace };\n        return result;\n    }\n    return serializedValue;\n}\nfunction prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {\n    if (!Array.isArray(obj)) {\n        obj = [obj];\n    }\n    if (!xmlNamespaceKey || !xmlNamespace) {\n        return { [elementName]: obj };\n    }\n    const result = { [elementName]: obj };\n    result[_interfaces_js__WEBPACK_IMPORTED_MODULE_0__.XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };\n    return result;\n}\n//# sourceMappingURL=serializationPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/serializationPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/serializer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapperTypeNames: () => (/* binding */ MapperTypeNames),\n/* harmony export */   createSerializer: () => (/* binding */ createSerializer)\n/* harmony export */ });\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/base64.js\");\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interfaces.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/utils.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\nclass SerializerImpl {\n    constructor(modelMappers = {}, isXML = false) {\n        this.modelMappers = modelMappers;\n        this.isXML = isXML;\n    }\n    /**\n     * @deprecated Removing the constraints validation on client side.\n     */\n    validateConstraints(mapper, value, objectName) {\n        const failValidation = (constraintName, constraintValue) => {\n            throw new Error(`\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`);\n        };\n        if (mapper.constraints && value !== undefined && value !== null) {\n            const { ExclusiveMaximum, ExclusiveMinimum, InclusiveMaximum, InclusiveMinimum, MaxItems, MaxLength, MinItems, MinLength, MultipleOf, Pattern, UniqueItems, } = mapper.constraints;\n            if (ExclusiveMaximum !== undefined && value >= ExclusiveMaximum) {\n                failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n            }\n            if (ExclusiveMinimum !== undefined && value <= ExclusiveMinimum) {\n                failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n            }\n            if (InclusiveMaximum !== undefined && value > InclusiveMaximum) {\n                failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n            }\n            if (InclusiveMinimum !== undefined && value < InclusiveMinimum) {\n                failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n            }\n            if (MaxItems !== undefined && value.length > MaxItems) {\n                failValidation(\"MaxItems\", MaxItems);\n            }\n            if (MaxLength !== undefined && value.length > MaxLength) {\n                failValidation(\"MaxLength\", MaxLength);\n            }\n            if (MinItems !== undefined && value.length < MinItems) {\n                failValidation(\"MinItems\", MinItems);\n            }\n            if (MinLength !== undefined && value.length < MinLength) {\n                failValidation(\"MinLength\", MinLength);\n            }\n            if (MultipleOf !== undefined && value % MultipleOf !== 0) {\n                failValidation(\"MultipleOf\", MultipleOf);\n            }\n            if (Pattern) {\n                const pattern = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n                if (typeof value !== \"string\" || value.match(pattern) === null) {\n                    failValidation(\"Pattern\", Pattern);\n                }\n            }\n            if (UniqueItems &&\n                value.some((item, i, ar) => ar.indexOf(item) !== i)) {\n                failValidation(\"UniqueItems\", UniqueItems);\n            }\n        }\n    }\n    /**\n     * Serialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param object - A valid Javascript object to be serialized\n     *\n     * @param objectName - Name of the serialized object\n     *\n     * @param options - additional options to serialization\n     *\n     * @returns A valid serialized Javascript object\n     */\n    serialize(mapper, object, objectName, options = { xml: {} }) {\n        var _a, _b, _c;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : _interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_CHARKEY,\n            },\n        };\n        let payload = {};\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Sequence$/i) !== null) {\n            payload = [];\n        }\n        if (mapper.isConstant) {\n            object = mapper.defaultValue;\n        }\n        // This table of allowed values should help explain\n        // the mapper.required and mapper.nullable properties.\n        // X means \"neither undefined or null are allowed\".\n        //           || required\n        //           || true      | false\n        //  nullable || ==========================\n        //      true || null      | undefined/null\n        //     false || X         | undefined\n        // undefined || X         | undefined/null\n        const { required, nullable } = mapper;\n        if (required && nullable && object === undefined) {\n            throw new Error(`${objectName} cannot be undefined.`);\n        }\n        if (required && !nullable && (object === undefined || object === null)) {\n            throw new Error(`${objectName} cannot be null or undefined.`);\n        }\n        if (!required && nullable === false && object === null) {\n            throw new Error(`${objectName} cannot be null.`);\n        }\n        if (object === undefined || object === null) {\n            payload = object;\n        }\n        else {\n            if (mapperType.match(/^any$/i) !== null) {\n                payload = object;\n            }\n            else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n                payload = serializeBasicTypes(mapperType, objectName, object);\n            }\n            else if (mapperType.match(/^Enum$/i) !== null) {\n                const enumMapper = mapper;\n                payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n            }\n            else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {\n                payload = serializeDateTypes(mapperType, object, objectName);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = serializeByteArrayType(objectName, object);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = serializeBase64UrlType(objectName, object);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Composite$/i) !== null) {\n                payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n        }\n        return payload;\n    }\n    /**\n     * Deserialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param responseBody - A valid Javascript entity to be deserialized\n     *\n     * @param objectName - Name of the deserialized object\n     *\n     * @param options - Controls behavior of XML parser and builder.\n     *\n     * @returns A valid deserialized Javascript object\n     */\n    deserialize(mapper, responseBody, objectName, options = { xml: {} }) {\n        var _a, _b, _c, _d;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : _interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_CHARKEY,\n            },\n            ignoreUnknownProperties: (_d = options.ignoreUnknownProperties) !== null && _d !== void 0 ? _d : false,\n        };\n        if (responseBody === undefined || responseBody === null) {\n            if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n                // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n                // between the list being empty versus being missing,\n                // so let's do the more user-friendly thing and return an empty list.\n                responseBody = [];\n            }\n            // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n            if (mapper.defaultValue !== undefined) {\n                responseBody = mapper.defaultValue;\n            }\n            return responseBody;\n        }\n        let payload;\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Composite$/i) !== null) {\n            payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);\n        }\n        else {\n            if (this.isXML) {\n                const xmlCharKey = updatedOptions.xml.xmlCharKey;\n                /**\n                 * If the mapper specifies this as a non-composite type value but the responseBody contains\n                 * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n                 * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n                 */\n                if (responseBody[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] !== undefined && responseBody[xmlCharKey] !== undefined) {\n                    responseBody = responseBody[xmlCharKey];\n                }\n            }\n            if (mapperType.match(/^Number$/i) !== null) {\n                payload = parseFloat(responseBody);\n                if (isNaN(payload)) {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^Boolean$/i) !== null) {\n                if (responseBody === \"true\") {\n                    payload = true;\n                }\n                else if (responseBody === \"false\") {\n                    payload = false;\n                }\n                else {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n                payload = responseBody;\n            }\n            else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n                payload = new Date(responseBody);\n            }\n            else if (mapperType.match(/^UnixTime$/i) !== null) {\n                payload = unixTimeToDate(responseBody);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = _base64_js__WEBPACK_IMPORTED_MODULE_0__.decodeString(responseBody);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = base64UrlToByteArray(responseBody);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n        }\n        if (mapper.isConstant) {\n            payload = mapper.defaultValue;\n        }\n        return payload;\n    }\n}\n/**\n * Method that creates and returns a Serializer.\n * @param modelMappers - Known models to map\n * @param isXML - If XML should be supported\n */\nfunction createSerializer(modelMappers = {}, isXML = false) {\n    return new SerializerImpl(modelMappers, isXML);\n}\nfunction trimEnd(str, ch) {\n    let len = str.length;\n    while (len - 1 >= 0 && str[len - 1] === ch) {\n        --len;\n    }\n    return str.substr(0, len);\n}\nfunction bufferToBase64Url(buffer) {\n    if (!buffer) {\n        return undefined;\n    }\n    if (!(buffer instanceof Uint8Array)) {\n        throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n    }\n    // Uint8Array to Base64.\n    const str = _base64_js__WEBPACK_IMPORTED_MODULE_0__.encodeByteArray(buffer);\n    // Base64 to Base64Url.\n    return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction base64UrlToByteArray(str) {\n    if (!str) {\n        return undefined;\n    }\n    if (str && typeof str.valueOf() !== \"string\") {\n        throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n    }\n    // Base64Url to Base64.\n    str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    // Base64 to Uint8Array.\n    return _base64_js__WEBPACK_IMPORTED_MODULE_0__.decodeString(str);\n}\nfunction splitSerializeName(prop) {\n    const classes = [];\n    let partialclass = \"\";\n    if (prop) {\n        const subwords = prop.split(\".\");\n        for (const item of subwords) {\n            if (item.charAt(item.length - 1) === \"\\\\\") {\n                partialclass += item.substr(0, item.length - 1) + \".\";\n            }\n            else {\n                partialclass += item;\n                classes.push(partialclass);\n                partialclass = \"\";\n            }\n        }\n    }\n    return classes;\n}\nfunction dateToUnixTime(d) {\n    if (!d) {\n        return undefined;\n    }\n    if (typeof d.valueOf() === \"string\") {\n        d = new Date(d);\n    }\n    return Math.floor(d.getTime() / 1000);\n}\nfunction unixTimeToDate(n) {\n    if (!n) {\n        return undefined;\n    }\n    return new Date(n * 1000);\n}\nfunction serializeBasicTypes(typeName, objectName, value) {\n    if (value !== null && value !== undefined) {\n        if (typeName.match(/^Number$/i) !== null) {\n            if (typeof value !== \"number\") {\n                throw new Error(`${objectName} with value ${value} must be of type number.`);\n            }\n        }\n        else if (typeName.match(/^String$/i) !== null) {\n            if (typeof value.valueOf() !== \"string\") {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n            }\n        }\n        else if (typeName.match(/^Uuid$/i) !== null) {\n            if (!(typeof value.valueOf() === \"string\" && (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isValidUuid)(value))) {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string and a valid uuid.`);\n            }\n        }\n        else if (typeName.match(/^Boolean$/i) !== null) {\n            if (typeof value !== \"boolean\") {\n                throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n            }\n        }\n        else if (typeName.match(/^Stream$/i) !== null) {\n            const objectType = typeof value;\n            if (objectType !== \"string\" &&\n                typeof value.pipe !== \"function\" && // NodeJS.ReadableStream\n                typeof value.tee !== \"function\" && // browser ReadableStream\n                !(value instanceof ArrayBuffer) &&\n                !ArrayBuffer.isView(value) &&\n                // File objects count as a type of Blob, so we want to use instanceof explicitly\n                !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob) &&\n                objectType !== \"function\") {\n                throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeEnumType(objectName, allowedValues, value) {\n    if (!allowedValues) {\n        throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);\n    }\n    const isPresent = allowedValues.some((item) => {\n        if (typeof item.valueOf() === \"string\") {\n            return item.toLowerCase() === value.toLowerCase();\n        }\n        return item === value;\n    });\n    if (!isPresent) {\n        throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);\n    }\n    return value;\n}\nfunction serializeByteArrayType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = _base64_js__WEBPACK_IMPORTED_MODULE_0__.encodeByteArray(value);\n    }\n    return value;\n}\nfunction serializeBase64UrlType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = bufferToBase64Url(value);\n    }\n    return value;\n}\nfunction serializeDateTypes(typeName, value, objectName) {\n    if (value !== undefined && value !== null) {\n        if (typeName.match(/^Date$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value =\n                value instanceof Date\n                    ? value.toISOString().substring(0, 10)\n                    : new Date(value).toISOString().substring(0, 10);\n        }\n        else if (typeName.match(/^DateTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n        }\n        else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n            }\n            value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n        }\n        else if (typeName.match(/^UnixTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n                    `for it to be serialized in UnixTime/Epoch format.`);\n            }\n            value = dateToUnixTime(value);\n        }\n        else if (typeName.match(/^TimeSpan$/i) !== null) {\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isDuration)(value)) {\n                throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {\n    var _a;\n    if (!Array.isArray(object)) {\n        throw new Error(`${objectName} must be of type Array.`);\n    }\n    let elementType = mapper.type.element;\n    if (!elementType || typeof elementType !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    // Quirk: Composite mappers referenced by `element` might\n    // not have *all* properties declared (like uberParent),\n    // so let's try to look up the full definition by name.\n    if (elementType.type.name === \"Composite\" && elementType.type.className) {\n        elementType = (_a = serializer.modelMappers[elementType.type.className]) !== null && _a !== void 0 ? _a : elementType;\n    }\n    const tempArray = [];\n    for (let i = 0; i < object.length; i++) {\n        const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n        if (isXml && elementType.xmlNamespace) {\n            const xmlnsKey = elementType.xmlNamespacePrefix\n                ? `xmlns:${elementType.xmlNamespacePrefix}`\n                : \"xmlns\";\n            if (elementType.type.name === \"Composite\") {\n                tempArray[i] = Object.assign({}, serializedValue);\n                tempArray[i][_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n            else {\n                tempArray[i] = {};\n                tempArray[i][options.xml.xmlCharKey] = serializedValue;\n                tempArray[i][_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n        }\n        else {\n            tempArray[i] = serializedValue;\n        }\n    }\n    return tempArray;\n}\nfunction serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {\n    if (typeof object !== \"object\") {\n        throw new Error(`${objectName} must be of type object.`);\n    }\n    const valueType = mapper.type.value;\n    if (!valueType || typeof valueType !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    const tempDictionary = {};\n    for (const key of Object.keys(object)) {\n        const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n        // If the element needs an XML namespace we need to add it within the $ property\n        tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n    }\n    // Add the namespace to the root element if needed\n    if (isXml && mapper.xmlNamespace) {\n        const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n        const result = tempDictionary;\n        result[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };\n        return result;\n    }\n    return tempDictionary;\n}\n/**\n * Resolves the additionalProperties property from a referenced mapper\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveAdditionalProperties(serializer, mapper, objectName) {\n    const additionalProperties = mapper.type.additionalProperties;\n    if (!additionalProperties && mapper.type.className) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;\n    }\n    return additionalProperties;\n}\n/**\n * Finds the mapper referenced by className\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveReferencedMapper(serializer, mapper, objectName) {\n    const className = mapper.type.className;\n    if (!className) {\n        throw new Error(`Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(mapper, undefined, 2)}\".`);\n    }\n    return serializer.modelMappers[className];\n}\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n */\nfunction resolveModelProperties(serializer, mapper, objectName) {\n    let modelProps = mapper.type.modelProperties;\n    if (!modelProps) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        if (!modelMapper) {\n            throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n        }\n        modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;\n        if (!modelProps) {\n            throw new Error(`modelProperties cannot be null or undefined in the ` +\n                `mapper \"${JSON.stringify(modelMapper)}\" of type \"${mapper.type.className}\" for object \"${objectName}\".`);\n        }\n    }\n    return modelProps;\n}\nfunction serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n    }\n    if (object !== undefined && object !== null) {\n        const payload = {};\n        const modelProps = resolveModelProperties(serializer, mapper, objectName);\n        for (const key of Object.keys(modelProps)) {\n            const propertyMapper = modelProps[key];\n            if (propertyMapper.readOnly) {\n                continue;\n            }\n            let propName;\n            let parentObject = payload;\n            if (serializer.isXML) {\n                if (propertyMapper.xmlIsWrapped) {\n                    propName = propertyMapper.xmlName;\n                }\n                else {\n                    propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n                }\n            }\n            else {\n                const paths = splitSerializeName(propertyMapper.serializedName);\n                propName = paths.pop();\n                for (const pathName of paths) {\n                    const childObject = parentObject[pathName];\n                    if ((childObject === undefined || childObject === null) &&\n                        ((object[key] !== undefined && object[key] !== null) ||\n                            propertyMapper.defaultValue !== undefined)) {\n                        parentObject[pathName] = {};\n                    }\n                    parentObject = parentObject[pathName];\n                }\n            }\n            if (parentObject !== undefined && parentObject !== null) {\n                if (isXml && mapper.xmlNamespace) {\n                    const xmlnsKey = mapper.xmlNamespacePrefix\n                        ? `xmlns:${mapper.xmlNamespacePrefix}`\n                        : \"xmlns\";\n                    parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY]), { [xmlnsKey]: mapper.xmlNamespace });\n                }\n                const propertyObjectName = propertyMapper.serializedName !== \"\"\n                    ? objectName + \".\" + propertyMapper.serializedName\n                    : objectName;\n                let toSerialize = object[key];\n                const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n                if (polymorphicDiscriminator &&\n                    polymorphicDiscriminator.clientName === key &&\n                    (toSerialize === undefined || toSerialize === null)) {\n                    toSerialize = mapper.serializedName;\n                }\n                const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);\n                if (serializedValue !== undefined && propName !== undefined && propName !== null) {\n                    const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n                    if (isXml && propertyMapper.xmlIsAttribute) {\n                        // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n                        // This keeps things simple while preventing name collision\n                        // with names in user documents.\n                        parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] || {};\n                        parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY][propName] = serializedValue;\n                    }\n                    else if (isXml && propertyMapper.xmlIsWrapped) {\n                        parentObject[propName] = { [propertyMapper.xmlElementName]: value };\n                    }\n                    else {\n                        parentObject[propName] = value;\n                    }\n                }\n            }\n        }\n        const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n        if (additionalPropertiesMapper) {\n            const propNames = Object.keys(modelProps);\n            for (const clientPropName in object) {\n                const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);\n                if (isAdditionalProperty) {\n                    payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]', options);\n                }\n            }\n        }\n        return payload;\n    }\n    return object;\n}\nfunction getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {\n    if (!isXml || !propertyMapper.xmlNamespace) {\n        return serializedValue;\n    }\n    const xmlnsKey = propertyMapper.xmlNamespacePrefix\n        ? `xmlns:${propertyMapper.xmlNamespacePrefix}`\n        : \"xmlns\";\n    const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };\n    if ([\"Composite\"].includes(propertyMapper.type.name)) {\n        if (serializedValue[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY]) {\n            return serializedValue;\n        }\n        else {\n            const result = Object.assign({}, serializedValue);\n            result[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = xmlNamespace;\n            return result;\n        }\n    }\n    const result = {};\n    result[options.xml.xmlCharKey] = serializedValue;\n    result[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = xmlNamespace;\n    return result;\n}\nfunction isSpecialXmlProperty(propertyName, options) {\n    return [_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY, options.xml.xmlCharKey].includes(propertyName);\n}\nfunction deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {\n    var _a, _b;\n    const xmlCharKey = (_a = options.xml.xmlCharKey) !== null && _a !== void 0 ? _a : _interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_CHARKEY;\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n    }\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    let instance = {};\n    const handledPropertyNames = [];\n    for (const key of Object.keys(modelProps)) {\n        const propertyMapper = modelProps[key];\n        const paths = splitSerializeName(modelProps[key].serializedName);\n        handledPropertyNames.push(paths[0]);\n        const { serializedName, xmlName, xmlElementName } = propertyMapper;\n        let propertyObjectName = objectName;\n        if (serializedName !== \"\" && serializedName !== undefined) {\n            propertyObjectName = objectName + \".\" + serializedName;\n        }\n        const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;\n        if (headerCollectionPrefix) {\n            const dictionary = {};\n            for (const headerKey of Object.keys(responseBody)) {\n                if (headerKey.startsWith(headerCollectionPrefix)) {\n                    dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);\n                }\n                handledPropertyNames.push(headerKey);\n            }\n            instance[key] = dictionary;\n        }\n        else if (serializer.isXML) {\n            if (propertyMapper.xmlIsAttribute && responseBody[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY]) {\n                instance[key] = serializer.deserialize(propertyMapper, responseBody[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY][xmlName], propertyObjectName, options);\n            }\n            else if (propertyMapper.xmlIsMsText) {\n                if (responseBody[xmlCharKey] !== undefined) {\n                    instance[key] = responseBody[xmlCharKey];\n                }\n                else if (typeof responseBody === \"string\") {\n                    // The special case where xml parser parses \"<Name>content</Name>\" into JSON of\n                    //   `{ name: \"content\"}` instead of `{ name: { \"_\": \"content\" }}`\n                    instance[key] = responseBody;\n                }\n            }\n            else {\n                const propertyName = xmlElementName || xmlName || serializedName;\n                if (propertyMapper.xmlIsWrapped) {\n                    /* a list of <xmlElementName> wrapped by <xmlName>\n                      For the xml example below\n                        <Cors>\n                          <CorsRule>...</CorsRule>\n                          <CorsRule>...</CorsRule>\n                        </Cors>\n                      the responseBody has\n                        {\n                          Cors: {\n                            CorsRule: [{...}, {...}]\n                          }\n                        }\n                      xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n                    */\n                    const wrapped = responseBody[xmlName];\n                    const elementList = (_b = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _b !== void 0 ? _b : [];\n                    instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);\n                    handledPropertyNames.push(xmlName);\n                }\n                else {\n                    const property = responseBody[propertyName];\n                    instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);\n                    handledPropertyNames.push(propertyName);\n                }\n            }\n        }\n        else {\n            // deserialize the property if it is present in the provided responseBody instance\n            let propertyInstance;\n            let res = responseBody;\n            // traversing the object step by step.\n            let steps = 0;\n            for (const item of paths) {\n                if (!res)\n                    break;\n                steps++;\n                res = res[item];\n            }\n            // only accept null when reaching the last position of object otherwise it would be undefined\n            if (res === null && steps < paths.length) {\n                res = undefined;\n            }\n            propertyInstance = res;\n            const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n            // checking that the model property name (key)(ex: \"fishtype\") and the\n            // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n            // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n            // is a better approach. The generator is not consistent with escaping '\\.' in the\n            // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n            // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n            // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n            // the transformation of model property name (ex: \"fishtype\") is done consistently.\n            // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n            if (polymorphicDiscriminator &&\n                key === polymorphicDiscriminator.clientName &&\n                (propertyInstance === undefined || propertyInstance === null)) {\n                propertyInstance = mapper.serializedName;\n            }\n            let serializedValue;\n            // paging\n            if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n                propertyInstance = responseBody[key];\n                const arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                // Copy over any properties that have already been added into the instance, where they do\n                // not exist on the newly de-serialized array\n                for (const [k, v] of Object.entries(instance)) {\n                    if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {\n                        arrayInstance[k] = v;\n                    }\n                }\n                instance = arrayInstance;\n            }\n            else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n                serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                instance[key] = serializedValue;\n            }\n        }\n    }\n    const additionalPropertiesMapper = mapper.type.additionalProperties;\n    if (additionalPropertiesMapper) {\n        const isAdditionalProperty = (responsePropName) => {\n            for (const clientPropName in modelProps) {\n                const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n                if (paths[0] === responsePropName) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        for (const responsePropName in responseBody) {\n            if (isAdditionalProperty(responsePropName)) {\n                instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]', options);\n            }\n        }\n    }\n    else if (responseBody && !options.ignoreUnknownProperties) {\n        for (const key of Object.keys(responseBody)) {\n            if (instance[key] === undefined &&\n                !handledPropertyNames.includes(key) &&\n                !isSpecialXmlProperty(key, options)) {\n                instance[key] = responseBody[key];\n            }\n        }\n    }\n    return instance;\n}\nfunction deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {\n    /* jshint validthis: true */\n    const value = mapper.type.value;\n    if (!value || typeof value !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        const tempDictionary = {};\n        for (const key of Object.keys(responseBody)) {\n            tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n        }\n        return tempDictionary;\n    }\n    return responseBody;\n}\nfunction deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {\n    var _a;\n    let element = mapper.type.element;\n    if (!element || typeof element !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        if (!Array.isArray(responseBody)) {\n            // xml2js will interpret a single element array as just the element, so force it to be an array\n            responseBody = [responseBody];\n        }\n        // Quirk: Composite mappers referenced by `element` might\n        // not have *all* properties declared (like uberParent),\n        // so let's try to look up the full definition by name.\n        if (element.type.name === \"Composite\" && element.type.className) {\n            element = (_a = serializer.modelMappers[element.type.className]) !== null && _a !== void 0 ? _a : element;\n        }\n        const tempArray = [];\n        for (let i = 0; i < responseBody.length; i++) {\n            tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);\n        }\n        return tempArray;\n    }\n    return responseBody;\n}\nfunction getIndexDiscriminator(discriminators, discriminatorValue, typeName) {\n    const typeNamesToCheck = [typeName];\n    while (typeNamesToCheck.length) {\n        const currentName = typeNamesToCheck.shift();\n        const indexDiscriminator = discriminatorValue === currentName\n            ? discriminatorValue\n            : currentName + \".\" + discriminatorValue;\n        if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {\n            return discriminators[indexDiscriminator];\n        }\n        else {\n            for (const [name, mapper] of Object.entries(discriminators)) {\n                if (name.startsWith(currentName + \".\") &&\n                    mapper.type.uberParent === currentName &&\n                    mapper.type.className) {\n                    typeNamesToCheck.push(mapper.type.className);\n                }\n            }\n        }\n    }\n    return undefined;\n}\nfunction getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {\n    var _a;\n    const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n    if (polymorphicDiscriminator) {\n        let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n        if (discriminatorName) {\n            // The serializedName might have \\\\, which we just want to ignore\n            if (polymorphicPropertyName === \"serializedName\") {\n                discriminatorName = discriminatorName.replace(/\\\\/gi, \"\");\n            }\n            const discriminatorValue = object[discriminatorName];\n            const typeName = (_a = mapper.type.uberParent) !== null && _a !== void 0 ? _a : mapper.type.className;\n            if (typeof discriminatorValue === \"string\" && typeName) {\n                const polymorphicMapper = getIndexDiscriminator(serializer.modelMappers.discriminators, discriminatorValue, typeName);\n                if (polymorphicMapper) {\n                    mapper = polymorphicMapper;\n                }\n            }\n        }\n    }\n    return mapper;\n}\nfunction getPolymorphicDiscriminatorRecursively(serializer, mapper) {\n    return (mapper.type.polymorphicDiscriminator ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.className));\n}\nfunction getPolymorphicDiscriminatorSafely(serializer, typeName) {\n    return (typeName &&\n        serializer.modelMappers[typeName] &&\n        serializer.modelMappers[typeName].type.polymorphicDiscriminator);\n}\n/**\n * Known types of Mappers\n */\nconst MapperTypeNames = {\n    Base64Url: \"Base64Url\",\n    Boolean: \"Boolean\",\n    ByteArray: \"ByteArray\",\n    Composite: \"Composite\",\n    Date: \"Date\",\n    DateTime: \"DateTime\",\n    DateTimeRfc1123: \"DateTimeRfc1123\",\n    Dictionary: \"Dictionary\",\n    Enum: \"Enum\",\n    Number: \"Number\",\n    Object: \"Object\",\n    Sequence: \"Sequence\",\n    String: \"String\",\n    Stream: \"Stream\",\n    TimeSpan: \"TimeSpan\",\n    UnixTime: \"UnixTime\",\n};\n//# sourceMappingURL=serializer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL3NlcmlhbGl6ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ3NDO0FBQ3NCO0FBQ1A7QUFDckQ7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxXQUFXLGdCQUFnQixNQUFNLG1DQUFtQyxlQUFlLEtBQUssZ0JBQWdCO0FBQ3hJO0FBQ0E7QUFDQSxvQkFBb0Isc0pBQXNKO0FBQzFLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELFNBQVM7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJGQUEyRix1REFBVztBQUN0RyxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHFCQUFxQjtBQUNyQztBQUNBLCtCQUErQixZQUFZO0FBQzNDO0FBQ0E7QUFDQSwrQkFBK0IsWUFBWTtBQUMzQztBQUNBO0FBQ0EsK0JBQStCLFlBQVk7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsU0FBUztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkZBQTJGLHVEQUFXO0FBQ3RHLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyx1REFBVztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsb0RBQW1CO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sMkNBQTJDO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdURBQXNCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvREFBbUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxZQUFZLGFBQWEsT0FBTztBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxZQUFZLGNBQWMsTUFBTTtBQUNuRTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsc0RBQVc7QUFDcEUsbUNBQW1DLFlBQVksY0FBYyxNQUFNO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLFlBQVksYUFBYSxPQUFPO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxZQUFZO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLFlBQVk7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMkJBQTJCLE9BQU8sMkJBQTJCLFdBQVcsMEJBQTBCLDhCQUE4QjtBQUNoSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsWUFBWTtBQUMzQztBQUNBLGdCQUFnQix1REFBc0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFlBQVk7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsWUFBWTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsWUFBWTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsWUFBWTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsWUFBWTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHFEQUFVO0FBQzNCLG1DQUFtQyxZQUFZLG9EQUFvRCxNQUFNO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsWUFBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxXQUFXO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsbUJBQW1CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiwrQkFBK0I7QUFDMUQ7QUFDQTtBQUNBLCtDQUErQztBQUMvQyw2QkFBNkIsdURBQVcsTUFBTTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qix1REFBVyxNQUFNO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFlBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsV0FBVztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsMEJBQTBCO0FBQ3hGO0FBQ0EsZUFBZSx1REFBVyxNQUFNO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxXQUFXLG1DQUFtQyxxQ0FBcUM7QUFDcEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0Usc0JBQXNCO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDRCQUE0QixhQUFhLHNCQUFzQixnQkFBZ0IsV0FBVztBQUNySDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsMEJBQTBCO0FBQzdEO0FBQ0EsaUNBQWlDLHVEQUFXLGtDQUFrQyxlQUFlLHVEQUFXLE1BQU0saUNBQWlDO0FBQy9JO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyx1REFBVyxpQkFBaUIsdURBQVc7QUFDNUUscUNBQXFDLHVEQUFXO0FBQ2hEO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixrQ0FBa0M7QUFDckQ7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSw0QkFBNEIsdURBQVc7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDLG1CQUFtQix1REFBVztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx1REFBVztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVEQUFXO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHNGQUFzRix1REFBVztBQUNqRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwwQ0FBMEM7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsdURBQVc7QUFDekUsb0ZBQW9GLHVEQUFXO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGdCQUFnQixnQkFBZ0IsUUFBUSxpQkFBaUI7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLElBQUksR0FBRyxJQUFJO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsVUFBVTtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELFdBQVc7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELFdBQVc7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUJBQXlCO0FBQ2pELCtFQUErRSxXQUFXLEdBQUcsRUFBRTtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1jbGllbnQvZGlzdC9lc20vc2VyaWFsaXplci5qcz8wMTQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0ICogYXMgYmFzZTY0IGZyb20gXCIuL2Jhc2U2NC5qc1wiO1xuaW1wb3J0IHsgWE1MX0FUVFJLRVksIFhNTF9DSEFSS0VZLCB9IGZyb20gXCIuL2ludGVyZmFjZXMuanNcIjtcbmltcG9ydCB7IGlzRHVyYXRpb24sIGlzVmFsaWRVdWlkIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmNsYXNzIFNlcmlhbGl6ZXJJbXBsIHtcbiAgICBjb25zdHJ1Y3Rvcihtb2RlbE1hcHBlcnMgPSB7fSwgaXNYTUwgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLm1vZGVsTWFwcGVycyA9IG1vZGVsTWFwcGVycztcbiAgICAgICAgdGhpcy5pc1hNTCA9IGlzWE1MO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBSZW1vdmluZyB0aGUgY29uc3RyYWludHMgdmFsaWRhdGlvbiBvbiBjbGllbnQgc2lkZS5cbiAgICAgKi9cbiAgICB2YWxpZGF0ZUNvbnN0cmFpbnRzKG1hcHBlciwgdmFsdWUsIG9iamVjdE5hbWUpIHtcbiAgICAgICAgY29uc3QgZmFpbFZhbGlkYXRpb24gPSAoY29uc3RyYWludE5hbWUsIGNvbnN0cmFpbnRWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBcIiR7b2JqZWN0TmFtZX1cIiB3aXRoIHZhbHVlIFwiJHt2YWx1ZX1cIiBzaG91bGQgc2F0aXNmeSB0aGUgY29uc3RyYWludCBcIiR7Y29uc3RyYWludE5hbWV9XCI6ICR7Y29uc3RyYWludFZhbHVlfS5gKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG1hcHBlci5jb25zdHJhaW50cyAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCB7IEV4Y2x1c2l2ZU1heGltdW0sIEV4Y2x1c2l2ZU1pbmltdW0sIEluY2x1c2l2ZU1heGltdW0sIEluY2x1c2l2ZU1pbmltdW0sIE1heEl0ZW1zLCBNYXhMZW5ndGgsIE1pbkl0ZW1zLCBNaW5MZW5ndGgsIE11bHRpcGxlT2YsIFBhdHRlcm4sIFVuaXF1ZUl0ZW1zLCB9ID0gbWFwcGVyLmNvbnN0cmFpbnRzO1xuICAgICAgICAgICAgaWYgKEV4Y2x1c2l2ZU1heGltdW0gIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA+PSBFeGNsdXNpdmVNYXhpbXVtKSB7XG4gICAgICAgICAgICAgICAgZmFpbFZhbGlkYXRpb24oXCJFeGNsdXNpdmVNYXhpbXVtXCIsIEV4Y2x1c2l2ZU1heGltdW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEV4Y2x1c2l2ZU1pbmltdW0gIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA8PSBFeGNsdXNpdmVNaW5pbXVtKSB7XG4gICAgICAgICAgICAgICAgZmFpbFZhbGlkYXRpb24oXCJFeGNsdXNpdmVNaW5pbXVtXCIsIEV4Y2x1c2l2ZU1pbmltdW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEluY2x1c2l2ZU1heGltdW0gIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA+IEluY2x1c2l2ZU1heGltdW0pIHtcbiAgICAgICAgICAgICAgICBmYWlsVmFsaWRhdGlvbihcIkluY2x1c2l2ZU1heGltdW1cIiwgSW5jbHVzaXZlTWF4aW11bSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoSW5jbHVzaXZlTWluaW11bSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlIDwgSW5jbHVzaXZlTWluaW11bSkge1xuICAgICAgICAgICAgICAgIGZhaWxWYWxpZGF0aW9uKFwiSW5jbHVzaXZlTWluaW11bVwiLCBJbmNsdXNpdmVNaW5pbXVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChNYXhJdGVtcyAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLmxlbmd0aCA+IE1heEl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgZmFpbFZhbGlkYXRpb24oXCJNYXhJdGVtc1wiLCBNYXhJdGVtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoTWF4TGVuZ3RoICE9PSB1bmRlZmluZWQgJiYgdmFsdWUubGVuZ3RoID4gTWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZmFpbFZhbGlkYXRpb24oXCJNYXhMZW5ndGhcIiwgTWF4TGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChNaW5JdGVtcyAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLmxlbmd0aCA8IE1pbkl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgZmFpbFZhbGlkYXRpb24oXCJNaW5JdGVtc1wiLCBNaW5JdGVtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoTWluTGVuZ3RoICE9PSB1bmRlZmluZWQgJiYgdmFsdWUubGVuZ3RoIDwgTWluTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZmFpbFZhbGlkYXRpb24oXCJNaW5MZW5ndGhcIiwgTWluTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChNdWx0aXBsZU9mICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgJSBNdWx0aXBsZU9mICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgZmFpbFZhbGlkYXRpb24oXCJNdWx0aXBsZU9mXCIsIE11bHRpcGxlT2YpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFBhdHRlcm4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXR0ZXJuID0gdHlwZW9mIFBhdHRlcm4gPT09IFwic3RyaW5nXCIgPyBuZXcgUmVnRXhwKFBhdHRlcm4pIDogUGF0dGVybjtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiIHx8IHZhbHVlLm1hdGNoKHBhdHRlcm4pID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGZhaWxWYWxpZGF0aW9uKFwiUGF0dGVyblwiLCBQYXR0ZXJuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoVW5pcXVlSXRlbXMgJiZcbiAgICAgICAgICAgICAgICB2YWx1ZS5zb21lKChpdGVtLCBpLCBhcikgPT4gYXIuaW5kZXhPZihpdGVtKSAhPT0gaSkpIHtcbiAgICAgICAgICAgICAgICBmYWlsVmFsaWRhdGlvbihcIlVuaXF1ZUl0ZW1zXCIsIFVuaXF1ZUl0ZW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemUgdGhlIGdpdmVuIG9iamVjdCBiYXNlZCBvbiBpdHMgbWV0YWRhdGEgZGVmaW5lZCBpbiB0aGUgbWFwcGVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWFwcGVyIC0gVGhlIG1hcHBlciB3aGljaCBkZWZpbmVzIHRoZSBtZXRhZGF0YSBvZiB0aGUgc2VyaWFsaXphYmxlIG9iamVjdFxuICAgICAqXG4gICAgICogQHBhcmFtIG9iamVjdCAtIEEgdmFsaWQgSmF2YXNjcmlwdCBvYmplY3QgdG8gYmUgc2VyaWFsaXplZFxuICAgICAqXG4gICAgICogQHBhcmFtIG9iamVjdE5hbWUgLSBOYW1lIG9mIHRoZSBzZXJpYWxpemVkIG9iamVjdFxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBhZGRpdGlvbmFsIG9wdGlvbnMgdG8gc2VyaWFsaXphdGlvblxuICAgICAqXG4gICAgICogQHJldHVybnMgQSB2YWxpZCBzZXJpYWxpemVkIEphdmFzY3JpcHQgb2JqZWN0XG4gICAgICovXG4gICAgc2VyaWFsaXplKG1hcHBlciwgb2JqZWN0LCBvYmplY3ROYW1lLCBvcHRpb25zID0geyB4bWw6IHt9IH0pIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRPcHRpb25zID0ge1xuICAgICAgICAgICAgeG1sOiB7XG4gICAgICAgICAgICAgICAgcm9vdE5hbWU6IChfYSA9IG9wdGlvbnMueG1sLnJvb3ROYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiLFxuICAgICAgICAgICAgICAgIGluY2x1ZGVSb290OiAoX2IgPSBvcHRpb25zLnhtbC5pbmNsdWRlUm9vdCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgeG1sQ2hhcktleTogKF9jID0gb3B0aW9ucy54bWwueG1sQ2hhcktleSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogWE1MX0NIQVJLRVksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBsZXQgcGF5bG9hZCA9IHt9O1xuICAgICAgICBjb25zdCBtYXBwZXJUeXBlID0gbWFwcGVyLnR5cGUubmFtZTtcbiAgICAgICAgaWYgKCFvYmplY3ROYW1lKSB7XG4gICAgICAgICAgICBvYmplY3ROYW1lID0gbWFwcGVyLnNlcmlhbGl6ZWROYW1lO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXBwZXJUeXBlLm1hdGNoKC9eU2VxdWVuY2UkL2kpICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwYXlsb2FkID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hcHBlci5pc0NvbnN0YW50KSB7XG4gICAgICAgICAgICBvYmplY3QgPSBtYXBwZXIuZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoaXMgdGFibGUgb2YgYWxsb3dlZCB2YWx1ZXMgc2hvdWxkIGhlbHAgZXhwbGFpblxuICAgICAgICAvLyB0aGUgbWFwcGVyLnJlcXVpcmVkIGFuZCBtYXBwZXIubnVsbGFibGUgcHJvcGVydGllcy5cbiAgICAgICAgLy8gWCBtZWFucyBcIm5laXRoZXIgdW5kZWZpbmVkIG9yIG51bGwgYXJlIGFsbG93ZWRcIi5cbiAgICAgICAgLy8gICAgICAgICAgIHx8IHJlcXVpcmVkXG4gICAgICAgIC8vICAgICAgICAgICB8fCB0cnVlICAgICAgfCBmYWxzZVxuICAgICAgICAvLyAgbnVsbGFibGUgfHwgPT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgLy8gICAgICB0cnVlIHx8IG51bGwgICAgICB8IHVuZGVmaW5lZC9udWxsXG4gICAgICAgIC8vICAgICBmYWxzZSB8fCBYICAgICAgICAgfCB1bmRlZmluZWRcbiAgICAgICAgLy8gdW5kZWZpbmVkIHx8IFggICAgICAgICB8IHVuZGVmaW5lZC9udWxsXG4gICAgICAgIGNvbnN0IHsgcmVxdWlyZWQsIG51bGxhYmxlIH0gPSBtYXBwZXI7XG4gICAgICAgIGlmIChyZXF1aXJlZCAmJiBudWxsYWJsZSAmJiBvYmplY3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke29iamVjdE5hbWV9IGNhbm5vdCBiZSB1bmRlZmluZWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcXVpcmVkICYmICFudWxsYWJsZSAmJiAob2JqZWN0ID09PSB1bmRlZmluZWQgfHwgb2JqZWN0ID09PSBudWxsKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke29iamVjdE5hbWV9IGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlcXVpcmVkICYmIG51bGxhYmxlID09PSBmYWxzZSAmJiBvYmplY3QgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtvYmplY3ROYW1lfSBjYW5ub3QgYmUgbnVsbC5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0ID09PSB1bmRlZmluZWQgfHwgb2JqZWN0ID09PSBudWxsKSB7XG4gICAgICAgICAgICBwYXlsb2FkID0gb2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKG1hcHBlclR5cGUubWF0Y2goL15hbnkkL2kpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGF5bG9hZCA9IG9iamVjdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG1hcHBlclR5cGUubWF0Y2goL14oTnVtYmVyfFN0cmluZ3xCb29sZWFufE9iamVjdHxTdHJlYW18VXVpZCkkL2kpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGF5bG9hZCA9IHNlcmlhbGl6ZUJhc2ljVHlwZXMobWFwcGVyVHlwZSwgb2JqZWN0TmFtZSwgb2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG1hcHBlclR5cGUubWF0Y2goL15FbnVtJC9pKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVudW1NYXBwZXIgPSBtYXBwZXI7XG4gICAgICAgICAgICAgICAgcGF5bG9hZCA9IHNlcmlhbGl6ZUVudW1UeXBlKG9iamVjdE5hbWUsIGVudW1NYXBwZXIudHlwZS5hbGxvd2VkVmFsdWVzLCBvYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWFwcGVyVHlwZS5tYXRjaCgvXihEYXRlfERhdGVUaW1lfFRpbWVTcGFufERhdGVUaW1lUmZjMTEyM3xVbml4VGltZSkkL2kpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGF5bG9hZCA9IHNlcmlhbGl6ZURhdGVUeXBlcyhtYXBwZXJUeXBlLCBvYmplY3QsIG9iamVjdE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWFwcGVyVHlwZS5tYXRjaCgvXkJ5dGVBcnJheSQvaSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXlsb2FkID0gc2VyaWFsaXplQnl0ZUFycmF5VHlwZShvYmplY3ROYW1lLCBvYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWFwcGVyVHlwZS5tYXRjaCgvXkJhc2U2NFVybCQvaSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXlsb2FkID0gc2VyaWFsaXplQmFzZTY0VXJsVHlwZShvYmplY3ROYW1lLCBvYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWFwcGVyVHlwZS5tYXRjaCgvXlNlcXVlbmNlJC9pKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBheWxvYWQgPSBzZXJpYWxpemVTZXF1ZW5jZVR5cGUodGhpcywgbWFwcGVyLCBvYmplY3QsIG9iamVjdE5hbWUsIEJvb2xlYW4odGhpcy5pc1hNTCksIHVwZGF0ZWRPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG1hcHBlclR5cGUubWF0Y2goL15EaWN0aW9uYXJ5JC9pKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBheWxvYWQgPSBzZXJpYWxpemVEaWN0aW9uYXJ5VHlwZSh0aGlzLCBtYXBwZXIsIG9iamVjdCwgb2JqZWN0TmFtZSwgQm9vbGVhbih0aGlzLmlzWE1MKSwgdXBkYXRlZE9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWFwcGVyVHlwZS5tYXRjaCgvXkNvbXBvc2l0ZSQvaSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXlsb2FkID0gc2VyaWFsaXplQ29tcG9zaXRlVHlwZSh0aGlzLCBtYXBwZXIsIG9iamVjdCwgb2JqZWN0TmFtZSwgQm9vbGVhbih0aGlzLmlzWE1MKSwgdXBkYXRlZE9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXNlcmlhbGl6ZSB0aGUgZ2l2ZW4gb2JqZWN0IGJhc2VkIG9uIGl0cyBtZXRhZGF0YSBkZWZpbmVkIGluIHRoZSBtYXBwZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtYXBwZXIgLSBUaGUgbWFwcGVyIHdoaWNoIGRlZmluZXMgdGhlIG1ldGFkYXRhIG9mIHRoZSBzZXJpYWxpemFibGUgb2JqZWN0XG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VCb2R5IC0gQSB2YWxpZCBKYXZhc2NyaXB0IGVudGl0eSB0byBiZSBkZXNlcmlhbGl6ZWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmplY3ROYW1lIC0gTmFtZSBvZiB0aGUgZGVzZXJpYWxpemVkIG9iamVjdFxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBDb250cm9scyBiZWhhdmlvciBvZiBYTUwgcGFyc2VyIGFuZCBidWlsZGVyLlxuICAgICAqXG4gICAgICogQHJldHVybnMgQSB2YWxpZCBkZXNlcmlhbGl6ZWQgSmF2YXNjcmlwdCBvYmplY3RcbiAgICAgKi9cbiAgICBkZXNlcmlhbGl6ZShtYXBwZXIsIHJlc3BvbnNlQm9keSwgb2JqZWN0TmFtZSwgb3B0aW9ucyA9IHsgeG1sOiB7fSB9KSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgY29uc3QgdXBkYXRlZE9wdGlvbnMgPSB7XG4gICAgICAgICAgICB4bWw6IHtcbiAgICAgICAgICAgICAgICByb290TmFtZTogKF9hID0gb3B0aW9ucy54bWwucm9vdE5hbWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCIsXG4gICAgICAgICAgICAgICAgaW5jbHVkZVJvb3Q6IChfYiA9IG9wdGlvbnMueG1sLmluY2x1ZGVSb290KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB4bWxDaGFyS2V5OiAoX2MgPSBvcHRpb25zLnhtbC54bWxDaGFyS2V5KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBYTUxfQ0hBUktFWSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpZ25vcmVVbmtub3duUHJvcGVydGllczogKF9kID0gb3B0aW9ucy5pZ25vcmVVbmtub3duUHJvcGVydGllcykgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChyZXNwb25zZUJvZHkgPT09IHVuZGVmaW5lZCB8fCByZXNwb25zZUJvZHkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzWE1MICYmIG1hcHBlci50eXBlLm5hbWUgPT09IFwiU2VxdWVuY2VcIiAmJiAhbWFwcGVyLnhtbElzV3JhcHBlZCkge1xuICAgICAgICAgICAgICAgIC8vIEVkZ2UgY2FzZSBmb3IgZW1wdHkgWE1MIG5vbi13cmFwcGVkIGxpc3RzLiB4bWwyanMgY2FuJ3QgZGlzdGluZ3Vpc2hcbiAgICAgICAgICAgICAgICAvLyBiZXR3ZWVuIHRoZSBsaXN0IGJlaW5nIGVtcHR5IHZlcnN1cyBiZWluZyBtaXNzaW5nLFxuICAgICAgICAgICAgICAgIC8vIHNvIGxldCdzIGRvIHRoZSBtb3JlIHVzZXItZnJpZW5kbHkgdGhpbmcgYW5kIHJldHVybiBhbiBlbXB0eSBsaXN0LlxuICAgICAgICAgICAgICAgIHJlc3BvbnNlQm9keSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc3BlY2lmaWNhbGx5IGNoZWNrIGZvciB1bmRlZmluZWQgYXMgZGVmYXVsdCB2YWx1ZSBjYW4gYmUgYSBmYWxzZXkgdmFsdWUgYDAsIFwiXCIsIGZhbHNlLCBudWxsYFxuICAgICAgICAgICAgaWYgKG1hcHBlci5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlQm9keSA9IG1hcHBlci5kZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VCb2R5O1xuICAgICAgICB9XG4gICAgICAgIGxldCBwYXlsb2FkO1xuICAgICAgICBjb25zdCBtYXBwZXJUeXBlID0gbWFwcGVyLnR5cGUubmFtZTtcbiAgICAgICAgaWYgKCFvYmplY3ROYW1lKSB7XG4gICAgICAgICAgICBvYmplY3ROYW1lID0gbWFwcGVyLnNlcmlhbGl6ZWROYW1lO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXBwZXJUeXBlLm1hdGNoKC9eQ29tcG9zaXRlJC9pKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcGF5bG9hZCA9IGRlc2VyaWFsaXplQ29tcG9zaXRlVHlwZSh0aGlzLCBtYXBwZXIsIHJlc3BvbnNlQm9keSwgb2JqZWN0TmFtZSwgdXBkYXRlZE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNYTUwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB4bWxDaGFyS2V5ID0gdXBkYXRlZE9wdGlvbnMueG1sLnhtbENoYXJLZXk7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgdGhlIG1hcHBlciBzcGVjaWZpZXMgdGhpcyBhcyBhIG5vbi1jb21wb3NpdGUgdHlwZSB2YWx1ZSBidXQgdGhlIHJlc3BvbnNlQm9keSBjb250YWluc1xuICAgICAgICAgICAgICAgICAqIGJvdGggaGVhZGVyIChcIiRcIiBpLmUuLCBYTUxfQVRUUktFWSkgYW5kIGJvZHkgKFwiI1wiIGkuZS4sIFhNTF9DSEFSS0VZKSBwcm9wZXJ0aWVzLFxuICAgICAgICAgICAgICAgICAqIHRoZW4ganVzdCByZWR1Y2UgdGhlIHJlc3BvbnNlQm9keSB2YWx1ZSB0byB0aGUgYm9keSAoXCIjXCIgaS5lLiwgWE1MX0NIQVJLRVkpIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZUJvZHlbWE1MX0FUVFJLRVldICE9PSB1bmRlZmluZWQgJiYgcmVzcG9uc2VCb2R5W3htbENoYXJLZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VCb2R5ID0gcmVzcG9uc2VCb2R5W3htbENoYXJLZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXBwZXJUeXBlLm1hdGNoKC9eTnVtYmVyJC9pKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBheWxvYWQgPSBwYXJzZUZsb2F0KHJlc3BvbnNlQm9keSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKHBheWxvYWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSByZXNwb25zZUJvZHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWFwcGVyVHlwZS5tYXRjaCgvXkJvb2xlYW4kL2kpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlQm9keSA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3BvbnNlQm9keSA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSByZXNwb25zZUJvZHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWFwcGVyVHlwZS5tYXRjaCgvXihTdHJpbmd8RW51bXxPYmplY3R8U3RyZWFtfFV1aWR8VGltZVNwYW58YW55KSQvaSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXlsb2FkID0gcmVzcG9uc2VCb2R5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWFwcGVyVHlwZS5tYXRjaCgvXihEYXRlfERhdGVUaW1lfERhdGVUaW1lUmZjMTEyMykkL2kpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGF5bG9hZCA9IG5ldyBEYXRlKHJlc3BvbnNlQm9keSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChtYXBwZXJUeXBlLm1hdGNoKC9eVW5peFRpbWUkL2kpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGF5bG9hZCA9IHVuaXhUaW1lVG9EYXRlKHJlc3BvbnNlQm9keSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChtYXBwZXJUeXBlLm1hdGNoKC9eQnl0ZUFycmF5JC9pKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBheWxvYWQgPSBiYXNlNjQuZGVjb2RlU3RyaW5nKHJlc3BvbnNlQm9keSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChtYXBwZXJUeXBlLm1hdGNoKC9eQmFzZTY0VXJsJC9pKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBheWxvYWQgPSBiYXNlNjRVcmxUb0J5dGVBcnJheShyZXNwb25zZUJvZHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWFwcGVyVHlwZS5tYXRjaCgvXlNlcXVlbmNlJC9pKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBheWxvYWQgPSBkZXNlcmlhbGl6ZVNlcXVlbmNlVHlwZSh0aGlzLCBtYXBwZXIsIHJlc3BvbnNlQm9keSwgb2JqZWN0TmFtZSwgdXBkYXRlZE9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWFwcGVyVHlwZS5tYXRjaCgvXkRpY3Rpb25hcnkkL2kpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGF5bG9hZCA9IGRlc2VyaWFsaXplRGljdGlvbmFyeVR5cGUodGhpcywgbWFwcGVyLCByZXNwb25zZUJvZHksIG9iamVjdE5hbWUsIHVwZGF0ZWRPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWFwcGVyLmlzQ29uc3RhbnQpIHtcbiAgICAgICAgICAgIHBheWxvYWQgPSBtYXBwZXIuZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgIH1cbn1cbi8qKlxuICogTWV0aG9kIHRoYXQgY3JlYXRlcyBhbmQgcmV0dXJucyBhIFNlcmlhbGl6ZXIuXG4gKiBAcGFyYW0gbW9kZWxNYXBwZXJzIC0gS25vd24gbW9kZWxzIHRvIG1hcFxuICogQHBhcmFtIGlzWE1MIC0gSWYgWE1MIHNob3VsZCBiZSBzdXBwb3J0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlcmlhbGl6ZXIobW9kZWxNYXBwZXJzID0ge30sIGlzWE1MID0gZmFsc2UpIHtcbiAgICByZXR1cm4gbmV3IFNlcmlhbGl6ZXJJbXBsKG1vZGVsTWFwcGVycywgaXNYTUwpO1xufVxuZnVuY3Rpb24gdHJpbUVuZChzdHIsIGNoKSB7XG4gICAgbGV0IGxlbiA9IHN0ci5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbiAtIDEgPj0gMCAmJiBzdHJbbGVuIC0gMV0gPT09IGNoKSB7XG4gICAgICAgIC0tbGVuO1xuICAgIH1cbiAgICByZXR1cm4gc3RyLnN1YnN0cigwLCBsZW4pO1xufVxuZnVuY3Rpb24gYnVmZmVyVG9CYXNlNjRVcmwoYnVmZmVyKSB7XG4gICAgaWYgKCFidWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKCEoYnVmZmVyIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQbGVhc2UgcHJvdmlkZSBhbiBpbnB1dCBvZiB0eXBlIFVpbnQ4QXJyYXkgZm9yIGNvbnZlcnRpbmcgdG8gQmFzZTY0VXJsLmApO1xuICAgIH1cbiAgICAvLyBVaW50OEFycmF5IHRvIEJhc2U2NC5cbiAgICBjb25zdCBzdHIgPSBiYXNlNjQuZW5jb2RlQnl0ZUFycmF5KGJ1ZmZlcik7XG4gICAgLy8gQmFzZTY0IHRvIEJhc2U2NFVybC5cbiAgICByZXR1cm4gdHJpbUVuZChzdHIsIFwiPVwiKS5yZXBsYWNlKC9cXCsvZywgXCItXCIpLnJlcGxhY2UoL1xcLy9nLCBcIl9cIik7XG59XG5mdW5jdGlvbiBiYXNlNjRVcmxUb0J5dGVBcnJheShzdHIpIHtcbiAgICBpZiAoIXN0cikge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoc3RyICYmIHR5cGVvZiBzdHIudmFsdWVPZigpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBwcm92aWRlIGFuIGlucHV0IG9mIHR5cGUgc3RyaW5nIGZvciBjb252ZXJ0aW5nIHRvIFVpbnQ4QXJyYXlcIik7XG4gICAgfVxuICAgIC8vIEJhc2U2NFVybCB0byBCYXNlNjQuXG4gICAgc3RyID0gc3RyLnJlcGxhY2UoLy0vZywgXCIrXCIpLnJlcGxhY2UoL18vZywgXCIvXCIpO1xuICAgIC8vIEJhc2U2NCB0byBVaW50OEFycmF5LlxuICAgIHJldHVybiBiYXNlNjQuZGVjb2RlU3RyaW5nKHN0cik7XG59XG5mdW5jdGlvbiBzcGxpdFNlcmlhbGl6ZU5hbWUocHJvcCkge1xuICAgIGNvbnN0IGNsYXNzZXMgPSBbXTtcbiAgICBsZXQgcGFydGlhbGNsYXNzID0gXCJcIjtcbiAgICBpZiAocHJvcCkge1xuICAgICAgICBjb25zdCBzdWJ3b3JkcyA9IHByb3Auc3BsaXQoXCIuXCIpO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygc3Vid29yZHMpIHtcbiAgICAgICAgICAgIGlmIChpdGVtLmNoYXJBdChpdGVtLmxlbmd0aCAtIDEpID09PSBcIlxcXFxcIikge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxjbGFzcyArPSBpdGVtLnN1YnN0cigwLCBpdGVtLmxlbmd0aCAtIDEpICsgXCIuXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsY2xhc3MgKz0gaXRlbTtcbiAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2gocGFydGlhbGNsYXNzKTtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsY2xhc3MgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjbGFzc2VzO1xufVxuZnVuY3Rpb24gZGF0ZVRvVW5peFRpbWUoZCkge1xuICAgIGlmICghZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGQudmFsdWVPZigpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGQgPSBuZXcgRGF0ZShkKTtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoZC5nZXRUaW1lKCkgLyAxMDAwKTtcbn1cbmZ1bmN0aW9uIHVuaXhUaW1lVG9EYXRlKG4pIHtcbiAgICBpZiAoIW4pIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEYXRlKG4gKiAxMDAwKTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZUJhc2ljVHlwZXModHlwZU5hbWUsIG9iamVjdE5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVOYW1lLm1hdGNoKC9eTnVtYmVyJC9pKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtvYmplY3ROYW1lfSB3aXRoIHZhbHVlICR7dmFsdWV9IG11c3QgYmUgb2YgdHlwZSBudW1iZXIuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZU5hbWUubWF0Y2goL15TdHJpbmckL2kpICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlLnZhbHVlT2YoKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtvYmplY3ROYW1lfSB3aXRoIHZhbHVlIFwiJHt2YWx1ZX1cIiBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVOYW1lLm1hdGNoKC9eVXVpZCQvaSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICghKHR5cGVvZiB2YWx1ZS52YWx1ZU9mKCkgPT09IFwic3RyaW5nXCIgJiYgaXNWYWxpZFV1aWQodmFsdWUpKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtvYmplY3ROYW1lfSB3aXRoIHZhbHVlIFwiJHt2YWx1ZX1cIiBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nIGFuZCBhIHZhbGlkIHV1aWQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZU5hbWUubWF0Y2goL15Cb29sZWFuJC9pKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7b2JqZWN0TmFtZX0gd2l0aCB2YWx1ZSAke3ZhbHVlfSBtdXN0IGJlIG9mIHR5cGUgYm9vbGVhbi5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlTmFtZS5tYXRjaCgvXlN0cmVhbSQvaSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IG9iamVjdFR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICAgICAgICBpZiAob2JqZWN0VHlwZSAhPT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZS5waXBlICE9PSBcImZ1bmN0aW9uXCIgJiYgLy8gTm9kZUpTLlJlYWRhYmxlU3RyZWFtXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlLnRlZSAhPT0gXCJmdW5jdGlvblwiICYmIC8vIGJyb3dzZXIgUmVhZGFibGVTdHJlYW1cbiAgICAgICAgICAgICAgICAhKHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpICYmXG4gICAgICAgICAgICAgICAgIUFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSkgJiZcbiAgICAgICAgICAgICAgICAvLyBGaWxlIG9iamVjdHMgY291bnQgYXMgYSB0eXBlIG9mIEJsb2IsIHNvIHdlIHdhbnQgdG8gdXNlIGluc3RhbmNlb2YgZXhwbGljaXRseVxuICAgICAgICAgICAgICAgICEoKHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIEJsb2IgPT09IFwib2JqZWN0XCIpICYmIHZhbHVlIGluc3RhbmNlb2YgQmxvYikgJiZcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7b2JqZWN0TmFtZX0gbXVzdCBiZSBhIHN0cmluZywgQmxvYiwgQXJyYXlCdWZmZXIsIEFycmF5QnVmZmVyVmlldywgUmVhZGFibGVTdHJlYW0sIG9yICgpID0+IFJlYWRhYmxlU3RyZWFtLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZUVudW1UeXBlKG9iamVjdE5hbWUsIGFsbG93ZWRWYWx1ZXMsIHZhbHVlKSB7XG4gICAgaWYgKCFhbGxvd2VkVmFsdWVzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUGxlYXNlIHByb3ZpZGUgYSBzZXQgb2YgYWxsb3dlZFZhbHVlcyB0byB2YWxpZGF0ZSAke29iamVjdE5hbWV9IGFzIGFuIEVudW0gVHlwZS5gKTtcbiAgICB9XG4gICAgY29uc3QgaXNQcmVzZW50ID0gYWxsb3dlZFZhbHVlcy5zb21lKChpdGVtKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbS52YWx1ZU9mKCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtLnRvTG93ZXJDYXNlKCkgPT09IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW0gPT09IHZhbHVlO1xuICAgIH0pO1xuICAgIGlmICghaXNQcmVzZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt2YWx1ZX0gaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yICR7b2JqZWN0TmFtZX0uIFRoZSB2YWxpZCB2YWx1ZXMgYXJlOiAke0pTT04uc3RyaW5naWZ5KGFsbG93ZWRWYWx1ZXMpfS5gKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gc2VyaWFsaXplQnl0ZUFycmF5VHlwZShvYmplY3ROYW1lLCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtvYmplY3ROYW1lfSBtdXN0IGJlIG9mIHR5cGUgVWludDhBcnJheS5gKTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IGJhc2U2NC5lbmNvZGVCeXRlQXJyYXkodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBzZXJpYWxpemVCYXNlNjRVcmxUeXBlKG9iamVjdE5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke29iamVjdE5hbWV9IG11c3QgYmUgb2YgdHlwZSBVaW50OEFycmF5LmApO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gYnVmZmVyVG9CYXNlNjRVcmwodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBzZXJpYWxpemVEYXRlVHlwZXModHlwZU5hbWUsIHZhbHVlLCBvYmplY3ROYW1lKSB7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGVOYW1lLm1hdGNoKC9eRGF0ZSQvaSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fFxuICAgICAgICAgICAgICAgICh0eXBlb2YgdmFsdWUudmFsdWVPZigpID09PSBcInN0cmluZ1wiICYmICFpc05hTihEYXRlLnBhcnNlKHZhbHVlKSkpKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtvYmplY3ROYW1lfSBtdXN0IGJlIGFuIGluc3RhbmNlb2YgRGF0ZSBvciBhIHN0cmluZyBpbiBJU084NjAxIGZvcm1hdC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlID1cbiAgICAgICAgICAgICAgICB2YWx1ZSBpbnN0YW5jZW9mIERhdGVcbiAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZS50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLCAxMClcbiAgICAgICAgICAgICAgICAgICAgOiBuZXcgRGF0ZSh2YWx1ZSkudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMCwgMTApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVOYW1lLm1hdGNoKC9eRGF0ZVRpbWUkL2kpICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIERhdGUgfHxcbiAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlLnZhbHVlT2YoKSA9PT0gXCJzdHJpbmdcIiAmJiAhaXNOYU4oRGF0ZS5wYXJzZSh2YWx1ZSkpKSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7b2JqZWN0TmFtZX0gbXVzdCBiZSBhbiBpbnN0YW5jZW9mIERhdGUgb3IgYSBzdHJpbmcgaW4gSVNPODYwMSBmb3JtYXQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIGluc3RhbmNlb2YgRGF0ZSA/IHZhbHVlLnRvSVNPU3RyaW5nKCkgOiBuZXcgRGF0ZSh2YWx1ZSkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlTmFtZS5tYXRjaCgvXkRhdGVUaW1lUmZjMTEyMyQvaSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fFxuICAgICAgICAgICAgICAgICh0eXBlb2YgdmFsdWUudmFsdWVPZigpID09PSBcInN0cmluZ1wiICYmICFpc05hTihEYXRlLnBhcnNlKHZhbHVlKSkpKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtvYmplY3ROYW1lfSBtdXN0IGJlIGFuIGluc3RhbmNlb2YgRGF0ZSBvciBhIHN0cmluZyBpbiBSRkMtMTEyMyBmb3JtYXQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIGluc3RhbmNlb2YgRGF0ZSA/IHZhbHVlLnRvVVRDU3RyaW5nKCkgOiBuZXcgRGF0ZSh2YWx1ZSkudG9VVENTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlTmFtZS5tYXRjaCgvXlVuaXhUaW1lJC9pKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8XG4gICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZS52YWx1ZU9mKCkgPT09IFwic3RyaW5nXCIgJiYgIWlzTmFOKERhdGUucGFyc2UodmFsdWUpKSkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke29iamVjdE5hbWV9IG11c3QgYmUgYW4gaW5zdGFuY2VvZiBEYXRlIG9yIGEgc3RyaW5nIGluIFJGQy0xMTIzL0lTTzg2MDEgZm9ybWF0IGAgK1xuICAgICAgICAgICAgICAgICAgICBgZm9yIGl0IHRvIGJlIHNlcmlhbGl6ZWQgaW4gVW5peFRpbWUvRXBvY2ggZm9ybWF0LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWUgPSBkYXRlVG9Vbml4VGltZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZU5hbWUubWF0Y2goL15UaW1lU3BhbiQvaSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICghaXNEdXJhdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7b2JqZWN0TmFtZX0gbXVzdCBiZSBhIHN0cmluZyBpbiBJU08gODYwMSBmb3JtYXQuIEluc3RlYWQgd2FzIFwiJHt2YWx1ZX1cIi5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBzZXJpYWxpemVTZXF1ZW5jZVR5cGUoc2VyaWFsaXplciwgbWFwcGVyLCBvYmplY3QsIG9iamVjdE5hbWUsIGlzWG1sLCBvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtvYmplY3ROYW1lfSBtdXN0IGJlIG9mIHR5cGUgQXJyYXkuYCk7XG4gICAgfVxuICAgIGxldCBlbGVtZW50VHlwZSA9IG1hcHBlci50eXBlLmVsZW1lbnQ7XG4gICAgaWYgKCFlbGVtZW50VHlwZSB8fCB0eXBlb2YgZWxlbWVudFR5cGUgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBlbGVtZW50XCIgbWV0YWRhdGEgZm9yIGFuIEFycmF5IG11c3QgYmUgZGVmaW5lZCBpbiB0aGUgYCArXG4gICAgICAgICAgICBgbWFwcGVyIGFuZCBpdCBtdXN0IG9mIHR5cGUgXCJvYmplY3RcIiBpbiAke29iamVjdE5hbWV9LmApO1xuICAgIH1cbiAgICAvLyBRdWlyazogQ29tcG9zaXRlIG1hcHBlcnMgcmVmZXJlbmNlZCBieSBgZWxlbWVudGAgbWlnaHRcbiAgICAvLyBub3QgaGF2ZSAqYWxsKiBwcm9wZXJ0aWVzIGRlY2xhcmVkIChsaWtlIHViZXJQYXJlbnQpLFxuICAgIC8vIHNvIGxldCdzIHRyeSB0byBsb29rIHVwIHRoZSBmdWxsIGRlZmluaXRpb24gYnkgbmFtZS5cbiAgICBpZiAoZWxlbWVudFR5cGUudHlwZS5uYW1lID09PSBcIkNvbXBvc2l0ZVwiICYmIGVsZW1lbnRUeXBlLnR5cGUuY2xhc3NOYW1lKSB7XG4gICAgICAgIGVsZW1lbnRUeXBlID0gKF9hID0gc2VyaWFsaXplci5tb2RlbE1hcHBlcnNbZWxlbWVudFR5cGUudHlwZS5jbGFzc05hbWVdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBlbGVtZW50VHlwZTtcbiAgICB9XG4gICAgY29uc3QgdGVtcEFycmF5ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc2VyaWFsaXplZFZhbHVlID0gc2VyaWFsaXplci5zZXJpYWxpemUoZWxlbWVudFR5cGUsIG9iamVjdFtpXSwgb2JqZWN0TmFtZSwgb3B0aW9ucyk7XG4gICAgICAgIGlmIChpc1htbCAmJiBlbGVtZW50VHlwZS54bWxOYW1lc3BhY2UpIHtcbiAgICAgICAgICAgIGNvbnN0IHhtbG5zS2V5ID0gZWxlbWVudFR5cGUueG1sTmFtZXNwYWNlUHJlZml4XG4gICAgICAgICAgICAgICAgPyBgeG1sbnM6JHtlbGVtZW50VHlwZS54bWxOYW1lc3BhY2VQcmVmaXh9YFxuICAgICAgICAgICAgICAgIDogXCJ4bWxuc1wiO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnRUeXBlLnR5cGUubmFtZSA9PT0gXCJDb21wb3NpdGVcIikge1xuICAgICAgICAgICAgICAgIHRlbXBBcnJheVtpXSA9IE9iamVjdC5hc3NpZ24oe30sIHNlcmlhbGl6ZWRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgdGVtcEFycmF5W2ldW1hNTF9BVFRSS0VZXSA9IHsgW3htbG5zS2V5XTogZWxlbWVudFR5cGUueG1sTmFtZXNwYWNlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZW1wQXJyYXlbaV0gPSB7fTtcbiAgICAgICAgICAgICAgICB0ZW1wQXJyYXlbaV1bb3B0aW9ucy54bWwueG1sQ2hhcktleV0gPSBzZXJpYWxpemVkVmFsdWU7XG4gICAgICAgICAgICAgICAgdGVtcEFycmF5W2ldW1hNTF9BVFRSS0VZXSA9IHsgW3htbG5zS2V5XTogZWxlbWVudFR5cGUueG1sTmFtZXNwYWNlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0ZW1wQXJyYXlbaV0gPSBzZXJpYWxpemVkVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRlbXBBcnJheTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZURpY3Rpb25hcnlUeXBlKHNlcmlhbGl6ZXIsIG1hcHBlciwgb2JqZWN0LCBvYmplY3ROYW1lLCBpc1htbCwgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb2JqZWN0ICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtvYmplY3ROYW1lfSBtdXN0IGJlIG9mIHR5cGUgb2JqZWN0LmApO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZVR5cGUgPSBtYXBwZXIudHlwZS52YWx1ZTtcbiAgICBpZiAoIXZhbHVlVHlwZSB8fCB0eXBlb2YgdmFsdWVUeXBlICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgXCJ2YWx1ZVwiIG1ldGFkYXRhIGZvciBhIERpY3Rpb25hcnkgbXVzdCBiZSBkZWZpbmVkIGluIHRoZSBgICtcbiAgICAgICAgICAgIGBtYXBwZXIgYW5kIGl0IG11c3Qgb2YgdHlwZSBcIm9iamVjdFwiIGluICR7b2JqZWN0TmFtZX0uYCk7XG4gICAgfVxuICAgIGNvbnN0IHRlbXBEaWN0aW9uYXJ5ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMob2JqZWN0KSkge1xuICAgICAgICBjb25zdCBzZXJpYWxpemVkVmFsdWUgPSBzZXJpYWxpemVyLnNlcmlhbGl6ZSh2YWx1ZVR5cGUsIG9iamVjdFtrZXldLCBvYmplY3ROYW1lLCBvcHRpb25zKTtcbiAgICAgICAgLy8gSWYgdGhlIGVsZW1lbnQgbmVlZHMgYW4gWE1MIG5hbWVzcGFjZSB3ZSBuZWVkIHRvIGFkZCBpdCB3aXRoaW4gdGhlICQgcHJvcGVydHlcbiAgICAgICAgdGVtcERpY3Rpb25hcnlba2V5XSA9IGdldFhtbE9iamVjdFZhbHVlKHZhbHVlVHlwZSwgc2VyaWFsaXplZFZhbHVlLCBpc1htbCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8vIEFkZCB0aGUgbmFtZXNwYWNlIHRvIHRoZSByb290IGVsZW1lbnQgaWYgbmVlZGVkXG4gICAgaWYgKGlzWG1sICYmIG1hcHBlci54bWxOYW1lc3BhY2UpIHtcbiAgICAgICAgY29uc3QgeG1sbnNLZXkgPSBtYXBwZXIueG1sTmFtZXNwYWNlUHJlZml4ID8gYHhtbG5zOiR7bWFwcGVyLnhtbE5hbWVzcGFjZVByZWZpeH1gIDogXCJ4bWxuc1wiO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0ZW1wRGljdGlvbmFyeTtcbiAgICAgICAgcmVzdWx0W1hNTF9BVFRSS0VZXSA9IHsgW3htbG5zS2V5XTogbWFwcGVyLnhtbE5hbWVzcGFjZSB9O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gdGVtcERpY3Rpb25hcnk7XG59XG4vKipcbiAqIFJlc29sdmVzIHRoZSBhZGRpdGlvbmFsUHJvcGVydGllcyBwcm9wZXJ0eSBmcm9tIGEgcmVmZXJlbmNlZCBtYXBwZXJcbiAqIEBwYXJhbSBzZXJpYWxpemVyIC0gdGhlIHNlcmlhbGl6ZXIgY29udGFpbmluZyB0aGUgZW50aXJlIHNldCBvZiBtYXBwZXJzXG4gKiBAcGFyYW0gbWFwcGVyIC0gdGhlIGNvbXBvc2l0ZSBtYXBwZXIgdG8gcmVzb2x2ZVxuICogQHBhcmFtIG9iamVjdE5hbWUgLSBuYW1lIG9mIHRoZSBvYmplY3QgYmVpbmcgc2VyaWFsaXplZFxuICovXG5mdW5jdGlvbiByZXNvbHZlQWRkaXRpb25hbFByb3BlcnRpZXMoc2VyaWFsaXplciwgbWFwcGVyLCBvYmplY3ROYW1lKSB7XG4gICAgY29uc3QgYWRkaXRpb25hbFByb3BlcnRpZXMgPSBtYXBwZXIudHlwZS5hZGRpdGlvbmFsUHJvcGVydGllcztcbiAgICBpZiAoIWFkZGl0aW9uYWxQcm9wZXJ0aWVzICYmIG1hcHBlci50eXBlLmNsYXNzTmFtZSkge1xuICAgICAgICBjb25zdCBtb2RlbE1hcHBlciA9IHJlc29sdmVSZWZlcmVuY2VkTWFwcGVyKHNlcmlhbGl6ZXIsIG1hcHBlciwgb2JqZWN0TmFtZSk7XG4gICAgICAgIHJldHVybiBtb2RlbE1hcHBlciA9PT0gbnVsbCB8fCBtb2RlbE1hcHBlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbW9kZWxNYXBwZXIudHlwZS5hZGRpdGlvbmFsUHJvcGVydGllcztcbiAgICB9XG4gICAgcmV0dXJuIGFkZGl0aW9uYWxQcm9wZXJ0aWVzO1xufVxuLyoqXG4gKiBGaW5kcyB0aGUgbWFwcGVyIHJlZmVyZW5jZWQgYnkgY2xhc3NOYW1lXG4gKiBAcGFyYW0gc2VyaWFsaXplciAtIHRoZSBzZXJpYWxpemVyIGNvbnRhaW5pbmcgdGhlIGVudGlyZSBzZXQgb2YgbWFwcGVyc1xuICogQHBhcmFtIG1hcHBlciAtIHRoZSBjb21wb3NpdGUgbWFwcGVyIHRvIHJlc29sdmVcbiAqIEBwYXJhbSBvYmplY3ROYW1lIC0gbmFtZSBvZiB0aGUgb2JqZWN0IGJlaW5nIHNlcmlhbGl6ZWRcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVJlZmVyZW5jZWRNYXBwZXIoc2VyaWFsaXplciwgbWFwcGVyLCBvYmplY3ROYW1lKSB7XG4gICAgY29uc3QgY2xhc3NOYW1lID0gbWFwcGVyLnR5cGUuY2xhc3NOYW1lO1xuICAgIGlmICghY2xhc3NOYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2xhc3MgbmFtZSBmb3IgbW9kZWwgXCIke29iamVjdE5hbWV9XCIgaXMgbm90IHByb3ZpZGVkIGluIHRoZSBtYXBwZXIgXCIke0pTT04uc3RyaW5naWZ5KG1hcHBlciwgdW5kZWZpbmVkLCAyKX1cIi5gKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcmlhbGl6ZXIubW9kZWxNYXBwZXJzW2NsYXNzTmFtZV07XG59XG4vKipcbiAqIFJlc29sdmVzIGEgY29tcG9zaXRlIG1hcHBlcidzIG1vZGVsUHJvcGVydGllcy5cbiAqIEBwYXJhbSBzZXJpYWxpemVyIC0gdGhlIHNlcmlhbGl6ZXIgY29udGFpbmluZyB0aGUgZW50aXJlIHNldCBvZiBtYXBwZXJzXG4gKiBAcGFyYW0gbWFwcGVyIC0gdGhlIGNvbXBvc2l0ZSBtYXBwZXIgdG8gcmVzb2x2ZVxuICovXG5mdW5jdGlvbiByZXNvbHZlTW9kZWxQcm9wZXJ0aWVzKHNlcmlhbGl6ZXIsIG1hcHBlciwgb2JqZWN0TmFtZSkge1xuICAgIGxldCBtb2RlbFByb3BzID0gbWFwcGVyLnR5cGUubW9kZWxQcm9wZXJ0aWVzO1xuICAgIGlmICghbW9kZWxQcm9wcykge1xuICAgICAgICBjb25zdCBtb2RlbE1hcHBlciA9IHJlc29sdmVSZWZlcmVuY2VkTWFwcGVyKHNlcmlhbGl6ZXIsIG1hcHBlciwgb2JqZWN0TmFtZSk7XG4gICAgICAgIGlmICghbW9kZWxNYXBwZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbWFwcGVyKCkgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkIGZvciBtb2RlbCBcIiR7bWFwcGVyLnR5cGUuY2xhc3NOYW1lfVwiLmApO1xuICAgICAgICB9XG4gICAgICAgIG1vZGVsUHJvcHMgPSBtb2RlbE1hcHBlciA9PT0gbnVsbCB8fCBtb2RlbE1hcHBlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbW9kZWxNYXBwZXIudHlwZS5tb2RlbFByb3BlcnRpZXM7XG4gICAgICAgIGlmICghbW9kZWxQcm9wcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBtb2RlbFByb3BlcnRpZXMgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkIGluIHRoZSBgICtcbiAgICAgICAgICAgICAgICBgbWFwcGVyIFwiJHtKU09OLnN0cmluZ2lmeShtb2RlbE1hcHBlcil9XCIgb2YgdHlwZSBcIiR7bWFwcGVyLnR5cGUuY2xhc3NOYW1lfVwiIGZvciBvYmplY3QgXCIke29iamVjdE5hbWV9XCIuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1vZGVsUHJvcHM7XG59XG5mdW5jdGlvbiBzZXJpYWxpemVDb21wb3NpdGVUeXBlKHNlcmlhbGl6ZXIsIG1hcHBlciwgb2JqZWN0LCBvYmplY3ROYW1lLCBpc1htbCwgb3B0aW9ucykge1xuICAgIGlmIChnZXRQb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3JSZWN1cnNpdmVseShzZXJpYWxpemVyLCBtYXBwZXIpKSB7XG4gICAgICAgIG1hcHBlciA9IGdldFBvbHltb3JwaGljTWFwcGVyKHNlcmlhbGl6ZXIsIG1hcHBlciwgb2JqZWN0LCBcImNsaWVudE5hbWVcIik7XG4gICAgfVxuICAgIGlmIChvYmplY3QgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgICAgICBjb25zdCBtb2RlbFByb3BzID0gcmVzb2x2ZU1vZGVsUHJvcGVydGllcyhzZXJpYWxpemVyLCBtYXBwZXIsIG9iamVjdE5hbWUpO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhtb2RlbFByb3BzKSkge1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydHlNYXBwZXIgPSBtb2RlbFByb3BzW2tleV07XG4gICAgICAgICAgICBpZiAocHJvcGVydHlNYXBwZXIucmVhZE9ubHkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBwcm9wTmFtZTtcbiAgICAgICAgICAgIGxldCBwYXJlbnRPYmplY3QgPSBwYXlsb2FkO1xuICAgICAgICAgICAgaWYgKHNlcmlhbGl6ZXIuaXNYTUwpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHlNYXBwZXIueG1sSXNXcmFwcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BOYW1lID0gcHJvcGVydHlNYXBwZXIueG1sTmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BOYW1lID0gcHJvcGVydHlNYXBwZXIueG1sRWxlbWVudE5hbWUgfHwgcHJvcGVydHlNYXBwZXIueG1sTmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXRocyA9IHNwbGl0U2VyaWFsaXplTmFtZShwcm9wZXJ0eU1hcHBlci5zZXJpYWxpemVkTmFtZSk7XG4gICAgICAgICAgICAgICAgcHJvcE5hbWUgPSBwYXRocy5wb3AoKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhdGhOYW1lIG9mIHBhdGhzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkT2JqZWN0ID0gcGFyZW50T2JqZWN0W3BhdGhOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChjaGlsZE9iamVjdCA9PT0gdW5kZWZpbmVkIHx8IGNoaWxkT2JqZWN0ID09PSBudWxsKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKChvYmplY3Rba2V5XSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdFtrZXldICE9PSBudWxsKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TWFwcGVyLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50T2JqZWN0W3BhdGhOYW1lXSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE9iamVjdCA9IHBhcmVudE9iamVjdFtwYXRoTmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmVudE9iamVjdCAhPT0gdW5kZWZpbmVkICYmIHBhcmVudE9iamVjdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChpc1htbCAmJiBtYXBwZXIueG1sTmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHhtbG5zS2V5ID0gbWFwcGVyLnhtbE5hbWVzcGFjZVByZWZpeFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBgeG1sbnM6JHttYXBwZXIueG1sTmFtZXNwYWNlUHJlZml4fWBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCJ4bWxuc1wiO1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRPYmplY3RbWE1MX0FUVFJLRVldID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwYXJlbnRPYmplY3RbWE1MX0FUVFJLRVldKSwgeyBbeG1sbnNLZXldOiBtYXBwZXIueG1sTmFtZXNwYWNlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wZXJ0eU9iamVjdE5hbWUgPSBwcm9wZXJ0eU1hcHBlci5zZXJpYWxpemVkTmFtZSAhPT0gXCJcIlxuICAgICAgICAgICAgICAgICAgICA/IG9iamVjdE5hbWUgKyBcIi5cIiArIHByb3BlcnR5TWFwcGVyLnNlcmlhbGl6ZWROYW1lXG4gICAgICAgICAgICAgICAgICAgIDogb2JqZWN0TmFtZTtcbiAgICAgICAgICAgICAgICBsZXQgdG9TZXJpYWxpemUgPSBvYmplY3Rba2V5XTtcbiAgICAgICAgICAgICAgICBjb25zdCBwb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3IgPSBnZXRQb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3JSZWN1cnNpdmVseShzZXJpYWxpemVyLCBtYXBwZXIpO1xuICAgICAgICAgICAgICAgIGlmIChwb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3IgJiZcbiAgICAgICAgICAgICAgICAgICAgcG9seW1vcnBoaWNEaXNjcmltaW5hdG9yLmNsaWVudE5hbWUgPT09IGtleSAmJlxuICAgICAgICAgICAgICAgICAgICAodG9TZXJpYWxpemUgPT09IHVuZGVmaW5lZCB8fCB0b1NlcmlhbGl6ZSA9PT0gbnVsbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9TZXJpYWxpemUgPSBtYXBwZXIuc2VyaWFsaXplZE5hbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHNlcmlhbGl6ZWRWYWx1ZSA9IHNlcmlhbGl6ZXIuc2VyaWFsaXplKHByb3BlcnR5TWFwcGVyLCB0b1NlcmlhbGl6ZSwgcHJvcGVydHlPYmplY3ROYW1lLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VyaWFsaXplZFZhbHVlICE9PSB1bmRlZmluZWQgJiYgcHJvcE5hbWUgIT09IHVuZGVmaW5lZCAmJiBwcm9wTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGdldFhtbE9iamVjdFZhbHVlKHByb3BlcnR5TWFwcGVyLCBzZXJpYWxpemVkVmFsdWUsIGlzWG1sLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzWG1sICYmIHByb3BlcnR5TWFwcGVyLnhtbElzQXR0cmlidXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBYTUxfQVRUUktFWSwgaS5lLiwgJCBpcyB0aGUga2V5IGF0dHJpYnV0ZXMgYXJlIGtlcHQgdW5kZXIgaW4geG1sMmpzLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBrZWVwcyB0aGluZ3Mgc2ltcGxlIHdoaWxlIHByZXZlbnRpbmcgbmFtZSBjb2xsaXNpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpdGggbmFtZXMgaW4gdXNlciBkb2N1bWVudHMuXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRPYmplY3RbWE1MX0FUVFJLRVldID0gcGFyZW50T2JqZWN0W1hNTF9BVFRSS0VZXSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE9iamVjdFtYTUxfQVRUUktFWV1bcHJvcE5hbWVdID0gc2VyaWFsaXplZFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzWG1sICYmIHByb3BlcnR5TWFwcGVyLnhtbElzV3JhcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50T2JqZWN0W3Byb3BOYW1lXSA9IHsgW3Byb3BlcnR5TWFwcGVyLnhtbEVsZW1lbnROYW1lXTogdmFsdWUgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE9iamVjdFtwcm9wTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhZGRpdGlvbmFsUHJvcGVydGllc01hcHBlciA9IHJlc29sdmVBZGRpdGlvbmFsUHJvcGVydGllcyhzZXJpYWxpemVyLCBtYXBwZXIsIG9iamVjdE5hbWUpO1xuICAgICAgICBpZiAoYWRkaXRpb25hbFByb3BlcnRpZXNNYXBwZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BOYW1lcyA9IE9iamVjdC5rZXlzKG1vZGVsUHJvcHMpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBjbGllbnRQcm9wTmFtZSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0FkZGl0aW9uYWxQcm9wZXJ0eSA9IHByb3BOYW1lcy5ldmVyeSgocG4pID0+IHBuICE9PSBjbGllbnRQcm9wTmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzQWRkaXRpb25hbFByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWRbY2xpZW50UHJvcE5hbWVdID0gc2VyaWFsaXplci5zZXJpYWxpemUoYWRkaXRpb25hbFByb3BlcnRpZXNNYXBwZXIsIG9iamVjdFtjbGllbnRQcm9wTmFtZV0sIG9iamVjdE5hbWUgKyAnW1wiJyArIGNsaWVudFByb3BOYW1lICsgJ1wiXScsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGF5bG9hZDtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbn1cbmZ1bmN0aW9uIGdldFhtbE9iamVjdFZhbHVlKHByb3BlcnR5TWFwcGVyLCBzZXJpYWxpemVkVmFsdWUsIGlzWG1sLCBvcHRpb25zKSB7XG4gICAgaWYgKCFpc1htbCB8fCAhcHJvcGVydHlNYXBwZXIueG1sTmFtZXNwYWNlKSB7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemVkVmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IHhtbG5zS2V5ID0gcHJvcGVydHlNYXBwZXIueG1sTmFtZXNwYWNlUHJlZml4XG4gICAgICAgID8gYHhtbG5zOiR7cHJvcGVydHlNYXBwZXIueG1sTmFtZXNwYWNlUHJlZml4fWBcbiAgICAgICAgOiBcInhtbG5zXCI7XG4gICAgY29uc3QgeG1sTmFtZXNwYWNlID0geyBbeG1sbnNLZXldOiBwcm9wZXJ0eU1hcHBlci54bWxOYW1lc3BhY2UgfTtcbiAgICBpZiAoW1wiQ29tcG9zaXRlXCJdLmluY2x1ZGVzKHByb3BlcnR5TWFwcGVyLnR5cGUubmFtZSkpIHtcbiAgICAgICAgaWYgKHNlcmlhbGl6ZWRWYWx1ZVtYTUxfQVRUUktFWV0pIHtcbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemVkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBPYmplY3QuYXNzaWduKHt9LCBzZXJpYWxpemVkVmFsdWUpO1xuICAgICAgICAgICAgcmVzdWx0W1hNTF9BVFRSS0VZXSA9IHhtbE5hbWVzcGFjZTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgcmVzdWx0W29wdGlvbnMueG1sLnhtbENoYXJLZXldID0gc2VyaWFsaXplZFZhbHVlO1xuICAgIHJlc3VsdFtYTUxfQVRUUktFWV0gPSB4bWxOYW1lc3BhY2U7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGlzU3BlY2lhbFhtbFByb3BlcnR5KHByb3BlcnR5TmFtZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBbWE1MX0FUVFJLRVksIG9wdGlvbnMueG1sLnhtbENoYXJLZXldLmluY2x1ZGVzKHByb3BlcnR5TmFtZSk7XG59XG5mdW5jdGlvbiBkZXNlcmlhbGl6ZUNvbXBvc2l0ZVR5cGUoc2VyaWFsaXplciwgbWFwcGVyLCByZXNwb25zZUJvZHksIG9iamVjdE5hbWUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IHhtbENoYXJLZXkgPSAoX2EgPSBvcHRpb25zLnhtbC54bWxDaGFyS2V5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBYTUxfQ0hBUktFWTtcbiAgICBpZiAoZ2V0UG9seW1vcnBoaWNEaXNjcmltaW5hdG9yUmVjdXJzaXZlbHkoc2VyaWFsaXplciwgbWFwcGVyKSkge1xuICAgICAgICBtYXBwZXIgPSBnZXRQb2x5bW9ycGhpY01hcHBlcihzZXJpYWxpemVyLCBtYXBwZXIsIHJlc3BvbnNlQm9keSwgXCJzZXJpYWxpemVkTmFtZVwiKTtcbiAgICB9XG4gICAgY29uc3QgbW9kZWxQcm9wcyA9IHJlc29sdmVNb2RlbFByb3BlcnRpZXMoc2VyaWFsaXplciwgbWFwcGVyLCBvYmplY3ROYW1lKTtcbiAgICBsZXQgaW5zdGFuY2UgPSB7fTtcbiAgICBjb25zdCBoYW5kbGVkUHJvcGVydHlOYW1lcyA9IFtdO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG1vZGVsUHJvcHMpKSB7XG4gICAgICAgIGNvbnN0IHByb3BlcnR5TWFwcGVyID0gbW9kZWxQcm9wc1trZXldO1xuICAgICAgICBjb25zdCBwYXRocyA9IHNwbGl0U2VyaWFsaXplTmFtZShtb2RlbFByb3BzW2tleV0uc2VyaWFsaXplZE5hbWUpO1xuICAgICAgICBoYW5kbGVkUHJvcGVydHlOYW1lcy5wdXNoKHBhdGhzWzBdKTtcbiAgICAgICAgY29uc3QgeyBzZXJpYWxpemVkTmFtZSwgeG1sTmFtZSwgeG1sRWxlbWVudE5hbWUgfSA9IHByb3BlcnR5TWFwcGVyO1xuICAgICAgICBsZXQgcHJvcGVydHlPYmplY3ROYW1lID0gb2JqZWN0TmFtZTtcbiAgICAgICAgaWYgKHNlcmlhbGl6ZWROYW1lICE9PSBcIlwiICYmIHNlcmlhbGl6ZWROYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHByb3BlcnR5T2JqZWN0TmFtZSA9IG9iamVjdE5hbWUgKyBcIi5cIiArIHNlcmlhbGl6ZWROYW1lO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhlYWRlckNvbGxlY3Rpb25QcmVmaXggPSBwcm9wZXJ0eU1hcHBlci5oZWFkZXJDb2xsZWN0aW9uUHJlZml4O1xuICAgICAgICBpZiAoaGVhZGVyQ29sbGVjdGlvblByZWZpeCkge1xuICAgICAgICAgICAgY29uc3QgZGljdGlvbmFyeSA9IHt9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBoZWFkZXJLZXkgb2YgT2JqZWN0LmtleXMocmVzcG9uc2VCb2R5KSkge1xuICAgICAgICAgICAgICAgIGlmIChoZWFkZXJLZXkuc3RhcnRzV2l0aChoZWFkZXJDb2xsZWN0aW9uUHJlZml4KSkge1xuICAgICAgICAgICAgICAgICAgICBkaWN0aW9uYXJ5W2hlYWRlcktleS5zdWJzdHJpbmcoaGVhZGVyQ29sbGVjdGlvblByZWZpeC5sZW5ndGgpXSA9IHNlcmlhbGl6ZXIuZGVzZXJpYWxpemUocHJvcGVydHlNYXBwZXIudHlwZS52YWx1ZSwgcmVzcG9uc2VCb2R5W2hlYWRlcktleV0sIHByb3BlcnR5T2JqZWN0TmFtZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhhbmRsZWRQcm9wZXJ0eU5hbWVzLnB1c2goaGVhZGVyS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluc3RhbmNlW2tleV0gPSBkaWN0aW9uYXJ5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNlcmlhbGl6ZXIuaXNYTUwpIHtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eU1hcHBlci54bWxJc0F0dHJpYnV0ZSAmJiByZXNwb25zZUJvZHlbWE1MX0FUVFJLRVldKSB7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2Vba2V5XSA9IHNlcmlhbGl6ZXIuZGVzZXJpYWxpemUocHJvcGVydHlNYXBwZXIsIHJlc3BvbnNlQm9keVtYTUxfQVRUUktFWV1beG1sTmFtZV0sIHByb3BlcnR5T2JqZWN0TmFtZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcm9wZXJ0eU1hcHBlci54bWxJc01zVGV4dCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZUJvZHlbeG1sQ2hhcktleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZVtrZXldID0gcmVzcG9uc2VCb2R5W3htbENoYXJLZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgcmVzcG9uc2VCb2R5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzcGVjaWFsIGNhc2Ugd2hlcmUgeG1sIHBhcnNlciBwYXJzZXMgXCI8TmFtZT5jb250ZW50PC9OYW1lPlwiIGludG8gSlNPTiBvZlxuICAgICAgICAgICAgICAgICAgICAvLyAgIGB7IG5hbWU6IFwiY29udGVudFwifWAgaW5zdGVhZCBvZiBgeyBuYW1lOiB7IFwiX1wiOiBcImNvbnRlbnRcIiB9fWBcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2Vba2V5XSA9IHJlc3BvbnNlQm9keTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSB4bWxFbGVtZW50TmFtZSB8fCB4bWxOYW1lIHx8IHNlcmlhbGl6ZWROYW1lO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eU1hcHBlci54bWxJc1dyYXBwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLyogYSBsaXN0IG9mIDx4bWxFbGVtZW50TmFtZT4gd3JhcHBlZCBieSA8eG1sTmFtZT5cbiAgICAgICAgICAgICAgICAgICAgICBGb3IgdGhlIHhtbCBleGFtcGxlIGJlbG93XG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29ycz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPENvcnNSdWxlPi4uLjwvQ29yc1J1bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxDb3JzUnVsZT4uLi48L0NvcnNSdWxlPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db3JzPlxuICAgICAgICAgICAgICAgICAgICAgIHRoZSByZXNwb25zZUJvZHkgaGFzXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIENvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb3JzUnVsZTogW3suLi59LCB7Li4ufV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIHhtbE5hbWUgaXMgXCJDb3JzXCIgYW5kIHhtbEVsZW1lbnROYW1lIGlzXCJDb3JzUnVsZVwiLlxuICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3cmFwcGVkID0gcmVzcG9uc2VCb2R5W3htbE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50TGlzdCA9IChfYiA9IHdyYXBwZWQgPT09IG51bGwgfHwgd3JhcHBlZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogd3JhcHBlZFt4bWxFbGVtZW50TmFtZV0pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdO1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZVtrZXldID0gc2VyaWFsaXplci5kZXNlcmlhbGl6ZShwcm9wZXJ0eU1hcHBlciwgZWxlbWVudExpc3QsIHByb3BlcnR5T2JqZWN0TmFtZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZWRQcm9wZXJ0eU5hbWVzLnB1c2goeG1sTmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IHJlc3BvbnNlQm9keVtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZVtrZXldID0gc2VyaWFsaXplci5kZXNlcmlhbGl6ZShwcm9wZXJ0eU1hcHBlciwgcHJvcGVydHksIHByb3BlcnR5T2JqZWN0TmFtZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZWRQcm9wZXJ0eU5hbWVzLnB1c2gocHJvcGVydHlOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBkZXNlcmlhbGl6ZSB0aGUgcHJvcGVydHkgaWYgaXQgaXMgcHJlc2VudCBpbiB0aGUgcHJvdmlkZWQgcmVzcG9uc2VCb2R5IGluc3RhbmNlXG4gICAgICAgICAgICBsZXQgcHJvcGVydHlJbnN0YW5jZTtcbiAgICAgICAgICAgIGxldCByZXMgPSByZXNwb25zZUJvZHk7XG4gICAgICAgICAgICAvLyB0cmF2ZXJzaW5nIHRoZSBvYmplY3Qgc3RlcCBieSBzdGVwLlxuICAgICAgICAgICAgbGV0IHN0ZXBzID0gMDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBwYXRocykge1xuICAgICAgICAgICAgICAgIGlmICghcmVzKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBzdGVwcysrO1xuICAgICAgICAgICAgICAgIHJlcyA9IHJlc1tpdGVtXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG9ubHkgYWNjZXB0IG51bGwgd2hlbiByZWFjaGluZyB0aGUgbGFzdCBwb3NpdGlvbiBvZiBvYmplY3Qgb3RoZXJ3aXNlIGl0IHdvdWxkIGJlIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKHJlcyA9PT0gbnVsbCAmJiBzdGVwcyA8IHBhdGhzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJlcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb3BlcnR5SW5zdGFuY2UgPSByZXM7XG4gICAgICAgICAgICBjb25zdCBwb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3IgPSBtYXBwZXIudHlwZS5wb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3I7XG4gICAgICAgICAgICAvLyBjaGVja2luZyB0aGF0IHRoZSBtb2RlbCBwcm9wZXJ0eSBuYW1lIChrZXkpKGV4OiBcImZpc2h0eXBlXCIpIGFuZCB0aGVcbiAgICAgICAgICAgIC8vIGNsaWVudE5hbWUgb2YgdGhlIHBvbHltb3JwaGljRGlzY3JpbWluYXRvciB7bWV0YWRhdGF9IChleDogXCJmaXNodHlwZVwiKVxuICAgICAgICAgICAgLy8gaW5zdGVhZCBvZiB0aGUgc2VyaWFsaXplZE5hbWUgb2YgdGhlIHBvbHltb3JwaGljRGlzY3JpbWluYXRvciAoZXg6IFwiZmlzaC50eXBlXCIpXG4gICAgICAgICAgICAvLyBpcyBhIGJldHRlciBhcHByb2FjaC4gVGhlIGdlbmVyYXRvciBpcyBub3QgY29uc2lzdGVudCB3aXRoIGVzY2FwaW5nICdcXC4nIGluIHRoZVxuICAgICAgICAgICAgLy8gc2VyaWFsaXplZE5hbWUgb2YgdGhlIHByb3BlcnR5IChleDogXCJmaXNoXFwudHlwZVwiKSB0aGF0IGlzIG1hcmtlZCBhcyBwb2x5bW9ycGhpYyBkaXNjcmltaW5hdG9yXG4gICAgICAgICAgICAvLyBhbmQgdGhlIHNlcmlhbGl6ZWROYW1lIG9mIHRoZSBtZXRhZGF0YSBwb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3IgKGV4OiBcImZpc2gudHlwZVwiKS4gSG93ZXZlcixcbiAgICAgICAgICAgIC8vIHRoZSBjbGllbnROYW1lIHRyYW5zZm9ybWF0aW9uIG9mIHRoZSBwb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3IgKGV4OiBcImZpc2h0eXBlXCIpIGFuZFxuICAgICAgICAgICAgLy8gdGhlIHRyYW5zZm9ybWF0aW9uIG9mIG1vZGVsIHByb3BlcnR5IG5hbWUgKGV4OiBcImZpc2h0eXBlXCIpIGlzIGRvbmUgY29uc2lzdGVudGx5LlxuICAgICAgICAgICAgLy8gSGVuY2UsIGl0IGlzIGEgc2FmZXIgYmV0IHRvIHJlbHkgb24gdGhlIGNsaWVudE5hbWUgb2YgdGhlIHBvbHltb3JwaGljRGlzY3JpbWluYXRvci5cbiAgICAgICAgICAgIGlmIChwb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3IgJiZcbiAgICAgICAgICAgICAgICBrZXkgPT09IHBvbHltb3JwaGljRGlzY3JpbWluYXRvci5jbGllbnROYW1lICYmXG4gICAgICAgICAgICAgICAgKHByb3BlcnR5SW5zdGFuY2UgPT09IHVuZGVmaW5lZCB8fCBwcm9wZXJ0eUluc3RhbmNlID09PSBudWxsKSkge1xuICAgICAgICAgICAgICAgIHByb3BlcnR5SW5zdGFuY2UgPSBtYXBwZXIuc2VyaWFsaXplZE5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgc2VyaWFsaXplZFZhbHVlO1xuICAgICAgICAgICAgLy8gcGFnaW5nXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXNwb25zZUJvZHlba2V5XSkgJiYgbW9kZWxQcm9wc1trZXldLnNlcmlhbGl6ZWROYW1lID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydHlJbnN0YW5jZSA9IHJlc3BvbnNlQm9keVtrZXldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFycmF5SW5zdGFuY2UgPSBzZXJpYWxpemVyLmRlc2VyaWFsaXplKHByb3BlcnR5TWFwcGVyLCBwcm9wZXJ0eUluc3RhbmNlLCBwcm9wZXJ0eU9iamVjdE5hbWUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIC8vIENvcHkgb3ZlciBhbnkgcHJvcGVydGllcyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIGFkZGVkIGludG8gdGhlIGluc3RhbmNlLCB3aGVyZSB0aGV5IGRvXG4gICAgICAgICAgICAgICAgLy8gbm90IGV4aXN0IG9uIHRoZSBuZXdseSBkZS1zZXJpYWxpemVkIGFycmF5XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoaW5zdGFuY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5SW5zdGFuY2UsIGspKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheUluc3RhbmNlW2tdID0gdjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IGFycmF5SW5zdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcm9wZXJ0eUluc3RhbmNlICE9PSB1bmRlZmluZWQgfHwgcHJvcGVydHlNYXBwZXIuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkVmFsdWUgPSBzZXJpYWxpemVyLmRlc2VyaWFsaXplKHByb3BlcnR5TWFwcGVyLCBwcm9wZXJ0eUluc3RhbmNlLCBwcm9wZXJ0eU9iamVjdE5hbWUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGluc3RhbmNlW2tleV0gPSBzZXJpYWxpemVkVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYWRkaXRpb25hbFByb3BlcnRpZXNNYXBwZXIgPSBtYXBwZXIudHlwZS5hZGRpdGlvbmFsUHJvcGVydGllcztcbiAgICBpZiAoYWRkaXRpb25hbFByb3BlcnRpZXNNYXBwZXIpIHtcbiAgICAgICAgY29uc3QgaXNBZGRpdGlvbmFsUHJvcGVydHkgPSAocmVzcG9uc2VQcm9wTmFtZSkgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBjbGllbnRQcm9wTmFtZSBpbiBtb2RlbFByb3BzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aHMgPSBzcGxpdFNlcmlhbGl6ZU5hbWUobW9kZWxQcm9wc1tjbGllbnRQcm9wTmFtZV0uc2VyaWFsaXplZE5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChwYXRoc1swXSA9PT0gcmVzcG9uc2VQcm9wTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIGZvciAoY29uc3QgcmVzcG9uc2VQcm9wTmFtZSBpbiByZXNwb25zZUJvZHkpIHtcbiAgICAgICAgICAgIGlmIChpc0FkZGl0aW9uYWxQcm9wZXJ0eShyZXNwb25zZVByb3BOYW1lKSkge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlW3Jlc3BvbnNlUHJvcE5hbWVdID0gc2VyaWFsaXplci5kZXNlcmlhbGl6ZShhZGRpdGlvbmFsUHJvcGVydGllc01hcHBlciwgcmVzcG9uc2VCb2R5W3Jlc3BvbnNlUHJvcE5hbWVdLCBvYmplY3ROYW1lICsgJ1tcIicgKyByZXNwb25zZVByb3BOYW1lICsgJ1wiXScsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlc3BvbnNlQm9keSAmJiAhb3B0aW9ucy5pZ25vcmVVbmtub3duUHJvcGVydGllcykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhyZXNwb25zZUJvZHkpKSB7XG4gICAgICAgICAgICBpZiAoaW5zdGFuY2Vba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgIWhhbmRsZWRQcm9wZXJ0eU5hbWVzLmluY2x1ZGVzKGtleSkgJiZcbiAgICAgICAgICAgICAgICAhaXNTcGVjaWFsWG1sUHJvcGVydHkoa2V5LCBvcHRpb25zKSkge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlW2tleV0gPSByZXNwb25zZUJvZHlba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5zdGFuY2U7XG59XG5mdW5jdGlvbiBkZXNlcmlhbGl6ZURpY3Rpb25hcnlUeXBlKHNlcmlhbGl6ZXIsIG1hcHBlciwgcmVzcG9uc2VCb2R5LCBvYmplY3ROYW1lLCBvcHRpb25zKSB7XG4gICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgIGNvbnN0IHZhbHVlID0gbWFwcGVyLnR5cGUudmFsdWU7XG4gICAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBcInZhbHVlXCIgbWV0YWRhdGEgZm9yIGEgRGljdGlvbmFyeSBtdXN0IGJlIGRlZmluZWQgaW4gdGhlIGAgK1xuICAgICAgICAgICAgYG1hcHBlciBhbmQgaXQgbXVzdCBvZiB0eXBlIFwib2JqZWN0XCIgaW4gJHtvYmplY3ROYW1lfWApO1xuICAgIH1cbiAgICBpZiAocmVzcG9uc2VCb2R5KSB7XG4gICAgICAgIGNvbnN0IHRlbXBEaWN0aW9uYXJ5ID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHJlc3BvbnNlQm9keSkpIHtcbiAgICAgICAgICAgIHRlbXBEaWN0aW9uYXJ5W2tleV0gPSBzZXJpYWxpemVyLmRlc2VyaWFsaXplKHZhbHVlLCByZXNwb25zZUJvZHlba2V5XSwgb2JqZWN0TmFtZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRlbXBEaWN0aW9uYXJ5O1xuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2VCb2R5O1xufVxuZnVuY3Rpb24gZGVzZXJpYWxpemVTZXF1ZW5jZVR5cGUoc2VyaWFsaXplciwgbWFwcGVyLCByZXNwb25zZUJvZHksIG9iamVjdE5hbWUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgbGV0IGVsZW1lbnQgPSBtYXBwZXIudHlwZS5lbGVtZW50O1xuICAgIGlmICghZWxlbWVudCB8fCB0eXBlb2YgZWxlbWVudCAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGVsZW1lbnRcIiBtZXRhZGF0YSBmb3IgYW4gQXJyYXkgbXVzdCBiZSBkZWZpbmVkIGluIHRoZSBgICtcbiAgICAgICAgICAgIGBtYXBwZXIgYW5kIGl0IG11c3Qgb2YgdHlwZSBcIm9iamVjdFwiIGluICR7b2JqZWN0TmFtZX1gKTtcbiAgICB9XG4gICAgaWYgKHJlc3BvbnNlQm9keSkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVzcG9uc2VCb2R5KSkge1xuICAgICAgICAgICAgLy8geG1sMmpzIHdpbGwgaW50ZXJwcmV0IGEgc2luZ2xlIGVsZW1lbnQgYXJyYXkgYXMganVzdCB0aGUgZWxlbWVudCwgc28gZm9yY2UgaXQgdG8gYmUgYW4gYXJyYXlcbiAgICAgICAgICAgIHJlc3BvbnNlQm9keSA9IFtyZXNwb25zZUJvZHldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFF1aXJrOiBDb21wb3NpdGUgbWFwcGVycyByZWZlcmVuY2VkIGJ5IGBlbGVtZW50YCBtaWdodFxuICAgICAgICAvLyBub3QgaGF2ZSAqYWxsKiBwcm9wZXJ0aWVzIGRlY2xhcmVkIChsaWtlIHViZXJQYXJlbnQpLFxuICAgICAgICAvLyBzbyBsZXQncyB0cnkgdG8gbG9vayB1cCB0aGUgZnVsbCBkZWZpbml0aW9uIGJ5IG5hbWUuXG4gICAgICAgIGlmIChlbGVtZW50LnR5cGUubmFtZSA9PT0gXCJDb21wb3NpdGVcIiAmJiBlbGVtZW50LnR5cGUuY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gKF9hID0gc2VyaWFsaXplci5tb2RlbE1hcHBlcnNbZWxlbWVudC50eXBlLmNsYXNzTmFtZV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGVtcEFycmF5ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzcG9uc2VCb2R5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0ZW1wQXJyYXlbaV0gPSBzZXJpYWxpemVyLmRlc2VyaWFsaXplKGVsZW1lbnQsIHJlc3BvbnNlQm9keVtpXSwgYCR7b2JqZWN0TmFtZX1bJHtpfV1gLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGVtcEFycmF5O1xuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2VCb2R5O1xufVxuZnVuY3Rpb24gZ2V0SW5kZXhEaXNjcmltaW5hdG9yKGRpc2NyaW1pbmF0b3JzLCBkaXNjcmltaW5hdG9yVmFsdWUsIHR5cGVOYW1lKSB7XG4gICAgY29uc3QgdHlwZU5hbWVzVG9DaGVjayA9IFt0eXBlTmFtZV07XG4gICAgd2hpbGUgKHR5cGVOYW1lc1RvQ2hlY2subGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnROYW1lID0gdHlwZU5hbWVzVG9DaGVjay5zaGlmdCgpO1xuICAgICAgICBjb25zdCBpbmRleERpc2NyaW1pbmF0b3IgPSBkaXNjcmltaW5hdG9yVmFsdWUgPT09IGN1cnJlbnROYW1lXG4gICAgICAgICAgICA/IGRpc2NyaW1pbmF0b3JWYWx1ZVxuICAgICAgICAgICAgOiBjdXJyZW50TmFtZSArIFwiLlwiICsgZGlzY3JpbWluYXRvclZhbHVlO1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRpc2NyaW1pbmF0b3JzLCBpbmRleERpc2NyaW1pbmF0b3IpKSB7XG4gICAgICAgICAgICByZXR1cm4gZGlzY3JpbWluYXRvcnNbaW5kZXhEaXNjcmltaW5hdG9yXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW25hbWUsIG1hcHBlcl0gb2YgT2JqZWN0LmVudHJpZXMoZGlzY3JpbWluYXRvcnMpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUuc3RhcnRzV2l0aChjdXJyZW50TmFtZSArIFwiLlwiKSAmJlxuICAgICAgICAgICAgICAgICAgICBtYXBwZXIudHlwZS51YmVyUGFyZW50ID09PSBjdXJyZW50TmFtZSAmJlxuICAgICAgICAgICAgICAgICAgICBtYXBwZXIudHlwZS5jbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWVzVG9DaGVjay5wdXNoKG1hcHBlci50eXBlLmNsYXNzTmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBnZXRQb2x5bW9ycGhpY01hcHBlcihzZXJpYWxpemVyLCBtYXBwZXIsIG9iamVjdCwgcG9seW1vcnBoaWNQcm9wZXJ0eU5hbWUpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgcG9seW1vcnBoaWNEaXNjcmltaW5hdG9yID0gZ2V0UG9seW1vcnBoaWNEaXNjcmltaW5hdG9yUmVjdXJzaXZlbHkoc2VyaWFsaXplciwgbWFwcGVyKTtcbiAgICBpZiAocG9seW1vcnBoaWNEaXNjcmltaW5hdG9yKSB7XG4gICAgICAgIGxldCBkaXNjcmltaW5hdG9yTmFtZSA9IHBvbHltb3JwaGljRGlzY3JpbWluYXRvcltwb2x5bW9ycGhpY1Byb3BlcnR5TmFtZV07XG4gICAgICAgIGlmIChkaXNjcmltaW5hdG9yTmFtZSkge1xuICAgICAgICAgICAgLy8gVGhlIHNlcmlhbGl6ZWROYW1lIG1pZ2h0IGhhdmUgXFxcXCwgd2hpY2ggd2UganVzdCB3YW50IHRvIGlnbm9yZVxuICAgICAgICAgICAgaWYgKHBvbHltb3JwaGljUHJvcGVydHlOYW1lID09PSBcInNlcmlhbGl6ZWROYW1lXCIpIHtcbiAgICAgICAgICAgICAgICBkaXNjcmltaW5hdG9yTmFtZSA9IGRpc2NyaW1pbmF0b3JOYW1lLnJlcGxhY2UoL1xcXFwvZ2ksIFwiXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGlzY3JpbWluYXRvclZhbHVlID0gb2JqZWN0W2Rpc2NyaW1pbmF0b3JOYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVOYW1lID0gKF9hID0gbWFwcGVyLnR5cGUudWJlclBhcmVudCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbWFwcGVyLnR5cGUuY2xhc3NOYW1lO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkaXNjcmltaW5hdG9yVmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdHlwZU5hbWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb2x5bW9ycGhpY01hcHBlciA9IGdldEluZGV4RGlzY3JpbWluYXRvcihzZXJpYWxpemVyLm1vZGVsTWFwcGVycy5kaXNjcmltaW5hdG9ycywgZGlzY3JpbWluYXRvclZhbHVlLCB0eXBlTmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKHBvbHltb3JwaGljTWFwcGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcHBlciA9IHBvbHltb3JwaGljTWFwcGVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWFwcGVyO1xufVxuZnVuY3Rpb24gZ2V0UG9seW1vcnBoaWNEaXNjcmltaW5hdG9yUmVjdXJzaXZlbHkoc2VyaWFsaXplciwgbWFwcGVyKSB7XG4gICAgcmV0dXJuIChtYXBwZXIudHlwZS5wb2x5bW9ycGhpY0Rpc2NyaW1pbmF0b3IgfHxcbiAgICAgICAgZ2V0UG9seW1vcnBoaWNEaXNjcmltaW5hdG9yU2FmZWx5KHNlcmlhbGl6ZXIsIG1hcHBlci50eXBlLnViZXJQYXJlbnQpIHx8XG4gICAgICAgIGdldFBvbHltb3JwaGljRGlzY3JpbWluYXRvclNhZmVseShzZXJpYWxpemVyLCBtYXBwZXIudHlwZS5jbGFzc05hbWUpKTtcbn1cbmZ1bmN0aW9uIGdldFBvbHltb3JwaGljRGlzY3JpbWluYXRvclNhZmVseShzZXJpYWxpemVyLCB0eXBlTmFtZSkge1xuICAgIHJldHVybiAodHlwZU5hbWUgJiZcbiAgICAgICAgc2VyaWFsaXplci5tb2RlbE1hcHBlcnNbdHlwZU5hbWVdICYmXG4gICAgICAgIHNlcmlhbGl6ZXIubW9kZWxNYXBwZXJzW3R5cGVOYW1lXS50eXBlLnBvbHltb3JwaGljRGlzY3JpbWluYXRvcik7XG59XG4vKipcbiAqIEtub3duIHR5cGVzIG9mIE1hcHBlcnNcbiAqL1xuZXhwb3J0IGNvbnN0IE1hcHBlclR5cGVOYW1lcyA9IHtcbiAgICBCYXNlNjRVcmw6IFwiQmFzZTY0VXJsXCIsXG4gICAgQm9vbGVhbjogXCJCb29sZWFuXCIsXG4gICAgQnl0ZUFycmF5OiBcIkJ5dGVBcnJheVwiLFxuICAgIENvbXBvc2l0ZTogXCJDb21wb3NpdGVcIixcbiAgICBEYXRlOiBcIkRhdGVcIixcbiAgICBEYXRlVGltZTogXCJEYXRlVGltZVwiLFxuICAgIERhdGVUaW1lUmZjMTEyMzogXCJEYXRlVGltZVJmYzExMjNcIixcbiAgICBEaWN0aW9uYXJ5OiBcIkRpY3Rpb25hcnlcIixcbiAgICBFbnVtOiBcIkVudW1cIixcbiAgICBOdW1iZXI6IFwiTnVtYmVyXCIsXG4gICAgT2JqZWN0OiBcIk9iamVjdFwiLFxuICAgIFNlcXVlbmNlOiBcIlNlcXVlbmNlXCIsXG4gICAgU3RyaW5nOiBcIlN0cmluZ1wiLFxuICAgIFN0cmVhbTogXCJTdHJlYW1cIixcbiAgICBUaW1lU3BhbjogXCJUaW1lU3BhblwiLFxuICAgIFVuaXhUaW1lOiBcIlVuaXhUaW1lXCIsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VyaWFsaXplci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/serviceClient.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/serviceClient.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServiceClient: () => (/* binding */ ServiceClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pipeline.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/pipeline.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/utils.js\");\n/* harmony import */ var _httpClientCache_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpClientCache.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/httpClientCache.js\");\n/* harmony import */ var _operationHelpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operationHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js\");\n/* harmony import */ var _urlHelpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./urlHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/urlHelpers.js\");\n/* harmony import */ var _interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./interfaceHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./log.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n/**\n * Initializes a new instance of the ServiceClient.\n */\nclass ServiceClient {\n    /**\n     * The ServiceClient constructor\n     * @param credential - The credentials used for authentication with the service.\n     * @param options - The service client options that govern the behavior of the client.\n     */\n    constructor(options = {}) {\n        var _a, _b;\n        this._requestContentType = options.requestContentType;\n        this._endpoint = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri;\n        if (options.baseUri) {\n            _log_js__WEBPACK_IMPORTED_MODULE_7__.logger.warning(\"The baseUri option for SDK Clients has been deprecated, please use endpoint instead.\");\n        }\n        this._allowInsecureConnection = options.allowInsecureConnection;\n        this._httpClient = options.httpClient || (0,_httpClientCache_js__WEBPACK_IMPORTED_MODULE_3__.getCachedDefaultHttpClient)();\n        this.pipeline = options.pipeline || createDefaultPipeline(options);\n        if ((_b = options.additionalPolicies) === null || _b === void 0 ? void 0 : _b.length) {\n            for (const { policy, position } of options.additionalPolicies) {\n                // Sign happens after Retry and is commonly needed to occur\n                // before policies that intercept post-retry.\n                const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n                this.pipeline.addPolicy(policy, {\n                    afterPhase,\n                });\n            }\n        }\n    }\n    /**\n     * Send the provided httpRequest.\n     */\n    async sendRequest(request) {\n        return this.pipeline.sendRequest(this._httpClient, request);\n    }\n    /**\n     * Send an HTTP request that is populated using the provided OperationSpec.\n     * @typeParam T - The typed result of the request, based on the OperationSpec.\n     * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.\n     * @param operationSpec - The OperationSpec to use to populate the httpRequest.\n     */\n    async sendOperationRequest(operationArguments, operationSpec) {\n        const endpoint = operationSpec.baseUrl || this._endpoint;\n        if (!endpoint) {\n            throw new Error(\"If operationSpec.baseUrl is not specified, then the ServiceClient must have a endpoint string property that contains the base URL to use.\");\n        }\n        // Templatized URLs sometimes reference properties on the ServiceClient child class,\n        // so we have to pass `this` below in order to search these properties if they're\n        // not part of OperationArguments\n        const url = (0,_urlHelpers_js__WEBPACK_IMPORTED_MODULE_5__.getRequestUrl)(endpoint, operationSpec, operationArguments, this);\n        const request = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createPipelineRequest)({\n            url,\n        });\n        request.method = operationSpec.httpMethod;\n        const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_4__.getOperationRequestInfo)(request);\n        operationInfo.operationSpec = operationSpec;\n        operationInfo.operationArguments = operationArguments;\n        const contentType = operationSpec.contentType || this._requestContentType;\n        if (contentType && operationSpec.requestBody) {\n            request.headers.set(\"Content-Type\", contentType);\n        }\n        const options = operationArguments.options;\n        if (options) {\n            const requestOptions = options.requestOptions;\n            if (requestOptions) {\n                if (requestOptions.timeout) {\n                    request.timeout = requestOptions.timeout;\n                }\n                if (requestOptions.onUploadProgress) {\n                    request.onUploadProgress = requestOptions.onUploadProgress;\n                }\n                if (requestOptions.onDownloadProgress) {\n                    request.onDownloadProgress = requestOptions.onDownloadProgress;\n                }\n                if (requestOptions.shouldDeserialize !== undefined) {\n                    operationInfo.shouldDeserialize = requestOptions.shouldDeserialize;\n                }\n                if (requestOptions.allowInsecureConnection) {\n                    request.allowInsecureConnection = true;\n                }\n            }\n            if (options.abortSignal) {\n                request.abortSignal = options.abortSignal;\n            }\n            if (options.tracingOptions) {\n                request.tracingOptions = options.tracingOptions;\n            }\n        }\n        if (this._allowInsecureConnection) {\n            request.allowInsecureConnection = true;\n        }\n        if (request.streamResponseStatusCodes === undefined) {\n            request.streamResponseStatusCodes = (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_6__.getStreamingResponseStatusCodes)(operationSpec);\n        }\n        try {\n            const rawResponse = await this.sendRequest(request);\n            const flatResponse = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.flattenResponse)(rawResponse, operationSpec.responses[rawResponse.status]);\n            if (options === null || options === void 0 ? void 0 : options.onResponse) {\n                options.onResponse(rawResponse, flatResponse);\n            }\n            return flatResponse;\n        }\n        catch (error) {\n            if (typeof error === \"object\" && (error === null || error === void 0 ? void 0 : error.response)) {\n                const rawResponse = error.response;\n                const flatResponse = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.flattenResponse)(rawResponse, operationSpec.responses[error.statusCode] || operationSpec.responses[\"default\"]);\n                error.details = flatResponse;\n                if (options === null || options === void 0 ? void 0 : options.onResponse) {\n                    options.onResponse(rawResponse, flatResponse, error);\n                }\n            }\n            throw error;\n        }\n    }\n}\nfunction createDefaultPipeline(options) {\n    const credentialScopes = getCredentialScopes(options);\n    const credentialOptions = options.credential && credentialScopes\n        ? { credentialScopes, credential: options.credential }\n        : undefined;\n    return (0,_pipeline_js__WEBPACK_IMPORTED_MODULE_1__.createClientPipeline)(Object.assign(Object.assign({}, options), { credentialOptions }));\n}\nfunction getCredentialScopes(options) {\n    if (options.credentialScopes) {\n        return options.credentialScopes;\n    }\n    if (options.endpoint) {\n        return `${options.endpoint}/.default`;\n    }\n    if (options.baseUri) {\n        return `${options.baseUri}/.default`;\n    }\n    if (options.credential && !options.credentialScopes) {\n        throw new Error(`When using credentials, the ServiceClientOptions must contain either a endpoint or a credentialScopes. Unable to create a bearerTokenAuthenticationPolicy`);\n    }\n    return undefined;\n}\n//# sourceMappingURL=serviceClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL3NlcnZpY2VDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNtRTtBQUNkO0FBQ1I7QUFDcUI7QUFDRjtBQUNoQjtBQUN3QjtBQUN0QztBQUNsQztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDJDQUFNO0FBQ2xCO0FBQ0E7QUFDQSxpREFBaUQsK0VBQTBCO0FBQzNFO0FBQ0E7QUFDQSx5QkFBeUIsbUJBQW1CO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw2REFBYTtBQUNqQyx3QkFBd0IsZ0ZBQXFCO0FBQzdDO0FBQ0EsU0FBUztBQUNUO0FBQ0EsOEJBQThCLDZFQUF1QjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxxRkFBK0I7QUFDL0U7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLDBEQUFlO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsMERBQWU7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsV0FBVyxrRUFBb0IsK0JBQStCLGNBQWMsbUJBQW1CO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1jbGllbnQvZGlzdC9lc20vc2VydmljZUNsaWVudC5qcz9mYmQ4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlUGlwZWxpbmVSZXF1ZXN0LCB9IGZyb20gXCJAYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lXCI7XG5pbXBvcnQgeyBjcmVhdGVDbGllbnRQaXBlbGluZSB9IGZyb20gXCIuL3BpcGVsaW5lLmpzXCI7XG5pbXBvcnQgeyBmbGF0dGVuUmVzcG9uc2UgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuaW1wb3J0IHsgZ2V0Q2FjaGVkRGVmYXVsdEh0dHBDbGllbnQgfSBmcm9tIFwiLi9odHRwQ2xpZW50Q2FjaGUuanNcIjtcbmltcG9ydCB7IGdldE9wZXJhdGlvblJlcXVlc3RJbmZvIH0gZnJvbSBcIi4vb3BlcmF0aW9uSGVscGVycy5qc1wiO1xuaW1wb3J0IHsgZ2V0UmVxdWVzdFVybCB9IGZyb20gXCIuL3VybEhlbHBlcnMuanNcIjtcbmltcG9ydCB7IGdldFN0cmVhbWluZ1Jlc3BvbnNlU3RhdHVzQ29kZXMgfSBmcm9tIFwiLi9pbnRlcmZhY2VIZWxwZXJzLmpzXCI7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwiLi9sb2cuanNcIjtcbi8qKlxuICogSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIFNlcnZpY2VDbGllbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXJ2aWNlQ2xpZW50IHtcbiAgICAvKipcbiAgICAgKiBUaGUgU2VydmljZUNsaWVudCBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSBjcmVkZW50aWFsIC0gVGhlIGNyZWRlbnRpYWxzIHVzZWQgZm9yIGF1dGhlbnRpY2F0aW9uIHdpdGggdGhlIHNlcnZpY2UuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgc2VydmljZSBjbGllbnQgb3B0aW9ucyB0aGF0IGdvdmVybiB0aGUgYmVoYXZpb3Igb2YgdGhlIGNsaWVudC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdGhpcy5fcmVxdWVzdENvbnRlbnRUeXBlID0gb3B0aW9ucy5yZXF1ZXN0Q29udGVudFR5cGU7XG4gICAgICAgIHRoaXMuX2VuZHBvaW50ID0gKF9hID0gb3B0aW9ucy5lbmRwb2ludCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogb3B0aW9ucy5iYXNlVXJpO1xuICAgICAgICBpZiAob3B0aW9ucy5iYXNlVXJpKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybmluZyhcIlRoZSBiYXNlVXJpIG9wdGlvbiBmb3IgU0RLIENsaWVudHMgaGFzIGJlZW4gZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBlbmRwb2ludCBpbnN0ZWFkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hbGxvd0luc2VjdXJlQ29ubmVjdGlvbiA9IG9wdGlvbnMuYWxsb3dJbnNlY3VyZUNvbm5lY3Rpb247XG4gICAgICAgIHRoaXMuX2h0dHBDbGllbnQgPSBvcHRpb25zLmh0dHBDbGllbnQgfHwgZ2V0Q2FjaGVkRGVmYXVsdEh0dHBDbGllbnQoKTtcbiAgICAgICAgdGhpcy5waXBlbGluZSA9IG9wdGlvbnMucGlwZWxpbmUgfHwgY3JlYXRlRGVmYXVsdFBpcGVsaW5lKG9wdGlvbnMpO1xuICAgICAgICBpZiAoKF9iID0gb3B0aW9ucy5hZGRpdGlvbmFsUG9saWNpZXMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyBwb2xpY3ksIHBvc2l0aW9uIH0gb2Ygb3B0aW9ucy5hZGRpdGlvbmFsUG9saWNpZXMpIHtcbiAgICAgICAgICAgICAgICAvLyBTaWduIGhhcHBlbnMgYWZ0ZXIgUmV0cnkgYW5kIGlzIGNvbW1vbmx5IG5lZWRlZCB0byBvY2N1clxuICAgICAgICAgICAgICAgIC8vIGJlZm9yZSBwb2xpY2llcyB0aGF0IGludGVyY2VwdCBwb3N0LXJldHJ5LlxuICAgICAgICAgICAgICAgIGNvbnN0IGFmdGVyUGhhc2UgPSBwb3NpdGlvbiA9PT0gXCJwZXJSZXRyeVwiID8gXCJTaWduXCIgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5waXBlbGluZS5hZGRQb2xpY3kocG9saWN5LCB7XG4gICAgICAgICAgICAgICAgICAgIGFmdGVyUGhhc2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCB0aGUgcHJvdmlkZWQgaHR0cFJlcXVlc3QuXG4gICAgICovXG4gICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5waXBlbGluZS5zZW5kUmVxdWVzdCh0aGlzLl9odHRwQ2xpZW50LCByZXF1ZXN0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCBhbiBIVFRQIHJlcXVlc3QgdGhhdCBpcyBwb3B1bGF0ZWQgdXNpbmcgdGhlIHByb3ZpZGVkIE9wZXJhdGlvblNwZWMuXG4gICAgICogQHR5cGVQYXJhbSBUIC0gVGhlIHR5cGVkIHJlc3VsdCBvZiB0aGUgcmVxdWVzdCwgYmFzZWQgb24gdGhlIE9wZXJhdGlvblNwZWMuXG4gICAgICogQHBhcmFtIG9wZXJhdGlvbkFyZ3VtZW50cyAtIFRoZSBhcmd1bWVudHMgdGhhdCB0aGUgSFRUUCByZXF1ZXN0J3MgdGVtcGxhdGVkIHZhbHVlcyB3aWxsIGJlIHBvcHVsYXRlZCBmcm9tLlxuICAgICAqIEBwYXJhbSBvcGVyYXRpb25TcGVjIC0gVGhlIE9wZXJhdGlvblNwZWMgdG8gdXNlIHRvIHBvcHVsYXRlIHRoZSBodHRwUmVxdWVzdC5cbiAgICAgKi9cbiAgICBhc3luYyBzZW5kT3BlcmF0aW9uUmVxdWVzdChvcGVyYXRpb25Bcmd1bWVudHMsIG9wZXJhdGlvblNwZWMpIHtcbiAgICAgICAgY29uc3QgZW5kcG9pbnQgPSBvcGVyYXRpb25TcGVjLmJhc2VVcmwgfHwgdGhpcy5fZW5kcG9pbnQ7XG4gICAgICAgIGlmICghZW5kcG9pbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklmIG9wZXJhdGlvblNwZWMuYmFzZVVybCBpcyBub3Qgc3BlY2lmaWVkLCB0aGVuIHRoZSBTZXJ2aWNlQ2xpZW50IG11c3QgaGF2ZSBhIGVuZHBvaW50IHN0cmluZyBwcm9wZXJ0eSB0aGF0IGNvbnRhaW5zIHRoZSBiYXNlIFVSTCB0byB1c2UuXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRlbXBsYXRpemVkIFVSTHMgc29tZXRpbWVzIHJlZmVyZW5jZSBwcm9wZXJ0aWVzIG9uIHRoZSBTZXJ2aWNlQ2xpZW50IGNoaWxkIGNsYXNzLFxuICAgICAgICAvLyBzbyB3ZSBoYXZlIHRvIHBhc3MgYHRoaXNgIGJlbG93IGluIG9yZGVyIHRvIHNlYXJjaCB0aGVzZSBwcm9wZXJ0aWVzIGlmIHRoZXkncmVcbiAgICAgICAgLy8gbm90IHBhcnQgb2YgT3BlcmF0aW9uQXJndW1lbnRzXG4gICAgICAgIGNvbnN0IHVybCA9IGdldFJlcXVlc3RVcmwoZW5kcG9pbnQsIG9wZXJhdGlvblNwZWMsIG9wZXJhdGlvbkFyZ3VtZW50cywgdGhpcyk7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBjcmVhdGVQaXBlbGluZVJlcXVlc3Qoe1xuICAgICAgICAgICAgdXJsLFxuICAgICAgICB9KTtcbiAgICAgICAgcmVxdWVzdC5tZXRob2QgPSBvcGVyYXRpb25TcGVjLmh0dHBNZXRob2Q7XG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbkluZm8gPSBnZXRPcGVyYXRpb25SZXF1ZXN0SW5mbyhyZXF1ZXN0KTtcbiAgICAgICAgb3BlcmF0aW9uSW5mby5vcGVyYXRpb25TcGVjID0gb3BlcmF0aW9uU3BlYztcbiAgICAgICAgb3BlcmF0aW9uSW5mby5vcGVyYXRpb25Bcmd1bWVudHMgPSBvcGVyYXRpb25Bcmd1bWVudHM7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gb3BlcmF0aW9uU3BlYy5jb250ZW50VHlwZSB8fCB0aGlzLl9yZXF1ZXN0Q29udGVudFR5cGU7XG4gICAgICAgIGlmIChjb250ZW50VHlwZSAmJiBvcGVyYXRpb25TcGVjLnJlcXVlc3RCb2R5KSB7XG4gICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KFwiQ29udGVudC1UeXBlXCIsIGNvbnRlbnRUeXBlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcHRpb25zID0gb3BlcmF0aW9uQXJndW1lbnRzLm9wdGlvbnM7XG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IG9wdGlvbnMucmVxdWVzdE9wdGlvbnM7XG4gICAgICAgICAgICBpZiAocmVxdWVzdE9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdE9wdGlvbnMudGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnRpbWVvdXQgPSByZXF1ZXN0T3B0aW9ucy50aW1lb3V0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdE9wdGlvbnMub25VcGxvYWRQcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Lm9uVXBsb2FkUHJvZ3Jlc3MgPSByZXF1ZXN0T3B0aW9ucy5vblVwbG9hZFByb2dyZXNzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdE9wdGlvbnMub25Eb3dubG9hZFByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3Qub25Eb3dubG9hZFByb2dyZXNzID0gcmVxdWVzdE9wdGlvbnMub25Eb3dubG9hZFByb2dyZXNzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdE9wdGlvbnMuc2hvdWxkRGVzZXJpYWxpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb25JbmZvLnNob3VsZERlc2VyaWFsaXplID0gcmVxdWVzdE9wdGlvbnMuc2hvdWxkRGVzZXJpYWxpemU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0T3B0aW9ucy5hbGxvd0luc2VjdXJlQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmFsbG93SW5zZWN1cmVDb25uZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hYm9ydFNpZ25hbCkge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QuYWJvcnRTaWduYWwgPSBvcHRpb25zLmFib3J0U2lnbmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudHJhY2luZ09wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnRyYWNpbmdPcHRpb25zID0gb3B0aW9ucy50cmFjaW5nT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYWxsb3dJbnNlY3VyZUNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIHJlcXVlc3QuYWxsb3dJbnNlY3VyZUNvbm5lY3Rpb24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0cmVhbVJlc3BvbnNlU3RhdHVzQ29kZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVxdWVzdC5zdHJlYW1SZXNwb25zZVN0YXR1c0NvZGVzID0gZ2V0U3RyZWFtaW5nUmVzcG9uc2VTdGF0dXNDb2RlcyhvcGVyYXRpb25TcGVjKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmF3UmVzcG9uc2UgPSBhd2FpdCB0aGlzLnNlbmRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICAgICAgY29uc3QgZmxhdFJlc3BvbnNlID0gZmxhdHRlblJlc3BvbnNlKHJhd1Jlc3BvbnNlLCBvcGVyYXRpb25TcGVjLnJlc3BvbnNlc1tyYXdSZXNwb25zZS5zdGF0dXNdKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub25SZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMub25SZXNwb25zZShyYXdSZXNwb25zZSwgZmxhdFJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmbGF0UmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVycm9yID09PSBcIm9iamVjdFwiICYmIChlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IucmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmF3UmVzcG9uc2UgPSBlcnJvci5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICBjb25zdCBmbGF0UmVzcG9uc2UgPSBmbGF0dGVuUmVzcG9uc2UocmF3UmVzcG9uc2UsIG9wZXJhdGlvblNwZWMucmVzcG9uc2VzW2Vycm9yLnN0YXR1c0NvZGVdIHx8IG9wZXJhdGlvblNwZWMucmVzcG9uc2VzW1wiZGVmYXVsdFwiXSk7XG4gICAgICAgICAgICAgICAgZXJyb3IuZGV0YWlscyA9IGZsYXRSZXNwb25zZTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9uUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vblJlc3BvbnNlKHJhd1Jlc3BvbnNlLCBmbGF0UmVzcG9uc2UsIGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRQaXBlbGluZShvcHRpb25zKSB7XG4gICAgY29uc3QgY3JlZGVudGlhbFNjb3BlcyA9IGdldENyZWRlbnRpYWxTY29wZXMob3B0aW9ucyk7XG4gICAgY29uc3QgY3JlZGVudGlhbE9wdGlvbnMgPSBvcHRpb25zLmNyZWRlbnRpYWwgJiYgY3JlZGVudGlhbFNjb3Blc1xuICAgICAgICA/IHsgY3JlZGVudGlhbFNjb3BlcywgY3JlZGVudGlhbDogb3B0aW9ucy5jcmVkZW50aWFsIH1cbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIGNyZWF0ZUNsaWVudFBpcGVsaW5lKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgY3JlZGVudGlhbE9wdGlvbnMgfSkpO1xufVxuZnVuY3Rpb24gZ2V0Q3JlZGVudGlhbFNjb3BlcyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuY3JlZGVudGlhbFNjb3Blcykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5jcmVkZW50aWFsU2NvcGVzO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5lbmRwb2ludCkge1xuICAgICAgICByZXR1cm4gYCR7b3B0aW9ucy5lbmRwb2ludH0vLmRlZmF1bHRgO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5iYXNlVXJpKSB7XG4gICAgICAgIHJldHVybiBgJHtvcHRpb25zLmJhc2VVcml9Ly5kZWZhdWx0YDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuY3JlZGVudGlhbCAmJiAhb3B0aW9ucy5jcmVkZW50aWFsU2NvcGVzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgV2hlbiB1c2luZyBjcmVkZW50aWFscywgdGhlIFNlcnZpY2VDbGllbnRPcHRpb25zIG11c3QgY29udGFpbiBlaXRoZXIgYSBlbmRwb2ludCBvciBhIGNyZWRlbnRpYWxTY29wZXMuIFVuYWJsZSB0byBjcmVhdGUgYSBiZWFyZXJUb2tlbkF1dGhlbnRpY2F0aW9uUG9saWN5YCk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXJ2aWNlQ2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/serviceClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/state.js":
/*!***********************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/state.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   state: () => (/* binding */ state)\n/* harmony export */ });\n/* harmony import */ var _commonjs_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../commonjs/state.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/state.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// @ts-expect-error The recommended approach to sharing module state between ESM and CJS.\n// See https://github.com/isaacs/tshy/blob/main/README.md#module-local-state for additional information.\n\n/**\n * Defines the shared state between CJS and ESM by re-exporting the CJS state.\n */\nconst state = _commonjs_state_js__WEBPACK_IMPORTED_MODULE_0__.state;\n//# sourceMappingURL=state.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL3N0YXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ08sY0FBYyxxREFBUTtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2VzbS9zdGF0ZS5qcz8wMWNjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLy8gQHRzLWV4cGVjdC1lcnJvciBUaGUgcmVjb21tZW5kZWQgYXBwcm9hY2ggdG8gc2hhcmluZyBtb2R1bGUgc3RhdGUgYmV0d2VlbiBFU00gYW5kIENKUy5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vaXNhYWNzL3RzaHkvYmxvYi9tYWluL1JFQURNRS5tZCNtb2R1bGUtbG9jYWwtc3RhdGUgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24uXG5pbXBvcnQgeyBzdGF0ZSBhcyBjanNTdGF0ZSB9IGZyb20gXCIuLi9jb21tb25qcy9zdGF0ZS5qc1wiO1xuLyoqXG4gKiBEZWZpbmVzIHRoZSBzaGFyZWQgc3RhdGUgYmV0d2VlbiBDSlMgYW5kIEVTTSBieSByZS1leHBvcnRpbmcgdGhlIENKUyBzdGF0ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHN0YXRlID0gY2pzU3RhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/urlHelpers.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/urlHelpers.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appendQueryParams: () => (/* binding */ appendQueryParams),\n/* harmony export */   getRequestUrl: () => (/* binding */ getRequestUrl)\n/* harmony export */ });\n/* harmony import */ var _operationHelpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./operationHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js\");\n/* harmony import */ var _interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interfaceHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\nconst CollectionFormatToDelimiterMap = {\n    CSV: \",\",\n    SSV: \" \",\n    Multi: \"Multi\",\n    TSV: \"\\t\",\n    Pipes: \"|\",\n};\nfunction getRequestUrl(baseUri, operationSpec, operationArguments, fallbackObject) {\n    const urlReplacements = calculateUrlReplacements(operationSpec, operationArguments, fallbackObject);\n    let isAbsolutePath = false;\n    let requestUrl = replaceAll(baseUri, urlReplacements);\n    if (operationSpec.path) {\n        let path = replaceAll(operationSpec.path, urlReplacements);\n        // QUIRK: sometimes we get a path component like /{nextLink}\n        // which may be a fully formed URL with a leading /. In that case, we should\n        // remove the leading /\n        if (operationSpec.path === \"/{nextLink}\" && path.startsWith(\"/\")) {\n            path = path.substring(1);\n        }\n        // QUIRK: sometimes we get a path component like {nextLink}\n        // which may be a fully formed URL. In that case, we should\n        // ignore the baseUri.\n        if (isAbsoluteUrl(path)) {\n            requestUrl = path;\n            isAbsolutePath = true;\n        }\n        else {\n            requestUrl = appendPath(requestUrl, path);\n        }\n    }\n    const { queryParams, sequenceParams } = calculateQueryParameters(operationSpec, operationArguments, fallbackObject);\n    /**\n     * Notice that this call sets the `noOverwrite` parameter to true if the `requestUrl`\n     * is an absolute path. This ensures that existing query parameter values in `requestUrl`\n     * do not get overwritten. On the other hand when `requestUrl` is not absolute path, it\n     * is still being built so there is nothing to overwrite.\n     */\n    requestUrl = appendQueryParams(requestUrl, queryParams, sequenceParams, isAbsolutePath);\n    return requestUrl;\n}\nfunction replaceAll(input, replacements) {\n    let result = input;\n    for (const [searchValue, replaceValue] of replacements) {\n        result = result.split(searchValue).join(replaceValue);\n    }\n    return result;\n}\nfunction calculateUrlReplacements(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    if ((_a = operationSpec.urlParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const urlParameter of operationSpec.urlParameters) {\n            let urlParameterValue = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_0__.getOperationArgumentValueFromParameter)(operationArguments, urlParameter, fallbackObject);\n            const parameterPathString = (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getPathStringFromParameter)(urlParameter);\n            urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, parameterPathString);\n            if (!urlParameter.skipEncoding) {\n                urlParameterValue = encodeURIComponent(urlParameterValue);\n            }\n            result.set(`{${urlParameter.mapper.serializedName || parameterPathString}}`, urlParameterValue);\n        }\n    }\n    return result;\n}\nfunction isAbsoluteUrl(url) {\n    return url.includes(\"://\");\n}\nfunction appendPath(url, pathToAppend) {\n    if (!pathToAppend) {\n        return url;\n    }\n    const parsedUrl = new URL(url);\n    let newPath = parsedUrl.pathname;\n    if (!newPath.endsWith(\"/\")) {\n        newPath = `${newPath}/`;\n    }\n    if (pathToAppend.startsWith(\"/\")) {\n        pathToAppend = pathToAppend.substring(1);\n    }\n    const searchStart = pathToAppend.indexOf(\"?\");\n    if (searchStart !== -1) {\n        const path = pathToAppend.substring(0, searchStart);\n        const search = pathToAppend.substring(searchStart + 1);\n        newPath = newPath + path;\n        if (search) {\n            parsedUrl.search = parsedUrl.search ? `${parsedUrl.search}&${search}` : search;\n        }\n    }\n    else {\n        newPath = newPath + pathToAppend;\n    }\n    parsedUrl.pathname = newPath;\n    return parsedUrl.toString();\n}\nfunction calculateQueryParameters(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    const sequenceParams = new Set();\n    if ((_a = operationSpec.queryParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const queryParameter of operationSpec.queryParameters) {\n            if (queryParameter.mapper.type.name === \"Sequence\" && queryParameter.mapper.serializedName) {\n                sequenceParams.add(queryParameter.mapper.serializedName);\n            }\n            let queryParameterValue = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_0__.getOperationArgumentValueFromParameter)(operationArguments, queryParameter, fallbackObject);\n            if ((queryParameterValue !== undefined && queryParameterValue !== null) ||\n                queryParameter.mapper.required) {\n                queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getPathStringFromParameter)(queryParameter));\n                const delimiter = queryParameter.collectionFormat\n                    ? CollectionFormatToDelimiterMap[queryParameter.collectionFormat]\n                    : \"\";\n                if (Array.isArray(queryParameterValue)) {\n                    // replace null and undefined\n                    queryParameterValue = queryParameterValue.map((item) => {\n                        if (item === null || item === undefined) {\n                            return \"\";\n                        }\n                        return item;\n                    });\n                }\n                if (queryParameter.collectionFormat === \"Multi\" && queryParameterValue.length === 0) {\n                    continue;\n                }\n                else if (Array.isArray(queryParameterValue) &&\n                    (queryParameter.collectionFormat === \"SSV\" || queryParameter.collectionFormat === \"TSV\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                if (!queryParameter.skipEncoding) {\n                    if (Array.isArray(queryParameterValue)) {\n                        queryParameterValue = queryParameterValue.map((item) => {\n                            return encodeURIComponent(item);\n                        });\n                    }\n                    else {\n                        queryParameterValue = encodeURIComponent(queryParameterValue);\n                    }\n                }\n                // Join pipes and CSV *after* encoding, or the server will be upset.\n                if (Array.isArray(queryParameterValue) &&\n                    (queryParameter.collectionFormat === \"CSV\" || queryParameter.collectionFormat === \"Pipes\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                result.set(queryParameter.mapper.serializedName || (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getPathStringFromParameter)(queryParameter), queryParameterValue);\n            }\n        }\n    }\n    return {\n        queryParams: result,\n        sequenceParams,\n    };\n}\nfunction simpleParseQueryParams(queryString) {\n    const result = new Map();\n    if (!queryString || queryString[0] !== \"?\") {\n        return result;\n    }\n    // remove the leading ?\n    queryString = queryString.slice(1);\n    const pairs = queryString.split(\"&\");\n    for (const pair of pairs) {\n        const [name, value] = pair.split(\"=\", 2);\n        const existingValue = result.get(name);\n        if (existingValue) {\n            if (Array.isArray(existingValue)) {\n                existingValue.push(value);\n            }\n            else {\n                result.set(name, [existingValue, value]);\n            }\n        }\n        else {\n            result.set(name, value);\n        }\n    }\n    return result;\n}\n/** @internal */\nfunction appendQueryParams(url, queryParams, sequenceParams, noOverwrite = false) {\n    if (queryParams.size === 0) {\n        return url;\n    }\n    const parsedUrl = new URL(url);\n    // QUIRK: parsedUrl.searchParams will have their name/value pairs decoded, which\n    // can change their meaning to the server, such as in the case of a SAS signature.\n    // To avoid accidentally un-encoding a query param, we parse the key/values ourselves\n    const combinedParams = simpleParseQueryParams(parsedUrl.search);\n    for (const [name, value] of queryParams) {\n        const existingValue = combinedParams.get(name);\n        if (Array.isArray(existingValue)) {\n            if (Array.isArray(value)) {\n                existingValue.push(...value);\n                const valueSet = new Set(existingValue);\n                combinedParams.set(name, Array.from(valueSet));\n            }\n            else {\n                existingValue.push(value);\n            }\n        }\n        else if (existingValue) {\n            if (Array.isArray(value)) {\n                value.unshift(existingValue);\n            }\n            else if (sequenceParams.has(name)) {\n                combinedParams.set(name, [existingValue, value]);\n            }\n            if (!noOverwrite) {\n                combinedParams.set(name, value);\n            }\n        }\n        else {\n            combinedParams.set(name, value);\n        }\n    }\n    const searchPieces = [];\n    for (const [name, value] of combinedParams) {\n        if (typeof value === \"string\") {\n            searchPieces.push(`${name}=${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // QUIRK: If we get an array of values, include multiple key/value pairs\n            for (const subValue of value) {\n                searchPieces.push(`${name}=${subValue}`);\n            }\n        }\n        else {\n            searchPieces.push(`${name}=${value}`);\n        }\n    }\n    // QUIRK: we have to set search manually as searchParams will encode comma when it shouldn't.\n    parsedUrl.search = searchPieces.length ? `?${searchPieces.join(\"&\")}` : \"\";\n    return parsedUrl.toString();\n}\n//# sourceMappingURL=urlHelpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/urlHelpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/utils.js":
/*!***********************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/utils.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   flattenResponse: () => (/* binding */ flattenResponse),\n/* harmony export */   isDuration: () => (/* binding */ isDuration),\n/* harmony export */   isPrimitiveBody: () => (/* binding */ isPrimitiveBody),\n/* harmony export */   isValidUuid: () => (/* binding */ isValidUuid)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A type guard for a primitive response body.\n * @param value - Value to test\n *\n * @internal\n */\nfunction isPrimitiveBody(value, mapperTypeName) {\n    return (mapperTypeName !== \"Composite\" &&\n        mapperTypeName !== \"Dictionary\" &&\n        (typeof value === \"string\" ||\n            typeof value === \"number\" ||\n            typeof value === \"boolean\" ||\n            (mapperTypeName === null || mapperTypeName === void 0 ? void 0 : mapperTypeName.match(/^(Date|DateTime|DateTimeRfc1123|UnixTime|ByteArray|Base64Url)$/i)) !==\n                null ||\n            value === undefined ||\n            value === null));\n}\nconst validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n/**\n * Returns true if the given string is in ISO 8601 format.\n * @param value - The value to be validated for ISO 8601 duration format.\n * @internal\n */\nfunction isDuration(value) {\n    return validateISODuration.test(value);\n}\nconst validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n/**\n * Returns true if the provided uuid is valid.\n *\n * @param uuid - The uuid that needs to be validated.\n *\n * @internal\n */\nfunction isValidUuid(uuid) {\n    return validUuidRegex.test(uuid);\n}\n/**\n * Maps the response as follows:\n * - wraps the response body if needed (typically if its type is primitive).\n * - returns null if the combination of the headers and the body is empty.\n * - otherwise, returns the combination of the headers and the body.\n *\n * @param responseObject - a representation of the parsed response\n * @returns the response that will be returned to the user which can be null and/or wrapped\n *\n * @internal\n */\nfunction handleNullableResponseAndWrappableBody(responseObject) {\n    const combinedHeadersAndBody = Object.assign(Object.assign({}, responseObject.headers), responseObject.body);\n    if (responseObject.hasNullableType &&\n        Object.getOwnPropertyNames(combinedHeadersAndBody).length === 0) {\n        return responseObject.shouldWrapBody ? { body: null } : null;\n    }\n    else {\n        return responseObject.shouldWrapBody\n            ? Object.assign(Object.assign({}, responseObject.headers), { body: responseObject.body }) : combinedHeadersAndBody;\n    }\n}\n/**\n * Take a `FullOperationResponse` and turn it into a flat\n * response object to hand back to the consumer.\n * @param fullResponse - The processed response from the operation request\n * @param responseSpec - The response map from the OperationSpec\n *\n * @internal\n */\nfunction flattenResponse(fullResponse, responseSpec) {\n    var _a, _b;\n    const parsedHeaders = fullResponse.parsedHeaders;\n    // head methods never have a body, but we return a boolean set to body property\n    // to indicate presence/absence of the resource\n    if (fullResponse.request.method === \"HEAD\") {\n        return Object.assign(Object.assign({}, parsedHeaders), { body: fullResponse.parsedBody });\n    }\n    const bodyMapper = responseSpec && responseSpec.bodyMapper;\n    const isNullable = Boolean(bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.nullable);\n    const expectedBodyTypeName = bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.type.name;\n    /** If the body is asked for, we look at the expected body type to handle it */\n    if (expectedBodyTypeName === \"Stream\") {\n        return Object.assign(Object.assign({}, parsedHeaders), { blobBody: fullResponse.blobBody, readableStreamBody: fullResponse.readableStreamBody });\n    }\n    const modelProperties = (expectedBodyTypeName === \"Composite\" &&\n        bodyMapper.type.modelProperties) ||\n        {};\n    const isPageableResponse = Object.keys(modelProperties).some((k) => modelProperties[k].serializedName === \"\");\n    if (expectedBodyTypeName === \"Sequence\" || isPageableResponse) {\n        const arrayResponse = (_a = fullResponse.parsedBody) !== null && _a !== void 0 ? _a : [];\n        for (const key of Object.keys(modelProperties)) {\n            if (modelProperties[key].serializedName) {\n                arrayResponse[key] = (_b = fullResponse.parsedBody) === null || _b === void 0 ? void 0 : _b[key];\n            }\n        }\n        if (parsedHeaders) {\n            for (const key of Object.keys(parsedHeaders)) {\n                arrayResponse[key] = parsedHeaders[key];\n            }\n        }\n        return isNullable &&\n            !fullResponse.parsedBody &&\n            !parsedHeaders &&\n            Object.getOwnPropertyNames(modelProperties).length === 0\n            ? null\n            : arrayResponse;\n    }\n    return handleNullableResponseAndWrappableBody({\n        body: fullResponse.parsedBody,\n        headers: parsedHeaders,\n        hasNullableType: isNullable,\n        shouldWrapBody: isPrimitiveBody(fullResponse.parsedBody, expectedBodyTypeName),\n    });\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-http-compat/dist/esm/extendedClient.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/esm/extendedClient.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExtendedServiceClient: () => (/* binding */ ExtendedServiceClient)\n/* harmony export */ });\n/* harmony import */ var _policies_disableKeepAlivePolicy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./policies/disableKeepAlivePolicy.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/policies/disableKeepAlivePolicy.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _response_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./response.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/response.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n/**\n * Client to provide compatability between core V1 & V2.\n */\nclass ExtendedServiceClient extends _azure_core_client__WEBPACK_IMPORTED_MODULE_2__.ServiceClient {\n    constructor(options) {\n        var _a, _b;\n        super(options);\n        if (((_a = options.keepAliveOptions) === null || _a === void 0 ? void 0 : _a.enable) === false &&\n            !(0,_policies_disableKeepAlivePolicy_js__WEBPACK_IMPORTED_MODULE_0__.pipelineContainsDisableKeepAlivePolicy)(this.pipeline)) {\n            this.pipeline.addPolicy((0,_policies_disableKeepAlivePolicy_js__WEBPACK_IMPORTED_MODULE_0__.createDisableKeepAlivePolicy)());\n        }\n        if (((_b = options.redirectOptions) === null || _b === void 0 ? void 0 : _b.handleRedirects) === false) {\n            this.pipeline.removePolicy({\n                name: _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.redirectPolicyName,\n            });\n        }\n    }\n    /**\n     * Compatible send operation request function.\n     *\n     * @param operationArguments - Operation arguments\n     * @param operationSpec - Operation Spec\n     * @returns\n     */\n    async sendOperationRequest(operationArguments, operationSpec) {\n        var _a;\n        const userProvidedCallBack = (_a = operationArguments === null || operationArguments === void 0 ? void 0 : operationArguments.options) === null || _a === void 0 ? void 0 : _a.onResponse;\n        let lastResponse;\n        function onResponse(rawResponse, flatResponse, error) {\n            lastResponse = rawResponse;\n            if (userProvidedCallBack) {\n                userProvidedCallBack(rawResponse, flatResponse, error);\n            }\n        }\n        operationArguments.options = Object.assign(Object.assign({}, operationArguments.options), { onResponse });\n        const result = await super.sendOperationRequest(operationArguments, operationSpec);\n        if (lastResponse) {\n            Object.defineProperty(result, \"_response\", {\n                value: (0,_response_js__WEBPACK_IMPORTED_MODULE_3__.toCompatResponse)(lastResponse),\n            });\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=extendedClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtaHR0cC1jb21wYXQvZGlzdC9lc20vZXh0ZW5kZWRDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQzZIO0FBQzlEO0FBQ1g7QUFDSDtBQUNqRDtBQUNBO0FBQ0E7QUFDTyxvQ0FBb0MsNkRBQWE7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDJHQUFzQztBQUNuRCxvQ0FBb0MsaUdBQTRCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix5RUFBa0I7QUFDeEMsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLGlDQUFpQyxZQUFZO0FBQ2hIO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw4REFBZ0I7QUFDdkMsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1odHRwLWNvbXBhdC9kaXN0L2VzbS9leHRlbmRlZENsaWVudC5qcz84Mzg0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlRGlzYWJsZUtlZXBBbGl2ZVBvbGljeSwgcGlwZWxpbmVDb250YWluc0Rpc2FibGVLZWVwQWxpdmVQb2xpY3ksIH0gZnJvbSBcIi4vcG9saWNpZXMvZGlzYWJsZUtlZXBBbGl2ZVBvbGljeS5qc1wiO1xuaW1wb3J0IHsgcmVkaXJlY3RQb2xpY3lOYW1lIH0gZnJvbSBcIkBhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmVcIjtcbmltcG9ydCB7IFNlcnZpY2VDbGllbnQsIH0gZnJvbSBcIkBhenVyZS9jb3JlLWNsaWVudFwiO1xuaW1wb3J0IHsgdG9Db21wYXRSZXNwb25zZSB9IGZyb20gXCIuL3Jlc3BvbnNlLmpzXCI7XG4vKipcbiAqIENsaWVudCB0byBwcm92aWRlIGNvbXBhdGFiaWxpdHkgYmV0d2VlbiBjb3JlIFYxICYgVjIuXG4gKi9cbmV4cG9ydCBjbGFzcyBFeHRlbmRlZFNlcnZpY2VDbGllbnQgZXh0ZW5kcyBTZXJ2aWNlQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICBpZiAoKChfYSA9IG9wdGlvbnMua2VlcEFsaXZlT3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmVuYWJsZSkgPT09IGZhbHNlICYmXG4gICAgICAgICAgICAhcGlwZWxpbmVDb250YWluc0Rpc2FibGVLZWVwQWxpdmVQb2xpY3kodGhpcy5waXBlbGluZSkpIHtcbiAgICAgICAgICAgIHRoaXMucGlwZWxpbmUuYWRkUG9saWN5KGNyZWF0ZURpc2FibGVLZWVwQWxpdmVQb2xpY3koKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgoX2IgPSBvcHRpb25zLnJlZGlyZWN0T3B0aW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmhhbmRsZVJlZGlyZWN0cykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aGlzLnBpcGVsaW5lLnJlbW92ZVBvbGljeSh7XG4gICAgICAgICAgICAgICAgbmFtZTogcmVkaXJlY3RQb2xpY3lOYW1lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcGF0aWJsZSBzZW5kIG9wZXJhdGlvbiByZXF1ZXN0IGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wZXJhdGlvbkFyZ3VtZW50cyAtIE9wZXJhdGlvbiBhcmd1bWVudHNcbiAgICAgKiBAcGFyYW0gb3BlcmF0aW9uU3BlYyAtIE9wZXJhdGlvbiBTcGVjXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBhc3luYyBzZW5kT3BlcmF0aW9uUmVxdWVzdChvcGVyYXRpb25Bcmd1bWVudHMsIG9wZXJhdGlvblNwZWMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB1c2VyUHJvdmlkZWRDYWxsQmFjayA9IChfYSA9IG9wZXJhdGlvbkFyZ3VtZW50cyA9PT0gbnVsbCB8fCBvcGVyYXRpb25Bcmd1bWVudHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wZXJhdGlvbkFyZ3VtZW50cy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub25SZXNwb25zZTtcbiAgICAgICAgbGV0IGxhc3RSZXNwb25zZTtcbiAgICAgICAgZnVuY3Rpb24gb25SZXNwb25zZShyYXdSZXNwb25zZSwgZmxhdFJlc3BvbnNlLCBlcnJvcikge1xuICAgICAgICAgICAgbGFzdFJlc3BvbnNlID0gcmF3UmVzcG9uc2U7XG4gICAgICAgICAgICBpZiAodXNlclByb3ZpZGVkQ2FsbEJhY2spIHtcbiAgICAgICAgICAgICAgICB1c2VyUHJvdmlkZWRDYWxsQmFjayhyYXdSZXNwb25zZSwgZmxhdFJlc3BvbnNlLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb3BlcmF0aW9uQXJndW1lbnRzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wZXJhdGlvbkFyZ3VtZW50cy5vcHRpb25zKSwgeyBvblJlc3BvbnNlIH0pO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdXBlci5zZW5kT3BlcmF0aW9uUmVxdWVzdChvcGVyYXRpb25Bcmd1bWVudHMsIG9wZXJhdGlvblNwZWMpO1xuICAgICAgICBpZiAobGFzdFJlc3BvbnNlKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzdWx0LCBcIl9yZXNwb25zZVwiLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHRvQ29tcGF0UmVzcG9uc2UobGFzdFJlc3BvbnNlKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0ZW5kZWRDbGllbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-http-compat/dist/esm/extendedClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-http-compat/dist/esm/httpClientAdapter.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/esm/httpClientAdapter.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertHttpClient: () => (/* binding */ convertHttpClient)\n/* harmony export */ });\n/* harmony import */ var _response_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./response.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/response.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/util.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * Converts a RequestPolicy based HttpClient to a PipelineRequest based HttpClient.\n * @param requestPolicyClient - A HttpClient compatible with core-http\n * @returns A HttpClient compatible with core-rest-pipeline\n */\nfunction convertHttpClient(requestPolicyClient) {\n    return {\n        sendRequest: async (request) => {\n            const response = await requestPolicyClient.sendRequest((0,_util_js__WEBPACK_IMPORTED_MODULE_1__.toWebResourceLike)(request, { createProxy: true }));\n            return (0,_response_js__WEBPACK_IMPORTED_MODULE_0__.toPipelineResponse)(response);\n        },\n    };\n}\n//# sourceMappingURL=httpClientAdapter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtaHR0cC1jb21wYXQvZGlzdC9lc20vaHR0cENsaWVudEFkYXB0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNtRDtBQUNMO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxtRUFBbUUsMkRBQWlCLFlBQVksbUJBQW1CO0FBQ25ILG1CQUFtQixnRUFBa0I7QUFDckMsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWh0dHAtY29tcGF0L2Rpc3QvZXNtL2h0dHBDbGllbnRBZGFwdGVyLmpzPzIwNmYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyB0b1BpcGVsaW5lUmVzcG9uc2UgfSBmcm9tIFwiLi9yZXNwb25zZS5qc1wiO1xuaW1wb3J0IHsgdG9XZWJSZXNvdXJjZUxpa2UgfSBmcm9tIFwiLi91dGlsLmpzXCI7XG4vKipcbiAqIENvbnZlcnRzIGEgUmVxdWVzdFBvbGljeSBiYXNlZCBIdHRwQ2xpZW50IHRvIGEgUGlwZWxpbmVSZXF1ZXN0IGJhc2VkIEh0dHBDbGllbnQuXG4gKiBAcGFyYW0gcmVxdWVzdFBvbGljeUNsaWVudCAtIEEgSHR0cENsaWVudCBjb21wYXRpYmxlIHdpdGggY29yZS1odHRwXG4gKiBAcmV0dXJucyBBIEh0dHBDbGllbnQgY29tcGF0aWJsZSB3aXRoIGNvcmUtcmVzdC1waXBlbGluZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydEh0dHBDbGllbnQocmVxdWVzdFBvbGljeUNsaWVudCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNlbmRSZXF1ZXN0OiBhc3luYyAocmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0UG9saWN5Q2xpZW50LnNlbmRSZXF1ZXN0KHRvV2ViUmVzb3VyY2VMaWtlKHJlcXVlc3QsIHsgY3JlYXRlUHJveHk6IHRydWUgfSkpO1xuICAgICAgICAgICAgcmV0dXJuIHRvUGlwZWxpbmVSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHBDbGllbnRBZGFwdGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-http-compat/dist/esm/httpClientAdapter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-http-compat/dist/esm/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/esm/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExtendedServiceClient: () => (/* reexport safe */ _extendedClient_js__WEBPACK_IMPORTED_MODULE_0__.ExtendedServiceClient),\n/* harmony export */   HttpPipelineLogLevel: () => (/* reexport safe */ _policies_requestPolicyFactoryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.HttpPipelineLogLevel),\n/* harmony export */   convertHttpClient: () => (/* reexport safe */ _httpClientAdapter_js__WEBPACK_IMPORTED_MODULE_3__.convertHttpClient),\n/* harmony export */   createRequestPolicyFactoryPolicy: () => (/* reexport safe */ _policies_requestPolicyFactoryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.createRequestPolicyFactoryPolicy),\n/* harmony export */   disableKeepAlivePolicyName: () => (/* reexport safe */ _policies_disableKeepAlivePolicy_js__WEBPACK_IMPORTED_MODULE_2__.disableKeepAlivePolicyName),\n/* harmony export */   requestPolicyFactoryPolicyName: () => (/* reexport safe */ _policies_requestPolicyFactoryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.requestPolicyFactoryPolicyName),\n/* harmony export */   toHttpHeadersLike: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_4__.toHttpHeadersLike)\n/* harmony export */ });\n/* harmony import */ var _extendedClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extendedClient.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/extendedClient.js\");\n/* harmony import */ var _policies_requestPolicyFactoryPolicy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./policies/requestPolicyFactoryPolicy.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/policies/requestPolicyFactoryPolicy.js\");\n/* harmony import */ var _policies_disableKeepAlivePolicy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./policies/disableKeepAlivePolicy.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/policies/disableKeepAlivePolicy.js\");\n/* harmony import */ var _httpClientAdapter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpClientAdapter.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/httpClientAdapter.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/util.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A Shim Library that provides compatibility between Core V1 & V2 Packages.\n *\n * @packageDocumentation\n */\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtaHR0cC1jb21wYXQvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNkQ7QUFDc0Y7QUFDakU7QUFDdkI7QUFDWjtBQUMvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWh0dHAtY29tcGF0L2Rpc3QvZXNtL2luZGV4LmpzPzIwZGMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIEEgU2hpbSBMaWJyYXJ5IHRoYXQgcHJvdmlkZXMgY29tcGF0aWJpbGl0eSBiZXR3ZWVuIENvcmUgVjEgJiBWMiBQYWNrYWdlcy5cbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xuZXhwb3J0IHsgRXh0ZW5kZWRTZXJ2aWNlQ2xpZW50LCB9IGZyb20gXCIuL2V4dGVuZGVkQ2xpZW50LmpzXCI7XG5leHBvcnQgeyByZXF1ZXN0UG9saWN5RmFjdG9yeVBvbGljeU5hbWUsIGNyZWF0ZVJlcXVlc3RQb2xpY3lGYWN0b3J5UG9saWN5LCBIdHRwUGlwZWxpbmVMb2dMZXZlbCwgfSBmcm9tIFwiLi9wb2xpY2llcy9yZXF1ZXN0UG9saWN5RmFjdG9yeVBvbGljeS5qc1wiO1xuZXhwb3J0IHsgZGlzYWJsZUtlZXBBbGl2ZVBvbGljeU5hbWUgfSBmcm9tIFwiLi9wb2xpY2llcy9kaXNhYmxlS2VlcEFsaXZlUG9saWN5LmpzXCI7XG5leHBvcnQgeyBjb252ZXJ0SHR0cENsaWVudCB9IGZyb20gXCIuL2h0dHBDbGllbnRBZGFwdGVyLmpzXCI7XG5leHBvcnQgeyB0b0h0dHBIZWFkZXJzTGlrZSwgfSBmcm9tIFwiLi91dGlsLmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-http-compat/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-http-compat/dist/esm/policies/disableKeepAlivePolicy.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/esm/policies/disableKeepAlivePolicy.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDisableKeepAlivePolicy: () => (/* binding */ createDisableKeepAlivePolicy),\n/* harmony export */   disableKeepAlivePolicyName: () => (/* binding */ disableKeepAlivePolicyName),\n/* harmony export */   pipelineContainsDisableKeepAlivePolicy: () => (/* binding */ pipelineContainsDisableKeepAlivePolicy)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst disableKeepAlivePolicyName = \"DisableKeepAlivePolicy\";\nfunction createDisableKeepAlivePolicy() {\n    return {\n        name: disableKeepAlivePolicyName,\n        async sendRequest(request, next) {\n            request.disableKeepAlive = true;\n            return next(request);\n        },\n    };\n}\n/**\n * @internal\n */\nfunction pipelineContainsDisableKeepAlivePolicy(pipeline) {\n    return pipeline.getOrderedPolicies().some((policy) => policy.name === disableKeepAlivePolicyName);\n}\n//# sourceMappingURL=disableKeepAlivePolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtaHR0cC1jb21wYXQvZGlzdC9lc20vcG9saWNpZXMvZGlzYWJsZUtlZXBBbGl2ZVBvbGljeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ087QUFDQTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtaHR0cC1jb21wYXQvZGlzdC9lc20vcG9saWNpZXMvZGlzYWJsZUtlZXBBbGl2ZVBvbGljeS5qcz9lNTFiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuZXhwb3J0IGNvbnN0IGRpc2FibGVLZWVwQWxpdmVQb2xpY3lOYW1lID0gXCJEaXNhYmxlS2VlcEFsaXZlUG9saWN5XCI7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGlzYWJsZUtlZXBBbGl2ZVBvbGljeSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBkaXNhYmxlS2VlcEFsaXZlUG9saWN5TmFtZSxcbiAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICAgICAgcmVxdWVzdC5kaXNhYmxlS2VlcEFsaXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcXVlc3QpO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGlwZWxpbmVDb250YWluc0Rpc2FibGVLZWVwQWxpdmVQb2xpY3kocGlwZWxpbmUpIHtcbiAgICByZXR1cm4gcGlwZWxpbmUuZ2V0T3JkZXJlZFBvbGljaWVzKCkuc29tZSgocG9saWN5KSA9PiBwb2xpY3kubmFtZSA9PT0gZGlzYWJsZUtlZXBBbGl2ZVBvbGljeU5hbWUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzYWJsZUtlZXBBbGl2ZVBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-http-compat/dist/esm/policies/disableKeepAlivePolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-http-compat/dist/esm/policies/requestPolicyFactoryPolicy.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/esm/policies/requestPolicyFactoryPolicy.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpPipelineLogLevel: () => (/* binding */ HttpPipelineLogLevel),\n/* harmony export */   createRequestPolicyFactoryPolicy: () => (/* binding */ createRequestPolicyFactoryPolicy),\n/* harmony export */   requestPolicyFactoryPolicyName: () => (/* binding */ requestPolicyFactoryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/util.js\");\n/* harmony import */ var _response_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../response.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/response.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * An enum for compatibility with RequestPolicy\n */\nvar HttpPipelineLogLevel;\n(function (HttpPipelineLogLevel) {\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"INFO\"] = 3] = \"INFO\";\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"OFF\"] = 0] = \"OFF\";\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"WARNING\"] = 2] = \"WARNING\";\n})(HttpPipelineLogLevel || (HttpPipelineLogLevel = {}));\nconst mockRequestPolicyOptions = {\n    log(_logLevel, _message) {\n        /* do nothing */\n    },\n    shouldLog(_logLevel) {\n        return false;\n    },\n};\n/**\n * The name of the RequestPolicyFactoryPolicy\n */\nconst requestPolicyFactoryPolicyName = \"RequestPolicyFactoryPolicy\";\n/**\n * A policy that wraps policies written for core-http.\n * @param factories - An array of `RequestPolicyFactory` objects from a core-http pipeline\n */\nfunction createRequestPolicyFactoryPolicy(factories) {\n    const orderedFactories = factories.slice().reverse();\n    return {\n        name: requestPolicyFactoryPolicyName,\n        async sendRequest(request, next) {\n            let httpPipeline = {\n                async sendRequest(httpRequest) {\n                    const response = await next((0,_util_js__WEBPACK_IMPORTED_MODULE_0__.toPipelineRequest)(httpRequest));\n                    return (0,_response_js__WEBPACK_IMPORTED_MODULE_1__.toCompatResponse)(response, { createProxy: true });\n                },\n            };\n            for (const factory of orderedFactories) {\n                httpPipeline = factory.create(httpPipeline, mockRequestPolicyOptions);\n            }\n            const webResourceLike = (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.toWebResourceLike)(request, { createProxy: true });\n            const response = await httpPipeline.sendRequest(webResourceLike);\n            return (0,_response_js__WEBPACK_IMPORTED_MODULE_1__.toPipelineResponse)(response);\n        },\n    };\n}\n//# sourceMappingURL=requestPolicyFactoryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtaHR0cC1jb21wYXQvZGlzdC9lc20vcG9saWNpZXMvcmVxdWVzdFBvbGljeUZhY3RvcnlQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ2tFO0FBQ0k7QUFDdEU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvREFBb0Q7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsMkRBQWlCO0FBQ2pFLDJCQUEyQiw4REFBZ0IsYUFBYSxtQkFBbUI7QUFDM0UsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDJEQUFpQixZQUFZLG1CQUFtQjtBQUNwRjtBQUNBLG1CQUFtQixnRUFBa0I7QUFDckMsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWh0dHAtY29tcGF0L2Rpc3QvZXNtL3BvbGljaWVzL3JlcXVlc3RQb2xpY3lGYWN0b3J5UG9saWN5LmpzP2Q4OWEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyB0b1BpcGVsaW5lUmVxdWVzdCwgdG9XZWJSZXNvdXJjZUxpa2UgfSBmcm9tIFwiLi4vdXRpbC5qc1wiO1xuaW1wb3J0IHsgdG9Db21wYXRSZXNwb25zZSwgdG9QaXBlbGluZVJlc3BvbnNlIH0gZnJvbSBcIi4uL3Jlc3BvbnNlLmpzXCI7XG4vKipcbiAqIEFuIGVudW0gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBSZXF1ZXN0UG9saWN5XG4gKi9cbmV4cG9ydCB2YXIgSHR0cFBpcGVsaW5lTG9nTGV2ZWw7XG4oZnVuY3Rpb24gKEh0dHBQaXBlbGluZUxvZ0xldmVsKSB7XG4gICAgSHR0cFBpcGVsaW5lTG9nTGV2ZWxbSHR0cFBpcGVsaW5lTG9nTGV2ZWxbXCJFUlJPUlwiXSA9IDFdID0gXCJFUlJPUlwiO1xuICAgIEh0dHBQaXBlbGluZUxvZ0xldmVsW0h0dHBQaXBlbGluZUxvZ0xldmVsW1wiSU5GT1wiXSA9IDNdID0gXCJJTkZPXCI7XG4gICAgSHR0cFBpcGVsaW5lTG9nTGV2ZWxbSHR0cFBpcGVsaW5lTG9nTGV2ZWxbXCJPRkZcIl0gPSAwXSA9IFwiT0ZGXCI7XG4gICAgSHR0cFBpcGVsaW5lTG9nTGV2ZWxbSHR0cFBpcGVsaW5lTG9nTGV2ZWxbXCJXQVJOSU5HXCJdID0gMl0gPSBcIldBUk5JTkdcIjtcbn0pKEh0dHBQaXBlbGluZUxvZ0xldmVsIHx8IChIdHRwUGlwZWxpbmVMb2dMZXZlbCA9IHt9KSk7XG5jb25zdCBtb2NrUmVxdWVzdFBvbGljeU9wdGlvbnMgPSB7XG4gICAgbG9nKF9sb2dMZXZlbCwgX21lc3NhZ2UpIHtcbiAgICAgICAgLyogZG8gbm90aGluZyAqL1xuICAgIH0sXG4gICAgc2hvdWxkTG9nKF9sb2dMZXZlbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbn07XG4vKipcbiAqIFRoZSBuYW1lIG9mIHRoZSBSZXF1ZXN0UG9saWN5RmFjdG9yeVBvbGljeVxuICovXG5leHBvcnQgY29uc3QgcmVxdWVzdFBvbGljeUZhY3RvcnlQb2xpY3lOYW1lID0gXCJSZXF1ZXN0UG9saWN5RmFjdG9yeVBvbGljeVwiO1xuLyoqXG4gKiBBIHBvbGljeSB0aGF0IHdyYXBzIHBvbGljaWVzIHdyaXR0ZW4gZm9yIGNvcmUtaHR0cC5cbiAqIEBwYXJhbSBmYWN0b3JpZXMgLSBBbiBhcnJheSBvZiBgUmVxdWVzdFBvbGljeUZhY3RvcnlgIG9iamVjdHMgZnJvbSBhIGNvcmUtaHR0cCBwaXBlbGluZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVxdWVzdFBvbGljeUZhY3RvcnlQb2xpY3koZmFjdG9yaWVzKSB7XG4gICAgY29uc3Qgb3JkZXJlZEZhY3RvcmllcyA9IGZhY3Rvcmllcy5zbGljZSgpLnJldmVyc2UoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiByZXF1ZXN0UG9saWN5RmFjdG9yeVBvbGljeU5hbWUsXG4gICAgICAgIGFzeW5jIHNlbmRSZXF1ZXN0KHJlcXVlc3QsIG5leHQpIHtcbiAgICAgICAgICAgIGxldCBodHRwUGlwZWxpbmUgPSB7XG4gICAgICAgICAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QoaHR0cFJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBuZXh0KHRvUGlwZWxpbmVSZXF1ZXN0KGh0dHBSZXF1ZXN0KSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0b0NvbXBhdFJlc3BvbnNlKHJlc3BvbnNlLCB7IGNyZWF0ZVByb3h5OiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBmYWN0b3J5IG9mIG9yZGVyZWRGYWN0b3JpZXMpIHtcbiAgICAgICAgICAgICAgICBodHRwUGlwZWxpbmUgPSBmYWN0b3J5LmNyZWF0ZShodHRwUGlwZWxpbmUsIG1vY2tSZXF1ZXN0UG9saWN5T3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB3ZWJSZXNvdXJjZUxpa2UgPSB0b1dlYlJlc291cmNlTGlrZShyZXF1ZXN0LCB7IGNyZWF0ZVByb3h5OiB0cnVlIH0pO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBodHRwUGlwZWxpbmUuc2VuZFJlcXVlc3Qod2ViUmVzb3VyY2VMaWtlKTtcbiAgICAgICAgICAgIHJldHVybiB0b1BpcGVsaW5lUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0UG9saWN5RmFjdG9yeVBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-http-compat/dist/esm/policies/requestPolicyFactoryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-http-compat/dist/esm/response.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/esm/response.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toCompatResponse: () => (/* binding */ toCompatResponse),\n/* harmony export */   toPipelineResponse: () => (/* binding */ toPipelineResponse)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/util.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\nconst originalResponse = Symbol(\"Original FullOperationResponse\");\n/**\n * A helper to convert response objects from the new pipeline back to the old one.\n * @param response - A response object from core-client.\n * @returns A response compatible with `HttpOperationResponse` from core-http.\n */\nfunction toCompatResponse(response, options) {\n    let request = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.toWebResourceLike)(response.request);\n    let headers = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.toHttpHeadersLike)(response.headers);\n    if (options === null || options === void 0 ? void 0 : options.createProxy) {\n        return new Proxy(response, {\n            get(target, prop, receiver) {\n                if (prop === \"headers\") {\n                    return headers;\n                }\n                else if (prop === \"request\") {\n                    return request;\n                }\n                else if (prop === originalResponse) {\n                    return response;\n                }\n                return Reflect.get(target, prop, receiver);\n            },\n            set(target, prop, value, receiver) {\n                if (prop === \"headers\") {\n                    headers = value;\n                }\n                else if (prop === \"request\") {\n                    request = value;\n                }\n                return Reflect.set(target, prop, value, receiver);\n            },\n        });\n    }\n    else {\n        return Object.assign(Object.assign({}, response), { request,\n            headers });\n    }\n}\n/**\n * A helper to convert back to a PipelineResponse\n * @param compatResponse - A response compatible with `HttpOperationResponse` from core-http.\n */\nfunction toPipelineResponse(compatResponse) {\n    const extendedCompatResponse = compatResponse;\n    const response = extendedCompatResponse[originalResponse];\n    const headers = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)(compatResponse.headers.toJson({ preserveCase: true }));\n    if (response) {\n        response.headers = headers;\n        return response;\n    }\n    else {\n        return Object.assign(Object.assign({}, compatResponse), { headers, request: (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.toPipelineRequest)(compatResponse.request) });\n    }\n}\n//# sourceMappingURL=response.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtaHR0cC1jb21wYXQvZGlzdC9lc20vcmVzcG9uc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDOEQ7QUFDdUI7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxrQkFBa0IsMkRBQWlCO0FBQ25DLGtCQUFrQiwyREFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBLDZDQUE2QyxlQUFlO0FBQzVELHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxvQkFBb0IsNEVBQWlCLGlDQUFpQyxvQkFBb0I7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxxQkFBcUIsa0JBQWtCLDJEQUFpQiwwQkFBMEI7QUFDL0g7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtaHR0cC1jb21wYXQvZGlzdC9lc20vcmVzcG9uc2UuanM/ZDlhZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZUh0dHBIZWFkZXJzIH0gZnJvbSBcIkBhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmVcIjtcbmltcG9ydCB7IHRvSHR0cEhlYWRlcnNMaWtlLCB0b1BpcGVsaW5lUmVxdWVzdCwgdG9XZWJSZXNvdXJjZUxpa2UsIH0gZnJvbSBcIi4vdXRpbC5qc1wiO1xuY29uc3Qgb3JpZ2luYWxSZXNwb25zZSA9IFN5bWJvbChcIk9yaWdpbmFsIEZ1bGxPcGVyYXRpb25SZXNwb25zZVwiKTtcbi8qKlxuICogQSBoZWxwZXIgdG8gY29udmVydCByZXNwb25zZSBvYmplY3RzIGZyb20gdGhlIG5ldyBwaXBlbGluZSBiYWNrIHRvIHRoZSBvbGQgb25lLlxuICogQHBhcmFtIHJlc3BvbnNlIC0gQSByZXNwb25zZSBvYmplY3QgZnJvbSBjb3JlLWNsaWVudC5cbiAqIEByZXR1cm5zIEEgcmVzcG9uc2UgY29tcGF0aWJsZSB3aXRoIGBIdHRwT3BlcmF0aW9uUmVzcG9uc2VgIGZyb20gY29yZS1odHRwLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9Db21wYXRSZXNwb25zZShyZXNwb25zZSwgb3B0aW9ucykge1xuICAgIGxldCByZXF1ZXN0ID0gdG9XZWJSZXNvdXJjZUxpa2UocmVzcG9uc2UucmVxdWVzdCk7XG4gICAgbGV0IGhlYWRlcnMgPSB0b0h0dHBIZWFkZXJzTGlrZShyZXNwb25zZS5oZWFkZXJzKTtcbiAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNyZWF0ZVByb3h5KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJveHkocmVzcG9uc2UsIHtcbiAgICAgICAgICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3AgPT09IFwiaGVhZGVyc1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoZWFkZXJzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9wID09PSBcInJlcXVlc3RcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcCA9PT0gb3JpZ2luYWxSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcCA9PT0gXCJoZWFkZXJzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9wID09PSBcInJlcXVlc3RcIikge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3AsIHZhbHVlLCByZWNlaXZlcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlKSwgeyByZXF1ZXN0LFxuICAgICAgICAgICAgaGVhZGVycyB9KTtcbiAgICB9XG59XG4vKipcbiAqIEEgaGVscGVyIHRvIGNvbnZlcnQgYmFjayB0byBhIFBpcGVsaW5lUmVzcG9uc2VcbiAqIEBwYXJhbSBjb21wYXRSZXNwb25zZSAtIEEgcmVzcG9uc2UgY29tcGF0aWJsZSB3aXRoIGBIdHRwT3BlcmF0aW9uUmVzcG9uc2VgIGZyb20gY29yZS1odHRwLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9QaXBlbGluZVJlc3BvbnNlKGNvbXBhdFJlc3BvbnNlKSB7XG4gICAgY29uc3QgZXh0ZW5kZWRDb21wYXRSZXNwb25zZSA9IGNvbXBhdFJlc3BvbnNlO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gZXh0ZW5kZWRDb21wYXRSZXNwb25zZVtvcmlnaW5hbFJlc3BvbnNlXTtcbiAgICBjb25zdCBoZWFkZXJzID0gY3JlYXRlSHR0cEhlYWRlcnMoY29tcGF0UmVzcG9uc2UuaGVhZGVycy50b0pzb24oeyBwcmVzZXJ2ZUNhc2U6IHRydWUgfSkpO1xuICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICByZXNwb25zZS5oZWFkZXJzID0gaGVhZGVycztcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY29tcGF0UmVzcG9uc2UpLCB7IGhlYWRlcnMsIHJlcXVlc3Q6IHRvUGlwZWxpbmVSZXF1ZXN0KGNvbXBhdFJlc3BvbnNlLnJlcXVlc3QpIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc3BvbnNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-http-compat/dist/esm/response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-http-compat/dist/esm/util.js":
/*!***************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/esm/util.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpHeaders: () => (/* binding */ HttpHeaders),\n/* harmony export */   toHttpHeadersLike: () => (/* binding */ toHttpHeadersLike),\n/* harmony export */   toPipelineRequest: () => (/* binding */ toPipelineRequest),\n/* harmony export */   toWebResourceLike: () => (/* binding */ toWebResourceLike)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// We use a custom symbol to cache a reference to the original request without\n// exposing it on the public interface.\nconst originalRequestSymbol = Symbol(\"Original PipelineRequest\");\n// Symbol.for() will return the same symbol if it's already been created\n// This particular one is used in core-client to handle the case of when a request is\n// cloned but we need to retrieve the OperationSpec and OperationArguments from the\n// original request.\nconst originalClientRequestSymbol = Symbol.for(\"@azure/core-client original request\");\nfunction toPipelineRequest(webResource, options = {}) {\n    const compatWebResource = webResource;\n    const request = compatWebResource[originalRequestSymbol];\n    const headers = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)(webResource.headers.toJson({ preserveCase: true }));\n    if (request) {\n        request.headers = headers;\n        return request;\n    }\n    else {\n        const newRequest = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createPipelineRequest)({\n            url: webResource.url,\n            method: webResource.method,\n            headers,\n            withCredentials: webResource.withCredentials,\n            timeout: webResource.timeout,\n            requestId: webResource.requestId,\n            abortSignal: webResource.abortSignal,\n            body: webResource.body,\n            formData: webResource.formData,\n            disableKeepAlive: !!webResource.keepAlive,\n            onDownloadProgress: webResource.onDownloadProgress,\n            onUploadProgress: webResource.onUploadProgress,\n            proxySettings: webResource.proxySettings,\n            streamResponseStatusCodes: webResource.streamResponseStatusCodes,\n        });\n        if (options.originalRequest) {\n            newRequest[originalClientRequestSymbol] =\n                options.originalRequest;\n        }\n        return newRequest;\n    }\n}\nfunction toWebResourceLike(request, options) {\n    var _a;\n    const originalRequest = (_a = options === null || options === void 0 ? void 0 : options.originalRequest) !== null && _a !== void 0 ? _a : request;\n    const webResource = {\n        url: request.url,\n        method: request.method,\n        headers: toHttpHeadersLike(request.headers),\n        withCredentials: request.withCredentials,\n        timeout: request.timeout,\n        requestId: request.headers.get(\"x-ms-client-request-id\") || request.requestId,\n        abortSignal: request.abortSignal,\n        body: request.body,\n        formData: request.formData,\n        keepAlive: !!request.disableKeepAlive,\n        onDownloadProgress: request.onDownloadProgress,\n        onUploadProgress: request.onUploadProgress,\n        proxySettings: request.proxySettings,\n        streamResponseStatusCodes: request.streamResponseStatusCodes,\n        clone() {\n            throw new Error(\"Cannot clone a non-proxied WebResourceLike\");\n        },\n        prepare() {\n            throw new Error(\"WebResourceLike.prepare() is not supported by @azure/core-http-compat\");\n        },\n        validateRequestProperties() {\n            /** do nothing */\n        },\n    };\n    if (options === null || options === void 0 ? void 0 : options.createProxy) {\n        return new Proxy(webResource, {\n            get(target, prop, receiver) {\n                if (prop === originalRequestSymbol) {\n                    return request;\n                }\n                else if (prop === \"clone\") {\n                    return () => {\n                        return toWebResourceLike(toPipelineRequest(webResource, { originalRequest }), {\n                            createProxy: true,\n                            originalRequest,\n                        });\n                    };\n                }\n                return Reflect.get(target, prop, receiver);\n            },\n            set(target, prop, value, receiver) {\n                if (prop === \"keepAlive\") {\n                    request.disableKeepAlive = !value;\n                }\n                const passThroughProps = [\n                    \"url\",\n                    \"method\",\n                    \"withCredentials\",\n                    \"timeout\",\n                    \"requestId\",\n                    \"abortSignal\",\n                    \"body\",\n                    \"formData\",\n                    \"onDownloadProgress\",\n                    \"onUploadProgress\",\n                    \"proxySettings\",\n                    \"streamResponseStatusCodes\",\n                ];\n                if (typeof prop === \"string\" && passThroughProps.includes(prop)) {\n                    request[prop] = value;\n                }\n                return Reflect.set(target, prop, value, receiver);\n            },\n        });\n    }\n    else {\n        return webResource;\n    }\n}\n/**\n * Converts HttpHeaders from core-rest-pipeline to look like\n * HttpHeaders from core-http.\n * @param headers - HttpHeaders from core-rest-pipeline\n * @returns HttpHeaders as they looked in core-http\n */\nfunction toHttpHeadersLike(headers) {\n    return new HttpHeaders(headers.toJSON({ preserveCase: true }));\n}\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName) {\n    return headerName.toLowerCase();\n}\n/**\n * A collection of HTTP header key/value pairs.\n */\nclass HttpHeaders {\n    constructor(rawHeaders) {\n        this._headersMap = {};\n        if (rawHeaders) {\n            for (const headerName in rawHeaders) {\n                this.set(headerName, rawHeaders[headerName]);\n            }\n        }\n    }\n    /**\n     * Set a header in this collection with the provided name and value. The name is\n     * case-insensitive.\n     * @param headerName - The name of the header to set. This value is case-insensitive.\n     * @param headerValue - The value of the header to set.\n     */\n    set(headerName, headerValue) {\n        this._headersMap[getHeaderKey(headerName)] = {\n            name: headerName,\n            value: headerValue.toString(),\n        };\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param headerName - The name of the header.\n     */\n    get(headerName) {\n        const header = this._headersMap[getHeaderKey(headerName)];\n        return !header ? undefined : header.value;\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     */\n    contains(headerName) {\n        return !!this._headersMap[getHeaderKey(headerName)];\n    }\n    /**\n     * Remove the header with the provided headerName. Return whether or not the header existed and\n     * was removed.\n     * @param headerName - The name of the header to remove.\n     */\n    remove(headerName) {\n        const result = this.contains(headerName);\n        delete this._headersMap[getHeaderKey(headerName)];\n        return result;\n    }\n    /**\n     * Get the headers that are contained this collection as an object.\n     */\n    rawHeaders() {\n        return this.toJson({ preserveCase: true });\n    }\n    /**\n     * Get the headers that are contained in this collection as an array.\n     */\n    headersArray() {\n        const headers = [];\n        for (const headerKey in this._headersMap) {\n            headers.push(this._headersMap[headerKey]);\n        }\n        return headers;\n    }\n    /**\n     * Get the header names that are contained in this collection.\n     */\n    headerNames() {\n        const headerNames = [];\n        const headers = this.headersArray();\n        for (let i = 0; i < headers.length; ++i) {\n            headerNames.push(headers[i].name);\n        }\n        return headerNames;\n    }\n    /**\n     * Get the header values that are contained in this collection.\n     */\n    headerValues() {\n        const headerValues = [];\n        const headers = this.headersArray();\n        for (let i = 0; i < headers.length; ++i) {\n            headerValues.push(headers[i].value);\n        }\n        return headerValues;\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n    toJson(options = {}) {\n        const result = {};\n        if (options.preserveCase) {\n            for (const headerKey in this._headersMap) {\n                const header = this._headersMap[headerKey];\n                result[header.name] = header.value;\n            }\n        }\n        else {\n            for (const headerKey in this._headersMap) {\n                const header = this._headersMap[headerKey];\n                result[getHeaderKey(header.name)] = header.value;\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n    toString() {\n        return JSON.stringify(this.toJson({ preserveCase: true }));\n    }\n    /**\n     * Create a deep clone/copy of this HttpHeaders collection.\n     */\n    clone() {\n        const resultPreservingCasing = {};\n        for (const headerKey in this._headersMap) {\n            const header = this._headersMap[headerKey];\n            resultPreservingCasing[header.name] = header.value;\n        }\n        return new HttpHeaders(resultPreservingCasing);\n    }\n}\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-http-compat/dist/esm/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/http/operation.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/http/operation.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getErrorFromResponse: () => (/* binding */ getErrorFromResponse),\n/* harmony export */   getOperationLocation: () => (/* binding */ getOperationLocation),\n/* harmony export */   getOperationStatus: () => (/* binding */ getOperationStatus),\n/* harmony export */   getResourceLocation: () => (/* binding */ getResourceLocation),\n/* harmony export */   getStatusFromInitialResponse: () => (/* binding */ getStatusFromInitialResponse),\n/* harmony export */   inferLroMode: () => (/* binding */ inferLroMode),\n/* harmony export */   initHttpOperation: () => (/* binding */ initHttpOperation),\n/* harmony export */   isOperationError: () => (/* binding */ isOperationError),\n/* harmony export */   parseRetryAfter: () => (/* binding */ parseRetryAfter),\n/* harmony export */   pollHttpOperation: () => (/* binding */ pollHttpOperation)\n/* harmony export */ });\n/* harmony import */ var _poller_operation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../poller/operation.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/operation.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logger.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/logger.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\nfunction getOperationLocationPollingUrl(inputs) {\n    const { azureAsyncOperation, operationLocation } = inputs;\n    return operationLocation !== null && operationLocation !== void 0 ? operationLocation : azureAsyncOperation;\n}\nfunction getLocationHeader(rawResponse) {\n    return rawResponse.headers[\"location\"];\n}\nfunction getOperationLocationHeader(rawResponse) {\n    return rawResponse.headers[\"operation-location\"];\n}\nfunction getAzureAsyncOperationHeader(rawResponse) {\n    return rawResponse.headers[\"azure-asyncoperation\"];\n}\nfunction findResourceLocation(inputs) {\n    var _a;\n    const { location, requestMethod, requestPath, resourceLocationConfig } = inputs;\n    switch (requestMethod) {\n        case \"PUT\": {\n            return requestPath;\n        }\n        case \"DELETE\": {\n            return undefined;\n        }\n        case \"PATCH\": {\n            return (_a = getDefault()) !== null && _a !== void 0 ? _a : requestPath;\n        }\n        default: {\n            return getDefault();\n        }\n    }\n    function getDefault() {\n        switch (resourceLocationConfig) {\n            case \"azure-async-operation\": {\n                return undefined;\n            }\n            case \"original-uri\": {\n                return requestPath;\n            }\n            case \"location\":\n            default: {\n                return location;\n            }\n        }\n    }\n}\nfunction inferLroMode(inputs) {\n    const { rawResponse, requestMethod, requestPath, resourceLocationConfig } = inputs;\n    const operationLocation = getOperationLocationHeader(rawResponse);\n    const azureAsyncOperation = getAzureAsyncOperationHeader(rawResponse);\n    const pollingUrl = getOperationLocationPollingUrl({ operationLocation, azureAsyncOperation });\n    const location = getLocationHeader(rawResponse);\n    const normalizedRequestMethod = requestMethod === null || requestMethod === void 0 ? void 0 : requestMethod.toLocaleUpperCase();\n    if (pollingUrl !== undefined) {\n        return {\n            mode: \"OperationLocation\",\n            operationLocation: pollingUrl,\n            resourceLocation: findResourceLocation({\n                requestMethod: normalizedRequestMethod,\n                location,\n                requestPath,\n                resourceLocationConfig,\n            }),\n        };\n    }\n    else if (location !== undefined) {\n        return {\n            mode: \"ResourceLocation\",\n            operationLocation: location,\n        };\n    }\n    else if (normalizedRequestMethod === \"PUT\" && requestPath) {\n        return {\n            mode: \"Body\",\n            operationLocation: requestPath,\n        };\n    }\n    else {\n        return undefined;\n    }\n}\nfunction transformStatus(inputs) {\n    const { status, statusCode } = inputs;\n    if (typeof status !== \"string\" && status !== undefined) {\n        throw new Error(`Polling was unsuccessful. Expected status to have a string value or no value but it has instead: ${status}. This doesn't necessarily indicate the operation has failed. Check your Azure subscription or resource status for more information.`);\n    }\n    switch (status === null || status === void 0 ? void 0 : status.toLocaleLowerCase()) {\n        case undefined:\n            return toOperationStatus(statusCode);\n        case \"succeeded\":\n            return \"succeeded\";\n        case \"failed\":\n            return \"failed\";\n        case \"running\":\n        case \"accepted\":\n        case \"started\":\n        case \"canceling\":\n        case \"cancelling\":\n            return \"running\";\n        case \"canceled\":\n        case \"cancelled\":\n            return \"canceled\";\n        default: {\n            _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.verbose(`LRO: unrecognized operation status: ${status}`);\n            return status;\n        }\n    }\n}\nfunction getStatus(rawResponse) {\n    var _a;\n    const { status } = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {};\n    return transformStatus({ status, statusCode: rawResponse.statusCode });\n}\nfunction getProvisioningState(rawResponse) {\n    var _a, _b;\n    const { properties, provisioningState } = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {};\n    const status = (_b = properties === null || properties === void 0 ? void 0 : properties.provisioningState) !== null && _b !== void 0 ? _b : provisioningState;\n    return transformStatus({ status, statusCode: rawResponse.statusCode });\n}\nfunction toOperationStatus(statusCode) {\n    if (statusCode === 202) {\n        return \"running\";\n    }\n    else if (statusCode < 300) {\n        return \"succeeded\";\n    }\n    else {\n        return \"failed\";\n    }\n}\nfunction parseRetryAfter({ rawResponse }) {\n    const retryAfter = rawResponse.headers[\"retry-after\"];\n    if (retryAfter !== undefined) {\n        // Retry-After header value is either in HTTP date format, or in seconds\n        const retryAfterInSeconds = parseInt(retryAfter);\n        return isNaN(retryAfterInSeconds)\n            ? calculatePollingIntervalFromDate(new Date(retryAfter))\n            : retryAfterInSeconds * 1000;\n    }\n    return undefined;\n}\nfunction getErrorFromResponse(response) {\n    const error = accessBodyProperty(response, \"error\");\n    if (!error) {\n        _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.warning(`The long-running operation failed but there is no error property in the response's body`);\n        return;\n    }\n    if (!error.code || !error.message) {\n        _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.warning(`The long-running operation failed but the error property in the response's body doesn't contain code or message`);\n        return;\n    }\n    return error;\n}\nfunction calculatePollingIntervalFromDate(retryAfterDate) {\n    const timeNow = Math.floor(new Date().getTime());\n    const retryAfterTime = retryAfterDate.getTime();\n    if (timeNow < retryAfterTime) {\n        return retryAfterTime - timeNow;\n    }\n    return undefined;\n}\nfunction getStatusFromInitialResponse(inputs) {\n    const { response, state, operationLocation } = inputs;\n    function helper() {\n        var _a;\n        const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n        switch (mode) {\n            case undefined:\n                return toOperationStatus(response.rawResponse.statusCode);\n            case \"Body\":\n                return getOperationStatus(response, state);\n            default:\n                return \"running\";\n        }\n    }\n    const status = helper();\n    return status === \"running\" && operationLocation === undefined ? \"succeeded\" : status;\n}\n/**\n * Initiates the long-running operation.\n */\nasync function initHttpOperation(inputs) {\n    const { stateProxy, resourceLocationConfig, processResult, lro, setErrorAsResult } = inputs;\n    return (0,_poller_operation_js__WEBPACK_IMPORTED_MODULE_0__.initOperation)({\n        init: async () => {\n            const response = await lro.sendInitialRequest();\n            const config = inferLroMode({\n                rawResponse: response.rawResponse,\n                requestPath: lro.requestPath,\n                requestMethod: lro.requestMethod,\n                resourceLocationConfig,\n            });\n            return Object.assign({ response, operationLocation: config === null || config === void 0 ? void 0 : config.operationLocation, resourceLocation: config === null || config === void 0 ? void 0 : config.resourceLocation }, ((config === null || config === void 0 ? void 0 : config.mode) ? { metadata: { mode: config.mode } } : {}));\n        },\n        stateProxy,\n        processResult: processResult\n            ? ({ flatResponse }, state) => processResult(flatResponse, state)\n            : ({ flatResponse }) => flatResponse,\n        getOperationStatus: getStatusFromInitialResponse,\n        setErrorAsResult,\n    });\n}\nfunction getOperationLocation({ rawResponse }, state) {\n    var _a;\n    const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n    switch (mode) {\n        case \"OperationLocation\": {\n            return getOperationLocationPollingUrl({\n                operationLocation: getOperationLocationHeader(rawResponse),\n                azureAsyncOperation: getAzureAsyncOperationHeader(rawResponse),\n            });\n        }\n        case \"ResourceLocation\": {\n            return getLocationHeader(rawResponse);\n        }\n        case \"Body\":\n        default: {\n            return undefined;\n        }\n    }\n}\nfunction getOperationStatus({ rawResponse }, state) {\n    var _a;\n    const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n    switch (mode) {\n        case \"OperationLocation\": {\n            return getStatus(rawResponse);\n        }\n        case \"ResourceLocation\": {\n            return toOperationStatus(rawResponse.statusCode);\n        }\n        case \"Body\": {\n            return getProvisioningState(rawResponse);\n        }\n        default:\n            throw new Error(`Internal error: Unexpected operation mode: ${mode}`);\n    }\n}\nfunction accessBodyProperty({ flatResponse, rawResponse }, prop) {\n    var _a, _b;\n    return (_a = flatResponse === null || flatResponse === void 0 ? void 0 : flatResponse[prop]) !== null && _a !== void 0 ? _a : (_b = rawResponse.body) === null || _b === void 0 ? void 0 : _b[prop];\n}\nfunction getResourceLocation(res, state) {\n    const loc = accessBodyProperty(res, \"resourceLocation\");\n    if (loc && typeof loc === \"string\") {\n        state.config.resourceLocation = loc;\n    }\n    return state.config.resourceLocation;\n}\nfunction isOperationError(e) {\n    return e.name === \"RestError\";\n}\n/** Polls the long-running operation. */\nasync function pollHttpOperation(inputs) {\n    const { lro, stateProxy, options, processResult, updateState, setDelay, state, setErrorAsResult, } = inputs;\n    return (0,_poller_operation_js__WEBPACK_IMPORTED_MODULE_0__.pollOperation)({\n        state,\n        stateProxy,\n        setDelay,\n        processResult: processResult\n            ? ({ flatResponse }, inputState) => processResult(flatResponse, inputState)\n            : ({ flatResponse }) => flatResponse,\n        getError: getErrorFromResponse,\n        updateState,\n        getPollingInterval: parseRetryAfter,\n        getOperationLocation,\n        getOperationStatus,\n        isOperationError,\n        getResourceLocation,\n        options,\n        /**\n         * The expansion here is intentional because `lro` could be an object that\n         * references an inner this, so we need to preserve a reference to it.\n         */\n        poll: async (location, inputOptions) => lro.sendPollRequest(location, inputOptions),\n        setErrorAsResult,\n    });\n}\n//# sourceMappingURL=operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2h0dHAvb3BlcmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDc0U7QUFDaEM7QUFDdEM7QUFDQSxZQUFZLHlDQUF5QztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksK0RBQStEO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFlBQVksa0VBQWtFO0FBQzlFO0FBQ0E7QUFDQSx3REFBd0Qsd0NBQXdDO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFCQUFxQjtBQUNqQztBQUNBLDRIQUE0SCxPQUFPO0FBQ25JO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksOENBQU0sZ0RBQWdELE9BQU87QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCLDZCQUE2Qiw0Q0FBNEM7QUFDekU7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnQ0FBZ0M7QUFDNUM7QUFDQSw2QkFBNkIsNENBQTRDO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDJCQUEyQixhQUFhO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsUUFBUSw4Q0FBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBLFFBQVEsOENBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFlBQVkscUNBQXFDO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSwyRUFBMkU7QUFDdkYsV0FBVyxtRUFBYTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixtQ0FBbUMsa01BQWtNLHFFQUFxRSxZQUFZLHNCQUFzQixJQUFJO0FBQ2hWLFNBQVM7QUFDVDtBQUNBO0FBQ0EsaUJBQWlCLGNBQWM7QUFDL0IsaUJBQWlCLGNBQWM7QUFDL0I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNPLGdDQUFnQyxhQUFhO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sOEJBQThCLGFBQWE7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsS0FBSztBQUMvRTtBQUNBO0FBQ0EsOEJBQThCLDJCQUEyQjtBQUN6RDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLDJGQUEyRjtBQUN2RyxXQUFXLG1FQUFhO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGNBQWM7QUFDL0IsaUJBQWlCLGNBQWM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2h0dHAvb3BlcmF0aW9uLmpzP2M0OTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBpbml0T3BlcmF0aW9uLCBwb2xsT3BlcmF0aW9uIH0gZnJvbSBcIi4uL3BvbGxlci9vcGVyYXRpb24uanNcIjtcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCIuLi9sb2dnZXIuanNcIjtcbmZ1bmN0aW9uIGdldE9wZXJhdGlvbkxvY2F0aW9uUG9sbGluZ1VybChpbnB1dHMpIHtcbiAgICBjb25zdCB7IGF6dXJlQXN5bmNPcGVyYXRpb24sIG9wZXJhdGlvbkxvY2F0aW9uIH0gPSBpbnB1dHM7XG4gICAgcmV0dXJuIG9wZXJhdGlvbkxvY2F0aW9uICE9PSBudWxsICYmIG9wZXJhdGlvbkxvY2F0aW9uICE9PSB2b2lkIDAgPyBvcGVyYXRpb25Mb2NhdGlvbiA6IGF6dXJlQXN5bmNPcGVyYXRpb247XG59XG5mdW5jdGlvbiBnZXRMb2NhdGlvbkhlYWRlcihyYXdSZXNwb25zZSkge1xuICAgIHJldHVybiByYXdSZXNwb25zZS5oZWFkZXJzW1wibG9jYXRpb25cIl07XG59XG5mdW5jdGlvbiBnZXRPcGVyYXRpb25Mb2NhdGlvbkhlYWRlcihyYXdSZXNwb25zZSkge1xuICAgIHJldHVybiByYXdSZXNwb25zZS5oZWFkZXJzW1wib3BlcmF0aW9uLWxvY2F0aW9uXCJdO1xufVxuZnVuY3Rpb24gZ2V0QXp1cmVBc3luY09wZXJhdGlvbkhlYWRlcihyYXdSZXNwb25zZSkge1xuICAgIHJldHVybiByYXdSZXNwb25zZS5oZWFkZXJzW1wiYXp1cmUtYXN5bmNvcGVyYXRpb25cIl07XG59XG5mdW5jdGlvbiBmaW5kUmVzb3VyY2VMb2NhdGlvbihpbnB1dHMpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgeyBsb2NhdGlvbiwgcmVxdWVzdE1ldGhvZCwgcmVxdWVzdFBhdGgsIHJlc291cmNlTG9jYXRpb25Db25maWcgfSA9IGlucHV0cztcbiAgICBzd2l0Y2ggKHJlcXVlc3RNZXRob2QpIHtcbiAgICAgICAgY2FzZSBcIlBVVFwiOiB7XG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdFBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIkRFTEVURVwiOiB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJQQVRDSFwiOiB7XG4gICAgICAgICAgICByZXR1cm4gKF9hID0gZ2V0RGVmYXVsdCgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiByZXF1ZXN0UGF0aDtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7XG4gICAgICAgIHN3aXRjaCAocmVzb3VyY2VMb2NhdGlvbkNvbmZpZykge1xuICAgICAgICAgICAgY2FzZSBcImF6dXJlLWFzeW5jLW9wZXJhdGlvblwiOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJvcmlnaW5hbC11cmlcIjoge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0UGF0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJsb2NhdGlvblwiOlxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpbmZlckxyb01vZGUoaW5wdXRzKSB7XG4gICAgY29uc3QgeyByYXdSZXNwb25zZSwgcmVxdWVzdE1ldGhvZCwgcmVxdWVzdFBhdGgsIHJlc291cmNlTG9jYXRpb25Db25maWcgfSA9IGlucHV0cztcbiAgICBjb25zdCBvcGVyYXRpb25Mb2NhdGlvbiA9IGdldE9wZXJhdGlvbkxvY2F0aW9uSGVhZGVyKHJhd1Jlc3BvbnNlKTtcbiAgICBjb25zdCBhenVyZUFzeW5jT3BlcmF0aW9uID0gZ2V0QXp1cmVBc3luY09wZXJhdGlvbkhlYWRlcihyYXdSZXNwb25zZSk7XG4gICAgY29uc3QgcG9sbGluZ1VybCA9IGdldE9wZXJhdGlvbkxvY2F0aW9uUG9sbGluZ1VybCh7IG9wZXJhdGlvbkxvY2F0aW9uLCBhenVyZUFzeW5jT3BlcmF0aW9uIH0pO1xuICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0TG9jYXRpb25IZWFkZXIocmF3UmVzcG9uc2UpO1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRSZXF1ZXN0TWV0aG9kID0gcmVxdWVzdE1ldGhvZCA9PT0gbnVsbCB8fCByZXF1ZXN0TWV0aG9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0TWV0aG9kLnRvTG9jYWxlVXBwZXJDYXNlKCk7XG4gICAgaWYgKHBvbGxpbmdVcmwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbW9kZTogXCJPcGVyYXRpb25Mb2NhdGlvblwiLFxuICAgICAgICAgICAgb3BlcmF0aW9uTG9jYXRpb246IHBvbGxpbmdVcmwsXG4gICAgICAgICAgICByZXNvdXJjZUxvY2F0aW9uOiBmaW5kUmVzb3VyY2VMb2NhdGlvbih7XG4gICAgICAgICAgICAgICAgcmVxdWVzdE1ldGhvZDogbm9ybWFsaXplZFJlcXVlc3RNZXRob2QsXG4gICAgICAgICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgICAgICAgcmVxdWVzdFBhdGgsXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VMb2NhdGlvbkNvbmZpZyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChsb2NhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtb2RlOiBcIlJlc291cmNlTG9jYXRpb25cIixcbiAgICAgICAgICAgIG9wZXJhdGlvbkxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAobm9ybWFsaXplZFJlcXVlc3RNZXRob2QgPT09IFwiUFVUXCIgJiYgcmVxdWVzdFBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1vZGU6IFwiQm9keVwiLFxuICAgICAgICAgICAgb3BlcmF0aW9uTG9jYXRpb246IHJlcXVlc3RQYXRoLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1TdGF0dXMoaW5wdXRzKSB7XG4gICAgY29uc3QgeyBzdGF0dXMsIHN0YXR1c0NvZGUgfSA9IGlucHV0cztcbiAgICBpZiAodHlwZW9mIHN0YXR1cyAhPT0gXCJzdHJpbmdcIiAmJiBzdGF0dXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBvbGxpbmcgd2FzIHVuc3VjY2Vzc2Z1bC4gRXhwZWN0ZWQgc3RhdHVzIHRvIGhhdmUgYSBzdHJpbmcgdmFsdWUgb3Igbm8gdmFsdWUgYnV0IGl0IGhhcyBpbnN0ZWFkOiAke3N0YXR1c30uIFRoaXMgZG9lc24ndCBuZWNlc3NhcmlseSBpbmRpY2F0ZSB0aGUgb3BlcmF0aW9uIGhhcyBmYWlsZWQuIENoZWNrIHlvdXIgQXp1cmUgc3Vic2NyaXB0aW9uIG9yIHJlc291cmNlIHN0YXR1cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi5gKTtcbiAgICB9XG4gICAgc3dpdGNoIChzdGF0dXMgPT09IG51bGwgfHwgc3RhdHVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdGF0dXMudG9Mb2NhbGVMb3dlckNhc2UoKSkge1xuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICAgIHJldHVybiB0b09wZXJhdGlvblN0YXR1cyhzdGF0dXNDb2RlKTtcbiAgICAgICAgY2FzZSBcInN1Y2NlZWRlZFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwic3VjY2VlZGVkXCI7XG4gICAgICAgIGNhc2UgXCJmYWlsZWRcIjpcbiAgICAgICAgICAgIHJldHVybiBcImZhaWxlZFwiO1xuICAgICAgICBjYXNlIFwicnVubmluZ1wiOlxuICAgICAgICBjYXNlIFwiYWNjZXB0ZWRcIjpcbiAgICAgICAgY2FzZSBcInN0YXJ0ZWRcIjpcbiAgICAgICAgY2FzZSBcImNhbmNlbGluZ1wiOlxuICAgICAgICBjYXNlIFwiY2FuY2VsbGluZ1wiOlxuICAgICAgICAgICAgcmV0dXJuIFwicnVubmluZ1wiO1xuICAgICAgICBjYXNlIFwiY2FuY2VsZWRcIjpcbiAgICAgICAgY2FzZSBcImNhbmNlbGxlZFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiY2FuY2VsZWRcIjtcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgbG9nZ2VyLnZlcmJvc2UoYExSTzogdW5yZWNvZ25pemVkIG9wZXJhdGlvbiBzdGF0dXM6ICR7c3RhdHVzfWApO1xuICAgICAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFN0YXR1cyhyYXdSZXNwb25zZSkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCB7IHN0YXR1cyB9ID0gKF9hID0gcmF3UmVzcG9uc2UuYm9keSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge307XG4gICAgcmV0dXJuIHRyYW5zZm9ybVN0YXR1cyh7IHN0YXR1cywgc3RhdHVzQ29kZTogcmF3UmVzcG9uc2Uuc3RhdHVzQ29kZSB9KTtcbn1cbmZ1bmN0aW9uIGdldFByb3Zpc2lvbmluZ1N0YXRlKHJhd1Jlc3BvbnNlKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCB7IHByb3BlcnRpZXMsIHByb3Zpc2lvbmluZ1N0YXRlIH0gPSAoX2EgPSByYXdSZXNwb25zZS5ib2R5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fTtcbiAgICBjb25zdCBzdGF0dXMgPSAoX2IgPSBwcm9wZXJ0aWVzID09PSBudWxsIHx8IHByb3BlcnRpZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByb3BlcnRpZXMucHJvdmlzaW9uaW5nU3RhdGUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHByb3Zpc2lvbmluZ1N0YXRlO1xuICAgIHJldHVybiB0cmFuc2Zvcm1TdGF0dXMoeyBzdGF0dXMsIHN0YXR1c0NvZGU6IHJhd1Jlc3BvbnNlLnN0YXR1c0NvZGUgfSk7XG59XG5mdW5jdGlvbiB0b09wZXJhdGlvblN0YXR1cyhzdGF0dXNDb2RlKSB7XG4gICAgaWYgKHN0YXR1c0NvZGUgPT09IDIwMikge1xuICAgICAgICByZXR1cm4gXCJydW5uaW5nXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKHN0YXR1c0NvZGUgPCAzMDApIHtcbiAgICAgICAgcmV0dXJuIFwic3VjY2VlZGVkXCI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJmYWlsZWRcIjtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VSZXRyeUFmdGVyKHsgcmF3UmVzcG9uc2UgfSkge1xuICAgIGNvbnN0IHJldHJ5QWZ0ZXIgPSByYXdSZXNwb25zZS5oZWFkZXJzW1wicmV0cnktYWZ0ZXJcIl07XG4gICAgaWYgKHJldHJ5QWZ0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBSZXRyeS1BZnRlciBoZWFkZXIgdmFsdWUgaXMgZWl0aGVyIGluIEhUVFAgZGF0ZSBmb3JtYXQsIG9yIGluIHNlY29uZHNcbiAgICAgICAgY29uc3QgcmV0cnlBZnRlckluU2Vjb25kcyA9IHBhcnNlSW50KHJldHJ5QWZ0ZXIpO1xuICAgICAgICByZXR1cm4gaXNOYU4ocmV0cnlBZnRlckluU2Vjb25kcylcbiAgICAgICAgICAgID8gY2FsY3VsYXRlUG9sbGluZ0ludGVydmFsRnJvbURhdGUobmV3IERhdGUocmV0cnlBZnRlcikpXG4gICAgICAgICAgICA6IHJldHJ5QWZ0ZXJJblNlY29uZHMgKiAxMDAwO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEVycm9yRnJvbVJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgY29uc3QgZXJyb3IgPSBhY2Nlc3NCb2R5UHJvcGVydHkocmVzcG9uc2UsIFwiZXJyb3JcIik7XG4gICAgaWYgKCFlcnJvcikge1xuICAgICAgICBsb2dnZXIud2FybmluZyhgVGhlIGxvbmctcnVubmluZyBvcGVyYXRpb24gZmFpbGVkIGJ1dCB0aGVyZSBpcyBubyBlcnJvciBwcm9wZXJ0eSBpbiB0aGUgcmVzcG9uc2UncyBib2R5YCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFlcnJvci5jb2RlIHx8ICFlcnJvci5tZXNzYWdlKSB7XG4gICAgICAgIGxvZ2dlci53YXJuaW5nKGBUaGUgbG9uZy1ydW5uaW5nIG9wZXJhdGlvbiBmYWlsZWQgYnV0IHRoZSBlcnJvciBwcm9wZXJ0eSBpbiB0aGUgcmVzcG9uc2UncyBib2R5IGRvZXNuJ3QgY29udGFpbiBjb2RlIG9yIG1lc3NhZ2VgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3I7XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVQb2xsaW5nSW50ZXJ2YWxGcm9tRGF0ZShyZXRyeUFmdGVyRGF0ZSkge1xuICAgIGNvbnN0IHRpbWVOb3cgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcbiAgICBjb25zdCByZXRyeUFmdGVyVGltZSA9IHJldHJ5QWZ0ZXJEYXRlLmdldFRpbWUoKTtcbiAgICBpZiAodGltZU5vdyA8IHJldHJ5QWZ0ZXJUaW1lKSB7XG4gICAgICAgIHJldHVybiByZXRyeUFmdGVyVGltZSAtIHRpbWVOb3c7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdHVzRnJvbUluaXRpYWxSZXNwb25zZShpbnB1dHMpIHtcbiAgICBjb25zdCB7IHJlc3BvbnNlLCBzdGF0ZSwgb3BlcmF0aW9uTG9jYXRpb24gfSA9IGlucHV0cztcbiAgICBmdW5jdGlvbiBoZWxwZXIoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgbW9kZSA9IChfYSA9IHN0YXRlLmNvbmZpZy5tZXRhZGF0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW1wibW9kZVwiXTtcbiAgICAgICAgc3dpdGNoIChtb2RlKSB7XG4gICAgICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9PcGVyYXRpb25TdGF0dXMocmVzcG9uc2UucmF3UmVzcG9uc2Uuc3RhdHVzQ29kZSk7XG4gICAgICAgICAgICBjYXNlIFwiQm9keVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRPcGVyYXRpb25TdGF0dXMocmVzcG9uc2UsIHN0YXRlKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwicnVubmluZ1wiO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHN0YXR1cyA9IGhlbHBlcigpO1xuICAgIHJldHVybiBzdGF0dXMgPT09IFwicnVubmluZ1wiICYmIG9wZXJhdGlvbkxvY2F0aW9uID09PSB1bmRlZmluZWQgPyBcInN1Y2NlZWRlZFwiIDogc3RhdHVzO1xufVxuLyoqXG4gKiBJbml0aWF0ZXMgdGhlIGxvbmctcnVubmluZyBvcGVyYXRpb24uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0SHR0cE9wZXJhdGlvbihpbnB1dHMpIHtcbiAgICBjb25zdCB7IHN0YXRlUHJveHksIHJlc291cmNlTG9jYXRpb25Db25maWcsIHByb2Nlc3NSZXN1bHQsIGxybywgc2V0RXJyb3JBc1Jlc3VsdCB9ID0gaW5wdXRzO1xuICAgIHJldHVybiBpbml0T3BlcmF0aW9uKHtcbiAgICAgICAgaW5pdDogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBscm8uc2VuZEluaXRpYWxSZXF1ZXN0KCk7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSBpbmZlckxyb01vZGUoe1xuICAgICAgICAgICAgICAgIHJhd1Jlc3BvbnNlOiByZXNwb25zZS5yYXdSZXNwb25zZSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0UGF0aDogbHJvLnJlcXVlc3RQYXRoLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRob2Q6IGxyby5yZXF1ZXN0TWV0aG9kLFxuICAgICAgICAgICAgICAgIHJlc291cmNlTG9jYXRpb25Db25maWcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHsgcmVzcG9uc2UsIG9wZXJhdGlvbkxvY2F0aW9uOiBjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcub3BlcmF0aW9uTG9jYXRpb24sIHJlc291cmNlTG9jYXRpb246IGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5yZXNvdXJjZUxvY2F0aW9uIH0sICgoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLm1vZGUpID8geyBtZXRhZGF0YTogeyBtb2RlOiBjb25maWcubW9kZSB9IH0gOiB7fSkpO1xuICAgICAgICB9LFxuICAgICAgICBzdGF0ZVByb3h5LFxuICAgICAgICBwcm9jZXNzUmVzdWx0OiBwcm9jZXNzUmVzdWx0XG4gICAgICAgICAgICA/ICh7IGZsYXRSZXNwb25zZSB9LCBzdGF0ZSkgPT4gcHJvY2Vzc1Jlc3VsdChmbGF0UmVzcG9uc2UsIHN0YXRlKVxuICAgICAgICAgICAgOiAoeyBmbGF0UmVzcG9uc2UgfSkgPT4gZmxhdFJlc3BvbnNlLFxuICAgICAgICBnZXRPcGVyYXRpb25TdGF0dXM6IGdldFN0YXR1c0Zyb21Jbml0aWFsUmVzcG9uc2UsXG4gICAgICAgIHNldEVycm9yQXNSZXN1bHQsXG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0T3BlcmF0aW9uTG9jYXRpb24oeyByYXdSZXNwb25zZSB9LCBzdGF0ZSkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBtb2RlID0gKF9hID0gc3RhdGUuY29uZmlnLm1ldGFkYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbXCJtb2RlXCJdO1xuICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgICBjYXNlIFwiT3BlcmF0aW9uTG9jYXRpb25cIjoge1xuICAgICAgICAgICAgcmV0dXJuIGdldE9wZXJhdGlvbkxvY2F0aW9uUG9sbGluZ1VybCh7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uTG9jYXRpb246IGdldE9wZXJhdGlvbkxvY2F0aW9uSGVhZGVyKHJhd1Jlc3BvbnNlKSxcbiAgICAgICAgICAgICAgICBhenVyZUFzeW5jT3BlcmF0aW9uOiBnZXRBenVyZUFzeW5jT3BlcmF0aW9uSGVhZGVyKHJhd1Jlc3BvbnNlKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJSZXNvdXJjZUxvY2F0aW9uXCI6IHtcbiAgICAgICAgICAgIHJldHVybiBnZXRMb2NhdGlvbkhlYWRlcihyYXdSZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIkJvZHlcIjpcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVyYXRpb25TdGF0dXMoeyByYXdSZXNwb25zZSB9LCBzdGF0ZSkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBtb2RlID0gKF9hID0gc3RhdGUuY29uZmlnLm1ldGFkYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbXCJtb2RlXCJdO1xuICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgICBjYXNlIFwiT3BlcmF0aW9uTG9jYXRpb25cIjoge1xuICAgICAgICAgICAgcmV0dXJuIGdldFN0YXR1cyhyYXdSZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIlJlc291cmNlTG9jYXRpb25cIjoge1xuICAgICAgICAgICAgcmV0dXJuIHRvT3BlcmF0aW9uU3RhdHVzKHJhd1Jlc3BvbnNlLnN0YXR1c0NvZGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJCb2R5XCI6IHtcbiAgICAgICAgICAgIHJldHVybiBnZXRQcm92aXNpb25pbmdTdGF0ZShyYXdSZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW50ZXJuYWwgZXJyb3I6IFVuZXhwZWN0ZWQgb3BlcmF0aW9uIG1vZGU6ICR7bW9kZX1gKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhY2Nlc3NCb2R5UHJvcGVydHkoeyBmbGF0UmVzcG9uc2UsIHJhd1Jlc3BvbnNlIH0sIHByb3ApIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHJldHVybiAoX2EgPSBmbGF0UmVzcG9uc2UgPT09IG51bGwgfHwgZmxhdFJlc3BvbnNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmbGF0UmVzcG9uc2VbcHJvcF0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChfYiA9IHJhd1Jlc3BvbnNlLmJvZHkpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYltwcm9wXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZXNvdXJjZUxvY2F0aW9uKHJlcywgc3RhdGUpIHtcbiAgICBjb25zdCBsb2MgPSBhY2Nlc3NCb2R5UHJvcGVydHkocmVzLCBcInJlc291cmNlTG9jYXRpb25cIik7XG4gICAgaWYgKGxvYyAmJiB0eXBlb2YgbG9jID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHN0YXRlLmNvbmZpZy5yZXNvdXJjZUxvY2F0aW9uID0gbG9jO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGUuY29uZmlnLnJlc291cmNlTG9jYXRpb247XG59XG5leHBvcnQgZnVuY3Rpb24gaXNPcGVyYXRpb25FcnJvcihlKSB7XG4gICAgcmV0dXJuIGUubmFtZSA9PT0gXCJSZXN0RXJyb3JcIjtcbn1cbi8qKiBQb2xscyB0aGUgbG9uZy1ydW5uaW5nIG9wZXJhdGlvbi4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwb2xsSHR0cE9wZXJhdGlvbihpbnB1dHMpIHtcbiAgICBjb25zdCB7IGxybywgc3RhdGVQcm94eSwgb3B0aW9ucywgcHJvY2Vzc1Jlc3VsdCwgdXBkYXRlU3RhdGUsIHNldERlbGF5LCBzdGF0ZSwgc2V0RXJyb3JBc1Jlc3VsdCwgfSA9IGlucHV0cztcbiAgICByZXR1cm4gcG9sbE9wZXJhdGlvbih7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBzdGF0ZVByb3h5LFxuICAgICAgICBzZXREZWxheSxcbiAgICAgICAgcHJvY2Vzc1Jlc3VsdDogcHJvY2Vzc1Jlc3VsdFxuICAgICAgICAgICAgPyAoeyBmbGF0UmVzcG9uc2UgfSwgaW5wdXRTdGF0ZSkgPT4gcHJvY2Vzc1Jlc3VsdChmbGF0UmVzcG9uc2UsIGlucHV0U3RhdGUpXG4gICAgICAgICAgICA6ICh7IGZsYXRSZXNwb25zZSB9KSA9PiBmbGF0UmVzcG9uc2UsXG4gICAgICAgIGdldEVycm9yOiBnZXRFcnJvckZyb21SZXNwb25zZSxcbiAgICAgICAgdXBkYXRlU3RhdGUsXG4gICAgICAgIGdldFBvbGxpbmdJbnRlcnZhbDogcGFyc2VSZXRyeUFmdGVyLFxuICAgICAgICBnZXRPcGVyYXRpb25Mb2NhdGlvbixcbiAgICAgICAgZ2V0T3BlcmF0aW9uU3RhdHVzLFxuICAgICAgICBpc09wZXJhdGlvbkVycm9yLFxuICAgICAgICBnZXRSZXNvdXJjZUxvY2F0aW9uLFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGV4cGFuc2lvbiBoZXJlIGlzIGludGVudGlvbmFsIGJlY2F1c2UgYGxyb2AgY291bGQgYmUgYW4gb2JqZWN0IHRoYXRcbiAgICAgICAgICogcmVmZXJlbmNlcyBhbiBpbm5lciB0aGlzLCBzbyB3ZSBuZWVkIHRvIHByZXNlcnZlIGEgcmVmZXJlbmNlIHRvIGl0LlxuICAgICAgICAgKi9cbiAgICAgICAgcG9sbDogYXN5bmMgKGxvY2F0aW9uLCBpbnB1dE9wdGlvbnMpID0+IGxyby5zZW5kUG9sbFJlcXVlc3QobG9jYXRpb24sIGlucHV0T3B0aW9ucyksXG4gICAgICAgIHNldEVycm9yQXNSZXN1bHQsXG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/http/operation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/http/poller.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/http/poller.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHttpPoller: () => (/* binding */ createHttpPoller)\n/* harmony export */ });\n/* harmony import */ var _operation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./operation.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/http/operation.js\");\n/* harmony import */ var _poller_poller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../poller/poller.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/poller.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * Creates a poller that can be used to poll a long-running operation.\n * @param lro - Description of the long-running operation\n * @param options - options to configure the poller\n * @returns an initialized poller\n */\nasync function createHttpPoller(lro, options) {\n    const { resourceLocationConfig, intervalInMs, processResult, restoreFrom, updateState, withOperationLocation, resolveOnUnsuccessful = false, } = options || {};\n    return (0,_poller_poller_js__WEBPACK_IMPORTED_MODULE_1__.buildCreatePoller)({\n        getStatusFromInitialResponse: _operation_js__WEBPACK_IMPORTED_MODULE_0__.getStatusFromInitialResponse,\n        getStatusFromPollResponse: _operation_js__WEBPACK_IMPORTED_MODULE_0__.getOperationStatus,\n        isOperationError: _operation_js__WEBPACK_IMPORTED_MODULE_0__.isOperationError,\n        getOperationLocation: _operation_js__WEBPACK_IMPORTED_MODULE_0__.getOperationLocation,\n        getResourceLocation: _operation_js__WEBPACK_IMPORTED_MODULE_0__.getResourceLocation,\n        getPollingInterval: _operation_js__WEBPACK_IMPORTED_MODULE_0__.parseRetryAfter,\n        getError: _operation_js__WEBPACK_IMPORTED_MODULE_0__.getErrorFromResponse,\n        resolveOnUnsuccessful,\n    })({\n        init: async () => {\n            const response = await lro.sendInitialRequest();\n            const config = (0,_operation_js__WEBPACK_IMPORTED_MODULE_0__.inferLroMode)({\n                rawResponse: response.rawResponse,\n                requestPath: lro.requestPath,\n                requestMethod: lro.requestMethod,\n                resourceLocationConfig,\n            });\n            return Object.assign({ response, operationLocation: config === null || config === void 0 ? void 0 : config.operationLocation, resourceLocation: config === null || config === void 0 ? void 0 : config.resourceLocation }, ((config === null || config === void 0 ? void 0 : config.mode) ? { metadata: { mode: config.mode } } : {}));\n        },\n        poll: lro.sendPollRequest,\n    }, {\n        intervalInMs,\n        withOperationLocation,\n        restoreFrom,\n        updateState,\n        processResult: processResult\n            ? ({ flatResponse }, state) => processResult(flatResponse, state)\n            : ({ flatResponse }) => flatResponse,\n    });\n}\n//# sourceMappingURL=poller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2h0dHAvcG9sbGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDcU07QUFDN0k7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLHVJQUF1STtBQUNuSixXQUFXLG9FQUFpQjtBQUM1QixvQ0FBb0M7QUFDcEMsbUNBQW1DLDZEQUFrQjtBQUNyRCx3QkFBd0I7QUFDeEIsNEJBQTRCO0FBQzVCLDJCQUEyQjtBQUMzQiw0QkFBNEIsMERBQWU7QUFDM0Msa0JBQWtCLCtEQUFvQjtBQUN0QztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsMkJBQTJCLDJEQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLG1DQUFtQyxrTUFBa00scUVBQXFFLFlBQVksc0JBQXNCLElBQUk7QUFDaFYsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsY0FBYztBQUMvQixpQkFBaUIsY0FBYztBQUMvQixLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWxyby9kaXN0L2VzbS9odHRwL3BvbGxlci5qcz9hNGQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgZ2V0RXJyb3JGcm9tUmVzcG9uc2UsIGdldE9wZXJhdGlvbkxvY2F0aW9uLCBnZXRPcGVyYXRpb25TdGF0dXMsIGdldFJlc291cmNlTG9jYXRpb24sIGdldFN0YXR1c0Zyb21Jbml0aWFsUmVzcG9uc2UsIGluZmVyTHJvTW9kZSwgaXNPcGVyYXRpb25FcnJvciwgcGFyc2VSZXRyeUFmdGVyLCB9IGZyb20gXCIuL29wZXJhdGlvbi5qc1wiO1xuaW1wb3J0IHsgYnVpbGRDcmVhdGVQb2xsZXIgfSBmcm9tIFwiLi4vcG9sbGVyL3BvbGxlci5qc1wiO1xuLyoqXG4gKiBDcmVhdGVzIGEgcG9sbGVyIHRoYXQgY2FuIGJlIHVzZWQgdG8gcG9sbCBhIGxvbmctcnVubmluZyBvcGVyYXRpb24uXG4gKiBAcGFyYW0gbHJvIC0gRGVzY3JpcHRpb24gb2YgdGhlIGxvbmctcnVubmluZyBvcGVyYXRpb25cbiAqIEBwYXJhbSBvcHRpb25zIC0gb3B0aW9ucyB0byBjb25maWd1cmUgdGhlIHBvbGxlclxuICogQHJldHVybnMgYW4gaW5pdGlhbGl6ZWQgcG9sbGVyXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVIdHRwUG9sbGVyKGxybywgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgcmVzb3VyY2VMb2NhdGlvbkNvbmZpZywgaW50ZXJ2YWxJbk1zLCBwcm9jZXNzUmVzdWx0LCByZXN0b3JlRnJvbSwgdXBkYXRlU3RhdGUsIHdpdGhPcGVyYXRpb25Mb2NhdGlvbiwgcmVzb2x2ZU9uVW5zdWNjZXNzZnVsID0gZmFsc2UsIH0gPSBvcHRpb25zIHx8IHt9O1xuICAgIHJldHVybiBidWlsZENyZWF0ZVBvbGxlcih7XG4gICAgICAgIGdldFN0YXR1c0Zyb21Jbml0aWFsUmVzcG9uc2UsXG4gICAgICAgIGdldFN0YXR1c0Zyb21Qb2xsUmVzcG9uc2U6IGdldE9wZXJhdGlvblN0YXR1cyxcbiAgICAgICAgaXNPcGVyYXRpb25FcnJvcixcbiAgICAgICAgZ2V0T3BlcmF0aW9uTG9jYXRpb24sXG4gICAgICAgIGdldFJlc291cmNlTG9jYXRpb24sXG4gICAgICAgIGdldFBvbGxpbmdJbnRlcnZhbDogcGFyc2VSZXRyeUFmdGVyLFxuICAgICAgICBnZXRFcnJvcjogZ2V0RXJyb3JGcm9tUmVzcG9uc2UsXG4gICAgICAgIHJlc29sdmVPblVuc3VjY2Vzc2Z1bCxcbiAgICB9KSh7XG4gICAgICAgIGluaXQ6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbHJvLnNlbmRJbml0aWFsUmVxdWVzdCgpO1xuICAgICAgICAgICAgY29uc3QgY29uZmlnID0gaW5mZXJMcm9Nb2RlKHtcbiAgICAgICAgICAgICAgICByYXdSZXNwb25zZTogcmVzcG9uc2UucmF3UmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgcmVxdWVzdFBhdGg6IGxyby5yZXF1ZXN0UGF0aCxcbiAgICAgICAgICAgICAgICByZXF1ZXN0TWV0aG9kOiBscm8ucmVxdWVzdE1ldGhvZCxcbiAgICAgICAgICAgICAgICByZXNvdXJjZUxvY2F0aW9uQ29uZmlnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IHJlc3BvbnNlLCBvcGVyYXRpb25Mb2NhdGlvbjogY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLm9wZXJhdGlvbkxvY2F0aW9uLCByZXNvdXJjZUxvY2F0aW9uOiBjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcucmVzb3VyY2VMb2NhdGlvbiB9LCAoKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5tb2RlKSA/IHsgbWV0YWRhdGE6IHsgbW9kZTogY29uZmlnLm1vZGUgfSB9IDoge30pKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9sbDogbHJvLnNlbmRQb2xsUmVxdWVzdCxcbiAgICB9LCB7XG4gICAgICAgIGludGVydmFsSW5NcyxcbiAgICAgICAgd2l0aE9wZXJhdGlvbkxvY2F0aW9uLFxuICAgICAgICByZXN0b3JlRnJvbSxcbiAgICAgICAgdXBkYXRlU3RhdGUsXG4gICAgICAgIHByb2Nlc3NSZXN1bHQ6IHByb2Nlc3NSZXN1bHRcbiAgICAgICAgICAgID8gKHsgZmxhdFJlc3BvbnNlIH0sIHN0YXRlKSA9PiBwcm9jZXNzUmVzdWx0KGZsYXRSZXNwb25zZSwgc3RhdGUpXG4gICAgICAgICAgICA6ICh7IGZsYXRSZXNwb25zZSB9KSA9PiBmbGF0UmVzcG9uc2UsXG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb2xsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/http/poller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LroEngine: () => (/* reexport safe */ _legacy_lroEngine_index_js__WEBPACK_IMPORTED_MODULE_1__.LroEngine),\n/* harmony export */   Poller: () => (/* reexport safe */ _legacy_poller_js__WEBPACK_IMPORTED_MODULE_2__.Poller),\n/* harmony export */   PollerCancelledError: () => (/* reexport safe */ _legacy_poller_js__WEBPACK_IMPORTED_MODULE_2__.PollerCancelledError),\n/* harmony export */   PollerStoppedError: () => (/* reexport safe */ _legacy_poller_js__WEBPACK_IMPORTED_MODULE_2__.PollerStoppedError),\n/* harmony export */   createHttpPoller: () => (/* reexport safe */ _http_poller_js__WEBPACK_IMPORTED_MODULE_0__.createHttpPoller)\n/* harmony export */ });\n/* harmony import */ var _http_poller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./http/poller.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/http/poller.js\");\n/* harmony import */ var _legacy_lroEngine_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./legacy/lroEngine/index.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/index.js\");\n/* harmony import */ var _legacy_poller_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./legacy/poller.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/poller.js\");\n/* harmony import */ var _legacy_pollOperation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./legacy/pollOperation.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/pollOperation.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This can be uncommented to expose the protocol-agnostic poller\n */\n// export {\n//   BuildCreatePollerOptions,\n//   Operation,\n//   CreatePollerOptions,\n//   OperationConfig,\n//   RestorableOperationState,\n// } from \"./poller/models\";\n// export { buildCreatePoller } from \"./poller/poller\";\n/** legacy */\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVksb0JBQW9CO0FBQ2hDO0FBQzRDO0FBQ1Q7QUFDTztBQUMxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWxyby9kaXN0L2VzbS9pbmRleC5qcz82N2ViIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuZXhwb3J0IHsgY3JlYXRlSHR0cFBvbGxlciB9IGZyb20gXCIuL2h0dHAvcG9sbGVyLmpzXCI7XG4vKipcbiAqIFRoaXMgY2FuIGJlIHVuY29tbWVudGVkIHRvIGV4cG9zZSB0aGUgcHJvdG9jb2wtYWdub3N0aWMgcG9sbGVyXG4gKi9cbi8vIGV4cG9ydCB7XG4vLyAgIEJ1aWxkQ3JlYXRlUG9sbGVyT3B0aW9ucyxcbi8vICAgT3BlcmF0aW9uLFxuLy8gICBDcmVhdGVQb2xsZXJPcHRpb25zLFxuLy8gICBPcGVyYXRpb25Db25maWcsXG4vLyAgIFJlc3RvcmFibGVPcGVyYXRpb25TdGF0ZSxcbi8vIH0gZnJvbSBcIi4vcG9sbGVyL21vZGVsc1wiO1xuLy8gZXhwb3J0IHsgYnVpbGRDcmVhdGVQb2xsZXIgfSBmcm9tIFwiLi9wb2xsZXIvcG9sbGVyXCI7XG4vKiogbGVnYWN5ICovXG5leHBvcnQgKiBmcm9tIFwiLi9sZWdhY3kvbHJvRW5naW5lL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9sZWdhY3kvcG9sbGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9sZWdhY3kvcG9sbE9wZXJhdGlvbi5qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LroEngine: () => (/* reexport safe */ _lroEngine_js__WEBPACK_IMPORTED_MODULE_0__.LroEngine)\n/* harmony export */ });\n/* harmony import */ var _lroEngine_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lroEngine.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/lroEngine.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2xlZ2FjeS9scm9FbmdpbmUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQzJDO0FBQzNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2xlZ2FjeS9scm9FbmdpbmUvaW5kZXguanM/MzI2MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmV4cG9ydCB7IExyb0VuZ2luZSB9IGZyb20gXCIuL2xyb0VuZ2luZS5qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/lroEngine.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/lroEngine.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LroEngine: () => (/* binding */ LroEngine)\n/* harmony export */ });\n/* harmony import */ var _operation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./operation.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/operation.js\");\n/* harmony import */ var _poller_constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../poller/constants.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/constants.js\");\n/* harmony import */ var _poller_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../poller.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/poller.js\");\n/* harmony import */ var _poller_operation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../poller/operation.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/operation.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n/**\n * The LRO Engine, a class that performs polling.\n */\nclass LroEngine extends _poller_js__WEBPACK_IMPORTED_MODULE_2__.Poller {\n    constructor(lro, options) {\n        const { intervalInMs = _poller_constants_js__WEBPACK_IMPORTED_MODULE_1__.POLL_INTERVAL_IN_MS, resumeFrom, resolveOnUnsuccessful = false, isDone, lroResourceLocationConfig, processResult, updateState, } = options || {};\n        const state = resumeFrom\n            ? (0,_poller_operation_js__WEBPACK_IMPORTED_MODULE_3__.deserializeState)(resumeFrom)\n            : {};\n        const operation = new _operation_js__WEBPACK_IMPORTED_MODULE_0__.GenericPollOperation(state, lro, !resolveOnUnsuccessful, lroResourceLocationConfig, processResult, updateState, isDone);\n        super(operation);\n        this.resolveOnUnsuccessful = resolveOnUnsuccessful;\n        this.config = { intervalInMs: intervalInMs };\n        operation.setPollerConfig(this.config);\n    }\n    /**\n     * The method used by the poller to wait before attempting to update its operation.\n     */\n    delay() {\n        return new Promise((resolve) => setTimeout(() => resolve(), this.config.intervalInMs));\n    }\n}\n//# sourceMappingURL=lroEngine.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2xlZ2FjeS9scm9FbmdpbmUvbHJvRW5naW5lLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNzRDtBQUNVO0FBQzFCO0FBQ3VCO0FBQzdEO0FBQ0E7QUFDQTtBQUNPLHdCQUF3Qiw4Q0FBTTtBQUNyQztBQUNBLGdCQUFnQixlQUFlLHFFQUFtQiw4R0FBOEc7QUFDaEs7QUFDQSxjQUFjLHNFQUFnQjtBQUM5QjtBQUNBLDhCQUE4QiwrREFBb0I7QUFDbEQ7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWxyby9kaXN0L2VzbS9sZWdhY3kvbHJvRW5naW5lL2xyb0VuZ2luZS5qcz85Nzc5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgR2VuZXJpY1BvbGxPcGVyYXRpb24gfSBmcm9tIFwiLi9vcGVyYXRpb24uanNcIjtcbmltcG9ydCB7IFBPTExfSU5URVJWQUxfSU5fTVMgfSBmcm9tIFwiLi4vLi4vcG9sbGVyL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgUG9sbGVyIH0gZnJvbSBcIi4uL3BvbGxlci5qc1wiO1xuaW1wb3J0IHsgZGVzZXJpYWxpemVTdGF0ZSB9IGZyb20gXCIuLi8uLi9wb2xsZXIvb3BlcmF0aW9uLmpzXCI7XG4vKipcbiAqIFRoZSBMUk8gRW5naW5lLCBhIGNsYXNzIHRoYXQgcGVyZm9ybXMgcG9sbGluZy5cbiAqL1xuZXhwb3J0IGNsYXNzIExyb0VuZ2luZSBleHRlbmRzIFBvbGxlciB7XG4gICAgY29uc3RydWN0b3IobHJvLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgaW50ZXJ2YWxJbk1zID0gUE9MTF9JTlRFUlZBTF9JTl9NUywgcmVzdW1lRnJvbSwgcmVzb2x2ZU9uVW5zdWNjZXNzZnVsID0gZmFsc2UsIGlzRG9uZSwgbHJvUmVzb3VyY2VMb2NhdGlvbkNvbmZpZywgcHJvY2Vzc1Jlc3VsdCwgdXBkYXRlU3RhdGUsIH0gPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHJlc3VtZUZyb21cbiAgICAgICAgICAgID8gZGVzZXJpYWxpemVTdGF0ZShyZXN1bWVGcm9tKVxuICAgICAgICAgICAgOiB7fTtcbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gbmV3IEdlbmVyaWNQb2xsT3BlcmF0aW9uKHN0YXRlLCBscm8sICFyZXNvbHZlT25VbnN1Y2Nlc3NmdWwsIGxyb1Jlc291cmNlTG9jYXRpb25Db25maWcsIHByb2Nlc3NSZXN1bHQsIHVwZGF0ZVN0YXRlLCBpc0RvbmUpO1xuICAgICAgICBzdXBlcihvcGVyYXRpb24pO1xuICAgICAgICB0aGlzLnJlc29sdmVPblVuc3VjY2Vzc2Z1bCA9IHJlc29sdmVPblVuc3VjY2Vzc2Z1bDtcbiAgICAgICAgdGhpcy5jb25maWcgPSB7IGludGVydmFsSW5NczogaW50ZXJ2YWxJbk1zIH07XG4gICAgICAgIG9wZXJhdGlvbi5zZXRQb2xsZXJDb25maWcodGhpcy5jb25maWcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbWV0aG9kIHVzZWQgYnkgdGhlIHBvbGxlciB0byB3YWl0IGJlZm9yZSBhdHRlbXB0aW5nIHRvIHVwZGF0ZSBpdHMgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGRlbGF5KCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgpLCB0aGlzLmNvbmZpZy5pbnRlcnZhbEluTXMpKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1scm9FbmdpbmUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/lroEngine.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/operation.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/operation.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenericPollOperation: () => (/* binding */ GenericPollOperation)\n/* harmony export */ });\n/* harmony import */ var _http_operation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../http/operation.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/http/operation.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../logger.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/logger.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\nconst createStateProxy = () => ({\n    initState: (config) => ({ config, isStarted: true }),\n    setCanceled: (state) => (state.isCancelled = true),\n    setError: (state, error) => (state.error = error),\n    setResult: (state, result) => (state.result = result),\n    setRunning: (state) => (state.isStarted = true),\n    setSucceeded: (state) => (state.isCompleted = true),\n    setFailed: () => {\n        /** empty body */\n    },\n    getError: (state) => state.error,\n    getResult: (state) => state.result,\n    isCanceled: (state) => !!state.isCancelled,\n    isFailed: (state) => !!state.error,\n    isRunning: (state) => !!state.isStarted,\n    isSucceeded: (state) => Boolean(state.isCompleted && !state.isCancelled && !state.error),\n});\nclass GenericPollOperation {\n    constructor(state, lro, setErrorAsResult, lroResourceLocationConfig, processResult, updateState, isDone) {\n        this.state = state;\n        this.lro = lro;\n        this.setErrorAsResult = setErrorAsResult;\n        this.lroResourceLocationConfig = lroResourceLocationConfig;\n        this.processResult = processResult;\n        this.updateState = updateState;\n        this.isDone = isDone;\n    }\n    setPollerConfig(pollerConfig) {\n        this.pollerConfig = pollerConfig;\n    }\n    async update(options) {\n        var _a;\n        const stateProxy = createStateProxy();\n        if (!this.state.isStarted) {\n            this.state = Object.assign(Object.assign({}, this.state), (await (0,_http_operation_js__WEBPACK_IMPORTED_MODULE_0__.initHttpOperation)({\n                lro: this.lro,\n                stateProxy,\n                resourceLocationConfig: this.lroResourceLocationConfig,\n                processResult: this.processResult,\n                setErrorAsResult: this.setErrorAsResult,\n            })));\n        }\n        const updateState = this.updateState;\n        const isDone = this.isDone;\n        if (!this.state.isCompleted && this.state.error === undefined) {\n            await (0,_http_operation_js__WEBPACK_IMPORTED_MODULE_0__.pollHttpOperation)({\n                lro: this.lro,\n                state: this.state,\n                stateProxy,\n                processResult: this.processResult,\n                updateState: updateState\n                    ? (state, { rawResponse }) => updateState(state, rawResponse)\n                    : undefined,\n                isDone: isDone\n                    ? ({ flatResponse }, state) => isDone(flatResponse, state)\n                    : undefined,\n                options,\n                setDelay: (intervalInMs) => {\n                    this.pollerConfig.intervalInMs = intervalInMs;\n                },\n                setErrorAsResult: this.setErrorAsResult,\n            });\n        }\n        (_a = options === null || options === void 0 ? void 0 : options.fireProgress) === null || _a === void 0 ? void 0 : _a.call(options, this.state);\n        return this;\n    }\n    async cancel() {\n        _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.error(\"`cancelOperation` is deprecated because it wasn't implemented\");\n        return this;\n    }\n    /**\n     * Serializes the Poller operation.\n     */\n    toString() {\n        return JSON.stringify({\n            state: this.state,\n        });\n    }\n}\n//# sourceMappingURL=operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2xlZ2FjeS9scm9FbmdpbmUvb3BlcmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDK0U7QUFDdEM7QUFDekM7QUFDQSw4QkFBOEIseUJBQXlCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDTTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELHNCQUFzQixxRUFBaUI7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxRUFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxhQUFhO0FBQzdDO0FBQ0E7QUFDQSx5QkFBeUIsY0FBYztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSw4Q0FBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2xlZ2FjeS9scm9FbmdpbmUvb3BlcmF0aW9uLmpzP2MwMWIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBpbml0SHR0cE9wZXJhdGlvbiwgcG9sbEh0dHBPcGVyYXRpb24gfSBmcm9tIFwiLi4vLi4vaHR0cC9vcGVyYXRpb24uanNcIjtcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCIuLi8uLi9sb2dnZXIuanNcIjtcbmNvbnN0IGNyZWF0ZVN0YXRlUHJveHkgPSAoKSA9PiAoe1xuICAgIGluaXRTdGF0ZTogKGNvbmZpZykgPT4gKHsgY29uZmlnLCBpc1N0YXJ0ZWQ6IHRydWUgfSksXG4gICAgc2V0Q2FuY2VsZWQ6IChzdGF0ZSkgPT4gKHN0YXRlLmlzQ2FuY2VsbGVkID0gdHJ1ZSksXG4gICAgc2V0RXJyb3I6IChzdGF0ZSwgZXJyb3IpID0+IChzdGF0ZS5lcnJvciA9IGVycm9yKSxcbiAgICBzZXRSZXN1bHQ6IChzdGF0ZSwgcmVzdWx0KSA9PiAoc3RhdGUucmVzdWx0ID0gcmVzdWx0KSxcbiAgICBzZXRSdW5uaW5nOiAoc3RhdGUpID0+IChzdGF0ZS5pc1N0YXJ0ZWQgPSB0cnVlKSxcbiAgICBzZXRTdWNjZWVkZWQ6IChzdGF0ZSkgPT4gKHN0YXRlLmlzQ29tcGxldGVkID0gdHJ1ZSksXG4gICAgc2V0RmFpbGVkOiAoKSA9PiB7XG4gICAgICAgIC8qKiBlbXB0eSBib2R5ICovXG4gICAgfSxcbiAgICBnZXRFcnJvcjogKHN0YXRlKSA9PiBzdGF0ZS5lcnJvcixcbiAgICBnZXRSZXN1bHQ6IChzdGF0ZSkgPT4gc3RhdGUucmVzdWx0LFxuICAgIGlzQ2FuY2VsZWQ6IChzdGF0ZSkgPT4gISFzdGF0ZS5pc0NhbmNlbGxlZCxcbiAgICBpc0ZhaWxlZDogKHN0YXRlKSA9PiAhIXN0YXRlLmVycm9yLFxuICAgIGlzUnVubmluZzogKHN0YXRlKSA9PiAhIXN0YXRlLmlzU3RhcnRlZCxcbiAgICBpc1N1Y2NlZWRlZDogKHN0YXRlKSA9PiBCb29sZWFuKHN0YXRlLmlzQ29tcGxldGVkICYmICFzdGF0ZS5pc0NhbmNlbGxlZCAmJiAhc3RhdGUuZXJyb3IpLFxufSk7XG5leHBvcnQgY2xhc3MgR2VuZXJpY1BvbGxPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHN0YXRlLCBscm8sIHNldEVycm9yQXNSZXN1bHQsIGxyb1Jlc291cmNlTG9jYXRpb25Db25maWcsIHByb2Nlc3NSZXN1bHQsIHVwZGF0ZVN0YXRlLCBpc0RvbmUpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLmxybyA9IGxybztcbiAgICAgICAgdGhpcy5zZXRFcnJvckFzUmVzdWx0ID0gc2V0RXJyb3JBc1Jlc3VsdDtcbiAgICAgICAgdGhpcy5scm9SZXNvdXJjZUxvY2F0aW9uQ29uZmlnID0gbHJvUmVzb3VyY2VMb2NhdGlvbkNvbmZpZztcbiAgICAgICAgdGhpcy5wcm9jZXNzUmVzdWx0ID0gcHJvY2Vzc1Jlc3VsdDtcbiAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSA9IHVwZGF0ZVN0YXRlO1xuICAgICAgICB0aGlzLmlzRG9uZSA9IGlzRG9uZTtcbiAgICB9XG4gICAgc2V0UG9sbGVyQ29uZmlnKHBvbGxlckNvbmZpZykge1xuICAgICAgICB0aGlzLnBvbGxlckNvbmZpZyA9IHBvbGxlckNvbmZpZztcbiAgICB9XG4gICAgYXN5bmMgdXBkYXRlKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBzdGF0ZVByb3h5ID0gY3JlYXRlU3RhdGVQcm94eSgpO1xuICAgICAgICBpZiAoIXRoaXMuc3RhdGUuaXNTdGFydGVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLnN0YXRlKSwgKGF3YWl0IGluaXRIdHRwT3BlcmF0aW9uKHtcbiAgICAgICAgICAgICAgICBscm86IHRoaXMubHJvLFxuICAgICAgICAgICAgICAgIHN0YXRlUHJveHksXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VMb2NhdGlvbkNvbmZpZzogdGhpcy5scm9SZXNvdXJjZUxvY2F0aW9uQ29uZmlnLFxuICAgICAgICAgICAgICAgIHByb2Nlc3NSZXN1bHQ6IHRoaXMucHJvY2Vzc1Jlc3VsdCxcbiAgICAgICAgICAgICAgICBzZXRFcnJvckFzUmVzdWx0OiB0aGlzLnNldEVycm9yQXNSZXN1bHQsXG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVwZGF0ZVN0YXRlID0gdGhpcy51cGRhdGVTdGF0ZTtcbiAgICAgICAgY29uc3QgaXNEb25lID0gdGhpcy5pc0RvbmU7XG4gICAgICAgIGlmICghdGhpcy5zdGF0ZS5pc0NvbXBsZXRlZCAmJiB0aGlzLnN0YXRlLmVycm9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGF3YWl0IHBvbGxIdHRwT3BlcmF0aW9uKHtcbiAgICAgICAgICAgICAgICBscm86IHRoaXMubHJvLFxuICAgICAgICAgICAgICAgIHN0YXRlOiB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgICAgIHN0YXRlUHJveHksXG4gICAgICAgICAgICAgICAgcHJvY2Vzc1Jlc3VsdDogdGhpcy5wcm9jZXNzUmVzdWx0LFxuICAgICAgICAgICAgICAgIHVwZGF0ZVN0YXRlOiB1cGRhdGVTdGF0ZVxuICAgICAgICAgICAgICAgICAgICA/IChzdGF0ZSwgeyByYXdSZXNwb25zZSB9KSA9PiB1cGRhdGVTdGF0ZShzdGF0ZSwgcmF3UmVzcG9uc2UpXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGlzRG9uZTogaXNEb25lXG4gICAgICAgICAgICAgICAgICAgID8gKHsgZmxhdFJlc3BvbnNlIH0sIHN0YXRlKSA9PiBpc0RvbmUoZmxhdFJlc3BvbnNlLCBzdGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICAgICBzZXREZWxheTogKGludGVydmFsSW5NcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvbGxlckNvbmZpZy5pbnRlcnZhbEluTXMgPSBpbnRlcnZhbEluTXM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXRFcnJvckFzUmVzdWx0OiB0aGlzLnNldEVycm9yQXNSZXN1bHQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyZVByb2dyZXNzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChvcHRpb25zLCB0aGlzLnN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFzeW5jIGNhbmNlbCgpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKFwiYGNhbmNlbE9wZXJhdGlvbmAgaXMgZGVwcmVjYXRlZCBiZWNhdXNlIGl0IHdhc24ndCBpbXBsZW1lbnRlZFwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZXMgdGhlIFBvbGxlciBvcGVyYXRpb24uXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBzdGF0ZTogdGhpcy5zdGF0ZSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BlcmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/operation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/pollOperation.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/legacy/pollOperation.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n//# sourceMappingURL=pollOperation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2xlZ2FjeS9wb2xsT3BlcmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ1U7QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWxyby9kaXN0L2VzbS9sZWdhY3kvcG9sbE9wZXJhdGlvbi5qcz85MTY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9sbE9wZXJhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/pollOperation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/poller.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/legacy/poller.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Poller: () => (/* binding */ Poller),\n/* harmony export */   PollerCancelledError: () => (/* binding */ PollerCancelledError),\n/* harmony export */   PollerStoppedError: () => (/* binding */ PollerStoppedError)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * When a poller is manually stopped through the `stopPolling` method,\n * the poller will be rejected with an instance of the PollerStoppedError.\n */\nclass PollerStoppedError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"PollerStoppedError\";\n        Object.setPrototypeOf(this, PollerStoppedError.prototype);\n    }\n}\n/**\n * When the operation is cancelled, the poller will be rejected with an instance\n * of the PollerCancelledError.\n */\nclass PollerCancelledError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"PollerCancelledError\";\n        Object.setPrototypeOf(this, PollerCancelledError.prototype);\n    }\n}\n/**\n * A class that represents the definition of a program that polls through consecutive requests\n * until it reaches a state of completion.\n *\n * A poller can be executed manually, by polling request by request by calling to the `poll()` method repeatedly, until its operation is completed.\n * It also provides a way to wait until the operation completes, by calling `pollUntilDone()` and waiting until the operation finishes.\n * Pollers can also request the cancellation of the ongoing process to whom is providing the underlying long running operation.\n *\n * ```ts\n * const poller = new MyPoller();\n *\n * // Polling just once:\n * await poller.poll();\n *\n * // We can try to cancel the request here, by calling:\n * //\n * //     await poller.cancelOperation();\n * //\n *\n * // Getting the final result:\n * const result = await poller.pollUntilDone();\n * ```\n *\n * The Poller is defined by two types, a type representing the state of the poller, which\n * must include a basic set of properties from `PollOperationState<TResult>`,\n * and a return type defined by `TResult`, which can be anything.\n *\n * The Poller class implements the `PollerLike` interface, which allows poller implementations to avoid having\n * to export the Poller's class directly, and instead only export the already instantiated poller with the PollerLike type.\n *\n * ```ts\n * class Client {\n *   public async makePoller: PollerLike<MyOperationState, MyResult> {\n *     const poller = new MyPoller({});\n *     // It might be preferred to return the poller after the first request is made,\n *     // so that some information can be obtained right away.\n *     await poller.poll();\n *     return poller;\n *   }\n * }\n *\n * const poller: PollerLike<MyOperationState, MyResult> = myClient.makePoller();\n * ```\n *\n * A poller can be created through its constructor, then it can be polled until it's completed.\n * At any point in time, the state of the poller can be obtained without delay through the getOperationState method.\n * At any point in time, the intermediate forms of the result type can be requested without delay.\n * Once the underlying operation is marked as completed, the poller will stop and the final value will be returned.\n *\n * ```ts\n * const poller = myClient.makePoller();\n * const state: MyOperationState = poller.getOperationState();\n *\n * // The intermediate result can be obtained at any time.\n * const result: MyResult | undefined = poller.getResult();\n *\n * // The final result can only be obtained after the poller finishes.\n * const result: MyResult = await poller.pollUntilDone();\n * ```\n *\n */\n// eslint-disable-next-line no-use-before-define\nclass Poller {\n    /**\n     * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.\n     *\n     * When writing an implementation of a Poller, this implementation needs to deal with the initialization\n     * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's\n     * operation has already been defined, at least its basic properties. The code below shows how to approach\n     * the definition of the constructor of a new custom poller.\n     *\n     * ```ts\n     * export class MyPoller extends Poller<MyOperationState, string> {\n     *   constructor({\n     *     // Anything you might need outside of the basics\n     *   }) {\n     *     let state: MyOperationState = {\n     *       privateProperty: private,\n     *       publicProperty: public,\n     *     };\n     *\n     *     const operation = {\n     *       state,\n     *       update,\n     *       cancel,\n     *       toString\n     *     }\n     *\n     *     // Sending the operation to the parent's constructor.\n     *     super(operation);\n     *\n     *     // You can assign more local properties here.\n     *   }\n     * }\n     * ```\n     *\n     * Inside of this constructor, a new promise is created. This will be used to\n     * tell the user when the poller finishes (see `pollUntilDone()`). The promise's\n     * resolve and reject methods are also used internally to control when to resolve\n     * or reject anyone waiting for the poller to finish.\n     *\n     * The constructor of a custom implementation of a poller is where any serialized version of\n     * a previous poller's operation should be deserialized into the operation sent to the\n     * base constructor. For example:\n     *\n     * ```ts\n     * export class MyPoller extends Poller<MyOperationState, string> {\n     *   constructor(\n     *     baseOperation: string | undefined\n     *   ) {\n     *     let state: MyOperationState = {};\n     *     if (baseOperation) {\n     *       state = {\n     *         ...JSON.parse(baseOperation).state,\n     *         ...state\n     *       };\n     *     }\n     *     const operation = {\n     *       state,\n     *       // ...\n     *     }\n     *     super(operation);\n     *   }\n     * }\n     * ```\n     *\n     * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.\n     */\n    constructor(operation) {\n        /** controls whether to throw an error if the operation failed or was canceled. */\n        this.resolveOnUnsuccessful = false;\n        this.stopped = true;\n        this.pollProgressCallbacks = [];\n        this.operation = operation;\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n        // This prevents the UnhandledPromiseRejectionWarning in node.js from being thrown.\n        // The above warning would get thrown if `poller.poll` is called, it returns an error,\n        // and pullUntilDone did not have a .catch or await try/catch on it's return value.\n        this.promise.catch(() => {\n            /* intentionally blank */\n        });\n    }\n    /**\n     * Starts a loop that will break only if the poller is done\n     * or if the poller is stopped.\n     */\n    async startPolling(pollOptions = {}) {\n        if (this.stopped) {\n            this.stopped = false;\n        }\n        while (!this.isStopped() && !this.isDone()) {\n            await this.poll(pollOptions);\n            await this.delay();\n        }\n    }\n    /**\n     * pollOnce does one polling, by calling to the update method of the underlying\n     * poll operation to make any relevant change effective.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    async pollOnce(options = {}) {\n        if (!this.isDone()) {\n            this.operation = await this.operation.update({\n                abortSignal: options.abortSignal,\n                fireProgress: this.fireProgress.bind(this),\n            });\n        }\n        this.processUpdatedState();\n    }\n    /**\n     * fireProgress calls the functions passed in via onProgress the method of the poller.\n     *\n     * It loops over all of the callbacks received from onProgress, and executes them, sending them\n     * the current operation state.\n     *\n     * @param state - The current operation state.\n     */\n    fireProgress(state) {\n        for (const callback of this.pollProgressCallbacks) {\n            callback(state);\n        }\n    }\n    /**\n     * Invokes the underlying operation's cancel method.\n     */\n    async cancelOnce(options = {}) {\n        this.operation = await this.operation.cancel(options);\n    }\n    /**\n     * Returns a promise that will resolve once a single polling request finishes.\n     * It does this by calling the update method of the Poller's operation.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    poll(options = {}) {\n        if (!this.pollOncePromise) {\n            this.pollOncePromise = this.pollOnce(options);\n            const clearPollOncePromise = () => {\n                this.pollOncePromise = undefined;\n            };\n            this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);\n        }\n        return this.pollOncePromise;\n    }\n    processUpdatedState() {\n        if (this.operation.state.error) {\n            this.stopped = true;\n            if (!this.resolveOnUnsuccessful) {\n                this.reject(this.operation.state.error);\n                throw this.operation.state.error;\n            }\n        }\n        if (this.operation.state.isCancelled) {\n            this.stopped = true;\n            if (!this.resolveOnUnsuccessful) {\n                const error = new PollerCancelledError(\"Operation was canceled\");\n                this.reject(error);\n                throw error;\n            }\n        }\n        if (this.isDone() && this.resolve) {\n            // If the poller has finished polling, this means we now have a result.\n            // However, it can be the case that TResult is instantiated to void, so\n            // we are not expecting a result anyway. To assert that we might not\n            // have a result eventually after finishing polling, we cast the result\n            // to TResult.\n            this.resolve(this.getResult());\n        }\n    }\n    /**\n     * Returns a promise that will resolve once the underlying operation is completed.\n     */\n    async pollUntilDone(pollOptions = {}) {\n        if (this.stopped) {\n            this.startPolling(pollOptions).catch(this.reject);\n        }\n        // This is needed because the state could have been updated by\n        // `cancelOperation`, e.g. the operation is canceled or an error occurred.\n        this.processUpdatedState();\n        return this.promise;\n    }\n    /**\n     * Invokes the provided callback after each polling is completed,\n     * sending the current state of the poller's operation.\n     *\n     * It returns a method that can be used to stop receiving updates on the given callback function.\n     */\n    onProgress(callback) {\n        this.pollProgressCallbacks.push(callback);\n        return () => {\n            this.pollProgressCallbacks = this.pollProgressCallbacks.filter((c) => c !== callback);\n        };\n    }\n    /**\n     * Returns true if the poller has finished polling.\n     */\n    isDone() {\n        const state = this.operation.state;\n        return Boolean(state.isCompleted || state.isCancelled || state.error);\n    }\n    /**\n     * Stops the poller from continuing to poll.\n     */\n    stopPolling() {\n        if (!this.stopped) {\n            this.stopped = true;\n            if (this.reject) {\n                this.reject(new PollerStoppedError(\"This poller is already stopped\"));\n            }\n        }\n    }\n    /**\n     * Returns true if the poller is stopped.\n     */\n    isStopped() {\n        return this.stopped;\n    }\n    /**\n     * Attempts to cancel the underlying operation.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * If it's called again before it finishes, it will throw an error.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    cancelOperation(options = {}) {\n        if (!this.cancelPromise) {\n            this.cancelPromise = this.cancelOnce(options);\n        }\n        else if (options.abortSignal) {\n            throw new Error(\"A cancel request is currently pending\");\n        }\n        return this.cancelPromise;\n    }\n    /**\n     * Returns the state of the operation.\n     *\n     * Even though TState will be the same type inside any of the methods of any extension of the Poller class,\n     * implementations of the pollers can customize what's shared with the public by writing their own\n     * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller\n     * and a public type representing a safe to share subset of the properties of the internal state.\n     * Their definition of getOperationState can then return their public type.\n     *\n     * Example:\n     *\n     * ```ts\n     * // Let's say we have our poller's operation state defined as:\n     * interface MyOperationState extends PollOperationState<ResultType> {\n     *   privateProperty?: string;\n     *   publicProperty?: string;\n     * }\n     *\n     * // To allow us to have a true separation of public and private state, we have to define another interface:\n     * interface PublicState extends PollOperationState<ResultType> {\n     *   publicProperty?: string;\n     * }\n     *\n     * // Then, we define our Poller as follows:\n     * export class MyPoller extends Poller<MyOperationState, ResultType> {\n     *   // ... More content is needed here ...\n     *\n     *   public getOperationState(): PublicState {\n     *     const state: PublicState = this.operation.state;\n     *     return {\n     *       // Properties from PollOperationState<TResult>\n     *       isStarted: state.isStarted,\n     *       isCompleted: state.isCompleted,\n     *       isCancelled: state.isCancelled,\n     *       error: state.error,\n     *       result: state.result,\n     *\n     *       // The only other property needed by PublicState.\n     *       publicProperty: state.publicProperty\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * You can see this in the tests of this repository, go to the file:\n     * `../test/utils/testPoller.ts`\n     * and look for the getOperationState implementation.\n     */\n    getOperationState() {\n        return this.operation.state;\n    }\n    /**\n     * Returns the result value of the operation,\n     * regardless of the state of the poller.\n     * It can return undefined or an incomplete form of the final TResult value\n     * depending on the implementation.\n     */\n    getResult() {\n        const state = this.operation.state;\n        return state.result;\n    }\n    /**\n     * Returns a serialized version of the poller's operation\n     * by invoking the operation's toString method.\n     */\n    toString() {\n        return this.operation.toString();\n    }\n}\n//# sourceMappingURL=poller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/poller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/logger.js":
/*!*********************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/logger.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * The `@azure/logger` configuration for this package.\n * @internal\n */\nconst logger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_0__.createClientLogger)(\"core-lro\");\n//# sourceMappingURL=logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2xvZ2dlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDTyxlQUFlLGlFQUFrQjtBQUN4QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWxyby9kaXN0L2VzbS9sb2dnZXIuanM/ZjExYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZUNsaWVudExvZ2dlciB9IGZyb20gXCJAYXp1cmUvbG9nZ2VyXCI7XG4vKipcbiAqIFRoZSBgQGF6dXJlL2xvZ2dlcmAgY29uZmlndXJhdGlvbiBmb3IgdGhpcyBwYWNrYWdlLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBsb2dnZXIgPSBjcmVhdGVDbGllbnRMb2dnZXIoXCJjb3JlLWxyb1wiKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/logger.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/constants.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/poller/constants.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POLL_INTERVAL_IN_MS: () => (/* binding */ POLL_INTERVAL_IN_MS),\n/* harmony export */   terminalStates: () => (/* binding */ terminalStates)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The default time interval to wait before sending the next polling request.\n */\nconst POLL_INTERVAL_IN_MS = 2000;\n/**\n * The closed set of terminal states.\n */\nconst terminalStates = [\"succeeded\", \"canceled\", \"failed\"];\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL3BvbGxlci9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL3BvbGxlci9jb25zdGFudHMuanM/Y2RjNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8qKlxuICogVGhlIGRlZmF1bHQgdGltZSBpbnRlcnZhbCB0byB3YWl0IGJlZm9yZSBzZW5kaW5nIHRoZSBuZXh0IHBvbGxpbmcgcmVxdWVzdC5cbiAqL1xuZXhwb3J0IGNvbnN0IFBPTExfSU5URVJWQUxfSU5fTVMgPSAyMDAwO1xuLyoqXG4gKiBUaGUgY2xvc2VkIHNldCBvZiB0ZXJtaW5hbCBzdGF0ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCB0ZXJtaW5hbFN0YXRlcyA9IFtcInN1Y2NlZWRlZFwiLCBcImNhbmNlbGVkXCIsIFwiZmFpbGVkXCJdO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/operation.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/poller/operation.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deserializeState: () => (/* binding */ deserializeState),\n/* harmony export */   initOperation: () => (/* binding */ initOperation),\n/* harmony export */   pollOperation: () => (/* binding */ pollOperation)\n/* harmony export */ });\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../logger.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/logger.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * Deserializes the state\n */\nfunction deserializeState(serializedState) {\n    try {\n        return JSON.parse(serializedState).state;\n    }\n    catch (e) {\n        throw new Error(`Unable to deserialize input state: ${serializedState}`);\n    }\n}\nfunction setStateError(inputs) {\n    const { state, stateProxy, isOperationError } = inputs;\n    return (error) => {\n        if (isOperationError(error)) {\n            stateProxy.setError(state, error);\n            stateProxy.setFailed(state);\n        }\n        throw error;\n    };\n}\nfunction appendReadableErrorMessage(currentMessage, innerMessage) {\n    let message = currentMessage;\n    if (message.slice(-1) !== \".\") {\n        message = message + \".\";\n    }\n    return message + \" \" + innerMessage;\n}\nfunction simplifyError(err) {\n    let message = err.message;\n    let code = err.code;\n    let curErr = err;\n    while (curErr.innererror) {\n        curErr = curErr.innererror;\n        code = curErr.code;\n        message = appendReadableErrorMessage(message, curErr.message);\n    }\n    return {\n        code,\n        message,\n    };\n}\nfunction processOperationStatus(result) {\n    const { state, stateProxy, status, isDone, processResult, getError, response, setErrorAsResult } = result;\n    switch (status) {\n        case \"succeeded\": {\n            stateProxy.setSucceeded(state);\n            break;\n        }\n        case \"failed\": {\n            const err = getError === null || getError === void 0 ? void 0 : getError(response);\n            let postfix = \"\";\n            if (err) {\n                const { code, message } = simplifyError(err);\n                postfix = `. ${code}. ${message}`;\n            }\n            const errStr = `The long-running operation has failed${postfix}`;\n            stateProxy.setError(state, new Error(errStr));\n            stateProxy.setFailed(state);\n            _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.warning(errStr);\n            break;\n        }\n        case \"canceled\": {\n            stateProxy.setCanceled(state);\n            break;\n        }\n    }\n    if ((isDone === null || isDone === void 0 ? void 0 : isDone(response, state)) ||\n        (isDone === undefined &&\n            [\"succeeded\", \"canceled\"].concat(setErrorAsResult ? [] : [\"failed\"]).includes(status))) {\n        stateProxy.setResult(state, buildResult({\n            response,\n            state,\n            processResult,\n        }));\n    }\n}\nfunction buildResult(inputs) {\n    const { processResult, response, state } = inputs;\n    return processResult ? processResult(response, state) : response;\n}\n/**\n * Initiates the long-running operation.\n */\nasync function initOperation(inputs) {\n    const { init, stateProxy, processResult, getOperationStatus, withOperationLocation, setErrorAsResult, } = inputs;\n    const { operationLocation, resourceLocation, metadata, response } = await init();\n    if (operationLocation)\n        withOperationLocation === null || withOperationLocation === void 0 ? void 0 : withOperationLocation(operationLocation, false);\n    const config = {\n        metadata,\n        operationLocation,\n        resourceLocation,\n    };\n    _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.verbose(`LRO: Operation description:`, config);\n    const state = stateProxy.initState(config);\n    const status = getOperationStatus({ response, state, operationLocation });\n    processOperationStatus({ state, status, stateProxy, response, setErrorAsResult, processResult });\n    return state;\n}\nasync function pollOperationHelper(inputs) {\n    const { poll, state, stateProxy, operationLocation, getOperationStatus, getResourceLocation, isOperationError, options, } = inputs;\n    const response = await poll(operationLocation, options).catch(setStateError({\n        state,\n        stateProxy,\n        isOperationError,\n    }));\n    const status = getOperationStatus(response, state);\n    _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.verbose(`LRO: Status:\\n\\tPolling from: ${state.config.operationLocation}\\n\\tOperation status: ${status}\\n\\tPolling status: ${_constants_js__WEBPACK_IMPORTED_MODULE_1__.terminalStates.includes(status) ? \"Stopped\" : \"Running\"}`);\n    if (status === \"succeeded\") {\n        const resourceLocation = getResourceLocation(response, state);\n        if (resourceLocation !== undefined) {\n            return {\n                response: await poll(resourceLocation).catch(setStateError({ state, stateProxy, isOperationError })),\n                status,\n            };\n        }\n    }\n    return { response, status };\n}\n/** Polls the long-running operation. */\nasync function pollOperation(inputs) {\n    const { poll, state, stateProxy, options, getOperationStatus, getResourceLocation, getOperationLocation, isOperationError, withOperationLocation, getPollingInterval, processResult, getError, updateState, setDelay, isDone, setErrorAsResult, } = inputs;\n    const { operationLocation } = state.config;\n    if (operationLocation !== undefined) {\n        const { response, status } = await pollOperationHelper({\n            poll,\n            getOperationStatus,\n            state,\n            stateProxy,\n            operationLocation,\n            getResourceLocation,\n            isOperationError,\n            options,\n        });\n        processOperationStatus({\n            status,\n            response,\n            state,\n            stateProxy,\n            isDone,\n            processResult,\n            getError,\n            setErrorAsResult,\n        });\n        if (!_constants_js__WEBPACK_IMPORTED_MODULE_1__.terminalStates.includes(status)) {\n            const intervalInMs = getPollingInterval === null || getPollingInterval === void 0 ? void 0 : getPollingInterval(response);\n            if (intervalInMs)\n                setDelay(intervalInMs);\n            const location = getOperationLocation === null || getOperationLocation === void 0 ? void 0 : getOperationLocation(response, state);\n            if (location !== undefined) {\n                const isUpdated = operationLocation !== location;\n                state.config.operationLocation = location;\n                withOperationLocation === null || withOperationLocation === void 0 ? void 0 : withOperationLocation(location, isUpdated);\n            }\n            else\n                withOperationLocation === null || withOperationLocation === void 0 ? void 0 : withOperationLocation(operationLocation, false);\n        }\n        updateState === null || updateState === void 0 ? void 0 : updateState(state, response);\n    }\n}\n//# sourceMappingURL=operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/operation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/poller.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/poller/poller.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildCreatePoller: () => (/* binding */ buildCreatePoller)\n/* harmony export */ });\n/* harmony import */ var _operation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./operation.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/operation.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/constants.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\nconst createStateProxy = () => ({\n    /**\n     * The state at this point is created to be of type OperationState<TResult>.\n     * It will be updated later to be of type TState when the\n     * customer-provided callback, `updateState`, is called during polling.\n     */\n    initState: (config) => ({ status: \"running\", config }),\n    setCanceled: (state) => (state.status = \"canceled\"),\n    setError: (state, error) => (state.error = error),\n    setResult: (state, result) => (state.result = result),\n    setRunning: (state) => (state.status = \"running\"),\n    setSucceeded: (state) => (state.status = \"succeeded\"),\n    setFailed: (state) => (state.status = \"failed\"),\n    getError: (state) => state.error,\n    getResult: (state) => state.result,\n    isCanceled: (state) => state.status === \"canceled\",\n    isFailed: (state) => state.status === \"failed\",\n    isRunning: (state) => state.status === \"running\",\n    isSucceeded: (state) => state.status === \"succeeded\",\n});\n/**\n * Returns a poller factory.\n */\nfunction buildCreatePoller(inputs) {\n    const { getOperationLocation, getStatusFromInitialResponse, getStatusFromPollResponse, isOperationError, getResourceLocation, getPollingInterval, getError, resolveOnUnsuccessful, } = inputs;\n    return async ({ init, poll }, options) => {\n        const { processResult, updateState, withOperationLocation: withOperationLocationCallback, intervalInMs = _constants_js__WEBPACK_IMPORTED_MODULE_1__.POLL_INTERVAL_IN_MS, restoreFrom, } = options || {};\n        const stateProxy = createStateProxy();\n        const withOperationLocation = withOperationLocationCallback\n            ? (() => {\n                let called = false;\n                return (operationLocation, isUpdated) => {\n                    if (isUpdated)\n                        withOperationLocationCallback(operationLocation);\n                    else if (!called)\n                        withOperationLocationCallback(operationLocation);\n                    called = true;\n                };\n            })()\n            : undefined;\n        const state = restoreFrom\n            ? (0,_operation_js__WEBPACK_IMPORTED_MODULE_0__.deserializeState)(restoreFrom)\n            : await (0,_operation_js__WEBPACK_IMPORTED_MODULE_0__.initOperation)({\n                init,\n                stateProxy,\n                processResult,\n                getOperationStatus: getStatusFromInitialResponse,\n                withOperationLocation,\n                setErrorAsResult: !resolveOnUnsuccessful,\n            });\n        let resultPromise;\n        const abortController = new AbortController();\n        const handlers = new Map();\n        const handleProgressEvents = async () => handlers.forEach((h) => h(state));\n        const cancelErrMsg = \"Operation was canceled\";\n        let currentPollIntervalInMs = intervalInMs;\n        const poller = {\n            getOperationState: () => state,\n            getResult: () => state.result,\n            isDone: () => [\"succeeded\", \"failed\", \"canceled\"].includes(state.status),\n            isStopped: () => resultPromise === undefined,\n            stopPolling: () => {\n                abortController.abort();\n            },\n            toString: () => JSON.stringify({\n                state,\n            }),\n            onProgress: (callback) => {\n                const s = Symbol();\n                handlers.set(s, callback);\n                return () => handlers.delete(s);\n            },\n            pollUntilDone: (pollOptions) => (resultPromise !== null && resultPromise !== void 0 ? resultPromise : (resultPromise = (async () => {\n                const { abortSignal: inputAbortSignal } = pollOptions || {};\n                // In the future we can use AbortSignal.any() instead\n                function abortListener() {\n                    abortController.abort();\n                }\n                const abortSignal = abortController.signal;\n                if (inputAbortSignal === null || inputAbortSignal === void 0 ? void 0 : inputAbortSignal.aborted) {\n                    abortController.abort();\n                }\n                else if (!abortSignal.aborted) {\n                    inputAbortSignal === null || inputAbortSignal === void 0 ? void 0 : inputAbortSignal.addEventListener(\"abort\", abortListener, { once: true });\n                }\n                try {\n                    if (!poller.isDone()) {\n                        await poller.poll({ abortSignal });\n                        while (!poller.isDone()) {\n                            await (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.delay)(currentPollIntervalInMs, { abortSignal });\n                            await poller.poll({ abortSignal });\n                        }\n                    }\n                }\n                finally {\n                    inputAbortSignal === null || inputAbortSignal === void 0 ? void 0 : inputAbortSignal.removeEventListener(\"abort\", abortListener);\n                }\n                if (resolveOnUnsuccessful) {\n                    return poller.getResult();\n                }\n                else {\n                    switch (state.status) {\n                        case \"succeeded\":\n                            return poller.getResult();\n                        case \"canceled\":\n                            throw new Error(cancelErrMsg);\n                        case \"failed\":\n                            throw state.error;\n                        case \"notStarted\":\n                        case \"running\":\n                            throw new Error(`Polling completed without succeeding or failing`);\n                    }\n                }\n            })().finally(() => {\n                resultPromise = undefined;\n            }))),\n            async poll(pollOptions) {\n                if (resolveOnUnsuccessful) {\n                    if (poller.isDone())\n                        return;\n                }\n                else {\n                    switch (state.status) {\n                        case \"succeeded\":\n                            return;\n                        case \"canceled\":\n                            throw new Error(cancelErrMsg);\n                        case \"failed\":\n                            throw state.error;\n                    }\n                }\n                await (0,_operation_js__WEBPACK_IMPORTED_MODULE_0__.pollOperation)({\n                    poll,\n                    state,\n                    stateProxy,\n                    getOperationLocation,\n                    isOperationError,\n                    withOperationLocation,\n                    getPollingInterval,\n                    getOperationStatus: getStatusFromPollResponse,\n                    getResourceLocation,\n                    processResult,\n                    getError,\n                    updateState,\n                    options: pollOptions,\n                    setDelay: (pollIntervalInMs) => {\n                        currentPollIntervalInMs = pollIntervalInMs;\n                    },\n                    setErrorAsResult: !resolveOnUnsuccessful,\n                });\n                await handleProgressEvents();\n                if (!resolveOnUnsuccessful) {\n                    switch (state.status) {\n                        case \"canceled\":\n                            throw new Error(cancelErrMsg);\n                        case \"failed\":\n                            throw state.error;\n                    }\n                }\n            },\n        };\n        return poller;\n    };\n}\n//# sourceMappingURL=poller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/poller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_RETRY_POLICY_COUNT: () => (/* binding */ DEFAULT_RETRY_POLICY_COUNT),\n/* harmony export */   SDK_VERSION: () => (/* binding */ SDK_VERSION)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst SDK_VERSION = \"1.16.2\";\nconst DEFAULT_RETRY_POLICY_COUNT = 3;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ087QUFDQTtBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9jb25zdGFudHMuanM/YjZjOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmV4cG9ydCBjb25zdCBTREtfVkVSU0lPTiA9IFwiMS4xNi4yXCI7XG5leHBvcnQgY29uc3QgREVGQVVMVF9SRVRSWV9QT0xJQ1lfQ09VTlQgPSAzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPipelineFromOptions: () => (/* binding */ createPipelineFromOptions)\n/* harmony export */ });\n/* harmony import */ var _policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./policies/logPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js\");\n/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pipeline.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js\");\n/* harmony import */ var _policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./policies/redirectPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js\");\n/* harmony import */ var _policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./policies/userAgentPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js\");\n/* harmony import */ var _policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./policies/multipartPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js\");\n/* harmony import */ var _policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./policies/decompressResponsePolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js\");\n/* harmony import */ var _policies_defaultRetryPolicy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./policies/defaultRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js\");\n/* harmony import */ var _policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./policies/formDataPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./policies/proxyPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js\");\n/* harmony import */ var _policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./policies/setClientRequestIdPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js\");\n/* harmony import */ var _policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./policies/tlsPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js\");\n/* harmony import */ var _policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./policies/tracingPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nfunction createPipelineFromOptions(options) {\n    var _a;\n    const pipeline = (0,_pipeline_js__WEBPACK_IMPORTED_MODULE_1__.createEmptyPipeline)();\n    if (_azure_core_util__WEBPACK_IMPORTED_MODULE_8__.isNodeLike) {\n        if (options.tlsOptions) {\n            pipeline.addPolicy((0,_policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_11__.tlsPolicy)(options.tlsOptions));\n        }\n        pipeline.addPolicy((0,_policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_9__.proxyPolicy)(options.proxyOptions));\n        pipeline.addPolicy((0,_policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_5__.decompressResponsePolicy)());\n    }\n    pipeline.addPolicy((0,_policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_7__.formDataPolicy)(), { beforePolicies: [_policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_4__.multipartPolicyName] });\n    pipeline.addPolicy((0,_policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_3__.userAgentPolicy)(options.userAgentOptions));\n    pipeline.addPolicy((0,_policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_10__.setClientRequestIdPolicy)((_a = options.telemetryOptions) === null || _a === void 0 ? void 0 : _a.clientRequestIdHeaderName));\n    // The multipart policy is added after policies with no phase, so that\n    // policies can be added between it and formDataPolicy to modify\n    // properties (e.g., making the boundary constant in recorded tests).\n    pipeline.addPolicy((0,_policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_4__.multipartPolicy)(), { afterPhase: \"Deserialize\" });\n    pipeline.addPolicy((0,_policies_defaultRetryPolicy_js__WEBPACK_IMPORTED_MODULE_6__.defaultRetryPolicy)(options.retryOptions), { phase: \"Retry\" });\n    pipeline.addPolicy((0,_policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_12__.tracingPolicy)(Object.assign(Object.assign({}, options.userAgentOptions), options.loggingOptions)), {\n        afterPhase: \"Retry\",\n    });\n    if (_azure_core_util__WEBPACK_IMPORTED_MODULE_8__.isNodeLike) {\n        // Both XHR and Fetch expect to handle redirects automatically,\n        // so only include this policy when we're in Node.\n        pipeline.addPolicy((0,_policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_2__.redirectPolicy)(options.redirectOptions), { afterPhase: \"Retry\" });\n    }\n    pipeline.addPolicy((0,_policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_0__.logPolicy)(options.loggingOptions), { afterPhase: \"Sign\" });\n    return pipeline;\n}\n//# sourceMappingURL=createPipelineFromOptions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9jcmVhdGVQaXBlbGluZUZyb21PcHRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNvRDtBQUNBO0FBQ1U7QUFDRTtBQUNxQjtBQUNIO0FBQ1o7QUFDUjtBQUNoQjtBQUNVO0FBQzBCO0FBQzlCO0FBQ1E7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EscUJBQXFCLGlFQUFtQjtBQUN4QyxRQUFRLHdEQUFVO0FBQ2xCO0FBQ0EsK0JBQStCLGtFQUFTO0FBQ3hDO0FBQ0EsMkJBQTJCLHFFQUFXO0FBQ3RDLDJCQUEyQiwrRkFBd0I7QUFDbkQ7QUFDQSx1QkFBdUIsMkVBQWMsTUFBTSxpQkFBaUIsNkVBQW1CLEdBQUc7QUFDbEYsdUJBQXVCLDZFQUFlO0FBQ3RDLHVCQUF1QixnR0FBd0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDZFQUFlLE1BQU0sMkJBQTJCO0FBQ3ZFLHVCQUF1QixtRkFBa0IsMEJBQTBCLGdCQUFnQjtBQUNuRix1QkFBdUIsMEVBQWEsK0JBQStCO0FBQ25FO0FBQ0EsS0FBSztBQUNMLFFBQVEsd0RBQVU7QUFDbEI7QUFDQTtBQUNBLDJCQUEyQiwyRUFBYyw2QkFBNkIscUJBQXFCO0FBQzNGO0FBQ0EsdUJBQXVCLGlFQUFTLDRCQUE0QixvQkFBb0I7QUFDaEY7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9jcmVhdGVQaXBlbGluZUZyb21PcHRpb25zLmpzP2Q3YjAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBsb2dQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9sb2dQb2xpY3kuanNcIjtcbmltcG9ydCB7IGNyZWF0ZUVtcHR5UGlwZWxpbmUgfSBmcm9tIFwiLi9waXBlbGluZS5qc1wiO1xuaW1wb3J0IHsgcmVkaXJlY3RQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9yZWRpcmVjdFBvbGljeS5qc1wiO1xuaW1wb3J0IHsgdXNlckFnZW50UG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvdXNlckFnZW50UG9saWN5LmpzXCI7XG5pbXBvcnQgeyBtdWx0aXBhcnRQb2xpY3ksIG11bHRpcGFydFBvbGljeU5hbWUgfSBmcm9tIFwiLi9wb2xpY2llcy9tdWx0aXBhcnRQb2xpY3kuanNcIjtcbmltcG9ydCB7IGRlY29tcHJlc3NSZXNwb25zZVBvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL2RlY29tcHJlc3NSZXNwb25zZVBvbGljeS5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdFJldHJ5UG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvZGVmYXVsdFJldHJ5UG9saWN5LmpzXCI7XG5pbXBvcnQgeyBmb3JtRGF0YVBvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL2Zvcm1EYXRhUG9saWN5LmpzXCI7XG5pbXBvcnQgeyBpc05vZGVMaWtlIH0gZnJvbSBcIkBhenVyZS9jb3JlLXV0aWxcIjtcbmltcG9ydCB7IHByb3h5UG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvcHJveHlQb2xpY3kuanNcIjtcbmltcG9ydCB7IHNldENsaWVudFJlcXVlc3RJZFBvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL3NldENsaWVudFJlcXVlc3RJZFBvbGljeS5qc1wiO1xuaW1wb3J0IHsgdGxzUG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvdGxzUG9saWN5LmpzXCI7XG5pbXBvcnQgeyB0cmFjaW5nUG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvdHJhY2luZ1BvbGljeS5qc1wiO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgcGlwZWxpbmUgd2l0aCBhIGRlZmF1bHQgc2V0IG9mIGN1c3RvbWl6YWJsZSBwb2xpY2llcy5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBjb25maWd1cmUgYSBjdXN0b20gcGlwZWxpbmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQaXBlbGluZUZyb21PcHRpb25zKG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgcGlwZWxpbmUgPSBjcmVhdGVFbXB0eVBpcGVsaW5lKCk7XG4gICAgaWYgKGlzTm9kZUxpa2UpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMudGxzT3B0aW9ucykge1xuICAgICAgICAgICAgcGlwZWxpbmUuYWRkUG9saWN5KHRsc1BvbGljeShvcHRpb25zLnRsc09wdGlvbnMpKTtcbiAgICAgICAgfVxuICAgICAgICBwaXBlbGluZS5hZGRQb2xpY3kocHJveHlQb2xpY3kob3B0aW9ucy5wcm94eU9wdGlvbnMpKTtcbiAgICAgICAgcGlwZWxpbmUuYWRkUG9saWN5KGRlY29tcHJlc3NSZXNwb25zZVBvbGljeSgpKTtcbiAgICB9XG4gICAgcGlwZWxpbmUuYWRkUG9saWN5KGZvcm1EYXRhUG9saWN5KCksIHsgYmVmb3JlUG9saWNpZXM6IFttdWx0aXBhcnRQb2xpY3lOYW1lXSB9KTtcbiAgICBwaXBlbGluZS5hZGRQb2xpY3kodXNlckFnZW50UG9saWN5KG9wdGlvbnMudXNlckFnZW50T3B0aW9ucykpO1xuICAgIHBpcGVsaW5lLmFkZFBvbGljeShzZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3koKF9hID0gb3B0aW9ucy50ZWxlbWV0cnlPcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2xpZW50UmVxdWVzdElkSGVhZGVyTmFtZSkpO1xuICAgIC8vIFRoZSBtdWx0aXBhcnQgcG9saWN5IGlzIGFkZGVkIGFmdGVyIHBvbGljaWVzIHdpdGggbm8gcGhhc2UsIHNvIHRoYXRcbiAgICAvLyBwb2xpY2llcyBjYW4gYmUgYWRkZWQgYmV0d2VlbiBpdCBhbmQgZm9ybURhdGFQb2xpY3kgdG8gbW9kaWZ5XG4gICAgLy8gcHJvcGVydGllcyAoZS5nLiwgbWFraW5nIHRoZSBib3VuZGFyeSBjb25zdGFudCBpbiByZWNvcmRlZCB0ZXN0cykuXG4gICAgcGlwZWxpbmUuYWRkUG9saWN5KG11bHRpcGFydFBvbGljeSgpLCB7IGFmdGVyUGhhc2U6IFwiRGVzZXJpYWxpemVcIiB9KTtcbiAgICBwaXBlbGluZS5hZGRQb2xpY3koZGVmYXVsdFJldHJ5UG9saWN5KG9wdGlvbnMucmV0cnlPcHRpb25zKSwgeyBwaGFzZTogXCJSZXRyeVwiIH0pO1xuICAgIHBpcGVsaW5lLmFkZFBvbGljeSh0cmFjaW5nUG9saWN5KE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucy51c2VyQWdlbnRPcHRpb25zKSwgb3B0aW9ucy5sb2dnaW5nT3B0aW9ucykpLCB7XG4gICAgICAgIGFmdGVyUGhhc2U6IFwiUmV0cnlcIixcbiAgICB9KTtcbiAgICBpZiAoaXNOb2RlTGlrZSkge1xuICAgICAgICAvLyBCb3RoIFhIUiBhbmQgRmV0Y2ggZXhwZWN0IHRvIGhhbmRsZSByZWRpcmVjdHMgYXV0b21hdGljYWxseSxcbiAgICAgICAgLy8gc28gb25seSBpbmNsdWRlIHRoaXMgcG9saWN5IHdoZW4gd2UncmUgaW4gTm9kZS5cbiAgICAgICAgcGlwZWxpbmUuYWRkUG9saWN5KHJlZGlyZWN0UG9saWN5KG9wdGlvbnMucmVkaXJlY3RPcHRpb25zKSwgeyBhZnRlclBoYXNlOiBcIlJldHJ5XCIgfSk7XG4gICAgfVxuICAgIHBpcGVsaW5lLmFkZFBvbGljeShsb2dQb2xpY3kob3B0aW9ucy5sb2dnaW5nT3B0aW9ucyksIHsgYWZ0ZXJQaGFzZTogXCJTaWduXCIgfSk7XG4gICAgcmV0dXJuIHBpcGVsaW5lO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlUGlwZWxpbmVGcm9tT3B0aW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDefaultHttpClient: () => (/* binding */ createDefaultHttpClient)\n/* harmony export */ });\n/* harmony import */ var _nodeHttpClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodeHttpClient.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/nodeHttpClient.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Create the correct HttpClient for the current environment.\n */\nfunction createDefaultHttpClient() {\n    return (0,_nodeHttpClient_js__WEBPACK_IMPORTED_MODULE_0__.createNodeHttpClient)();\n}\n//# sourceMappingURL=defaultHttpClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9kZWZhdWx0SHR0cENsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLHdFQUFvQjtBQUMvQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9kZWZhdWx0SHR0cENsaWVudC5qcz8wN2EwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlTm9kZUh0dHBDbGllbnQgfSBmcm9tIFwiLi9ub2RlSHR0cENsaWVudC5qc1wiO1xuLyoqXG4gKiBDcmVhdGUgdGhlIGNvcnJlY3QgSHR0cENsaWVudCBmb3IgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0SHR0cENsaWVudCgpIHtcbiAgICByZXR1cm4gY3JlYXRlTm9kZUh0dHBDbGllbnQoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRIdHRwQ2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHttpHeaders: () => (/* binding */ createHttpHeaders)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction normalizeName(name) {\n    return name.toLowerCase();\n}\nfunction* headerIterator(map) {\n    for (const entry of map.values()) {\n        yield [entry.name, entry.value];\n    }\n}\nclass HttpHeadersImpl {\n    constructor(rawHeaders) {\n        this._headersMap = new Map();\n        if (rawHeaders) {\n            for (const headerName of Object.keys(rawHeaders)) {\n                this.set(headerName, rawHeaders[headerName]);\n            }\n        }\n    }\n    /**\n     * Set a header in this collection with the provided name and value. The name is\n     * case-insensitive.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     * @param value - The value of the header to set.\n     */\n    set(name, value) {\n        this._headersMap.set(normalizeName(name), { name, value: String(value).trim() });\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param name - The name of the header. This value is case-insensitive.\n     */\n    get(name) {\n        var _a;\n        return (_a = this._headersMap.get(normalizeName(name))) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     */\n    has(name) {\n        return this._headersMap.has(normalizeName(name));\n    }\n    /**\n     * Remove the header with the provided headerName.\n     * @param name - The name of the header to remove.\n     */\n    delete(name) {\n        this._headersMap.delete(normalizeName(name));\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n    toJSON(options = {}) {\n        const result = {};\n        if (options.preserveCase) {\n            for (const entry of this._headersMap.values()) {\n                result[entry.name] = entry.value;\n            }\n        }\n        else {\n            for (const [normalizedName, entry] of this._headersMap) {\n                result[normalizedName] = entry.value;\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n    toString() {\n        return JSON.stringify(this.toJSON({ preserveCase: true }));\n    }\n    /**\n     * Iterate over tuples of header [name, value] pairs.\n     */\n    [Symbol.iterator]() {\n        return headerIterator(this._headersMap);\n    }\n}\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nfunction createHttpHeaders(rawHeaders) {\n    return new HttpHeadersImpl(rawHeaders);\n}\n//# sourceMappingURL=httpHeaders.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9odHRwSGVhZGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxtQ0FBbUM7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsb0JBQW9CO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9odHRwSGVhZGVycy5qcz8wOGJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKTtcbn1cbmZ1bmN0aW9uKiBoZWFkZXJJdGVyYXRvcihtYXApIHtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIG1hcC52YWx1ZXMoKSkge1xuICAgICAgICB5aWVsZCBbZW50cnkubmFtZSwgZW50cnkudmFsdWVdO1xuICAgIH1cbn1cbmNsYXNzIEh0dHBIZWFkZXJzSW1wbCB7XG4gICAgY29uc3RydWN0b3IocmF3SGVhZGVycykge1xuICAgICAgICB0aGlzLl9oZWFkZXJzTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICBpZiAocmF3SGVhZGVycykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBoZWFkZXJOYW1lIG9mIE9iamVjdC5rZXlzKHJhd0hlYWRlcnMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoaGVhZGVyTmFtZSwgcmF3SGVhZGVyc1toZWFkZXJOYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGEgaGVhZGVyIGluIHRoaXMgY29sbGVjdGlvbiB3aXRoIHRoZSBwcm92aWRlZCBuYW1lIGFuZCB2YWx1ZS4gVGhlIG5hbWUgaXNcbiAgICAgKiBjYXNlLWluc2Vuc2l0aXZlLlxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGhlYWRlciB0byBzZXQuIFRoaXMgdmFsdWUgaXMgY2FzZS1pbnNlbnNpdGl2ZS5cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgb2YgdGhlIGhlYWRlciB0byBzZXQuXG4gICAgICovXG4gICAgc2V0KG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2hlYWRlcnNNYXAuc2V0KG5vcm1hbGl6ZU5hbWUobmFtZSksIHsgbmFtZSwgdmFsdWU6IFN0cmluZyh2YWx1ZSkudHJpbSgpIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGhlYWRlciB2YWx1ZSBmb3IgdGhlIHByb3ZpZGVkIGhlYWRlciBuYW1lLCBvciB1bmRlZmluZWQgaWYgbm8gaGVhZGVyIGV4aXN0cyBpbiB0aGlzXG4gICAgICogY29sbGVjdGlvbiB3aXRoIHRoZSBwcm92aWRlZCBuYW1lLlxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGhlYWRlci4gVGhpcyB2YWx1ZSBpcyBjYXNlLWluc2Vuc2l0aXZlLlxuICAgICAqL1xuICAgIGdldChuYW1lKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuX2hlYWRlcnNNYXAuZ2V0KG5vcm1hbGl6ZU5hbWUobmFtZSkpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB3aGV0aGVyIG9yIG5vdCB0aGlzIGhlYWRlciBjb2xsZWN0aW9uIGNvbnRhaW5zIGEgaGVhZGVyIGVudHJ5IGZvciB0aGUgcHJvdmlkZWQgaGVhZGVyIG5hbWUuXG4gICAgICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgaGVhZGVyIHRvIHNldC4gVGhpcyB2YWx1ZSBpcyBjYXNlLWluc2Vuc2l0aXZlLlxuICAgICAqL1xuICAgIGhhcyhuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oZWFkZXJzTWFwLmhhcyhub3JtYWxpemVOYW1lKG5hbWUpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBoZWFkZXIgd2l0aCB0aGUgcHJvdmlkZWQgaGVhZGVyTmFtZS5cbiAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBoZWFkZXIgdG8gcmVtb3ZlLlxuICAgICAqL1xuICAgIGRlbGV0ZShuYW1lKSB7XG4gICAgICAgIHRoaXMuX2hlYWRlcnNNYXAuZGVsZXRlKG5vcm1hbGl6ZU5hbWUobmFtZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIEpTT04gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgSFRUUCBoZWFkZXIgY29sbGVjdGlvbi5cbiAgICAgKi9cbiAgICB0b0pTT04ob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy5wcmVzZXJ2ZUNhc2UpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgdGhpcy5faGVhZGVyc01hcC52YWx1ZXMoKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtlbnRyeS5uYW1lXSA9IGVudHJ5LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbbm9ybWFsaXplZE5hbWUsIGVudHJ5XSBvZiB0aGlzLl9oZWFkZXJzTWFwKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W25vcm1hbGl6ZWROYW1lXSA9IGVudHJ5LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgSFRUUCBoZWFkZXIgY29sbGVjdGlvbi5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKHsgcHJlc2VydmVDYXNlOiB0cnVlIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSXRlcmF0ZSBvdmVyIHR1cGxlcyBvZiBoZWFkZXIgW25hbWUsIHZhbHVlXSBwYWlycy5cbiAgICAgKi9cbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgcmV0dXJuIGhlYWRlckl0ZXJhdG9yKHRoaXMuX2hlYWRlcnNNYXApO1xuICAgIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBzYXRpc2ZpZXMgdGhlIGBIdHRwSGVhZGVyc2AgaW50ZXJmYWNlLlxuICogQHBhcmFtIHJhd0hlYWRlcnMgLSBBIHNpbXBsZSBvYmplY3QgcmVwcmVzZW50aW5nIGluaXRpYWwgaGVhZGVyc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSHR0cEhlYWRlcnMocmF3SGVhZGVycykge1xuICAgIHJldHVybiBuZXcgSHR0cEhlYWRlcnNJbXBsKHJhd0hlYWRlcnMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHR0cEhlYWRlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RestError: () => (/* reexport safe */ _restError_js__WEBPACK_IMPORTED_MODULE_5__.RestError),\n/* harmony export */   auxiliaryAuthenticationHeaderPolicy: () => (/* reexport safe */ _policies_auxiliaryAuthenticationHeaderPolicy_js__WEBPACK_IMPORTED_MODULE_23__.auxiliaryAuthenticationHeaderPolicy),\n/* harmony export */   auxiliaryAuthenticationHeaderPolicyName: () => (/* reexport safe */ _policies_auxiliaryAuthenticationHeaderPolicy_js__WEBPACK_IMPORTED_MODULE_23__.auxiliaryAuthenticationHeaderPolicyName),\n/* harmony export */   bearerTokenAuthenticationPolicy: () => (/* reexport safe */ _policies_bearerTokenAuthenticationPolicy_js__WEBPACK_IMPORTED_MODULE_21__.bearerTokenAuthenticationPolicy),\n/* harmony export */   bearerTokenAuthenticationPolicyName: () => (/* reexport safe */ _policies_bearerTokenAuthenticationPolicy_js__WEBPACK_IMPORTED_MODULE_21__.bearerTokenAuthenticationPolicyName),\n/* harmony export */   createDefaultHttpClient: () => (/* reexport safe */ _defaultHttpClient_js__WEBPACK_IMPORTED_MODULE_2__.createDefaultHttpClient),\n/* harmony export */   createEmptyPipeline: () => (/* reexport safe */ _pipeline_js__WEBPACK_IMPORTED_MODULE_0__.createEmptyPipeline),\n/* harmony export */   createFile: () => (/* reexport safe */ _util_file_js__WEBPACK_IMPORTED_MODULE_24__.createFile),\n/* harmony export */   createFileFromStream: () => (/* reexport safe */ _util_file_js__WEBPACK_IMPORTED_MODULE_24__.createFileFromStream),\n/* harmony export */   createHttpHeaders: () => (/* reexport safe */ _httpHeaders_js__WEBPACK_IMPORTED_MODULE_3__.createHttpHeaders),\n/* harmony export */   createPipelineFromOptions: () => (/* reexport safe */ _createPipelineFromOptions_js__WEBPACK_IMPORTED_MODULE_1__.createPipelineFromOptions),\n/* harmony export */   createPipelineRequest: () => (/* reexport safe */ _pipelineRequest_js__WEBPACK_IMPORTED_MODULE_4__.createPipelineRequest),\n/* harmony export */   decompressResponsePolicy: () => (/* reexport safe */ _policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_6__.decompressResponsePolicy),\n/* harmony export */   decompressResponsePolicyName: () => (/* reexport safe */ _policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_6__.decompressResponsePolicyName),\n/* harmony export */   defaultRetryPolicy: () => (/* reexport safe */ _policies_defaultRetryPolicy_js__WEBPACK_IMPORTED_MODULE_17__.defaultRetryPolicy),\n/* harmony export */   exponentialRetryPolicy: () => (/* reexport safe */ _policies_exponentialRetryPolicy_js__WEBPACK_IMPORTED_MODULE_7__.exponentialRetryPolicy),\n/* harmony export */   exponentialRetryPolicyName: () => (/* reexport safe */ _policies_exponentialRetryPolicy_js__WEBPACK_IMPORTED_MODULE_7__.exponentialRetryPolicyName),\n/* harmony export */   formDataPolicy: () => (/* reexport safe */ _policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_20__.formDataPolicy),\n/* harmony export */   formDataPolicyName: () => (/* reexport safe */ _policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_20__.formDataPolicyName),\n/* harmony export */   getDefaultProxySettings: () => (/* reexport safe */ _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_11__.getDefaultProxySettings),\n/* harmony export */   isRestError: () => (/* reexport safe */ _restError_js__WEBPACK_IMPORTED_MODULE_5__.isRestError),\n/* harmony export */   logPolicy: () => (/* reexport safe */ _policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_9__.logPolicy),\n/* harmony export */   logPolicyName: () => (/* reexport safe */ _policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_9__.logPolicyName),\n/* harmony export */   multipartPolicy: () => (/* reexport safe */ _policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_10__.multipartPolicy),\n/* harmony export */   multipartPolicyName: () => (/* reexport safe */ _policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_10__.multipartPolicyName),\n/* harmony export */   ndJsonPolicy: () => (/* reexport safe */ _policies_ndJsonPolicy_js__WEBPACK_IMPORTED_MODULE_22__.ndJsonPolicy),\n/* harmony export */   ndJsonPolicyName: () => (/* reexport safe */ _policies_ndJsonPolicy_js__WEBPACK_IMPORTED_MODULE_22__.ndJsonPolicyName),\n/* harmony export */   proxyPolicy: () => (/* reexport safe */ _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_11__.proxyPolicy),\n/* harmony export */   proxyPolicyName: () => (/* reexport safe */ _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_11__.proxyPolicyName),\n/* harmony export */   redirectPolicy: () => (/* reexport safe */ _policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_12__.redirectPolicy),\n/* harmony export */   redirectPolicyName: () => (/* reexport safe */ _policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_12__.redirectPolicyName),\n/* harmony export */   retryPolicy: () => (/* reexport safe */ _policies_retryPolicy_js__WEBPACK_IMPORTED_MODULE_15__.retryPolicy),\n/* harmony export */   setClientRequestIdPolicy: () => (/* reexport safe */ _policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_8__.setClientRequestIdPolicy),\n/* harmony export */   setClientRequestIdPolicyName: () => (/* reexport safe */ _policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_8__.setClientRequestIdPolicyName),\n/* harmony export */   systemErrorRetryPolicy: () => (/* reexport safe */ _policies_systemErrorRetryPolicy_js__WEBPACK_IMPORTED_MODULE_13__.systemErrorRetryPolicy),\n/* harmony export */   systemErrorRetryPolicyName: () => (/* reexport safe */ _policies_systemErrorRetryPolicy_js__WEBPACK_IMPORTED_MODULE_13__.systemErrorRetryPolicyName),\n/* harmony export */   throttlingRetryPolicy: () => (/* reexport safe */ _policies_throttlingRetryPolicy_js__WEBPACK_IMPORTED_MODULE_14__.throttlingRetryPolicy),\n/* harmony export */   throttlingRetryPolicyName: () => (/* reexport safe */ _policies_throttlingRetryPolicy_js__WEBPACK_IMPORTED_MODULE_14__.throttlingRetryPolicyName),\n/* harmony export */   tlsPolicy: () => (/* reexport safe */ _policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_19__.tlsPolicy),\n/* harmony export */   tlsPolicyName: () => (/* reexport safe */ _policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_19__.tlsPolicyName),\n/* harmony export */   tracingPolicy: () => (/* reexport safe */ _policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_16__.tracingPolicy),\n/* harmony export */   tracingPolicyName: () => (/* reexport safe */ _policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_16__.tracingPolicyName),\n/* harmony export */   userAgentPolicy: () => (/* reexport safe */ _policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_18__.userAgentPolicy),\n/* harmony export */   userAgentPolicyName: () => (/* reexport safe */ _policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_18__.userAgentPolicyName)\n/* harmony export */ });\n/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pipeline.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js\");\n/* harmony import */ var _createPipelineFromOptions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createPipelineFromOptions.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js\");\n/* harmony import */ var _defaultHttpClient_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./defaultHttpClient.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js\");\n/* harmony import */ var _httpHeaders_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpHeaders.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js\");\n/* harmony import */ var _pipelineRequest_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pipelineRequest.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js\");\n/* harmony import */ var _restError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./restError.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js\");\n/* harmony import */ var _policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./policies/decompressResponsePolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js\");\n/* harmony import */ var _policies_exponentialRetryPolicy_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./policies/exponentialRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/exponentialRetryPolicy.js\");\n/* harmony import */ var _policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./policies/setClientRequestIdPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js\");\n/* harmony import */ var _policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./policies/logPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js\");\n/* harmony import */ var _policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./policies/multipartPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js\");\n/* harmony import */ var _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./policies/proxyPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js\");\n/* harmony import */ var _policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./policies/redirectPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js\");\n/* harmony import */ var _policies_systemErrorRetryPolicy_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./policies/systemErrorRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/systemErrorRetryPolicy.js\");\n/* harmony import */ var _policies_throttlingRetryPolicy_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./policies/throttlingRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/throttlingRetryPolicy.js\");\n/* harmony import */ var _policies_retryPolicy_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./policies/retryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js\");\n/* harmony import */ var _policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./policies/tracingPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js\");\n/* harmony import */ var _policies_defaultRetryPolicy_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./policies/defaultRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js\");\n/* harmony import */ var _policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./policies/userAgentPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js\");\n/* harmony import */ var _policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./policies/tlsPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js\");\n/* harmony import */ var _policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./policies/formDataPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js\");\n/* harmony import */ var _policies_bearerTokenAuthenticationPolicy_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./policies/bearerTokenAuthenticationPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js\");\n/* harmony import */ var _policies_ndJsonPolicy_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./policies/ndJsonPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/ndJsonPolicy.js\");\n/* harmony import */ var _policies_auxiliaryAuthenticationHeaderPolicy_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./policies/auxiliaryAuthenticationHeaderPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/auxiliaryAuthenticationHeaderPolicy.js\");\n/* harmony import */ var _util_file_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./util/file.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ3FEO0FBQ3VCO0FBQ1g7QUFDWjtBQUNRO0FBQ0w7QUFDeUQ7QUFDTjtBQUNNO0FBQzlDO0FBQ2tCO0FBQ2E7QUFDZjtBQUN3QjtBQUNIO0FBQ2hEO0FBQ3dCO0FBQ1Q7QUFDZTtBQUNuQjtBQUNlO0FBQ29EO0FBQzFEO0FBQ3NFO0FBQy9FO0FBQ25FIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9pbmRleC5qcz9lM2RjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuZXhwb3J0IHsgY3JlYXRlRW1wdHlQaXBlbGluZSwgfSBmcm9tIFwiLi9waXBlbGluZS5qc1wiO1xuZXhwb3J0IHsgY3JlYXRlUGlwZWxpbmVGcm9tT3B0aW9ucywgfSBmcm9tIFwiLi9jcmVhdGVQaXBlbGluZUZyb21PcHRpb25zLmpzXCI7XG5leHBvcnQgeyBjcmVhdGVEZWZhdWx0SHR0cENsaWVudCB9IGZyb20gXCIuL2RlZmF1bHRIdHRwQ2xpZW50LmpzXCI7XG5leHBvcnQgeyBjcmVhdGVIdHRwSGVhZGVycyB9IGZyb20gXCIuL2h0dHBIZWFkZXJzLmpzXCI7XG5leHBvcnQgeyBjcmVhdGVQaXBlbGluZVJlcXVlc3QgfSBmcm9tIFwiLi9waXBlbGluZVJlcXVlc3QuanNcIjtcbmV4cG9ydCB7IFJlc3RFcnJvciwgaXNSZXN0RXJyb3IgfSBmcm9tIFwiLi9yZXN0RXJyb3IuanNcIjtcbmV4cG9ydCB7IGRlY29tcHJlc3NSZXNwb25zZVBvbGljeSwgZGVjb21wcmVzc1Jlc3BvbnNlUG9saWN5TmFtZSwgfSBmcm9tIFwiLi9wb2xpY2llcy9kZWNvbXByZXNzUmVzcG9uc2VQb2xpY3kuanNcIjtcbmV4cG9ydCB7IGV4cG9uZW50aWFsUmV0cnlQb2xpY3ksIGV4cG9uZW50aWFsUmV0cnlQb2xpY3lOYW1lLCB9IGZyb20gXCIuL3BvbGljaWVzL2V4cG9uZW50aWFsUmV0cnlQb2xpY3kuanNcIjtcbmV4cG9ydCB7IHNldENsaWVudFJlcXVlc3RJZFBvbGljeSwgc2V0Q2xpZW50UmVxdWVzdElkUG9saWN5TmFtZSwgfSBmcm9tIFwiLi9wb2xpY2llcy9zZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3kuanNcIjtcbmV4cG9ydCB7IGxvZ1BvbGljeSwgbG9nUG9saWN5TmFtZSB9IGZyb20gXCIuL3BvbGljaWVzL2xvZ1BvbGljeS5qc1wiO1xuZXhwb3J0IHsgbXVsdGlwYXJ0UG9saWN5LCBtdWx0aXBhcnRQb2xpY3lOYW1lIH0gZnJvbSBcIi4vcG9saWNpZXMvbXVsdGlwYXJ0UG9saWN5LmpzXCI7XG5leHBvcnQgeyBwcm94eVBvbGljeSwgcHJveHlQb2xpY3lOYW1lLCBnZXREZWZhdWx0UHJveHlTZXR0aW5ncyB9IGZyb20gXCIuL3BvbGljaWVzL3Byb3h5UG9saWN5LmpzXCI7XG5leHBvcnQgeyByZWRpcmVjdFBvbGljeSwgcmVkaXJlY3RQb2xpY3lOYW1lLCB9IGZyb20gXCIuL3BvbGljaWVzL3JlZGlyZWN0UG9saWN5LmpzXCI7XG5leHBvcnQgeyBzeXN0ZW1FcnJvclJldHJ5UG9saWN5LCBzeXN0ZW1FcnJvclJldHJ5UG9saWN5TmFtZSwgfSBmcm9tIFwiLi9wb2xpY2llcy9zeXN0ZW1FcnJvclJldHJ5UG9saWN5LmpzXCI7XG5leHBvcnQgeyB0aHJvdHRsaW5nUmV0cnlQb2xpY3ksIHRocm90dGxpbmdSZXRyeVBvbGljeU5hbWUsIH0gZnJvbSBcIi4vcG9saWNpZXMvdGhyb3R0bGluZ1JldHJ5UG9saWN5LmpzXCI7XG5leHBvcnQgeyByZXRyeVBvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL3JldHJ5UG9saWN5LmpzXCI7XG5leHBvcnQgeyB0cmFjaW5nUG9saWN5LCB0cmFjaW5nUG9saWN5TmFtZSwgfSBmcm9tIFwiLi9wb2xpY2llcy90cmFjaW5nUG9saWN5LmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0UmV0cnlQb2xpY3ksIH0gZnJvbSBcIi4vcG9saWNpZXMvZGVmYXVsdFJldHJ5UG9saWN5LmpzXCI7XG5leHBvcnQgeyB1c2VyQWdlbnRQb2xpY3ksIHVzZXJBZ2VudFBvbGljeU5hbWUsIH0gZnJvbSBcIi4vcG9saWNpZXMvdXNlckFnZW50UG9saWN5LmpzXCI7XG5leHBvcnQgeyB0bHNQb2xpY3ksIHRsc1BvbGljeU5hbWUgfSBmcm9tIFwiLi9wb2xpY2llcy90bHNQb2xpY3kuanNcIjtcbmV4cG9ydCB7IGZvcm1EYXRhUG9saWN5LCBmb3JtRGF0YVBvbGljeU5hbWUgfSBmcm9tIFwiLi9wb2xpY2llcy9mb3JtRGF0YVBvbGljeS5qc1wiO1xuZXhwb3J0IHsgYmVhcmVyVG9rZW5BdXRoZW50aWNhdGlvblBvbGljeSwgYmVhcmVyVG9rZW5BdXRoZW50aWNhdGlvblBvbGljeU5hbWUsIH0gZnJvbSBcIi4vcG9saWNpZXMvYmVhcmVyVG9rZW5BdXRoZW50aWNhdGlvblBvbGljeS5qc1wiO1xuZXhwb3J0IHsgbmRKc29uUG9saWN5LCBuZEpzb25Qb2xpY3lOYW1lIH0gZnJvbSBcIi4vcG9saWNpZXMvbmRKc29uUG9saWN5LmpzXCI7XG5leHBvcnQgeyBhdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeSwgYXV4aWxpYXJ5QXV0aGVudGljYXRpb25IZWFkZXJQb2xpY3lOYW1lLCB9IGZyb20gXCIuL3BvbGljaWVzL2F1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5LmpzXCI7XG5leHBvcnQgeyBjcmVhdGVGaWxlLCBjcmVhdGVGaWxlRnJvbVN0cmVhbSwgfSBmcm9tIFwiLi91dGlsL2ZpbGUuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/log.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst logger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_0__.createClientLogger)(\"core-rest-pipeline\");\n//# sourceMappingURL=log.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9sb2cuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ21EO0FBQzVDLGVBQWUsaUVBQWtCO0FBQ3hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9sb2cuanM/YjIxMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZUNsaWVudExvZ2dlciB9IGZyb20gXCJAYXp1cmUvbG9nZ2VyXCI7XG5leHBvcnQgY29uc3QgbG9nZ2VyID0gY3JlYXRlQ2xpZW50TG9nZ2VyKFwiY29yZS1yZXN0LXBpcGVsaW5lXCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/nodeHttpClient.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/nodeHttpClient.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNodeHttpClient: () => (/* binding */ createNodeHttpClient),\n/* harmony export */   getBodyLength: () => (/* binding */ getBodyLength)\n/* harmony export */ });\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:http */ \"node:http\");\n/* harmony import */ var node_https__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:https */ \"node:https\");\n/* harmony import */ var node_zlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:zlib */ \"node:zlib\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/esm/index.js\");\n/* harmony import */ var _httpHeaders_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./httpHeaders.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js\");\n/* harmony import */ var _restError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./restError.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\nconst DEFAULT_TLS_SETTINGS = {};\nfunction isReadableStream(body) {\n    return body && typeof body.pipe === \"function\";\n}\nfunction isStreamComplete(stream) {\n    return new Promise((resolve) => {\n        stream.on(\"close\", resolve);\n        stream.on(\"end\", resolve);\n        stream.on(\"error\", resolve);\n    });\n}\nfunction isArrayBuffer(body) {\n    return body && typeof body.byteLength === \"number\";\n}\nclass ReportTransform extends node_stream__WEBPACK_IMPORTED_MODULE_3__.Transform {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    _transform(chunk, _encoding, callback) {\n        this.push(chunk);\n        this.loadedBytes += chunk.length;\n        try {\n            this.progressCallback({ loadedBytes: this.loadedBytes });\n            callback();\n        }\n        catch (e) {\n            callback(e);\n        }\n    }\n    constructor(progressCallback) {\n        super();\n        this.loadedBytes = 0;\n        this.progressCallback = progressCallback;\n    }\n}\n/**\n * A HttpClient implementation that uses Node's \"https\" module to send HTTPS requests.\n * @internal\n */\nclass NodeHttpClient {\n    constructor() {\n        this.cachedHttpsAgents = new WeakMap();\n    }\n    /**\n     * Makes a request over an underlying transport layer and returns the response.\n     * @param request - The request to be made.\n     */\n    async sendRequest(request) {\n        var _a, _b, _c;\n        const abortController = new AbortController();\n        let abortListener;\n        if (request.abortSignal) {\n            if (request.abortSignal.aborted) {\n                throw new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_4__.AbortError(\"The operation was aborted.\");\n            }\n            abortListener = (event) => {\n                if (event.type === \"abort\") {\n                    abortController.abort();\n                }\n            };\n            request.abortSignal.addEventListener(\"abort\", abortListener);\n        }\n        if (request.timeout > 0) {\n            setTimeout(() => {\n                abortController.abort();\n            }, request.timeout);\n        }\n        const acceptEncoding = request.headers.get(\"Accept-Encoding\");\n        const shouldDecompress = (acceptEncoding === null || acceptEncoding === void 0 ? void 0 : acceptEncoding.includes(\"gzip\")) || (acceptEncoding === null || acceptEncoding === void 0 ? void 0 : acceptEncoding.includes(\"deflate\"));\n        let body = typeof request.body === \"function\" ? request.body() : request.body;\n        if (body && !request.headers.has(\"Content-Length\")) {\n            const bodyLength = getBodyLength(body);\n            if (bodyLength !== null) {\n                request.headers.set(\"Content-Length\", bodyLength);\n            }\n        }\n        let responseStream;\n        try {\n            if (body && request.onUploadProgress) {\n                const onUploadProgress = request.onUploadProgress;\n                const uploadReportStream = new ReportTransform(onUploadProgress);\n                uploadReportStream.on(\"error\", (e) => {\n                    _log_js__WEBPACK_IMPORTED_MODULE_7__.logger.error(\"Error in upload progress\", e);\n                });\n                if (isReadableStream(body)) {\n                    body.pipe(uploadReportStream);\n                }\n                else {\n                    uploadReportStream.end(body);\n                }\n                body = uploadReportStream;\n            }\n            const res = await this.makeRequest(request, abortController, body);\n            const headers = getResponseHeaders(res);\n            const status = (_a = res.statusCode) !== null && _a !== void 0 ? _a : 0;\n            const response = {\n                status,\n                headers,\n                request,\n            };\n            // Responses to HEAD must not have a body.\n            // If they do return a body, that body must be ignored.\n            if (request.method === \"HEAD\") {\n                // call resume() and not destroy() to avoid closing the socket\n                // and losing keep alive\n                res.resume();\n                return response;\n            }\n            responseStream = shouldDecompress ? getDecodedResponseStream(res, headers) : res;\n            const onDownloadProgress = request.onDownloadProgress;\n            if (onDownloadProgress) {\n                const downloadReportStream = new ReportTransform(onDownloadProgress);\n                downloadReportStream.on(\"error\", (e) => {\n                    _log_js__WEBPACK_IMPORTED_MODULE_7__.logger.error(\"Error in download progress\", e);\n                });\n                responseStream.pipe(downloadReportStream);\n                responseStream = downloadReportStream;\n            }\n            if (\n            // Value of POSITIVE_INFINITY in streamResponseStatusCodes is considered as any status code\n            ((_b = request.streamResponseStatusCodes) === null || _b === void 0 ? void 0 : _b.has(Number.POSITIVE_INFINITY)) ||\n                ((_c = request.streamResponseStatusCodes) === null || _c === void 0 ? void 0 : _c.has(response.status))) {\n                response.readableStreamBody = responseStream;\n            }\n            else {\n                response.bodyAsText = await streamToText(responseStream);\n            }\n            return response;\n        }\n        finally {\n            // clean up event listener\n            if (request.abortSignal && abortListener) {\n                let uploadStreamDone = Promise.resolve();\n                if (isReadableStream(body)) {\n                    uploadStreamDone = isStreamComplete(body);\n                }\n                let downloadStreamDone = Promise.resolve();\n                if (isReadableStream(responseStream)) {\n                    downloadStreamDone = isStreamComplete(responseStream);\n                }\n                Promise.all([uploadStreamDone, downloadStreamDone])\n                    .then(() => {\n                    var _a;\n                    // eslint-disable-next-line promise/always-return\n                    if (abortListener) {\n                        (_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.removeEventListener(\"abort\", abortListener);\n                    }\n                })\n                    .catch((e) => {\n                    _log_js__WEBPACK_IMPORTED_MODULE_7__.logger.warning(\"Error when cleaning up abortListener on httpRequest\", e);\n                });\n            }\n        }\n    }\n    makeRequest(request, abortController, body) {\n        var _a;\n        const url = new URL(request.url);\n        const isInsecure = url.protocol !== \"https:\";\n        if (isInsecure && !request.allowInsecureConnection) {\n            throw new Error(`Cannot connect to ${request.url} while allowInsecureConnection is false.`);\n        }\n        const agent = (_a = request.agent) !== null && _a !== void 0 ? _a : this.getOrCreateAgent(request, isInsecure);\n        const options = {\n            agent,\n            hostname: url.hostname,\n            path: `${url.pathname}${url.search}`,\n            port: url.port,\n            method: request.method,\n            headers: request.headers.toJSON({ preserveCase: true }),\n        };\n        return new Promise((resolve, reject) => {\n            const req = isInsecure ? node_http__WEBPACK_IMPORTED_MODULE_0__.request(options, resolve) : node_https__WEBPACK_IMPORTED_MODULE_1__.request(options, resolve);\n            req.once(\"error\", (err) => {\n                var _a;\n                reject(new _restError_js__WEBPACK_IMPORTED_MODULE_6__.RestError(err.message, { code: (_a = err.code) !== null && _a !== void 0 ? _a : _restError_js__WEBPACK_IMPORTED_MODULE_6__.RestError.REQUEST_SEND_ERROR, request }));\n            });\n            abortController.signal.addEventListener(\"abort\", () => {\n                const abortError = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_4__.AbortError(\"The operation was aborted.\");\n                req.destroy(abortError);\n                reject(abortError);\n            });\n            if (body && isReadableStream(body)) {\n                body.pipe(req);\n            }\n            else if (body) {\n                if (typeof body === \"string\" || Buffer.isBuffer(body)) {\n                    req.end(body);\n                }\n                else if (isArrayBuffer(body)) {\n                    req.end(ArrayBuffer.isView(body) ? Buffer.from(body.buffer) : Buffer.from(body));\n                }\n                else {\n                    _log_js__WEBPACK_IMPORTED_MODULE_7__.logger.error(\"Unrecognized body type\", body);\n                    reject(new _restError_js__WEBPACK_IMPORTED_MODULE_6__.RestError(\"Unrecognized body type\"));\n                }\n            }\n            else {\n                // streams don't like \"undefined\" being passed as data\n                req.end();\n            }\n        });\n    }\n    getOrCreateAgent(request, isInsecure) {\n        var _a;\n        const disableKeepAlive = request.disableKeepAlive;\n        // Handle Insecure requests first\n        if (isInsecure) {\n            if (disableKeepAlive) {\n                // keepAlive:false is the default so we don't need a custom Agent\n                return node_http__WEBPACK_IMPORTED_MODULE_0__.globalAgent;\n            }\n            if (!this.cachedHttpAgent) {\n                // If there is no cached agent create a new one and cache it.\n                this.cachedHttpAgent = new node_http__WEBPACK_IMPORTED_MODULE_0__.Agent({ keepAlive: true });\n            }\n            return this.cachedHttpAgent;\n        }\n        else {\n            if (disableKeepAlive && !request.tlsSettings) {\n                // When there are no tlsSettings and keepAlive is false\n                // we don't need a custom agent\n                return node_https__WEBPACK_IMPORTED_MODULE_1__.globalAgent;\n            }\n            // We use the tlsSettings to index cached clients\n            const tlsSettings = (_a = request.tlsSettings) !== null && _a !== void 0 ? _a : DEFAULT_TLS_SETTINGS;\n            // Get the cached agent or create a new one with the\n            // provided values for keepAlive and tlsSettings\n            let agent = this.cachedHttpsAgents.get(tlsSettings);\n            if (agent && agent.options.keepAlive === !disableKeepAlive) {\n                return agent;\n            }\n            _log_js__WEBPACK_IMPORTED_MODULE_7__.logger.info(\"No cached TLS Agent exist, creating a new Agent\");\n            agent = new node_https__WEBPACK_IMPORTED_MODULE_1__.Agent(Object.assign({ \n                // keepAlive is true if disableKeepAlive is false.\n                keepAlive: !disableKeepAlive }, tlsSettings));\n            this.cachedHttpsAgents.set(tlsSettings, agent);\n            return agent;\n        }\n    }\n}\nfunction getResponseHeaders(res) {\n    const headers = (0,_httpHeaders_js__WEBPACK_IMPORTED_MODULE_5__.createHttpHeaders)();\n    for (const header of Object.keys(res.headers)) {\n        const value = res.headers[header];\n        if (Array.isArray(value)) {\n            if (value.length > 0) {\n                headers.set(header, value[0]);\n            }\n        }\n        else if (value) {\n            headers.set(header, value);\n        }\n    }\n    return headers;\n}\nfunction getDecodedResponseStream(stream, headers) {\n    const contentEncoding = headers.get(\"Content-Encoding\");\n    if (contentEncoding === \"gzip\") {\n        const unzip = node_zlib__WEBPACK_IMPORTED_MODULE_2__.createGunzip();\n        stream.pipe(unzip);\n        return unzip;\n    }\n    else if (contentEncoding === \"deflate\") {\n        const inflate = node_zlib__WEBPACK_IMPORTED_MODULE_2__.createInflate();\n        stream.pipe(inflate);\n        return inflate;\n    }\n    return stream;\n}\nfunction streamToText(stream) {\n    return new Promise((resolve, reject) => {\n        const buffer = [];\n        stream.on(\"data\", (chunk) => {\n            if (Buffer.isBuffer(chunk)) {\n                buffer.push(chunk);\n            }\n            else {\n                buffer.push(Buffer.from(chunk));\n            }\n        });\n        stream.on(\"end\", () => {\n            resolve(Buffer.concat(buffer).toString(\"utf8\"));\n        });\n        stream.on(\"error\", (e) => {\n            if (e && (e === null || e === void 0 ? void 0 : e.name) === \"AbortError\") {\n                reject(e);\n            }\n            else {\n                reject(new _restError_js__WEBPACK_IMPORTED_MODULE_6__.RestError(`Error reading response as text: ${e.message}`, {\n                    code: _restError_js__WEBPACK_IMPORTED_MODULE_6__.RestError.PARSE_ERROR,\n                }));\n            }\n        });\n    });\n}\n/** @internal */\nfunction getBodyLength(body) {\n    if (!body) {\n        return 0;\n    }\n    else if (Buffer.isBuffer(body)) {\n        return body.length;\n    }\n    else if (isReadableStream(body)) {\n        return null;\n    }\n    else if (isArrayBuffer(body)) {\n        return body.byteLength;\n    }\n    else if (typeof body === \"string\") {\n        return Buffer.from(body).length;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Create a new HttpClient instance for the NodeJS environment.\n * @internal\n */\nfunction createNodeHttpClient() {\n    return new NodeHttpClient();\n}\n//# sourceMappingURL=nodeHttpClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/nodeHttpClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEmptyPipeline: () => (/* binding */ createEmptyPipeline)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst ValidPhaseNames = new Set([\"Deserialize\", \"Serialize\", \"Retry\", \"Sign\"]);\n/**\n * A private implementation of Pipeline.\n * Do not export this class from the package.\n * @internal\n */\nclass HttpPipeline {\n    constructor(policies) {\n        var _a;\n        this._policies = [];\n        this._policies = (_a = policies === null || policies === void 0 ? void 0 : policies.slice(0)) !== null && _a !== void 0 ? _a : [];\n        this._orderedPolicies = undefined;\n    }\n    addPolicy(policy, options = {}) {\n        if (options.phase && options.afterPhase) {\n            throw new Error(\"Policies inside a phase cannot specify afterPhase.\");\n        }\n        if (options.phase && !ValidPhaseNames.has(options.phase)) {\n            throw new Error(`Invalid phase name: ${options.phase}`);\n        }\n        if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) {\n            throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);\n        }\n        this._policies.push({\n            policy,\n            options,\n        });\n        this._orderedPolicies = undefined;\n    }\n    removePolicy(options) {\n        const removedPolicies = [];\n        this._policies = this._policies.filter((policyDescriptor) => {\n            if ((options.name && policyDescriptor.policy.name === options.name) ||\n                (options.phase && policyDescriptor.options.phase === options.phase)) {\n                removedPolicies.push(policyDescriptor.policy);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n        this._orderedPolicies = undefined;\n        return removedPolicies;\n    }\n    sendRequest(httpClient, request) {\n        const policies = this.getOrderedPolicies();\n        const pipeline = policies.reduceRight((next, policy) => {\n            return (req) => {\n                return policy.sendRequest(req, next);\n            };\n        }, (req) => httpClient.sendRequest(req));\n        return pipeline(request);\n    }\n    getOrderedPolicies() {\n        if (!this._orderedPolicies) {\n            this._orderedPolicies = this.orderPolicies();\n        }\n        return this._orderedPolicies;\n    }\n    clone() {\n        return new HttpPipeline(this._policies);\n    }\n    static create() {\n        return new HttpPipeline();\n    }\n    orderPolicies() {\n        /**\n         * The goal of this method is to reliably order pipeline policies\n         * based on their declared requirements when they were added.\n         *\n         * Order is first determined by phase:\n         *\n         * 1. Serialize Phase\n         * 2. Policies not in a phase\n         * 3. Deserialize Phase\n         * 4. Retry Phase\n         * 5. Sign Phase\n         *\n         * Within each phase, policies are executed in the order\n         * they were added unless they were specified to execute\n         * before/after other policies or after a particular phase.\n         *\n         * To determine the final order, we will walk the policy list\n         * in phase order multiple times until all dependencies are\n         * satisfied.\n         *\n         * `afterPolicies` are the set of policies that must be\n         * executed before a given policy. This requirement is\n         * considered satisfied when each of the listed policies\n         * have been scheduled.\n         *\n         * `beforePolicies` are the set of policies that must be\n         * executed after a given policy. Since this dependency\n         * can be expressed by converting it into a equivalent\n         * `afterPolicies` declarations, they are normalized\n         * into that form for simplicity.\n         *\n         * An `afterPhase` dependency is considered satisfied when all\n         * policies in that phase have scheduled.\n         *\n         */\n        const result = [];\n        // Track all policies we know about.\n        const policyMap = new Map();\n        function createPhase(name) {\n            return {\n                name,\n                policies: new Set(),\n                hasRun: false,\n                hasAfterPolicies: false,\n            };\n        }\n        // Track policies for each phase.\n        const serializePhase = createPhase(\"Serialize\");\n        const noPhase = createPhase(\"None\");\n        const deserializePhase = createPhase(\"Deserialize\");\n        const retryPhase = createPhase(\"Retry\");\n        const signPhase = createPhase(\"Sign\");\n        // a list of phases in order\n        const orderedPhases = [serializePhase, noPhase, deserializePhase, retryPhase, signPhase];\n        // Small helper function to map phase name to each Phase\n        function getPhase(phase) {\n            if (phase === \"Retry\") {\n                return retryPhase;\n            }\n            else if (phase === \"Serialize\") {\n                return serializePhase;\n            }\n            else if (phase === \"Deserialize\") {\n                return deserializePhase;\n            }\n            else if (phase === \"Sign\") {\n                return signPhase;\n            }\n            else {\n                return noPhase;\n            }\n        }\n        // First walk each policy and create a node to track metadata.\n        for (const descriptor of this._policies) {\n            const policy = descriptor.policy;\n            const options = descriptor.options;\n            const policyName = policy.name;\n            if (policyMap.has(policyName)) {\n                throw new Error(\"Duplicate policy names not allowed in pipeline\");\n            }\n            const node = {\n                policy,\n                dependsOn: new Set(),\n                dependants: new Set(),\n            };\n            if (options.afterPhase) {\n                node.afterPhase = getPhase(options.afterPhase);\n                node.afterPhase.hasAfterPolicies = true;\n            }\n            policyMap.set(policyName, node);\n            const phase = getPhase(options.phase);\n            phase.policies.add(node);\n        }\n        // Now that each policy has a node, connect dependency references.\n        for (const descriptor of this._policies) {\n            const { policy, options } = descriptor;\n            const policyName = policy.name;\n            const node = policyMap.get(policyName);\n            if (!node) {\n                throw new Error(`Missing node for policy ${policyName}`);\n            }\n            if (options.afterPolicies) {\n                for (const afterPolicyName of options.afterPolicies) {\n                    const afterNode = policyMap.get(afterPolicyName);\n                    if (afterNode) {\n                        // Linking in both directions helps later\n                        // when we want to notify dependants.\n                        node.dependsOn.add(afterNode);\n                        afterNode.dependants.add(node);\n                    }\n                }\n            }\n            if (options.beforePolicies) {\n                for (const beforePolicyName of options.beforePolicies) {\n                    const beforeNode = policyMap.get(beforePolicyName);\n                    if (beforeNode) {\n                        // To execute before another node, make it\n                        // depend on the current node.\n                        beforeNode.dependsOn.add(node);\n                        node.dependants.add(beforeNode);\n                    }\n                }\n            }\n        }\n        function walkPhase(phase) {\n            phase.hasRun = true;\n            // Sets iterate in insertion order\n            for (const node of phase.policies) {\n                if (node.afterPhase && (!node.afterPhase.hasRun || node.afterPhase.policies.size)) {\n                    // If this node is waiting on a phase to complete,\n                    // we need to skip it for now.\n                    // Even if the phase is empty, we should wait for it\n                    // to be walked to avoid re-ordering policies.\n                    continue;\n                }\n                if (node.dependsOn.size === 0) {\n                    // If there's nothing else we're waiting for, we can\n                    // add this policy to the result list.\n                    result.push(node.policy);\n                    // Notify anything that depends on this policy that\n                    // the policy has been scheduled.\n                    for (const dependant of node.dependants) {\n                        dependant.dependsOn.delete(node);\n                    }\n                    policyMap.delete(node.policy.name);\n                    phase.policies.delete(node);\n                }\n            }\n        }\n        function walkPhases() {\n            for (const phase of orderedPhases) {\n                walkPhase(phase);\n                // if the phase isn't complete\n                if (phase.policies.size > 0 && phase !== noPhase) {\n                    if (!noPhase.hasRun) {\n                        // Try running noPhase to see if that unblocks this phase next tick.\n                        // This can happen if a phase that happens before noPhase\n                        // is waiting on a noPhase policy to complete.\n                        walkPhase(noPhase);\n                    }\n                    // Don't proceed to the next phase until this phase finishes.\n                    return;\n                }\n                if (phase.hasAfterPolicies) {\n                    // Run any policies unblocked by this phase\n                    walkPhase(noPhase);\n                }\n            }\n        }\n        // Iterate until we've put every node in the result list.\n        let iteration = 0;\n        while (policyMap.size > 0) {\n            iteration++;\n            const initialResultLength = result.length;\n            // Keep walking each phase in order until we can order every node.\n            walkPhases();\n            // The result list *should* get at least one larger each time\n            // after the first full pass.\n            // Otherwise, we're going to loop forever.\n            if (result.length <= initialResultLength && iteration > 1) {\n                throw new Error(\"Cannot satisfy policy dependencies due to requirements cycle.\");\n            }\n        }\n        return result;\n    }\n}\n/**\n * Creates a totally empty pipeline.\n * Useful for testing or creating a custom one.\n */\nfunction createEmptyPipeline() {\n    return HttpPipeline.create();\n}\n//# sourceMappingURL=pipeline.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPipelineRequest: () => (/* binding */ createPipelineRequest)\n/* harmony export */ });\n/* harmony import */ var _httpHeaders_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./httpHeaders.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\nclass PipelineRequestImpl {\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        this.url = options.url;\n        this.body = options.body;\n        this.headers = (_a = options.headers) !== null && _a !== void 0 ? _a : (0,_httpHeaders_js__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)();\n        this.method = (_b = options.method) !== null && _b !== void 0 ? _b : \"GET\";\n        this.timeout = (_c = options.timeout) !== null && _c !== void 0 ? _c : 0;\n        this.multipartBody = options.multipartBody;\n        this.formData = options.formData;\n        this.disableKeepAlive = (_d = options.disableKeepAlive) !== null && _d !== void 0 ? _d : false;\n        this.proxySettings = options.proxySettings;\n        this.streamResponseStatusCodes = options.streamResponseStatusCodes;\n        this.withCredentials = (_e = options.withCredentials) !== null && _e !== void 0 ? _e : false;\n        this.abortSignal = options.abortSignal;\n        this.tracingOptions = options.tracingOptions;\n        this.onUploadProgress = options.onUploadProgress;\n        this.onDownloadProgress = options.onDownloadProgress;\n        this.requestId = options.requestId || (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.randomUUID)();\n        this.allowInsecureConnection = (_f = options.allowInsecureConnection) !== null && _f !== void 0 ? _f : false;\n        this.enableBrowserStreams = (_g = options.enableBrowserStreams) !== null && _g !== void 0 ? _g : false;\n    }\n}\n/**\n * Creates a new pipeline request with the given options.\n * This method is to allow for the easy setting of default values and not required.\n * @param options - The options to create the request with.\n */\nfunction createPipelineRequest(options) {\n    return new PipelineRequestImpl(options);\n}\n//# sourceMappingURL=pipelineRequest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9waXBlbGluZVJlcXVlc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNxRDtBQUNQO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0Usa0VBQWlCO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyw0REFBVTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcGlwZWxpbmVSZXF1ZXN0LmpzPzViODAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVIdHRwSGVhZGVycyB9IGZyb20gXCIuL2h0dHBIZWFkZXJzLmpzXCI7XG5pbXBvcnQgeyByYW5kb21VVUlEIH0gZnJvbSBcIkBhenVyZS9jb3JlLXV0aWxcIjtcbmNsYXNzIFBpcGVsaW5lUmVxdWVzdEltcGwge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nO1xuICAgICAgICB0aGlzLnVybCA9IG9wdGlvbnMudXJsO1xuICAgICAgICB0aGlzLmJvZHkgPSBvcHRpb25zLmJvZHk7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IChfYSA9IG9wdGlvbnMuaGVhZGVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY3JlYXRlSHR0cEhlYWRlcnMoKTtcbiAgICAgICAgdGhpcy5tZXRob2QgPSAoX2IgPSBvcHRpb25zLm1ldGhvZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJHRVRcIjtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gKF9jID0gb3B0aW9ucy50aW1lb3V0KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAwO1xuICAgICAgICB0aGlzLm11bHRpcGFydEJvZHkgPSBvcHRpb25zLm11bHRpcGFydEJvZHk7XG4gICAgICAgIHRoaXMuZm9ybURhdGEgPSBvcHRpb25zLmZvcm1EYXRhO1xuICAgICAgICB0aGlzLmRpc2FibGVLZWVwQWxpdmUgPSAoX2QgPSBvcHRpb25zLmRpc2FibGVLZWVwQWxpdmUpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IGZhbHNlO1xuICAgICAgICB0aGlzLnByb3h5U2V0dGluZ3MgPSBvcHRpb25zLnByb3h5U2V0dGluZ3M7XG4gICAgICAgIHRoaXMuc3RyZWFtUmVzcG9uc2VTdGF0dXNDb2RlcyA9IG9wdGlvbnMuc3RyZWFtUmVzcG9uc2VTdGF0dXNDb2RlcztcbiAgICAgICAgdGhpcy53aXRoQ3JlZGVudGlhbHMgPSAoX2UgPSBvcHRpb25zLndpdGhDcmVkZW50aWFscykgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogZmFsc2U7XG4gICAgICAgIHRoaXMuYWJvcnRTaWduYWwgPSBvcHRpb25zLmFib3J0U2lnbmFsO1xuICAgICAgICB0aGlzLnRyYWNpbmdPcHRpb25zID0gb3B0aW9ucy50cmFjaW5nT3B0aW9ucztcbiAgICAgICAgdGhpcy5vblVwbG9hZFByb2dyZXNzID0gb3B0aW9ucy5vblVwbG9hZFByb2dyZXNzO1xuICAgICAgICB0aGlzLm9uRG93bmxvYWRQcm9ncmVzcyA9IG9wdGlvbnMub25Eb3dubG9hZFByb2dyZXNzO1xuICAgICAgICB0aGlzLnJlcXVlc3RJZCA9IG9wdGlvbnMucmVxdWVzdElkIHx8IHJhbmRvbVVVSUQoKTtcbiAgICAgICAgdGhpcy5hbGxvd0luc2VjdXJlQ29ubmVjdGlvbiA9IChfZiA9IG9wdGlvbnMuYWxsb3dJbnNlY3VyZUNvbm5lY3Rpb24pICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IGZhbHNlO1xuICAgICAgICB0aGlzLmVuYWJsZUJyb3dzZXJTdHJlYW1zID0gKF9nID0gb3B0aW9ucy5lbmFibGVCcm93c2VyU3RyZWFtcykgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogZmFsc2U7XG4gICAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHBpcGVsaW5lIHJlcXVlc3Qgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9ucy5cbiAqIFRoaXMgbWV0aG9kIGlzIHRvIGFsbG93IGZvciB0aGUgZWFzeSBzZXR0aW5nIG9mIGRlZmF1bHQgdmFsdWVzIGFuZCBub3QgcmVxdWlyZWQuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIHRvIGNyZWF0ZSB0aGUgcmVxdWVzdCB3aXRoLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUGlwZWxpbmVSZXF1ZXN0KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFBpcGVsaW5lUmVxdWVzdEltcGwob3B0aW9ucyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlbGluZVJlcXVlc3QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/auxiliaryAuthenticationHeaderPolicy.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/auxiliaryAuthenticationHeaderPolicy.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auxiliaryAuthenticationHeaderPolicy: () => (/* binding */ auxiliaryAuthenticationHeaderPolicy),\n/* harmony export */   auxiliaryAuthenticationHeaderPolicyName: () => (/* binding */ auxiliaryAuthenticationHeaderPolicyName)\n/* harmony export */ });\n/* harmony import */ var _util_tokenCycler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/tokenCycler.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * The programmatic identifier of the auxiliaryAuthenticationHeaderPolicy.\n */\nconst auxiliaryAuthenticationHeaderPolicyName = \"auxiliaryAuthenticationHeaderPolicy\";\nconst AUTHORIZATION_AUXILIARY_HEADER = \"x-ms-authorization-auxiliary\";\nasync function sendAuthorizeRequest(options) {\n    var _a, _b;\n    const { scopes, getAccessToken, request } = options;\n    const getTokenOptions = {\n        abortSignal: request.abortSignal,\n        tracingOptions: request.tracingOptions,\n    };\n    return (_b = (_a = (await getAccessToken(scopes, getTokenOptions))) === null || _a === void 0 ? void 0 : _a.token) !== null && _b !== void 0 ? _b : \"\";\n}\n/**\n * A policy for external tokens to `x-ms-authorization-auxiliary` header.\n * This header will be used when creating a cross-tenant application we may need to handle authentication requests\n * for resources that are in different tenants.\n * You could see [ARM docs](https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/authenticate-multi-tenant) for a rundown of how this feature works\n */\nfunction auxiliaryAuthenticationHeaderPolicy(options) {\n    const { credentials, scopes } = options;\n    const logger = options.logger || _log_js__WEBPACK_IMPORTED_MODULE_1__.logger;\n    const tokenCyclerMap = new WeakMap();\n    return {\n        name: auxiliaryAuthenticationHeaderPolicyName,\n        async sendRequest(request, next) {\n            if (!request.url.toLowerCase().startsWith(\"https://\")) {\n                throw new Error(\"Bearer token authentication for auxiliary header is not permitted for non-TLS protected (non-https) URLs.\");\n            }\n            if (!credentials || credentials.length === 0) {\n                logger.info(`${auxiliaryAuthenticationHeaderPolicyName} header will not be set due to empty credentials.`);\n                return next(request);\n            }\n            const tokenPromises = [];\n            for (const credential of credentials) {\n                let getAccessToken = tokenCyclerMap.get(credential);\n                if (!getAccessToken) {\n                    getAccessToken = (0,_util_tokenCycler_js__WEBPACK_IMPORTED_MODULE_0__.createTokenCycler)(credential);\n                    tokenCyclerMap.set(credential, getAccessToken);\n                }\n                tokenPromises.push(sendAuthorizeRequest({\n                    scopes: Array.isArray(scopes) ? scopes : [scopes],\n                    request,\n                    getAccessToken,\n                    logger,\n                }));\n            }\n            const auxiliaryTokens = (await Promise.all(tokenPromises)).filter((token) => Boolean(token));\n            if (auxiliaryTokens.length === 0) {\n                logger.warning(`None of the auxiliary tokens are valid. ${AUTHORIZATION_AUXILIARY_HEADER} header will not be set.`);\n                return next(request);\n            }\n            request.headers.set(AUTHORIZATION_AUXILIARY_HEADER, auxiliaryTokens.map((token) => `Bearer ${token}`).join(\", \"));\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=auxiliaryAuthenticationHeaderPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9hdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUMyRDtBQUNWO0FBQ2pEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsWUFBWSxrQ0FBa0M7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLHNCQUFzQjtBQUNsQyxxQ0FBcUMsMkNBQVU7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQix5Q0FBeUM7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLHVFQUFpQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsZ0NBQWdDO0FBQzFHO0FBQ0E7QUFDQSx5R0FBeUcsTUFBTTtBQUMvRztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3BvbGljaWVzL2F1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5LmpzP2MyNjEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVUb2tlbkN5Y2xlciB9IGZyb20gXCIuLi91dGlsL3Rva2VuQ3ljbGVyLmpzXCI7XG5pbXBvcnQgeyBsb2dnZXIgYXMgY29yZUxvZ2dlciB9IGZyb20gXCIuLi9sb2cuanNcIjtcbi8qKlxuICogVGhlIHByb2dyYW1tYXRpYyBpZGVudGlmaWVyIG9mIHRoZSBhdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeS5cbiAqL1xuZXhwb3J0IGNvbnN0IGF1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5TmFtZSA9IFwiYXV4aWxpYXJ5QXV0aGVudGljYXRpb25IZWFkZXJQb2xpY3lcIjtcbmNvbnN0IEFVVEhPUklaQVRJT05fQVVYSUxJQVJZX0hFQURFUiA9IFwieC1tcy1hdXRob3JpemF0aW9uLWF1eGlsaWFyeVwiO1xuYXN5bmMgZnVuY3Rpb24gc2VuZEF1dGhvcml6ZVJlcXVlc3Qob3B0aW9ucykge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgeyBzY29wZXMsIGdldEFjY2Vzc1Rva2VuLCByZXF1ZXN0IH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGdldFRva2VuT3B0aW9ucyA9IHtcbiAgICAgICAgYWJvcnRTaWduYWw6IHJlcXVlc3QuYWJvcnRTaWduYWwsXG4gICAgICAgIHRyYWNpbmdPcHRpb25zOiByZXF1ZXN0LnRyYWNpbmdPcHRpb25zLFxuICAgIH07XG4gICAgcmV0dXJuIChfYiA9IChfYSA9IChhd2FpdCBnZXRBY2Nlc3NUb2tlbihzY29wZXMsIGdldFRva2VuT3B0aW9ucykpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudG9rZW4pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFwiXCI7XG59XG4vKipcbiAqIEEgcG9saWN5IGZvciBleHRlcm5hbCB0b2tlbnMgdG8gYHgtbXMtYXV0aG9yaXphdGlvbi1hdXhpbGlhcnlgIGhlYWRlci5cbiAqIFRoaXMgaGVhZGVyIHdpbGwgYmUgdXNlZCB3aGVuIGNyZWF0aW5nIGEgY3Jvc3MtdGVuYW50IGFwcGxpY2F0aW9uIHdlIG1heSBuZWVkIHRvIGhhbmRsZSBhdXRoZW50aWNhdGlvbiByZXF1ZXN0c1xuICogZm9yIHJlc291cmNlcyB0aGF0IGFyZSBpbiBkaWZmZXJlbnQgdGVuYW50cy5cbiAqIFlvdSBjb3VsZCBzZWUgW0FSTSBkb2NzXShodHRwczovL2xlYXJuLm1pY3Jvc29mdC5jb20vZW4tdXMvYXp1cmUvYXp1cmUtcmVzb3VyY2UtbWFuYWdlci9tYW5hZ2VtZW50L2F1dGhlbnRpY2F0ZS1tdWx0aS10ZW5hbnQpIGZvciBhIHJ1bmRvd24gb2YgaG93IHRoaXMgZmVhdHVyZSB3b3Jrc1xuICovXG5leHBvcnQgZnVuY3Rpb24gYXV4aWxpYXJ5QXV0aGVudGljYXRpb25IZWFkZXJQb2xpY3kob3B0aW9ucykge1xuICAgIGNvbnN0IHsgY3JlZGVudGlhbHMsIHNjb3BlcyB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBsb2dnZXIgPSBvcHRpb25zLmxvZ2dlciB8fCBjb3JlTG9nZ2VyO1xuICAgIGNvbnN0IHRva2VuQ3ljbGVyTWFwID0gbmV3IFdlYWtNYXAoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBhdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeU5hbWUsXG4gICAgICAgIGFzeW5jIHNlbmRSZXF1ZXN0KHJlcXVlc3QsIG5leHQpIHtcbiAgICAgICAgICAgIGlmICghcmVxdWVzdC51cmwudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKFwiaHR0cHM6Ly9cIikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCZWFyZXIgdG9rZW4gYXV0aGVudGljYXRpb24gZm9yIGF1eGlsaWFyeSBoZWFkZXIgaXMgbm90IHBlcm1pdHRlZCBmb3Igbm9uLVRMUyBwcm90ZWN0ZWQgKG5vbi1odHRwcykgVVJMcy5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWNyZWRlbnRpYWxzIHx8IGNyZWRlbnRpYWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGAke2F1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5TmFtZX0gaGVhZGVyIHdpbGwgbm90IGJlIHNldCBkdWUgdG8gZW1wdHkgY3JlZGVudGlhbHMuYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHQocmVxdWVzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0b2tlblByb21pc2VzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNyZWRlbnRpYWwgb2YgY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgZ2V0QWNjZXNzVG9rZW4gPSB0b2tlbkN5Y2xlck1hcC5nZXQoY3JlZGVudGlhbCk7XG4gICAgICAgICAgICAgICAgaWYgKCFnZXRBY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgICAgICAgICBnZXRBY2Nlc3NUb2tlbiA9IGNyZWF0ZVRva2VuQ3ljbGVyKGNyZWRlbnRpYWwpO1xuICAgICAgICAgICAgICAgICAgICB0b2tlbkN5Y2xlck1hcC5zZXQoY3JlZGVudGlhbCwgZ2V0QWNjZXNzVG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0b2tlblByb21pc2VzLnB1c2goc2VuZEF1dGhvcml6ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICBzY29wZXM6IEFycmF5LmlzQXJyYXkoc2NvcGVzKSA/IHNjb3BlcyA6IFtzY29wZXNdLFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgICAgICAgICBnZXRBY2Nlc3NUb2tlbixcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGF1eGlsaWFyeVRva2VucyA9IChhd2FpdCBQcm9taXNlLmFsbCh0b2tlblByb21pc2VzKSkuZmlsdGVyKCh0b2tlbikgPT4gQm9vbGVhbih0b2tlbikpO1xuICAgICAgICAgICAgaWYgKGF1eGlsaWFyeVRva2Vucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZyhgTm9uZSBvZiB0aGUgYXV4aWxpYXJ5IHRva2VucyBhcmUgdmFsaWQuICR7QVVUSE9SSVpBVElPTl9BVVhJTElBUllfSEVBREVSfSBoZWFkZXIgd2lsbCBub3QgYmUgc2V0LmApO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzLnNldChBVVRIT1JJWkFUSU9OX0FVWElMSUFSWV9IRUFERVIsIGF1eGlsaWFyeVRva2Vucy5tYXAoKHRva2VuKSA9PiBgQmVhcmVyICR7dG9rZW59YCkuam9pbihcIiwgXCIpKTtcbiAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcXVlc3QpO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/auxiliaryAuthenticationHeaderPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bearerTokenAuthenticationPolicy: () => (/* binding */ bearerTokenAuthenticationPolicy),\n/* harmony export */   bearerTokenAuthenticationPolicyName: () => (/* binding */ bearerTokenAuthenticationPolicyName)\n/* harmony export */ });\n/* harmony import */ var _util_tokenCycler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/tokenCycler.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */\nconst bearerTokenAuthenticationPolicyName = \"bearerTokenAuthenticationPolicy\";\n/**\n * Default authorize request handler\n */\nasync function defaultAuthorizeRequest(options) {\n    const { scopes, getAccessToken, request } = options;\n    const getTokenOptions = {\n        abortSignal: request.abortSignal,\n        tracingOptions: request.tracingOptions,\n    };\n    const accessToken = await getAccessToken(scopes, getTokenOptions);\n    if (accessToken) {\n        options.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n    }\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response) {\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (response.status === 401 && challenge) {\n        return challenge;\n    }\n    return;\n}\n/**\n * A policy that can request a token from a TokenCredential implementation and\n * then apply it to the Authorization header of a request as a Bearer token.\n */\nfunction bearerTokenAuthenticationPolicy(options) {\n    var _a;\n    const { credential, scopes, challengeCallbacks } = options;\n    const logger = options.logger || _log_js__WEBPACK_IMPORTED_MODULE_1__.logger;\n    const callbacks = Object.assign({ authorizeRequest: (_a = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequest) !== null && _a !== void 0 ? _a : defaultAuthorizeRequest, authorizeRequestOnChallenge: challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequestOnChallenge }, challengeCallbacks);\n    // This function encapsulates the entire process of reliably retrieving the token\n    // The options are left out of the public API until there's demand to configure this.\n    // Remember to extend `BearerTokenAuthenticationPolicyOptions` with `TokenCyclerOptions`\n    // in order to pass through the `options` object.\n    const getAccessToken = credential\n        ? (0,_util_tokenCycler_js__WEBPACK_IMPORTED_MODULE_0__.createTokenCycler)(credential /* , options */)\n        : () => Promise.resolve(null);\n    return {\n        name: bearerTokenAuthenticationPolicyName,\n        /**\n         * If there's no challenge parameter:\n         * - It will try to retrieve the token using the cache, or the credential's getToken.\n         * - Then it will try the next policy with or without the retrieved token.\n         *\n         * It uses the challenge parameters to:\n         * - Skip a first attempt to get the token from the credential if there's no cached token,\n         *   since it expects the token to be retrievable only after the challenge.\n         * - Prepare the outgoing request if the `prepareRequest` method has been provided.\n         * - Send an initial request to receive the challenge if it fails.\n         * - Process a challenge if the response contains it.\n         * - Retrieve a token with the challenge information, then re-send the request.\n         */\n        async sendRequest(request, next) {\n            if (!request.url.toLowerCase().startsWith(\"https://\")) {\n                throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n            }\n            await callbacks.authorizeRequest({\n                scopes: Array.isArray(scopes) ? scopes : [scopes],\n                request,\n                getAccessToken,\n                logger,\n            });\n            let response;\n            let error;\n            try {\n                response = await next(request);\n            }\n            catch (err) {\n                error = err;\n                response = err.response;\n            }\n            if (callbacks.authorizeRequestOnChallenge &&\n                (response === null || response === void 0 ? void 0 : response.status) === 401 &&\n                getChallenge(response)) {\n                // processes challenge\n                const shouldSendRequest = await callbacks.authorizeRequestOnChallenge({\n                    scopes: Array.isArray(scopes) ? scopes : [scopes],\n                    request,\n                    response,\n                    getAccessToken,\n                    logger,\n                });\n                if (shouldSendRequest) {\n                    return next(request);\n                }\n            }\n            if (error) {\n                throw error;\n            }\n            else {\n                return response;\n            }\n        },\n    };\n}\n//# sourceMappingURL=bearerTokenAuthenticationPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9iZWFyZXJUb2tlbkF1dGhlbnRpY2F0aW9uUG9saWN5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQzJEO0FBQ1Y7QUFDakQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksa0NBQWtDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxrQkFBa0I7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxZQUFZLHlDQUF5QztBQUNyRCxxQ0FBcUMsMkNBQVU7QUFDL0Msc0NBQXNDLG9WQUFvVjtBQUMxWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSx1RUFBaUI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9iZWFyZXJUb2tlbkF1dGhlbnRpY2F0aW9uUG9saWN5LmpzPzM5OTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVUb2tlbkN5Y2xlciB9IGZyb20gXCIuLi91dGlsL3Rva2VuQ3ljbGVyLmpzXCI7XG5pbXBvcnQgeyBsb2dnZXIgYXMgY29yZUxvZ2dlciB9IGZyb20gXCIuLi9sb2cuanNcIjtcbi8qKlxuICogVGhlIHByb2dyYW1tYXRpYyBpZGVudGlmaWVyIG9mIHRoZSBiZWFyZXJUb2tlbkF1dGhlbnRpY2F0aW9uUG9saWN5LlxuICovXG5leHBvcnQgY29uc3QgYmVhcmVyVG9rZW5BdXRoZW50aWNhdGlvblBvbGljeU5hbWUgPSBcImJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3lcIjtcbi8qKlxuICogRGVmYXVsdCBhdXRob3JpemUgcmVxdWVzdCBoYW5kbGVyXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGRlZmF1bHRBdXRob3JpemVSZXF1ZXN0KG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IHNjb3BlcywgZ2V0QWNjZXNzVG9rZW4sIHJlcXVlc3QgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgZ2V0VG9rZW5PcHRpb25zID0ge1xuICAgICAgICBhYm9ydFNpZ25hbDogcmVxdWVzdC5hYm9ydFNpZ25hbCxcbiAgICAgICAgdHJhY2luZ09wdGlvbnM6IHJlcXVlc3QudHJhY2luZ09wdGlvbnMsXG4gICAgfTtcbiAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGF3YWl0IGdldEFjY2Vzc1Rva2VuKHNjb3BlcywgZ2V0VG9rZW5PcHRpb25zKTtcbiAgICBpZiAoYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgb3B0aW9ucy5yZXF1ZXN0LmhlYWRlcnMuc2V0KFwiQXV0aG9yaXphdGlvblwiLCBgQmVhcmVyICR7YWNjZXNzVG9rZW4udG9rZW59YCk7XG4gICAgfVxufVxuLyoqXG4gKiBXZSB3aWxsIHJldHJpZXZlIHRoZSBjaGFsbGVuZ2Ugb25seSBpZiB0aGUgcmVzcG9uc2Ugc3RhdHVzIGNvZGUgd2FzIDQwMSxcbiAqIGFuZCBpZiB0aGUgcmVzcG9uc2UgY29udGFpbmVkIHRoZSBoZWFkZXIgXCJXV1ctQXV0aGVudGljYXRlXCIgd2l0aCBhIG5vbi1lbXB0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0Q2hhbGxlbmdlKHJlc3BvbnNlKSB7XG4gICAgY29uc3QgY2hhbGxlbmdlID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJXV1ctQXV0aGVudGljYXRlXCIpO1xuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSAmJiBjaGFsbGVuZ2UpIHtcbiAgICAgICAgcmV0dXJuIGNoYWxsZW5nZTtcbiAgICB9XG4gICAgcmV0dXJuO1xufVxuLyoqXG4gKiBBIHBvbGljeSB0aGF0IGNhbiByZXF1ZXN0IGEgdG9rZW4gZnJvbSBhIFRva2VuQ3JlZGVudGlhbCBpbXBsZW1lbnRhdGlvbiBhbmRcbiAqIHRoZW4gYXBwbHkgaXQgdG8gdGhlIEF1dGhvcml6YXRpb24gaGVhZGVyIG9mIGEgcmVxdWVzdCBhcyBhIEJlYXJlciB0b2tlbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3kob3B0aW9ucykge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCB7IGNyZWRlbnRpYWwsIHNjb3BlcywgY2hhbGxlbmdlQ2FsbGJhY2tzIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGxvZ2dlciA9IG9wdGlvbnMubG9nZ2VyIHx8IGNvcmVMb2dnZXI7XG4gICAgY29uc3QgY2FsbGJhY2tzID0gT2JqZWN0LmFzc2lnbih7IGF1dGhvcml6ZVJlcXVlc3Q6IChfYSA9IGNoYWxsZW5nZUNhbGxiYWNrcyA9PT0gbnVsbCB8fCBjaGFsbGVuZ2VDYWxsYmFja3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNoYWxsZW5nZUNhbGxiYWNrcy5hdXRob3JpemVSZXF1ZXN0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBkZWZhdWx0QXV0aG9yaXplUmVxdWVzdCwgYXV0aG9yaXplUmVxdWVzdE9uQ2hhbGxlbmdlOiBjaGFsbGVuZ2VDYWxsYmFja3MgPT09IG51bGwgfHwgY2hhbGxlbmdlQ2FsbGJhY2tzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjaGFsbGVuZ2VDYWxsYmFja3MuYXV0aG9yaXplUmVxdWVzdE9uQ2hhbGxlbmdlIH0sIGNoYWxsZW5nZUNhbGxiYWNrcyk7XG4gICAgLy8gVGhpcyBmdW5jdGlvbiBlbmNhcHN1bGF0ZXMgdGhlIGVudGlyZSBwcm9jZXNzIG9mIHJlbGlhYmx5IHJldHJpZXZpbmcgdGhlIHRva2VuXG4gICAgLy8gVGhlIG9wdGlvbnMgYXJlIGxlZnQgb3V0IG9mIHRoZSBwdWJsaWMgQVBJIHVudGlsIHRoZXJlJ3MgZGVtYW5kIHRvIGNvbmZpZ3VyZSB0aGlzLlxuICAgIC8vIFJlbWVtYmVyIHRvIGV4dGVuZCBgQmVhcmVyVG9rZW5BdXRoZW50aWNhdGlvblBvbGljeU9wdGlvbnNgIHdpdGggYFRva2VuQ3ljbGVyT3B0aW9uc2BcbiAgICAvLyBpbiBvcmRlciB0byBwYXNzIHRocm91Z2ggdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgY29uc3QgZ2V0QWNjZXNzVG9rZW4gPSBjcmVkZW50aWFsXG4gICAgICAgID8gY3JlYXRlVG9rZW5DeWNsZXIoY3JlZGVudGlhbCAvKiAsIG9wdGlvbnMgKi8pXG4gICAgICAgIDogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3lOYW1lLFxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlcmUncyBubyBjaGFsbGVuZ2UgcGFyYW1ldGVyOlxuICAgICAgICAgKiAtIEl0IHdpbGwgdHJ5IHRvIHJldHJpZXZlIHRoZSB0b2tlbiB1c2luZyB0aGUgY2FjaGUsIG9yIHRoZSBjcmVkZW50aWFsJ3MgZ2V0VG9rZW4uXG4gICAgICAgICAqIC0gVGhlbiBpdCB3aWxsIHRyeSB0aGUgbmV4dCBwb2xpY3kgd2l0aCBvciB3aXRob3V0IHRoZSByZXRyaWV2ZWQgdG9rZW4uXG4gICAgICAgICAqXG4gICAgICAgICAqIEl0IHVzZXMgdGhlIGNoYWxsZW5nZSBwYXJhbWV0ZXJzIHRvOlxuICAgICAgICAgKiAtIFNraXAgYSBmaXJzdCBhdHRlbXB0IHRvIGdldCB0aGUgdG9rZW4gZnJvbSB0aGUgY3JlZGVudGlhbCBpZiB0aGVyZSdzIG5vIGNhY2hlZCB0b2tlbixcbiAgICAgICAgICogICBzaW5jZSBpdCBleHBlY3RzIHRoZSB0b2tlbiB0byBiZSByZXRyaWV2YWJsZSBvbmx5IGFmdGVyIHRoZSBjaGFsbGVuZ2UuXG4gICAgICAgICAqIC0gUHJlcGFyZSB0aGUgb3V0Z29pbmcgcmVxdWVzdCBpZiB0aGUgYHByZXBhcmVSZXF1ZXN0YCBtZXRob2QgaGFzIGJlZW4gcHJvdmlkZWQuXG4gICAgICAgICAqIC0gU2VuZCBhbiBpbml0aWFsIHJlcXVlc3QgdG8gcmVjZWl2ZSB0aGUgY2hhbGxlbmdlIGlmIGl0IGZhaWxzLlxuICAgICAgICAgKiAtIFByb2Nlc3MgYSBjaGFsbGVuZ2UgaWYgdGhlIHJlc3BvbnNlIGNvbnRhaW5zIGl0LlxuICAgICAgICAgKiAtIFJldHJpZXZlIGEgdG9rZW4gd2l0aCB0aGUgY2hhbGxlbmdlIGluZm9ybWF0aW9uLCB0aGVuIHJlLXNlbmQgdGhlIHJlcXVlc3QuXG4gICAgICAgICAqL1xuICAgICAgICBhc3luYyBzZW5kUmVxdWVzdChyZXF1ZXN0LCBuZXh0KSB7XG4gICAgICAgICAgICBpZiAoIXJlcXVlc3QudXJsLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChcImh0dHBzOi8vXCIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQmVhcmVyIHRva2VuIGF1dGhlbnRpY2F0aW9uIGlzIG5vdCBwZXJtaXR0ZWQgZm9yIG5vbi1UTFMgcHJvdGVjdGVkIChub24taHR0cHMpIFVSTHMuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgY2FsbGJhY2tzLmF1dGhvcml6ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHNjb3BlczogQXJyYXkuaXNBcnJheShzY29wZXMpID8gc2NvcGVzIDogW3Njb3Blc10sXG4gICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICBnZXRBY2Nlc3NUb2tlbixcbiAgICAgICAgICAgICAgICBsb2dnZXIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCByZXNwb25zZTtcbiAgICAgICAgICAgIGxldCBlcnJvcjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBuZXh0KHJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGVycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gZXJyLnJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrcy5hdXRob3JpemVSZXF1ZXN0T25DaGFsbGVuZ2UgJiZcbiAgICAgICAgICAgICAgICAocmVzcG9uc2UgPT09IG51bGwgfHwgcmVzcG9uc2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3BvbnNlLnN0YXR1cykgPT09IDQwMSAmJlxuICAgICAgICAgICAgICAgIGdldENoYWxsZW5nZShyZXNwb25zZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBwcm9jZXNzZXMgY2hhbGxlbmdlXG4gICAgICAgICAgICAgICAgY29uc3Qgc2hvdWxkU2VuZFJlcXVlc3QgPSBhd2FpdCBjYWxsYmFja3MuYXV0aG9yaXplUmVxdWVzdE9uQ2hhbGxlbmdlKHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVzOiBBcnJheS5pc0FycmF5KHNjb3BlcykgPyBzY29wZXMgOiBbc2NvcGVzXSxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgICAgIGdldEFjY2Vzc1Rva2VuLFxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZFNlbmRSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcXVlc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iZWFyZXJUb2tlbkF1dGhlbnRpY2F0aW9uUG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decompressResponsePolicy: () => (/* binding */ decompressResponsePolicy),\n/* harmony export */   decompressResponsePolicyName: () => (/* binding */ decompressResponsePolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The programmatic identifier of the decompressResponsePolicy.\n */\nconst decompressResponsePolicyName = \"decompressResponsePolicy\";\n/**\n * A policy to enable response decompression according to Accept-Encoding header\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding\n */\nfunction decompressResponsePolicy() {\n    return {\n        name: decompressResponsePolicyName,\n        async sendRequest(request, next) {\n            // HEAD requests have no body\n            if (request.method !== \"HEAD\") {\n                request.headers.set(\"Accept-Encoding\", \"gzip,deflate\");\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=decompressResponsePolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9kZWNvbXByZXNzUmVzcG9uc2VQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3BvbGljaWVzL2RlY29tcHJlc3NSZXNwb25zZVBvbGljeS5qcz9kZjg2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBUaGUgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgb2YgdGhlIGRlY29tcHJlc3NSZXNwb25zZVBvbGljeS5cbiAqL1xuZXhwb3J0IGNvbnN0IGRlY29tcHJlc3NSZXNwb25zZVBvbGljeU5hbWUgPSBcImRlY29tcHJlc3NSZXNwb25zZVBvbGljeVwiO1xuLyoqXG4gKiBBIHBvbGljeSB0byBlbmFibGUgcmVzcG9uc2UgZGVjb21wcmVzc2lvbiBhY2NvcmRpbmcgdG8gQWNjZXB0LUVuY29kaW5nIGhlYWRlclxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0FjY2VwdC1FbmNvZGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb21wcmVzc1Jlc3BvbnNlUG9saWN5KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGRlY29tcHJlc3NSZXNwb25zZVBvbGljeU5hbWUsXG4gICAgICAgIGFzeW5jIHNlbmRSZXF1ZXN0KHJlcXVlc3QsIG5leHQpIHtcbiAgICAgICAgICAgIC8vIEhFQUQgcmVxdWVzdHMgaGF2ZSBubyBib2R5XG4gICAgICAgICAgICBpZiAocmVxdWVzdC5tZXRob2QgIT09IFwiSEVBRFwiKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzLnNldChcIkFjY2VwdC1FbmNvZGluZ1wiLCBcImd6aXAsZGVmbGF0ZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcXVlc3QpO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvbXByZXNzUmVzcG9uc2VQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultRetryPolicy: () => (/* binding */ defaultRetryPolicy),\n/* harmony export */   defaultRetryPolicyName: () => (/* binding */ defaultRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../retryStrategies/exponentialRetryStrategy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/exponentialRetryStrategy.js\");\n/* harmony import */ var _retryStrategies_throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../retryStrategies/throttlingRetryStrategy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/throttlingRetryStrategy.js\");\n/* harmony import */ var _retryPolicy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./retryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n/**\n * Name of the {@link defaultRetryPolicy}\n */\nconst defaultRetryPolicyName = \"defaultRetryPolicy\";\n/**\n * A policy that retries according to three strategies:\n * - When the server sends a 429 response with a Retry-After header.\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails, it will retry with an exponentially increasing delay.\n */\nfunction defaultRetryPolicy(options = {}) {\n    var _a;\n    return {\n        name: defaultRetryPolicyName,\n        sendRequest: (0,_retryPolicy_js__WEBPACK_IMPORTED_MODULE_2__.retryPolicy)([(0,_retryStrategies_throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_1__.throttlingRetryStrategy)(), (0,_retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__.exponentialRetryStrategy)(options)], {\n            maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : _constants_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_RETRY_POLICY_COUNT,\n        }).sendRequest,\n    };\n}\n//# sourceMappingURL=defaultRetryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9kZWZhdWx0UmV0cnlQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUMwRjtBQUNGO0FBQ3pDO0FBQ2M7QUFDN0Q7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHdDQUF3QztBQUMvQztBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNERBQVcsRUFBRSxvR0FBdUIsSUFBSSxzR0FBd0I7QUFDckYsbUZBQW1GLHFFQUEwQjtBQUM3RyxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9kZWZhdWx0UmV0cnlQb2xpY3kuanM/YWQyYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IGV4cG9uZW50aWFsUmV0cnlTdHJhdGVneSB9IGZyb20gXCIuLi9yZXRyeVN0cmF0ZWdpZXMvZXhwb25lbnRpYWxSZXRyeVN0cmF0ZWd5LmpzXCI7XG5pbXBvcnQgeyB0aHJvdHRsaW5nUmV0cnlTdHJhdGVneSB9IGZyb20gXCIuLi9yZXRyeVN0cmF0ZWdpZXMvdGhyb3R0bGluZ1JldHJ5U3RyYXRlZ3kuanNcIjtcbmltcG9ydCB7IHJldHJ5UG9saWN5IH0gZnJvbSBcIi4vcmV0cnlQb2xpY3kuanNcIjtcbmltcG9ydCB7IERFRkFVTFRfUkVUUllfUE9MSUNZX0NPVU5UIH0gZnJvbSBcIi4uL2NvbnN0YW50cy5qc1wiO1xuLyoqXG4gKiBOYW1lIG9mIHRoZSB7QGxpbmsgZGVmYXVsdFJldHJ5UG9saWN5fVxuICovXG5leHBvcnQgY29uc3QgZGVmYXVsdFJldHJ5UG9saWN5TmFtZSA9IFwiZGVmYXVsdFJldHJ5UG9saWN5XCI7XG4vKipcbiAqIEEgcG9saWN5IHRoYXQgcmV0cmllcyBhY2NvcmRpbmcgdG8gdGhyZWUgc3RyYXRlZ2llczpcbiAqIC0gV2hlbiB0aGUgc2VydmVyIHNlbmRzIGEgNDI5IHJlc3BvbnNlIHdpdGggYSBSZXRyeS1BZnRlciBoZWFkZXIuXG4gKiAtIFdoZW4gdGhlcmUgYXJlIGVycm9ycyBpbiB0aGUgdW5kZXJseWluZyB0cmFuc3BvcnQgbGF5ZXIgKGUuZy4gRE5TIGxvb2t1cCBmYWlsdXJlcykuXG4gKiAtIE9yIG90aGVyd2lzZSBpZiB0aGUgb3V0Z29pbmcgcmVxdWVzdCBmYWlscywgaXQgd2lsbCByZXRyeSB3aXRoIGFuIGV4cG9uZW50aWFsbHkgaW5jcmVhc2luZyBkZWxheS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRSZXRyeVBvbGljeShvcHRpb25zID0ge30pIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogZGVmYXVsdFJldHJ5UG9saWN5TmFtZSxcbiAgICAgICAgc2VuZFJlcXVlc3Q6IHJldHJ5UG9saWN5KFt0aHJvdHRsaW5nUmV0cnlTdHJhdGVneSgpLCBleHBvbmVudGlhbFJldHJ5U3RyYXRlZ3kob3B0aW9ucyldLCB7XG4gICAgICAgICAgICBtYXhSZXRyaWVzOiAoX2EgPSBvcHRpb25zLm1heFJldHJpZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IERFRkFVTFRfUkVUUllfUE9MSUNZX0NPVU5ULFxuICAgICAgICB9KS5zZW5kUmVxdWVzdCxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdFJldHJ5UG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/exponentialRetryPolicy.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/exponentialRetryPolicy.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exponentialRetryPolicy: () => (/* binding */ exponentialRetryPolicy),\n/* harmony export */   exponentialRetryPolicyName: () => (/* binding */ exponentialRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../retryStrategies/exponentialRetryStrategy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/exponentialRetryStrategy.js\");\n/* harmony import */ var _retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./retryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n/**\n * The programmatic identifier of the exponentialRetryPolicy.\n */\nconst exponentialRetryPolicyName = \"exponentialRetryPolicy\";\n/**\n * A policy that attempts to retry requests while introducing an exponentially increasing delay.\n * @param options - Options that configure retry logic.\n */\nfunction exponentialRetryPolicy(options = {}) {\n    var _a;\n    return (0,_retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.retryPolicy)([\n        (0,_retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__.exponentialRetryStrategy)(Object.assign(Object.assign({}, options), { ignoreSystemErrors: true })),\n    ], {\n        maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : _constants_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_RETRY_POLICY_COUNT,\n    });\n}\n//# sourceMappingURL=exponentialRetryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9leHBvbmVudGlhbFJldHJ5UG9saWN5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUMwRjtBQUMzQztBQUNjO0FBQzdEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTyw0Q0FBNEM7QUFDbkQ7QUFDQSxXQUFXLDREQUFXO0FBQ3RCLFFBQVEsc0dBQXdCLCtCQUErQixjQUFjLDBCQUEwQjtBQUN2RztBQUNBLCtFQUErRSxxRUFBMEI7QUFDekcsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3BvbGljaWVzL2V4cG9uZW50aWFsUmV0cnlQb2xpY3kuanM/MDc5OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IGV4cG9uZW50aWFsUmV0cnlTdHJhdGVneSB9IGZyb20gXCIuLi9yZXRyeVN0cmF0ZWdpZXMvZXhwb25lbnRpYWxSZXRyeVN0cmF0ZWd5LmpzXCI7XG5pbXBvcnQgeyByZXRyeVBvbGljeSB9IGZyb20gXCIuL3JldHJ5UG9saWN5LmpzXCI7XG5pbXBvcnQgeyBERUZBVUxUX1JFVFJZX1BPTElDWV9DT1VOVCB9IGZyb20gXCIuLi9jb25zdGFudHMuanNcIjtcbi8qKlxuICogVGhlIHByb2dyYW1tYXRpYyBpZGVudGlmaWVyIG9mIHRoZSBleHBvbmVudGlhbFJldHJ5UG9saWN5LlxuICovXG5leHBvcnQgY29uc3QgZXhwb25lbnRpYWxSZXRyeVBvbGljeU5hbWUgPSBcImV4cG9uZW50aWFsUmV0cnlQb2xpY3lcIjtcbi8qKlxuICogQSBwb2xpY3kgdGhhdCBhdHRlbXB0cyB0byByZXRyeSByZXF1ZXN0cyB3aGlsZSBpbnRyb2R1Y2luZyBhbiBleHBvbmVudGlhbGx5IGluY3JlYXNpbmcgZGVsYXkuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdGhhdCBjb25maWd1cmUgcmV0cnkgbG9naWMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHBvbmVudGlhbFJldHJ5UG9saWN5KG9wdGlvbnMgPSB7fSkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gcmV0cnlQb2xpY3koW1xuICAgICAgICBleHBvbmVudGlhbFJldHJ5U3RyYXRlZ3koT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyBpZ25vcmVTeXN0ZW1FcnJvcnM6IHRydWUgfSkpLFxuICAgIF0sIHtcbiAgICAgICAgbWF4UmV0cmllczogKF9hID0gb3B0aW9ucy5tYXhSZXRyaWVzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBERUZBVUxUX1JFVFJZX1BPTElDWV9DT1VOVCxcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4cG9uZW50aWFsUmV0cnlQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/exponentialRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formDataPolicy: () => (/* binding */ formDataPolicy),\n/* harmony export */   formDataPolicyName: () => (/* binding */ formDataPolicyName)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _httpHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../httpHeaders.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * The programmatic identifier of the formDataPolicy.\n */\nconst formDataPolicyName = \"formDataPolicy\";\nfunction formDataToFormDataMap(formData) {\n    var _a;\n    const formDataMap = {};\n    for (const [key, value] of formData.entries()) {\n        (_a = formDataMap[key]) !== null && _a !== void 0 ? _a : (formDataMap[key] = []);\n        formDataMap[key].push(value);\n    }\n    return formDataMap;\n}\n/**\n * A policy that encodes FormData on the request into the body.\n */\nfunction formDataPolicy() {\n    return {\n        name: formDataPolicyName,\n        async sendRequest(request, next) {\n            if (_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNodeLike && typeof FormData !== \"undefined\" && request.body instanceof FormData) {\n                request.formData = formDataToFormDataMap(request.body);\n                request.body = undefined;\n            }\n            if (request.formData) {\n                const contentType = request.headers.get(\"Content-Type\");\n                if (contentType && contentType.indexOf(\"application/x-www-form-urlencoded\") !== -1) {\n                    request.body = wwwFormUrlEncode(request.formData);\n                }\n                else {\n                    await prepareFormData(request.formData, request);\n                }\n                request.formData = undefined;\n            }\n            return next(request);\n        },\n    };\n}\nfunction wwwFormUrlEncode(formData) {\n    const urlSearchParams = new URLSearchParams();\n    for (const [key, value] of Object.entries(formData)) {\n        if (Array.isArray(value)) {\n            for (const subValue of value) {\n                urlSearchParams.append(key, subValue.toString());\n            }\n        }\n        else {\n            urlSearchParams.append(key, value.toString());\n        }\n    }\n    return urlSearchParams.toString();\n}\nasync function prepareFormData(formData, request) {\n    // validate content type (multipart/form-data)\n    const contentType = request.headers.get(\"Content-Type\");\n    if (contentType && !contentType.startsWith(\"multipart/form-data\")) {\n        // content type is specified and is not multipart/form-data. Exit.\n        return;\n    }\n    request.headers.set(\"Content-Type\", contentType !== null && contentType !== void 0 ? contentType : \"multipart/form-data\");\n    // set body to MultipartRequestBody using content from FormDataMap\n    const parts = [];\n    for (const [fieldName, values] of Object.entries(formData)) {\n        for (const value of Array.isArray(values) ? values : [values]) {\n            if (typeof value === \"string\") {\n                parts.push({\n                    headers: (0,_httpHeaders_js__WEBPACK_IMPORTED_MODULE_1__.createHttpHeaders)({\n                        \"Content-Disposition\": `form-data; name=\"${fieldName}\"`,\n                    }),\n                    body: (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(value, \"utf-8\"),\n                });\n            }\n            else if (value === undefined || value === null || typeof value !== \"object\") {\n                throw new Error(`Unexpected value for key ${fieldName}: ${value}. Value should be serialized to string first.`);\n            }\n            else {\n                // using || instead of ?? here since if value.name is empty we should create a file name\n                const fileName = value.name || \"blob\";\n                const headers = (0,_httpHeaders_js__WEBPACK_IMPORTED_MODULE_1__.createHttpHeaders)();\n                headers.set(\"Content-Disposition\", `form-data; name=\"${fieldName}\"; filename=\"${fileName}\"`);\n                // again, || is used since an empty value.type means the content type is unset\n                headers.set(\"Content-Type\", value.type || \"application/octet-stream\");\n                parts.push({\n                    headers,\n                    body: value,\n                });\n            }\n        }\n    }\n    request.multipartBody = { parts };\n}\n//# sourceMappingURL=formDataPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9mb3JtRGF0YVBvbGljeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNrRTtBQUNaO0FBQ3REO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isd0RBQVU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsa0VBQWlCO0FBQzlDLDJEQUEyRCxRQUFRLFVBQVU7QUFDN0UscUJBQXFCO0FBQ3JCLDBCQUEwQixvRUFBa0I7QUFDNUMsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSw0REFBNEQsVUFBVSxJQUFJLE1BQU07QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0Msa0VBQWlCO0FBQ2pELCtEQUErRCxRQUFRLFVBQVUsR0FBRyxZQUFZLFNBQVM7QUFDekc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvZm9ybURhdGFQb2xpY3kuanM/MjYwMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IGlzTm9kZUxpa2UsIHN0cmluZ1RvVWludDhBcnJheSB9IGZyb20gXCJAYXp1cmUvY29yZS11dGlsXCI7XG5pbXBvcnQgeyBjcmVhdGVIdHRwSGVhZGVycyB9IGZyb20gXCIuLi9odHRwSGVhZGVycy5qc1wiO1xuLyoqXG4gKiBUaGUgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgb2YgdGhlIGZvcm1EYXRhUG9saWN5LlxuICovXG5leHBvcnQgY29uc3QgZm9ybURhdGFQb2xpY3lOYW1lID0gXCJmb3JtRGF0YVBvbGljeVwiO1xuZnVuY3Rpb24gZm9ybURhdGFUb0Zvcm1EYXRhTWFwKGZvcm1EYXRhKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGZvcm1EYXRhTWFwID0ge307XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZm9ybURhdGEuZW50cmllcygpKSB7XG4gICAgICAgIChfYSA9IGZvcm1EYXRhTWFwW2tleV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChmb3JtRGF0YU1hcFtrZXldID0gW10pO1xuICAgICAgICBmb3JtRGF0YU1hcFtrZXldLnB1c2godmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gZm9ybURhdGFNYXA7XG59XG4vKipcbiAqIEEgcG9saWN5IHRoYXQgZW5jb2RlcyBGb3JtRGF0YSBvbiB0aGUgcmVxdWVzdCBpbnRvIHRoZSBib2R5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybURhdGFQb2xpY3koKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogZm9ybURhdGFQb2xpY3lOYW1lLFxuICAgICAgICBhc3luYyBzZW5kUmVxdWVzdChyZXF1ZXN0LCBuZXh0KSB7XG4gICAgICAgICAgICBpZiAoaXNOb2RlTGlrZSAmJiB0eXBlb2YgRm9ybURhdGEgIT09IFwidW5kZWZpbmVkXCIgJiYgcmVxdWVzdC5ib2R5IGluc3RhbmNlb2YgRm9ybURhdGEpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmZvcm1EYXRhID0gZm9ybURhdGFUb0Zvcm1EYXRhTWFwKHJlcXVlc3QuYm9keSk7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5ib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlcXVlc3QuZm9ybURhdGEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlcXVlc3QuaGVhZGVycy5nZXQoXCJDb250ZW50LVR5cGVcIik7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRUeXBlICYmIGNvbnRlbnRUeXBlLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuYm9keSA9IHd3d0Zvcm1VcmxFbmNvZGUocmVxdWVzdC5mb3JtRGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBwcmVwYXJlRm9ybURhdGEocmVxdWVzdC5mb3JtRGF0YSwgcmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlcXVlc3QuZm9ybURhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV4dChyZXF1ZXN0KTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZnVuY3Rpb24gd3d3Rm9ybVVybEVuY29kZShmb3JtRGF0YSkge1xuICAgIGNvbnN0IHVybFNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhmb3JtRGF0YSkpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN1YlZhbHVlIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdXJsU2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHN1YlZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdXJsU2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1cmxTZWFyY2hQYXJhbXMudG9TdHJpbmcoKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHByZXBhcmVGb3JtRGF0YShmb3JtRGF0YSwgcmVxdWVzdCkge1xuICAgIC8vIHZhbGlkYXRlIGNvbnRlbnQgdHlwZSAobXVsdGlwYXJ0L2Zvcm0tZGF0YSlcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlcXVlc3QuaGVhZGVycy5nZXQoXCJDb250ZW50LVR5cGVcIik7XG4gICAgaWYgKGNvbnRlbnRUeXBlICYmICFjb250ZW50VHlwZS5zdGFydHNXaXRoKFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiKSkge1xuICAgICAgICAvLyBjb250ZW50IHR5cGUgaXMgc3BlY2lmaWVkIGFuZCBpcyBub3QgbXVsdGlwYXJ0L2Zvcm0tZGF0YS4gRXhpdC5cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KFwiQ29udGVudC1UeXBlXCIsIGNvbnRlbnRUeXBlICE9PSBudWxsICYmIGNvbnRlbnRUeXBlICE9PSB2b2lkIDAgPyBjb250ZW50VHlwZSA6IFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiKTtcbiAgICAvLyBzZXQgYm9keSB0byBNdWx0aXBhcnRSZXF1ZXN0Qm9keSB1c2luZyBjb250ZW50IGZyb20gRm9ybURhdGFNYXBcbiAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgIGZvciAoY29uc3QgW2ZpZWxkTmFtZSwgdmFsdWVzXSBvZiBPYmplY3QuZW50cmllcyhmb3JtRGF0YSkpIHtcbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBBcnJheS5pc0FycmF5KHZhbHVlcykgPyB2YWx1ZXMgOiBbdmFsdWVzXSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBjcmVhdGVIdHRwSGVhZGVycyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBcIkNvbnRlbnQtRGlzcG9zaXRpb25cIjogYGZvcm0tZGF0YTsgbmFtZT1cIiR7ZmllbGROYW1lfVwiYCxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHN0cmluZ1RvVWludDhBcnJheSh2YWx1ZSwgXCJ1dGYtOFwiKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIHZhbHVlIGZvciBrZXkgJHtmaWVsZE5hbWV9OiAke3ZhbHVlfS4gVmFsdWUgc2hvdWxkIGJlIHNlcmlhbGl6ZWQgdG8gc3RyaW5nIGZpcnN0LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gdXNpbmcgfHwgaW5zdGVhZCBvZiA/PyBoZXJlIHNpbmNlIGlmIHZhbHVlLm5hbWUgaXMgZW1wdHkgd2Ugc2hvdWxkIGNyZWF0ZSBhIGZpbGUgbmFtZVxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVOYW1lID0gdmFsdWUubmFtZSB8fCBcImJsb2JcIjtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJzID0gY3JlYXRlSHR0cEhlYWRlcnMoKTtcbiAgICAgICAgICAgICAgICBoZWFkZXJzLnNldChcIkNvbnRlbnQtRGlzcG9zaXRpb25cIiwgYGZvcm0tZGF0YTsgbmFtZT1cIiR7ZmllbGROYW1lfVwiOyBmaWxlbmFtZT1cIiR7ZmlsZU5hbWV9XCJgKTtcbiAgICAgICAgICAgICAgICAvLyBhZ2FpbiwgfHwgaXMgdXNlZCBzaW5jZSBhbiBlbXB0eSB2YWx1ZS50eXBlIG1lYW5zIHRoZSBjb250ZW50IHR5cGUgaXMgdW5zZXRcbiAgICAgICAgICAgICAgICBoZWFkZXJzLnNldChcIkNvbnRlbnQtVHlwZVwiLCB2YWx1ZS50eXBlIHx8IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIpO1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB2YWx1ZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXF1ZXN0Lm11bHRpcGFydEJvZHkgPSB7IHBhcnRzIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JtRGF0YVBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logPolicy: () => (/* binding */ logPolicy),\n/* harmony export */   logPolicyName: () => (/* binding */ logPolicyName)\n/* harmony export */ });\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\");\n/* harmony import */ var _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/sanitizer.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/sanitizer.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * The programmatic identifier of the logPolicy.\n */\nconst logPolicyName = \"logPolicy\";\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nfunction logPolicy(options = {}) {\n    var _a;\n    const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : _log_js__WEBPACK_IMPORTED_MODULE_0__.logger.info;\n    const sanitizer = new _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_1__.Sanitizer({\n        additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n    });\n    return {\n        name: logPolicyName,\n        async sendRequest(request, next) {\n            if (!logger.enabled) {\n                return next(request);\n            }\n            logger(`Request: ${sanitizer.sanitize(request)}`);\n            const response = await next(request);\n            logger(`Response status code: ${response.status}`);\n            logger(`Headers: ${sanitizer.sanitize(response.headers)}`);\n            return response;\n        },\n    };\n}\n//# sourceMappingURL=logPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9sb2dQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDaUQ7QUFDQTtBQUNqRDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ08sK0JBQStCO0FBQ3RDO0FBQ0EsMEVBQTBFLDJDQUFVO0FBQ3BGLDBCQUEwQix5REFBUztBQUNuQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiw0QkFBNEI7QUFDM0Q7QUFDQSw0Q0FBNEMsZ0JBQWdCO0FBQzVELCtCQUErQixxQ0FBcUM7QUFDcEU7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9sb2dQb2xpY3kuanM/ZWJiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IGxvZ2dlciBhcyBjb3JlTG9nZ2VyIH0gZnJvbSBcIi4uL2xvZy5qc1wiO1xuaW1wb3J0IHsgU2FuaXRpemVyIH0gZnJvbSBcIi4uL3V0aWwvc2FuaXRpemVyLmpzXCI7XG4vKipcbiAqIFRoZSBwcm9ncmFtbWF0aWMgaWRlbnRpZmllciBvZiB0aGUgbG9nUG9saWN5LlxuICovXG5leHBvcnQgY29uc3QgbG9nUG9saWN5TmFtZSA9IFwibG9nUG9saWN5XCI7XG4vKipcbiAqIEEgcG9saWN5IHRoYXQgbG9ncyBhbGwgcmVxdWVzdHMgYW5kIHJlc3BvbnNlcy5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBjb25maWd1cmUgbG9nUG9saWN5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9nUG9saWN5KG9wdGlvbnMgPSB7fSkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBsb2dnZXIgPSAoX2EgPSBvcHRpb25zLmxvZ2dlcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY29yZUxvZ2dlci5pbmZvO1xuICAgIGNvbnN0IHNhbml0aXplciA9IG5ldyBTYW5pdGl6ZXIoe1xuICAgICAgICBhZGRpdGlvbmFsQWxsb3dlZEhlYWRlck5hbWVzOiBvcHRpb25zLmFkZGl0aW9uYWxBbGxvd2VkSGVhZGVyTmFtZXMsXG4gICAgICAgIGFkZGl0aW9uYWxBbGxvd2VkUXVlcnlQYXJhbWV0ZXJzOiBvcHRpb25zLmFkZGl0aW9uYWxBbGxvd2VkUXVlcnlQYXJhbWV0ZXJzLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGxvZ1BvbGljeU5hbWUsXG4gICAgICAgIGFzeW5jIHNlbmRSZXF1ZXN0KHJlcXVlc3QsIG5leHQpIHtcbiAgICAgICAgICAgIGlmICghbG9nZ2VyLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dChyZXF1ZXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZ2dlcihgUmVxdWVzdDogJHtzYW5pdGl6ZXIuc2FuaXRpemUocmVxdWVzdCl9YCk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG5leHQocmVxdWVzdCk7XG4gICAgICAgICAgICBsb2dnZXIoYFJlc3BvbnNlIHN0YXR1cyBjb2RlOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgICAgICAgIGxvZ2dlcihgSGVhZGVyczogJHtzYW5pdGl6ZXIuc2FuaXRpemUocmVzcG9uc2UuaGVhZGVycyl9YCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ1BvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   multipartPolicy: () => (/* binding */ multipartPolicy),\n/* harmony export */   multipartPolicyName: () => (/* binding */ multipartPolicyName)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _util_concat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/concat.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/concat.js\");\n/* harmony import */ var _util_typeGuards_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/typeGuards.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/typeGuards.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\nfunction generateBoundary() {\n    return `----AzSDKFormBoundary${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.randomUUID)()}`;\n}\nfunction encodeHeaders(headers) {\n    let result = \"\";\n    for (const [key, value] of headers) {\n        result += `${key}: ${value}\\r\\n`;\n    }\n    return result;\n}\nfunction getLength(source) {\n    if (source instanceof Uint8Array) {\n        return source.byteLength;\n    }\n    else if ((0,_util_typeGuards_js__WEBPACK_IMPORTED_MODULE_2__.isBlob)(source)) {\n        // if was created using createFile then -1 means we have an unknown size\n        return source.size === -1 ? undefined : source.size;\n    }\n    else {\n        return undefined;\n    }\n}\nfunction getTotalLength(sources) {\n    let total = 0;\n    for (const source of sources) {\n        const partLength = getLength(source);\n        if (partLength === undefined) {\n            return undefined;\n        }\n        else {\n            total += partLength;\n        }\n    }\n    return total;\n}\nasync function buildRequestBody(request, parts, boundary) {\n    const sources = [\n        (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(`--${boundary}`, \"utf-8\"),\n        ...parts.flatMap((part) => [\n            (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(\"\\r\\n\", \"utf-8\"),\n            (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(encodeHeaders(part.headers), \"utf-8\"),\n            (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(\"\\r\\n\", \"utf-8\"),\n            part.body,\n            (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(`\\r\\n--${boundary}`, \"utf-8\"),\n        ]),\n        (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(\"--\\r\\n\\r\\n\", \"utf-8\"),\n    ];\n    const contentLength = getTotalLength(sources);\n    if (contentLength) {\n        request.headers.set(\"Content-Length\", contentLength);\n    }\n    request.body = await (0,_util_concat_js__WEBPACK_IMPORTED_MODULE_1__.concat)(sources);\n}\n/**\n * Name of multipart policy\n */\nconst multipartPolicyName = \"multipartPolicy\";\nconst maxBoundaryLength = 70;\nconst validBoundaryCharacters = new Set(`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'()+,-./:=?`);\nfunction assertValidBoundary(boundary) {\n    if (boundary.length > maxBoundaryLength) {\n        throw new Error(`Multipart boundary \"${boundary}\" exceeds maximum length of 70 characters`);\n    }\n    if (Array.from(boundary).some((x) => !validBoundaryCharacters.has(x))) {\n        throw new Error(`Multipart boundary \"${boundary}\" contains invalid characters`);\n    }\n}\n/**\n * Pipeline policy for multipart requests\n */\nfunction multipartPolicy() {\n    return {\n        name: multipartPolicyName,\n        async sendRequest(request, next) {\n            var _a;\n            if (!request.multipartBody) {\n                return next(request);\n            }\n            if (request.body) {\n                throw new Error(\"multipartBody and regular body cannot be set at the same time\");\n            }\n            let boundary = request.multipartBody.boundary;\n            const contentTypeHeader = (_a = request.headers.get(\"Content-Type\")) !== null && _a !== void 0 ? _a : \"multipart/mixed\";\n            const parsedHeader = contentTypeHeader.match(/^(multipart\\/[^ ;]+)(?:; *boundary=(.+))?$/);\n            if (!parsedHeader) {\n                throw new Error(`Got multipart request body, but content-type header was not multipart: ${contentTypeHeader}`);\n            }\n            const [, contentType, parsedBoundary] = parsedHeader;\n            if (parsedBoundary && boundary && parsedBoundary !== boundary) {\n                throw new Error(`Multipart boundary was specified as ${parsedBoundary} in the header, but got ${boundary} in the request body`);\n            }\n            boundary !== null && boundary !== void 0 ? boundary : (boundary = parsedBoundary);\n            if (boundary) {\n                assertValidBoundary(boundary);\n            }\n            else {\n                boundary = generateBoundary();\n            }\n            request.headers.set(\"Content-Type\", `${contentType}; boundary=${boundary}`);\n            await buildRequestBody(request, request.multipartBody.parts, boundary);\n            request.multipartBody = undefined;\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=multipartPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9tdWx0aXBhcnRQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ2tFO0FBQ3ZCO0FBQ0k7QUFDL0M7QUFDQSxtQ0FBbUMsNERBQVUsR0FBRztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixJQUFJLElBQUksTUFBTTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMkRBQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLG9FQUFrQixNQUFNLFNBQVM7QUFDekM7QUFDQSxZQUFZLG9FQUFrQjtBQUM5QixZQUFZLG9FQUFrQjtBQUM5QixZQUFZLG9FQUFrQjtBQUM5QjtBQUNBLFlBQVksb0VBQWtCLFVBQVUsU0FBUztBQUNqRDtBQUNBLFFBQVEsb0VBQWtCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdURBQU07QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFNBQVM7QUFDeEQ7QUFDQTtBQUNBLCtDQUErQyxTQUFTO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSxRQUFRO0FBQ25GO0FBQ0EsMEdBQTBHLGtCQUFrQjtBQUM1SDtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUsZ0JBQWdCLHlCQUF5QixVQUFVO0FBQzFIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsY0FBYyxXQUFXLFNBQVM7QUFDckY7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvbXVsdGlwYXJ0UG9saWN5LmpzPzllMjQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyByYW5kb21VVUlELCBzdHJpbmdUb1VpbnQ4QXJyYXkgfSBmcm9tIFwiQGF6dXJlL2NvcmUtdXRpbFwiO1xuaW1wb3J0IHsgY29uY2F0IH0gZnJvbSBcIi4uL3V0aWwvY29uY2F0LmpzXCI7XG5pbXBvcnQgeyBpc0Jsb2IgfSBmcm9tIFwiLi4vdXRpbC90eXBlR3VhcmRzLmpzXCI7XG5mdW5jdGlvbiBnZW5lcmF0ZUJvdW5kYXJ5KCkge1xuICAgIHJldHVybiBgLS0tLUF6U0RLRm9ybUJvdW5kYXJ5JHtyYW5kb21VVUlEKCl9YDtcbn1cbmZ1bmN0aW9uIGVuY29kZUhlYWRlcnMoaGVhZGVycykge1xuICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGhlYWRlcnMpIHtcbiAgICAgICAgcmVzdWx0ICs9IGAke2tleX06ICR7dmFsdWV9XFxyXFxuYDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldExlbmd0aChzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmJ5dGVMZW5ndGg7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQmxvYihzb3VyY2UpKSB7XG4gICAgICAgIC8vIGlmIHdhcyBjcmVhdGVkIHVzaW5nIGNyZWF0ZUZpbGUgdGhlbiAtMSBtZWFucyB3ZSBoYXZlIGFuIHVua25vd24gc2l6ZVxuICAgICAgICByZXR1cm4gc291cmNlLnNpemUgPT09IC0xID8gdW5kZWZpbmVkIDogc291cmNlLnNpemU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFRvdGFsTGVuZ3RoKHNvdXJjZXMpIHtcbiAgICBsZXQgdG90YWwgPSAwO1xuICAgIGZvciAoY29uc3Qgc291cmNlIG9mIHNvdXJjZXMpIHtcbiAgICAgICAgY29uc3QgcGFydExlbmd0aCA9IGdldExlbmd0aChzb3VyY2UpO1xuICAgICAgICBpZiAocGFydExlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdG90YWwgKz0gcGFydExlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG90YWw7XG59XG5hc3luYyBmdW5jdGlvbiBidWlsZFJlcXVlc3RCb2R5KHJlcXVlc3QsIHBhcnRzLCBib3VuZGFyeSkge1xuICAgIGNvbnN0IHNvdXJjZXMgPSBbXG4gICAgICAgIHN0cmluZ1RvVWludDhBcnJheShgLS0ke2JvdW5kYXJ5fWAsIFwidXRmLThcIiksXG4gICAgICAgIC4uLnBhcnRzLmZsYXRNYXAoKHBhcnQpID0+IFtcbiAgICAgICAgICAgIHN0cmluZ1RvVWludDhBcnJheShcIlxcclxcblwiLCBcInV0Zi04XCIpLFxuICAgICAgICAgICAgc3RyaW5nVG9VaW50OEFycmF5KGVuY29kZUhlYWRlcnMocGFydC5oZWFkZXJzKSwgXCJ1dGYtOFwiKSxcbiAgICAgICAgICAgIHN0cmluZ1RvVWludDhBcnJheShcIlxcclxcblwiLCBcInV0Zi04XCIpLFxuICAgICAgICAgICAgcGFydC5ib2R5LFxuICAgICAgICAgICAgc3RyaW5nVG9VaW50OEFycmF5KGBcXHJcXG4tLSR7Ym91bmRhcnl9YCwgXCJ1dGYtOFwiKSxcbiAgICAgICAgXSksXG4gICAgICAgIHN0cmluZ1RvVWludDhBcnJheShcIi0tXFxyXFxuXFxyXFxuXCIsIFwidXRmLThcIiksXG4gICAgXTtcbiAgICBjb25zdCBjb250ZW50TGVuZ3RoID0gZ2V0VG90YWxMZW5ndGgoc291cmNlcyk7XG4gICAgaWYgKGNvbnRlbnRMZW5ndGgpIHtcbiAgICAgICAgcmVxdWVzdC5oZWFkZXJzLnNldChcIkNvbnRlbnQtTGVuZ3RoXCIsIGNvbnRlbnRMZW5ndGgpO1xuICAgIH1cbiAgICByZXF1ZXN0LmJvZHkgPSBhd2FpdCBjb25jYXQoc291cmNlcyk7XG59XG4vKipcbiAqIE5hbWUgb2YgbXVsdGlwYXJ0IHBvbGljeVxuICovXG5leHBvcnQgY29uc3QgbXVsdGlwYXJ0UG9saWN5TmFtZSA9IFwibXVsdGlwYXJ0UG9saWN5XCI7XG5jb25zdCBtYXhCb3VuZGFyeUxlbmd0aCA9IDcwO1xuY29uc3QgdmFsaWRCb3VuZGFyeUNoYXJhY3RlcnMgPSBuZXcgU2V0KGBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMDEyMzQ1Njc4OScoKSssLS4vOj0/YCk7XG5mdW5jdGlvbiBhc3NlcnRWYWxpZEJvdW5kYXJ5KGJvdW5kYXJ5KSB7XG4gICAgaWYgKGJvdW5kYXJ5Lmxlbmd0aCA+IG1heEJvdW5kYXJ5TGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTXVsdGlwYXJ0IGJvdW5kYXJ5IFwiJHtib3VuZGFyeX1cIiBleGNlZWRzIG1heGltdW0gbGVuZ3RoIG9mIDcwIGNoYXJhY3RlcnNgKTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmZyb20oYm91bmRhcnkpLnNvbWUoKHgpID0+ICF2YWxpZEJvdW5kYXJ5Q2hhcmFjdGVycy5oYXMoeCkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTXVsdGlwYXJ0IGJvdW5kYXJ5IFwiJHtib3VuZGFyeX1cIiBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnNgKTtcbiAgICB9XG59XG4vKipcbiAqIFBpcGVsaW5lIHBvbGljeSBmb3IgbXVsdGlwYXJ0IHJlcXVlc3RzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBhcnRQb2xpY3koKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogbXVsdGlwYXJ0UG9saWN5TmFtZSxcbiAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKCFyZXF1ZXN0Lm11bHRpcGFydEJvZHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dChyZXF1ZXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LmJvZHkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJtdWx0aXBhcnRCb2R5IGFuZCByZWd1bGFyIGJvZHkgY2Fubm90IGJlIHNldCBhdCB0aGUgc2FtZSB0aW1lXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGJvdW5kYXJ5ID0gcmVxdWVzdC5tdWx0aXBhcnRCb2R5LmJvdW5kYXJ5O1xuICAgICAgICAgICAgY29uc3QgY29udGVudFR5cGVIZWFkZXIgPSAoX2EgPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIm11bHRpcGFydC9taXhlZFwiO1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkSGVhZGVyID0gY29udGVudFR5cGVIZWFkZXIubWF0Y2goL14obXVsdGlwYXJ0XFwvW14gO10rKSg/OjsgKmJvdW5kYXJ5PSguKykpPyQvKTtcbiAgICAgICAgICAgIGlmICghcGFyc2VkSGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBHb3QgbXVsdGlwYXJ0IHJlcXVlc3QgYm9keSwgYnV0IGNvbnRlbnQtdHlwZSBoZWFkZXIgd2FzIG5vdCBtdWx0aXBhcnQ6ICR7Y29udGVudFR5cGVIZWFkZXJ9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBbLCBjb250ZW50VHlwZSwgcGFyc2VkQm91bmRhcnldID0gcGFyc2VkSGVhZGVyO1xuICAgICAgICAgICAgaWYgKHBhcnNlZEJvdW5kYXJ5ICYmIGJvdW5kYXJ5ICYmIHBhcnNlZEJvdW5kYXJ5ICE9PSBib3VuZGFyeSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTXVsdGlwYXJ0IGJvdW5kYXJ5IHdhcyBzcGVjaWZpZWQgYXMgJHtwYXJzZWRCb3VuZGFyeX0gaW4gdGhlIGhlYWRlciwgYnV0IGdvdCAke2JvdW5kYXJ5fSBpbiB0aGUgcmVxdWVzdCBib2R5YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBib3VuZGFyeSAhPT0gbnVsbCAmJiBib3VuZGFyeSAhPT0gdm9pZCAwID8gYm91bmRhcnkgOiAoYm91bmRhcnkgPSBwYXJzZWRCb3VuZGFyeSk7XG4gICAgICAgICAgICBpZiAoYm91bmRhcnkpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZEJvdW5kYXJ5KGJvdW5kYXJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGJvdW5kYXJ5ID0gZ2VuZXJhdGVCb3VuZGFyeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzLnNldChcIkNvbnRlbnQtVHlwZVwiLCBgJHtjb250ZW50VHlwZX07IGJvdW5kYXJ5PSR7Ym91bmRhcnl9YCk7XG4gICAgICAgICAgICBhd2FpdCBidWlsZFJlcXVlc3RCb2R5KHJlcXVlc3QsIHJlcXVlc3QubXVsdGlwYXJ0Qm9keS5wYXJ0cywgYm91bmRhcnkpO1xuICAgICAgICAgICAgcmVxdWVzdC5tdWx0aXBhcnRCb2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmV0dXJuIG5leHQocmVxdWVzdCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11bHRpcGFydFBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/ndJsonPolicy.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/ndJsonPolicy.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ndJsonPolicy: () => (/* binding */ ndJsonPolicy),\n/* harmony export */   ndJsonPolicyName: () => (/* binding */ ndJsonPolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The programmatic identifier of the ndJsonPolicy.\n */\nconst ndJsonPolicyName = \"ndJsonPolicy\";\n/**\n * ndJsonPolicy is a policy used to control keep alive settings for every request.\n */\nfunction ndJsonPolicy() {\n    return {\n        name: ndJsonPolicyName,\n        async sendRequest(request, next) {\n            // There currently isn't a good way to bypass the serializer\n            if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n                const body = JSON.parse(request.body);\n                if (Array.isArray(body)) {\n                    request.body = body.map((item) => JSON.stringify(item) + \"\\n\").join(\"\");\n                }\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=ndJsonPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9uZEpzb25Qb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9uZEpzb25Qb2xpY3kuanM/MmQzZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8qKlxuICogVGhlIHByb2dyYW1tYXRpYyBpZGVudGlmaWVyIG9mIHRoZSBuZEpzb25Qb2xpY3kuXG4gKi9cbmV4cG9ydCBjb25zdCBuZEpzb25Qb2xpY3lOYW1lID0gXCJuZEpzb25Qb2xpY3lcIjtcbi8qKlxuICogbmRKc29uUG9saWN5IGlzIGEgcG9saWN5IHVzZWQgdG8gY29udHJvbCBrZWVwIGFsaXZlIHNldHRpbmdzIGZvciBldmVyeSByZXF1ZXN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbmRKc29uUG9saWN5KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IG5kSnNvblBvbGljeU5hbWUsXG4gICAgICAgIGFzeW5jIHNlbmRSZXF1ZXN0KHJlcXVlc3QsIG5leHQpIHtcbiAgICAgICAgICAgIC8vIFRoZXJlIGN1cnJlbnRseSBpc24ndCBhIGdvb2Qgd2F5IHRvIGJ5cGFzcyB0aGUgc2VyaWFsaXplclxuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0LmJvZHkgPT09IFwic3RyaW5nXCIgJiYgcmVxdWVzdC5ib2R5LnN0YXJ0c1dpdGgoXCJbXCIpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04ucGFyc2UocmVxdWVzdC5ib2R5KTtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShib2R5KSkge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmJvZHkgPSBib2R5Lm1hcCgoaXRlbSkgPT4gSlNPTi5zdHJpbmdpZnkoaXRlbSkgKyBcIlxcblwiKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcXVlc3QpO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZEpzb25Qb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/ndJsonPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDefaultProxySettings: () => (/* binding */ getDefaultProxySettings),\n/* harmony export */   globalNoProxyList: () => (/* binding */ globalNoProxyList),\n/* harmony export */   loadNoProxy: () => (/* binding */ loadNoProxy),\n/* harmony export */   proxyPolicy: () => (/* binding */ proxyPolicy),\n/* harmony export */   proxyPolicyName: () => (/* binding */ proxyPolicyName)\n/* harmony export */ });\n/* harmony import */ var https_proxy_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! https-proxy-agent */ \"(rsc)/./node_modules/https-proxy-agent/dist/index.js\");\n/* harmony import */ var http_proxy_agent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! http-proxy-agent */ \"(rsc)/./node_modules/http-proxy-agent/dist/index.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\nconst HTTPS_PROXY = \"HTTPS_PROXY\";\nconst HTTP_PROXY = \"HTTP_PROXY\";\nconst ALL_PROXY = \"ALL_PROXY\";\nconst NO_PROXY = \"NO_PROXY\";\n/**\n * The programmatic identifier of the proxyPolicy.\n */\nconst proxyPolicyName = \"proxyPolicy\";\n/**\n * Stores the patterns specified in NO_PROXY environment variable.\n * @internal\n */\nconst globalNoProxyList = [];\nlet noProxyListLoaded = false;\n/** A cache of whether a host should bypass the proxy. */\nconst globalBypassedMap = new Map();\nfunction getEnvironmentValue(name) {\n    if (process.env[name]) {\n        return process.env[name];\n    }\n    else if (process.env[name.toLowerCase()]) {\n        return process.env[name.toLowerCase()];\n    }\n    return undefined;\n}\nfunction loadEnvironmentProxyValue() {\n    if (!process) {\n        return undefined;\n    }\n    const httpsProxy = getEnvironmentValue(HTTPS_PROXY);\n    const allProxy = getEnvironmentValue(ALL_PROXY);\n    const httpProxy = getEnvironmentValue(HTTP_PROXY);\n    return httpsProxy || allProxy || httpProxy;\n}\n/**\n * Check whether the host of a given `uri` matches any pattern in the no proxy list.\n * If there's a match, any request sent to the same host shouldn't have the proxy settings set.\n * This implementation is a port of https://github.com/Azure/azure-sdk-for-net/blob/8cca811371159e527159c7eb65602477898683e2/sdk/core/Azure.Core/src/Pipeline/Internal/HttpEnvironmentProxy.cs#L210\n */\nfunction isBypassed(uri, noProxyList, bypassedMap) {\n    if (noProxyList.length === 0) {\n        return false;\n    }\n    const host = new URL(uri).hostname;\n    if (bypassedMap === null || bypassedMap === void 0 ? void 0 : bypassedMap.has(host)) {\n        return bypassedMap.get(host);\n    }\n    let isBypassedFlag = false;\n    for (const pattern of noProxyList) {\n        if (pattern[0] === \".\") {\n            // This should match either domain it self or any subdomain or host\n            // .foo.com will match foo.com it self or *.foo.com\n            if (host.endsWith(pattern)) {\n                isBypassedFlag = true;\n            }\n            else {\n                if (host.length === pattern.length - 1 && host === pattern.slice(1)) {\n                    isBypassedFlag = true;\n                }\n            }\n        }\n        else {\n            if (host === pattern) {\n                isBypassedFlag = true;\n            }\n        }\n    }\n    bypassedMap === null || bypassedMap === void 0 ? void 0 : bypassedMap.set(host, isBypassedFlag);\n    return isBypassedFlag;\n}\nfunction loadNoProxy() {\n    const noProxy = getEnvironmentValue(NO_PROXY);\n    noProxyListLoaded = true;\n    if (noProxy) {\n        return noProxy\n            .split(\",\")\n            .map((item) => item.trim())\n            .filter((item) => item.length);\n    }\n    return [];\n}\n/**\n * This method converts a proxy url into `ProxySettings` for use with ProxyPolicy.\n * If no argument is given, it attempts to parse a proxy URL from the environment\n * variables `HTTPS_PROXY` or `HTTP_PROXY`.\n * @param proxyUrl - The url of the proxy to use. May contain authentication information.\n * @deprecated - Internally this method is no longer necessary when setting proxy information.\n */\nfunction getDefaultProxySettings(proxyUrl) {\n    if (!proxyUrl) {\n        proxyUrl = loadEnvironmentProxyValue();\n        if (!proxyUrl) {\n            return undefined;\n        }\n    }\n    const parsedUrl = new URL(proxyUrl);\n    const schema = parsedUrl.protocol ? parsedUrl.protocol + \"//\" : \"\";\n    return {\n        host: schema + parsedUrl.hostname,\n        port: Number.parseInt(parsedUrl.port || \"80\"),\n        username: parsedUrl.username,\n        password: parsedUrl.password,\n    };\n}\n/**\n * This method attempts to parse a proxy URL from the environment\n * variables `HTTPS_PROXY` or `HTTP_PROXY`.\n */\nfunction getDefaultProxySettingsInternal() {\n    const envProxy = loadEnvironmentProxyValue();\n    return envProxy ? new URL(envProxy) : undefined;\n}\nfunction getUrlFromProxySettings(settings) {\n    let parsedProxyUrl;\n    try {\n        parsedProxyUrl = new URL(settings.host);\n    }\n    catch (_error) {\n        throw new Error(`Expecting a valid host string in proxy settings, but found \"${settings.host}\".`);\n    }\n    parsedProxyUrl.port = String(settings.port);\n    if (settings.username) {\n        parsedProxyUrl.username = settings.username;\n    }\n    if (settings.password) {\n        parsedProxyUrl.password = settings.password;\n    }\n    return parsedProxyUrl;\n}\nfunction setProxyAgentOnRequest(request, cachedAgents, proxyUrl) {\n    // Custom Agent should take precedence so if one is present\n    // we should skip to avoid overwriting it.\n    if (request.agent) {\n        return;\n    }\n    const url = new URL(request.url);\n    const isInsecure = url.protocol !== \"https:\";\n    if (request.tlsSettings) {\n        _log_js__WEBPACK_IMPORTED_MODULE_2__.logger.warning(\"TLS settings are not supported in combination with custom Proxy, certificates provided to the client will be ignored.\");\n    }\n    const headers = request.headers.toJSON();\n    if (isInsecure) {\n        if (!cachedAgents.httpProxyAgent) {\n            cachedAgents.httpProxyAgent = new http_proxy_agent__WEBPACK_IMPORTED_MODULE_1__.HttpProxyAgent(proxyUrl, { headers });\n        }\n        request.agent = cachedAgents.httpProxyAgent;\n    }\n    else {\n        if (!cachedAgents.httpsProxyAgent) {\n            cachedAgents.httpsProxyAgent = new https_proxy_agent__WEBPACK_IMPORTED_MODULE_0__.HttpsProxyAgent(proxyUrl, { headers });\n        }\n        request.agent = cachedAgents.httpsProxyAgent;\n    }\n}\n/**\n * A policy that allows one to apply proxy settings to all requests.\n * If not passed static settings, they will be retrieved from the HTTPS_PROXY\n * or HTTP_PROXY environment variables.\n * @param proxySettings - ProxySettings to use on each request.\n * @param options - additional settings, for example, custom NO_PROXY patterns\n */\nfunction proxyPolicy(proxySettings, options) {\n    if (!noProxyListLoaded) {\n        globalNoProxyList.push(...loadNoProxy());\n    }\n    const defaultProxy = proxySettings\n        ? getUrlFromProxySettings(proxySettings)\n        : getDefaultProxySettingsInternal();\n    const cachedAgents = {};\n    return {\n        name: proxyPolicyName,\n        async sendRequest(request, next) {\n            var _a;\n            if (!request.proxySettings &&\n                defaultProxy &&\n                !isBypassed(request.url, (_a = options === null || options === void 0 ? void 0 : options.customNoProxyList) !== null && _a !== void 0 ? _a : globalNoProxyList, (options === null || options === void 0 ? void 0 : options.customNoProxyList) ? undefined : globalBypassedMap)) {\n                setProxyAgentOnRequest(request, cachedAgents, defaultProxy);\n            }\n            else if (request.proxySettings) {\n                setProxyAgentOnRequest(request, cachedAgents, getUrlFromProxySettings(request.proxySettings));\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=proxyPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9wcm94eVBvbGljeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDb0Q7QUFDRjtBQUNmO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGLGNBQWM7QUFDckc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDJDQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsNERBQWMsYUFBYSxTQUFTO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsOERBQWUsYUFBYSxTQUFTO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9wcm94eVBvbGljeS5qcz8zMTNhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgSHR0cHNQcm94eUFnZW50IH0gZnJvbSBcImh0dHBzLXByb3h5LWFnZW50XCI7XG5pbXBvcnQgeyBIdHRwUHJveHlBZ2VudCB9IGZyb20gXCJodHRwLXByb3h5LWFnZW50XCI7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tIFwiLi4vbG9nLmpzXCI7XG5jb25zdCBIVFRQU19QUk9YWSA9IFwiSFRUUFNfUFJPWFlcIjtcbmNvbnN0IEhUVFBfUFJPWFkgPSBcIkhUVFBfUFJPWFlcIjtcbmNvbnN0IEFMTF9QUk9YWSA9IFwiQUxMX1BST1hZXCI7XG5jb25zdCBOT19QUk9YWSA9IFwiTk9fUFJPWFlcIjtcbi8qKlxuICogVGhlIHByb2dyYW1tYXRpYyBpZGVudGlmaWVyIG9mIHRoZSBwcm94eVBvbGljeS5cbiAqL1xuZXhwb3J0IGNvbnN0IHByb3h5UG9saWN5TmFtZSA9IFwicHJveHlQb2xpY3lcIjtcbi8qKlxuICogU3RvcmVzIHRoZSBwYXR0ZXJucyBzcGVjaWZpZWQgaW4gTk9fUFJPWFkgZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IGdsb2JhbE5vUHJveHlMaXN0ID0gW107XG5sZXQgbm9Qcm94eUxpc3RMb2FkZWQgPSBmYWxzZTtcbi8qKiBBIGNhY2hlIG9mIHdoZXRoZXIgYSBob3N0IHNob3VsZCBieXBhc3MgdGhlIHByb3h5LiAqL1xuY29uc3QgZ2xvYmFsQnlwYXNzZWRNYXAgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXRFbnZpcm9ubWVudFZhbHVlKG5hbWUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnZbbmFtZV0pIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3MuZW52W25hbWVdO1xuICAgIH1cbiAgICBlbHNlIGlmIChwcm9jZXNzLmVudltuYW1lLnRvTG93ZXJDYXNlKCldKSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzLmVudltuYW1lLnRvTG93ZXJDYXNlKCldO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gbG9hZEVudmlyb25tZW50UHJveHlWYWx1ZSgpIHtcbiAgICBpZiAoIXByb2Nlc3MpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgaHR0cHNQcm94eSA9IGdldEVudmlyb25tZW50VmFsdWUoSFRUUFNfUFJPWFkpO1xuICAgIGNvbnN0IGFsbFByb3h5ID0gZ2V0RW52aXJvbm1lbnRWYWx1ZShBTExfUFJPWFkpO1xuICAgIGNvbnN0IGh0dHBQcm94eSA9IGdldEVudmlyb25tZW50VmFsdWUoSFRUUF9QUk9YWSk7XG4gICAgcmV0dXJuIGh0dHBzUHJveHkgfHwgYWxsUHJveHkgfHwgaHR0cFByb3h5O1xufVxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBob3N0IG9mIGEgZ2l2ZW4gYHVyaWAgbWF0Y2hlcyBhbnkgcGF0dGVybiBpbiB0aGUgbm8gcHJveHkgbGlzdC5cbiAqIElmIHRoZXJlJ3MgYSBtYXRjaCwgYW55IHJlcXVlc3Qgc2VudCB0byB0aGUgc2FtZSBob3N0IHNob3VsZG4ndCBoYXZlIHRoZSBwcm94eSBzZXR0aW5ncyBzZXQuXG4gKiBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGEgcG9ydCBvZiBodHRwczovL2dpdGh1Yi5jb20vQXp1cmUvYXp1cmUtc2RrLWZvci1uZXQvYmxvYi84Y2NhODExMzcxMTU5ZTUyNzE1OWM3ZWI2NTYwMjQ3Nzg5ODY4M2UyL3Nkay9jb3JlL0F6dXJlLkNvcmUvc3JjL1BpcGVsaW5lL0ludGVybmFsL0h0dHBFbnZpcm9ubWVudFByb3h5LmNzI0wyMTBcbiAqL1xuZnVuY3Rpb24gaXNCeXBhc3NlZCh1cmksIG5vUHJveHlMaXN0LCBieXBhc3NlZE1hcCkge1xuICAgIGlmIChub1Byb3h5TGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBob3N0ID0gbmV3IFVSTCh1cmkpLmhvc3RuYW1lO1xuICAgIGlmIChieXBhc3NlZE1hcCA9PT0gbnVsbCB8fCBieXBhc3NlZE1hcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogYnlwYXNzZWRNYXAuaGFzKGhvc3QpKSB7XG4gICAgICAgIHJldHVybiBieXBhc3NlZE1hcC5nZXQoaG9zdCk7XG4gICAgfVxuICAgIGxldCBpc0J5cGFzc2VkRmxhZyA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBub1Byb3h5TGlzdCkge1xuICAgICAgICBpZiAocGF0dGVyblswXSA9PT0gXCIuXCIpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIG1hdGNoIGVpdGhlciBkb21haW4gaXQgc2VsZiBvciBhbnkgc3ViZG9tYWluIG9yIGhvc3RcbiAgICAgICAgICAgIC8vIC5mb28uY29tIHdpbGwgbWF0Y2ggZm9vLmNvbSBpdCBzZWxmIG9yICouZm9vLmNvbVxuICAgICAgICAgICAgaWYgKGhvc3QuZW5kc1dpdGgocGF0dGVybikpIHtcbiAgICAgICAgICAgICAgICBpc0J5cGFzc2VkRmxhZyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaG9zdC5sZW5ndGggPT09IHBhdHRlcm4ubGVuZ3RoIC0gMSAmJiBob3N0ID09PSBwYXR0ZXJuLnNsaWNlKDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzQnlwYXNzZWRGbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoaG9zdCA9PT0gcGF0dGVybikge1xuICAgICAgICAgICAgICAgIGlzQnlwYXNzZWRGbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBieXBhc3NlZE1hcCA9PT0gbnVsbCB8fCBieXBhc3NlZE1hcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogYnlwYXNzZWRNYXAuc2V0KGhvc3QsIGlzQnlwYXNzZWRGbGFnKTtcbiAgICByZXR1cm4gaXNCeXBhc3NlZEZsYWc7XG59XG5leHBvcnQgZnVuY3Rpb24gbG9hZE5vUHJveHkoKSB7XG4gICAgY29uc3Qgbm9Qcm94eSA9IGdldEVudmlyb25tZW50VmFsdWUoTk9fUFJPWFkpO1xuICAgIG5vUHJveHlMaXN0TG9hZGVkID0gdHJ1ZTtcbiAgICBpZiAobm9Qcm94eSkge1xuICAgICAgICByZXR1cm4gbm9Qcm94eVxuICAgICAgICAgICAgLnNwbGl0KFwiLFwiKVxuICAgICAgICAgICAgLm1hcCgoaXRlbSkgPT4gaXRlbS50cmltKCkpXG4gICAgICAgICAgICAuZmlsdGVyKChpdGVtKSA9PiBpdGVtLmxlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbn1cbi8qKlxuICogVGhpcyBtZXRob2QgY29udmVydHMgYSBwcm94eSB1cmwgaW50byBgUHJveHlTZXR0aW5nc2AgZm9yIHVzZSB3aXRoIFByb3h5UG9saWN5LlxuICogSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIGl0IGF0dGVtcHRzIHRvIHBhcnNlIGEgcHJveHkgVVJMIGZyb20gdGhlIGVudmlyb25tZW50XG4gKiB2YXJpYWJsZXMgYEhUVFBTX1BST1hZYCBvciBgSFRUUF9QUk9YWWAuXG4gKiBAcGFyYW0gcHJveHlVcmwgLSBUaGUgdXJsIG9mIHRoZSBwcm94eSB0byB1c2UuIE1heSBjb250YWluIGF1dGhlbnRpY2F0aW9uIGluZm9ybWF0aW9uLlxuICogQGRlcHJlY2F0ZWQgLSBJbnRlcm5hbGx5IHRoaXMgbWV0aG9kIGlzIG5vIGxvbmdlciBuZWNlc3Nhcnkgd2hlbiBzZXR0aW5nIHByb3h5IGluZm9ybWF0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3h5U2V0dGluZ3MocHJveHlVcmwpIHtcbiAgICBpZiAoIXByb3h5VXJsKSB7XG4gICAgICAgIHByb3h5VXJsID0gbG9hZEVudmlyb25tZW50UHJveHlWYWx1ZSgpO1xuICAgICAgICBpZiAoIXByb3h5VXJsKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHBhcnNlZFVybCA9IG5ldyBVUkwocHJveHlVcmwpO1xuICAgIGNvbnN0IHNjaGVtYSA9IHBhcnNlZFVybC5wcm90b2NvbCA/IHBhcnNlZFVybC5wcm90b2NvbCArIFwiLy9cIiA6IFwiXCI7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaG9zdDogc2NoZW1hICsgcGFyc2VkVXJsLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiBOdW1iZXIucGFyc2VJbnQocGFyc2VkVXJsLnBvcnQgfHwgXCI4MFwiKSxcbiAgICAgICAgdXNlcm5hbWU6IHBhcnNlZFVybC51c2VybmFtZSxcbiAgICAgICAgcGFzc3dvcmQ6IHBhcnNlZFVybC5wYXNzd29yZCxcbiAgICB9O1xufVxuLyoqXG4gKiBUaGlzIG1ldGhvZCBhdHRlbXB0cyB0byBwYXJzZSBhIHByb3h5IFVSTCBmcm9tIHRoZSBlbnZpcm9ubWVudFxuICogdmFyaWFibGVzIGBIVFRQU19QUk9YWWAgb3IgYEhUVFBfUFJPWFlgLlxuICovXG5mdW5jdGlvbiBnZXREZWZhdWx0UHJveHlTZXR0aW5nc0ludGVybmFsKCkge1xuICAgIGNvbnN0IGVudlByb3h5ID0gbG9hZEVudmlyb25tZW50UHJveHlWYWx1ZSgpO1xuICAgIHJldHVybiBlbnZQcm94eSA/IG5ldyBVUkwoZW52UHJveHkpIDogdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZ2V0VXJsRnJvbVByb3h5U2V0dGluZ3Moc2V0dGluZ3MpIHtcbiAgICBsZXQgcGFyc2VkUHJveHlVcmw7XG4gICAgdHJ5IHtcbiAgICAgICAgcGFyc2VkUHJveHlVcmwgPSBuZXcgVVJMKHNldHRpbmdzLmhvc3QpO1xuICAgIH1cbiAgICBjYXRjaCAoX2Vycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0aW5nIGEgdmFsaWQgaG9zdCBzdHJpbmcgaW4gcHJveHkgc2V0dGluZ3MsIGJ1dCBmb3VuZCBcIiR7c2V0dGluZ3MuaG9zdH1cIi5gKTtcbiAgICB9XG4gICAgcGFyc2VkUHJveHlVcmwucG9ydCA9IFN0cmluZyhzZXR0aW5ncy5wb3J0KTtcbiAgICBpZiAoc2V0dGluZ3MudXNlcm5hbWUpIHtcbiAgICAgICAgcGFyc2VkUHJveHlVcmwudXNlcm5hbWUgPSBzZXR0aW5ncy51c2VybmFtZTtcbiAgICB9XG4gICAgaWYgKHNldHRpbmdzLnBhc3N3b3JkKSB7XG4gICAgICAgIHBhcnNlZFByb3h5VXJsLnBhc3N3b3JkID0gc2V0dGluZ3MucGFzc3dvcmQ7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWRQcm94eVVybDtcbn1cbmZ1bmN0aW9uIHNldFByb3h5QWdlbnRPblJlcXVlc3QocmVxdWVzdCwgY2FjaGVkQWdlbnRzLCBwcm94eVVybCkge1xuICAgIC8vIEN1c3RvbSBBZ2VudCBzaG91bGQgdGFrZSBwcmVjZWRlbmNlIHNvIGlmIG9uZSBpcyBwcmVzZW50XG4gICAgLy8gd2Ugc2hvdWxkIHNraXAgdG8gYXZvaWQgb3ZlcndyaXRpbmcgaXQuXG4gICAgaWYgKHJlcXVlc3QuYWdlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBjb25zdCBpc0luc2VjdXJlID0gdXJsLnByb3RvY29sICE9PSBcImh0dHBzOlwiO1xuICAgIGlmIChyZXF1ZXN0LnRsc1NldHRpbmdzKSB7XG4gICAgICAgIGxvZ2dlci53YXJuaW5nKFwiVExTIHNldHRpbmdzIGFyZSBub3Qgc3VwcG9ydGVkIGluIGNvbWJpbmF0aW9uIHdpdGggY3VzdG9tIFByb3h5LCBjZXJ0aWZpY2F0ZXMgcHJvdmlkZWQgdG8gdGhlIGNsaWVudCB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICAgIH1cbiAgICBjb25zdCBoZWFkZXJzID0gcmVxdWVzdC5oZWFkZXJzLnRvSlNPTigpO1xuICAgIGlmIChpc0luc2VjdXJlKSB7XG4gICAgICAgIGlmICghY2FjaGVkQWdlbnRzLmh0dHBQcm94eUFnZW50KSB7XG4gICAgICAgICAgICBjYWNoZWRBZ2VudHMuaHR0cFByb3h5QWdlbnQgPSBuZXcgSHR0cFByb3h5QWdlbnQocHJveHlVcmwsIHsgaGVhZGVycyB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXF1ZXN0LmFnZW50ID0gY2FjaGVkQWdlbnRzLmh0dHBQcm94eUFnZW50O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKCFjYWNoZWRBZ2VudHMuaHR0cHNQcm94eUFnZW50KSB7XG4gICAgICAgICAgICBjYWNoZWRBZ2VudHMuaHR0cHNQcm94eUFnZW50ID0gbmV3IEh0dHBzUHJveHlBZ2VudChwcm94eVVybCwgeyBoZWFkZXJzIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJlcXVlc3QuYWdlbnQgPSBjYWNoZWRBZ2VudHMuaHR0cHNQcm94eUFnZW50O1xuICAgIH1cbn1cbi8qKlxuICogQSBwb2xpY3kgdGhhdCBhbGxvd3Mgb25lIHRvIGFwcGx5IHByb3h5IHNldHRpbmdzIHRvIGFsbCByZXF1ZXN0cy5cbiAqIElmIG5vdCBwYXNzZWQgc3RhdGljIHNldHRpbmdzLCB0aGV5IHdpbGwgYmUgcmV0cmlldmVkIGZyb20gdGhlIEhUVFBTX1BST1hZXG4gKiBvciBIVFRQX1BST1hZIGVudmlyb25tZW50IHZhcmlhYmxlcy5cbiAqIEBwYXJhbSBwcm94eVNldHRpbmdzIC0gUHJveHlTZXR0aW5ncyB0byB1c2Ugb24gZWFjaCByZXF1ZXN0LlxuICogQHBhcmFtIG9wdGlvbnMgLSBhZGRpdGlvbmFsIHNldHRpbmdzLCBmb3IgZXhhbXBsZSwgY3VzdG9tIE5PX1BST1hZIHBhdHRlcm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm94eVBvbGljeShwcm94eVNldHRpbmdzLCBvcHRpb25zKSB7XG4gICAgaWYgKCFub1Byb3h5TGlzdExvYWRlZCkge1xuICAgICAgICBnbG9iYWxOb1Byb3h5TGlzdC5wdXNoKC4uLmxvYWROb1Byb3h5KCkpO1xuICAgIH1cbiAgICBjb25zdCBkZWZhdWx0UHJveHkgPSBwcm94eVNldHRpbmdzXG4gICAgICAgID8gZ2V0VXJsRnJvbVByb3h5U2V0dGluZ3MocHJveHlTZXR0aW5ncylcbiAgICAgICAgOiBnZXREZWZhdWx0UHJveHlTZXR0aW5nc0ludGVybmFsKCk7XG4gICAgY29uc3QgY2FjaGVkQWdlbnRzID0ge307XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogcHJveHlQb2xpY3lOYW1lLFxuICAgICAgICBhc3luYyBzZW5kUmVxdWVzdChyZXF1ZXN0LCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAoIXJlcXVlc3QucHJveHlTZXR0aW5ncyAmJlxuICAgICAgICAgICAgICAgIGRlZmF1bHRQcm94eSAmJlxuICAgICAgICAgICAgICAgICFpc0J5cGFzc2VkKHJlcXVlc3QudXJsLCAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY3VzdG9tTm9Qcm94eUxpc3QpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGdsb2JhbE5vUHJveHlMaXN0LCAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmN1c3RvbU5vUHJveHlMaXN0KSA/IHVuZGVmaW5lZCA6IGdsb2JhbEJ5cGFzc2VkTWFwKSkge1xuICAgICAgICAgICAgICAgIHNldFByb3h5QWdlbnRPblJlcXVlc3QocmVxdWVzdCwgY2FjaGVkQWdlbnRzLCBkZWZhdWx0UHJveHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocmVxdWVzdC5wcm94eVNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgc2V0UHJveHlBZ2VudE9uUmVxdWVzdChyZXF1ZXN0LCBjYWNoZWRBZ2VudHMsIGdldFVybEZyb21Qcm94eVNldHRpbmdzKHJlcXVlc3QucHJveHlTZXR0aW5ncykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5leHQocmVxdWVzdCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3h5UG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   redirectPolicy: () => (/* binding */ redirectPolicy),\n/* harmony export */   redirectPolicyName: () => (/* binding */ redirectPolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nconst redirectPolicyName = \"redirectPolicy\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * In the browser, this policy is not used.\n * @param options - Options to control policy behavior.\n */\nfunction redirectPolicy(options = {}) {\n    const { maxRetries = 20 } = options;\n    return {\n        name: redirectPolicyName,\n        async sendRequest(request, next) {\n            const response = await next(request);\n            return handleRedirect(next, response, maxRetries);\n        },\n    };\n}\nasync function handleRedirect(next, response, maxRetries, currentRetries = 0) {\n    const { request, status, headers } = response;\n    const locationHeader = headers.get(\"location\");\n    if (locationHeader &&\n        (status === 300 ||\n            (status === 301 && allowedRedirect.includes(request.method)) ||\n            (status === 302 && allowedRedirect.includes(request.method)) ||\n            (status === 303 && request.method === \"POST\") ||\n            status === 307) &&\n        currentRetries < maxRetries) {\n        const url = new URL(locationHeader, request.url);\n        request.url = url.toString();\n        // POST request with Status code 303 should be converted into a\n        // redirected GET request if the redirect url is present in the location header\n        if (status === 303) {\n            request.method = \"GET\";\n            request.headers.delete(\"Content-Length\");\n            delete request.body;\n        }\n        request.headers.delete(\"Authorization\");\n        const res = await next(request);\n        return handleRedirect(next, res, maxRetries, currentRetries + 1);\n    }\n    return response;\n}\n//# sourceMappingURL=redirectPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9yZWRpcmVjdFBvbGljeS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sb0NBQW9DO0FBQzNDLFlBQVksa0JBQWtCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsWUFBWSwyQkFBMkI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9yZWRpcmVjdFBvbGljeS5qcz84ZGQ0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBUaGUgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgb2YgdGhlIHJlZGlyZWN0UG9saWN5LlxuICovXG5leHBvcnQgY29uc3QgcmVkaXJlY3RQb2xpY3lOYW1lID0gXCJyZWRpcmVjdFBvbGljeVwiO1xuLyoqXG4gKiBNZXRob2RzIHRoYXQgYXJlIGFsbG93ZWQgdG8gZm9sbG93IHJlZGlyZWN0cyAzMDEgYW5kIDMwMlxuICovXG5jb25zdCBhbGxvd2VkUmVkaXJlY3QgPSBbXCJHRVRcIiwgXCJIRUFEXCJdO1xuLyoqXG4gKiBBIHBvbGljeSB0byBmb2xsb3cgTG9jYXRpb24gaGVhZGVycyBmcm9tIHRoZSBzZXJ2ZXIgaW4gb3JkZXJcbiAqIHRvIHN1cHBvcnQgc2VydmVyLXNpZGUgcmVkaXJlY3Rpb24uXG4gKiBJbiB0aGUgYnJvd3NlciwgdGhpcyBwb2xpY3kgaXMgbm90IHVzZWQuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gY29udHJvbCBwb2xpY3kgYmVoYXZpb3IuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWRpcmVjdFBvbGljeShvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IG1heFJldHJpZXMgPSAyMCB9ID0gb3B0aW9ucztcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiByZWRpcmVjdFBvbGljeU5hbWUsXG4gICAgICAgIGFzeW5jIHNlbmRSZXF1ZXN0KHJlcXVlc3QsIG5leHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbmV4dChyZXF1ZXN0KTtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVSZWRpcmVjdChuZXh0LCByZXNwb25zZSwgbWF4UmV0cmllcyk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZVJlZGlyZWN0KG5leHQsIHJlc3BvbnNlLCBtYXhSZXRyaWVzLCBjdXJyZW50UmV0cmllcyA9IDApIHtcbiAgICBjb25zdCB7IHJlcXVlc3QsIHN0YXR1cywgaGVhZGVycyB9ID0gcmVzcG9uc2U7XG4gICAgY29uc3QgbG9jYXRpb25IZWFkZXIgPSBoZWFkZXJzLmdldChcImxvY2F0aW9uXCIpO1xuICAgIGlmIChsb2NhdGlvbkhlYWRlciAmJlxuICAgICAgICAoc3RhdHVzID09PSAzMDAgfHxcbiAgICAgICAgICAgIChzdGF0dXMgPT09IDMwMSAmJiBhbGxvd2VkUmVkaXJlY3QuaW5jbHVkZXMocmVxdWVzdC5tZXRob2QpKSB8fFxuICAgICAgICAgICAgKHN0YXR1cyA9PT0gMzAyICYmIGFsbG93ZWRSZWRpcmVjdC5pbmNsdWRlcyhyZXF1ZXN0Lm1ldGhvZCkpIHx8XG4gICAgICAgICAgICAoc3RhdHVzID09PSAzMDMgJiYgcmVxdWVzdC5tZXRob2QgPT09IFwiUE9TVFwiKSB8fFxuICAgICAgICAgICAgc3RhdHVzID09PSAzMDcpICYmXG4gICAgICAgIGN1cnJlbnRSZXRyaWVzIDwgbWF4UmV0cmllcykge1xuICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGxvY2F0aW9uSGVhZGVyLCByZXF1ZXN0LnVybCk7XG4gICAgICAgIHJlcXVlc3QudXJsID0gdXJsLnRvU3RyaW5nKCk7XG4gICAgICAgIC8vIFBPU1QgcmVxdWVzdCB3aXRoIFN0YXR1cyBjb2RlIDMwMyBzaG91bGQgYmUgY29udmVydGVkIGludG8gYVxuICAgICAgICAvLyByZWRpcmVjdGVkIEdFVCByZXF1ZXN0IGlmIHRoZSByZWRpcmVjdCB1cmwgaXMgcHJlc2VudCBpbiB0aGUgbG9jYXRpb24gaGVhZGVyXG4gICAgICAgIGlmIChzdGF0dXMgPT09IDMwMykge1xuICAgICAgICAgICAgcmVxdWVzdC5tZXRob2QgPSBcIkdFVFwiO1xuICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzLmRlbGV0ZShcIkNvbnRlbnQtTGVuZ3RoXCIpO1xuICAgICAgICAgICAgZGVsZXRlIHJlcXVlc3QuYm9keTtcbiAgICAgICAgfVxuICAgICAgICByZXF1ZXN0LmhlYWRlcnMuZGVsZXRlKFwiQXV0aG9yaXphdGlvblwiKTtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgbmV4dChyZXF1ZXN0KTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZVJlZGlyZWN0KG5leHQsIHJlcywgbWF4UmV0cmllcywgY3VycmVudFJldHJpZXMgKyAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkaXJlY3RQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   retryPolicy: () => (/* binding */ retryPolicy)\n/* harmony export */ });\n/* harmony import */ var _util_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/helpers.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/helpers.js\");\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/esm/index.js\");\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/esm/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\nconst retryPolicyLogger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_1__.createClientLogger)(\"core-rest-pipeline retryPolicy\");\n/**\n * The programmatic identifier of the retryPolicy.\n */\nconst retryPolicyName = \"retryPolicy\";\n/**\n * retryPolicy is a generic policy to enable retrying requests when certain conditions are met\n */\nfunction retryPolicy(strategies, options = { maxRetries: _constants_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_RETRY_POLICY_COUNT }) {\n    const logger = options.logger || retryPolicyLogger;\n    return {\n        name: retryPolicyName,\n        async sendRequest(request, next) {\n            var _a, _b;\n            let response;\n            let responseError;\n            let retryCount = -1;\n            // eslint-disable-next-line no-constant-condition\n            retryRequest: while (true) {\n                retryCount += 1;\n                response = undefined;\n                responseError = undefined;\n                try {\n                    logger.info(`Retry ${retryCount}: Attempting to send request`, request.requestId);\n                    response = await next(request);\n                    logger.info(`Retry ${retryCount}: Received a response from request`, request.requestId);\n                }\n                catch (e) {\n                    logger.error(`Retry ${retryCount}: Received an error from request`, request.requestId);\n                    // RestErrors are valid targets for the retry strategies.\n                    // If none of the retry strategies can work with them, they will be thrown later in this policy.\n                    // If the received error is not a RestError, it is immediately thrown.\n                    responseError = e;\n                    if (!e || responseError.name !== \"RestError\") {\n                        throw e;\n                    }\n                    response = responseError.response;\n                }\n                if ((_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted) {\n                    logger.error(`Retry ${retryCount}: Request aborted.`);\n                    const abortError = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_2__.AbortError();\n                    throw abortError;\n                }\n                if (retryCount >= ((_b = options.maxRetries) !== null && _b !== void 0 ? _b : _constants_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_RETRY_POLICY_COUNT)) {\n                    logger.info(`Retry ${retryCount}: Maximum retries reached. Returning the last received response, or throwing the last received error.`);\n                    if (responseError) {\n                        throw responseError;\n                    }\n                    else if (response) {\n                        return response;\n                    }\n                    else {\n                        throw new Error(\"Maximum retries reached with no response or error to throw\");\n                    }\n                }\n                logger.info(`Retry ${retryCount}: Processing ${strategies.length} retry strategies.`);\n                strategiesLoop: for (const strategy of strategies) {\n                    const strategyLogger = strategy.logger || retryPolicyLogger;\n                    strategyLogger.info(`Retry ${retryCount}: Processing retry strategy ${strategy.name}.`);\n                    const modifiers = strategy.retry({\n                        retryCount,\n                        response,\n                        responseError,\n                    });\n                    if (modifiers.skipStrategy) {\n                        strategyLogger.info(`Retry ${retryCount}: Skipped.`);\n                        continue strategiesLoop;\n                    }\n                    const { errorToThrow, retryAfterInMs, redirectTo } = modifiers;\n                    if (errorToThrow) {\n                        strategyLogger.error(`Retry ${retryCount}: Retry strategy ${strategy.name} throws error:`, errorToThrow);\n                        throw errorToThrow;\n                    }\n                    if (retryAfterInMs || retryAfterInMs === 0) {\n                        strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} retries after ${retryAfterInMs}`);\n                        await (0,_util_helpers_js__WEBPACK_IMPORTED_MODULE_0__.delay)(retryAfterInMs, undefined, { abortSignal: request.abortSignal });\n                        continue retryRequest;\n                    }\n                    if (redirectTo) {\n                        strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} redirects to ${redirectTo}`);\n                        request.url = redirectTo;\n                        continue retryRequest;\n                    }\n                }\n                if (responseError) {\n                    logger.info(`None of the retry strategies could work with the received error. Throwing it.`);\n                    throw responseError;\n                }\n                if (response) {\n                    logger.info(`None of the retry strategies could work with the received response. Returning it.`);\n                    return response;\n                }\n                // If all the retries skip and there's no response,\n                // we're still in the retry loop, so a new request will be sent\n                // until `maxRetries` is reached.\n            }\n        },\n    };\n}\n//# sourceMappingURL=retryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setClientRequestIdPolicy: () => (/* binding */ setClientRequestIdPolicy),\n/* harmony export */   setClientRequestIdPolicyName: () => (/* binding */ setClientRequestIdPolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The programmatic identifier of the setClientRequestIdPolicy.\n */\nconst setClientRequestIdPolicyName = \"setClientRequestIdPolicy\";\n/**\n * Each PipelineRequest gets a unique id upon creation.\n * This policy passes that unique id along via an HTTP header to enable better\n * telemetry and tracing.\n * @param requestIdHeaderName - The name of the header to pass the request ID to.\n */\nfunction setClientRequestIdPolicy(requestIdHeaderName = \"x-ms-client-request-id\") {\n    return {\n        name: setClientRequestIdPolicyName,\n        async sendRequest(request, next) {\n            if (!request.headers.has(requestIdHeaderName)) {\n                request.headers.set(requestIdHeaderName, request.requestId);\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=setClientRequestIdPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9zZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvc2V0Q2xpZW50UmVxdWVzdElkUG9saWN5LmpzP2Y1OTYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIFRoZSBwcm9ncmFtbWF0aWMgaWRlbnRpZmllciBvZiB0aGUgc2V0Q2xpZW50UmVxdWVzdElkUG9saWN5LlxuICovXG5leHBvcnQgY29uc3Qgc2V0Q2xpZW50UmVxdWVzdElkUG9saWN5TmFtZSA9IFwic2V0Q2xpZW50UmVxdWVzdElkUG9saWN5XCI7XG4vKipcbiAqIEVhY2ggUGlwZWxpbmVSZXF1ZXN0IGdldHMgYSB1bmlxdWUgaWQgdXBvbiBjcmVhdGlvbi5cbiAqIFRoaXMgcG9saWN5IHBhc3NlcyB0aGF0IHVuaXF1ZSBpZCBhbG9uZyB2aWEgYW4gSFRUUCBoZWFkZXIgdG8gZW5hYmxlIGJldHRlclxuICogdGVsZW1ldHJ5IGFuZCB0cmFjaW5nLlxuICogQHBhcmFtIHJlcXVlc3RJZEhlYWRlck5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgaGVhZGVyIHRvIHBhc3MgdGhlIHJlcXVlc3QgSUQgdG8uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3kocmVxdWVzdElkSGVhZGVyTmFtZSA9IFwieC1tcy1jbGllbnQtcmVxdWVzdC1pZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogc2V0Q2xpZW50UmVxdWVzdElkUG9saWN5TmFtZSxcbiAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICAgICAgaWYgKCFyZXF1ZXN0LmhlYWRlcnMuaGFzKHJlcXVlc3RJZEhlYWRlck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzLnNldChyZXF1ZXN0SWRIZWFkZXJOYW1lLCByZXF1ZXN0LnJlcXVlc3RJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV4dChyZXF1ZXN0KTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2V0Q2xpZW50UmVxdWVzdElkUG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/systemErrorRetryPolicy.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/systemErrorRetryPolicy.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   systemErrorRetryPolicy: () => (/* binding */ systemErrorRetryPolicy),\n/* harmony export */   systemErrorRetryPolicyName: () => (/* binding */ systemErrorRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../retryStrategies/exponentialRetryStrategy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/exponentialRetryStrategy.js\");\n/* harmony import */ var _retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./retryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n/**\n * Name of the {@link systemErrorRetryPolicy}\n */\nconst systemErrorRetryPolicyName = \"systemErrorRetryPolicy\";\n/**\n * A retry policy that specifically seeks to handle errors in the\n * underlying transport layer (e.g. DNS lookup failures) rather than\n * retryable error codes from the server itself.\n * @param options - Options that customize the policy.\n */\nfunction systemErrorRetryPolicy(options = {}) {\n    var _a;\n    return {\n        name: systemErrorRetryPolicyName,\n        sendRequest: (0,_retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.retryPolicy)([\n            (0,_retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__.exponentialRetryStrategy)(Object.assign(Object.assign({}, options), { ignoreHttpStatusCodes: true })),\n        ], {\n            maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : _constants_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_RETRY_POLICY_COUNT,\n        }).sendRequest,\n    };\n}\n//# sourceMappingURL=systemErrorRetryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9zeXN0ZW1FcnJvclJldHJ5UG9saWN5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUMwRjtBQUMzQztBQUNjO0FBQzdEO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyw0Q0FBNEM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDREQUFXO0FBQ2hDLFlBQVksc0dBQXdCLCtCQUErQixjQUFjLDZCQUE2QjtBQUM5RztBQUNBLG1GQUFtRixxRUFBMEI7QUFDN0csU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvc3lzdGVtRXJyb3JSZXRyeVBvbGljeS5qcz80ZjdmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgZXhwb25lbnRpYWxSZXRyeVN0cmF0ZWd5IH0gZnJvbSBcIi4uL3JldHJ5U3RyYXRlZ2llcy9leHBvbmVudGlhbFJldHJ5U3RyYXRlZ3kuanNcIjtcbmltcG9ydCB7IHJldHJ5UG9saWN5IH0gZnJvbSBcIi4vcmV0cnlQb2xpY3kuanNcIjtcbmltcG9ydCB7IERFRkFVTFRfUkVUUllfUE9MSUNZX0NPVU5UIH0gZnJvbSBcIi4uL2NvbnN0YW50cy5qc1wiO1xuLyoqXG4gKiBOYW1lIG9mIHRoZSB7QGxpbmsgc3lzdGVtRXJyb3JSZXRyeVBvbGljeX1cbiAqL1xuZXhwb3J0IGNvbnN0IHN5c3RlbUVycm9yUmV0cnlQb2xpY3lOYW1lID0gXCJzeXN0ZW1FcnJvclJldHJ5UG9saWN5XCI7XG4vKipcbiAqIEEgcmV0cnkgcG9saWN5IHRoYXQgc3BlY2lmaWNhbGx5IHNlZWtzIHRvIGhhbmRsZSBlcnJvcnMgaW4gdGhlXG4gKiB1bmRlcmx5aW5nIHRyYW5zcG9ydCBsYXllciAoZS5nLiBETlMgbG9va3VwIGZhaWx1cmVzKSByYXRoZXIgdGhhblxuICogcmV0cnlhYmxlIGVycm9yIGNvZGVzIGZyb20gdGhlIHNlcnZlciBpdHNlbGYuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdGhhdCBjdXN0b21pemUgdGhlIHBvbGljeS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN5c3RlbUVycm9yUmV0cnlQb2xpY3kob3B0aW9ucyA9IHt9KSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IHN5c3RlbUVycm9yUmV0cnlQb2xpY3lOYW1lLFxuICAgICAgICBzZW5kUmVxdWVzdDogcmV0cnlQb2xpY3koW1xuICAgICAgICAgICAgZXhwb25lbnRpYWxSZXRyeVN0cmF0ZWd5KE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgaWdub3JlSHR0cFN0YXR1c0NvZGVzOiB0cnVlIH0pKSxcbiAgICAgICAgXSwge1xuICAgICAgICAgICAgbWF4UmV0cmllczogKF9hID0gb3B0aW9ucy5tYXhSZXRyaWVzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBERUZBVUxUX1JFVFJZX1BPTElDWV9DT1VOVCxcbiAgICAgICAgfSkuc2VuZFJlcXVlc3QsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN5c3RlbUVycm9yUmV0cnlQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/systemErrorRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/throttlingRetryPolicy.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/throttlingRetryPolicy.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   throttlingRetryPolicy: () => (/* binding */ throttlingRetryPolicy),\n/* harmony export */   throttlingRetryPolicyName: () => (/* binding */ throttlingRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _retryStrategies_throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../retryStrategies/throttlingRetryStrategy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/throttlingRetryStrategy.js\");\n/* harmony import */ var _retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./retryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n/**\n * Name of the {@link throttlingRetryPolicy}\n */\nconst throttlingRetryPolicyName = \"throttlingRetryPolicy\";\n/**\n * A policy that retries when the server sends a 429 response with a Retry-After header.\n *\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n *\n * @param options - Options that configure retry logic.\n */\nfunction throttlingRetryPolicy(options = {}) {\n    var _a;\n    return {\n        name: throttlingRetryPolicyName,\n        sendRequest: (0,_retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.retryPolicy)([(0,_retryStrategies_throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__.throttlingRetryStrategy)()], {\n            maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : _constants_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_RETRY_POLICY_COUNT,\n        }).sendRequest,\n    };\n}\n//# sourceMappingURL=throttlingRetryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy90aHJvdHRsaW5nUmV0cnlQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ3dGO0FBQ3pDO0FBQ2M7QUFDN0Q7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sMkNBQTJDO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw0REFBVyxFQUFFLG9HQUF1QjtBQUN6RCxtRkFBbUYscUVBQTBCO0FBQzdHLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3BvbGljaWVzL3Rocm90dGxpbmdSZXRyeVBvbGljeS5qcz83YzcyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgdGhyb3R0bGluZ1JldHJ5U3RyYXRlZ3kgfSBmcm9tIFwiLi4vcmV0cnlTdHJhdGVnaWVzL3Rocm90dGxpbmdSZXRyeVN0cmF0ZWd5LmpzXCI7XG5pbXBvcnQgeyByZXRyeVBvbGljeSB9IGZyb20gXCIuL3JldHJ5UG9saWN5LmpzXCI7XG5pbXBvcnQgeyBERUZBVUxUX1JFVFJZX1BPTElDWV9DT1VOVCB9IGZyb20gXCIuLi9jb25zdGFudHMuanNcIjtcbi8qKlxuICogTmFtZSBvZiB0aGUge0BsaW5rIHRocm90dGxpbmdSZXRyeVBvbGljeX1cbiAqL1xuZXhwb3J0IGNvbnN0IHRocm90dGxpbmdSZXRyeVBvbGljeU5hbWUgPSBcInRocm90dGxpbmdSZXRyeVBvbGljeVwiO1xuLyoqXG4gKiBBIHBvbGljeSB0aGF0IHJldHJpZXMgd2hlbiB0aGUgc2VydmVyIHNlbmRzIGEgNDI5IHJlc3BvbnNlIHdpdGggYSBSZXRyeS1BZnRlciBoZWFkZXIuXG4gKlxuICogVG8gbGVhcm4gbW9yZSwgcGxlYXNlIHJlZmVyIHRvXG4gKiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9henVyZS1yZXNvdXJjZS1tYW5hZ2VyL3Jlc291cmNlLW1hbmFnZXItcmVxdWVzdC1saW1pdHMsXG4gKiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9henVyZS1zdWJzY3JpcHRpb24tc2VydmljZS1saW1pdHMgYW5kXG4gKiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS92aXJ0dWFsLW1hY2hpbmVzL3Ryb3VibGVzaG9vdGluZy90cm91Ymxlc2hvb3RpbmctdGhyb3R0bGluZy1lcnJvcnNcbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdGhhdCBjb25maWd1cmUgcmV0cnkgbG9naWMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aHJvdHRsaW5nUmV0cnlQb2xpY3kob3B0aW9ucyA9IHt9KSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IHRocm90dGxpbmdSZXRyeVBvbGljeU5hbWUsXG4gICAgICAgIHNlbmRSZXF1ZXN0OiByZXRyeVBvbGljeShbdGhyb3R0bGluZ1JldHJ5U3RyYXRlZ3koKV0sIHtcbiAgICAgICAgICAgIG1heFJldHJpZXM6IChfYSA9IG9wdGlvbnMubWF4UmV0cmllcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogREVGQVVMVF9SRVRSWV9QT0xJQ1lfQ09VTlQsXG4gICAgICAgIH0pLnNlbmRSZXF1ZXN0LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvdHRsaW5nUmV0cnlQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/throttlingRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tlsPolicy: () => (/* binding */ tlsPolicy),\n/* harmony export */   tlsPolicyName: () => (/* binding */ tlsPolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Name of the TLS Policy\n */\nconst tlsPolicyName = \"tlsPolicy\";\n/**\n * Gets a pipeline policy that adds the client certificate to the HttpClient agent for authentication.\n */\nfunction tlsPolicy(tlsSettings) {\n    return {\n        name: tlsPolicyName,\n        sendRequest: async (req, next) => {\n            // Users may define a request tlsSettings, honor those over the client level one\n            if (!req.tlsSettings) {\n                req.tlsSettings = tlsSettings;\n            }\n            return next(req);\n        },\n    };\n}\n//# sourceMappingURL=tlsPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy90bHNQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy90bHNQb2xpY3kuanM/Y2YyYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8qKlxuICogTmFtZSBvZiB0aGUgVExTIFBvbGljeVxuICovXG5leHBvcnQgY29uc3QgdGxzUG9saWN5TmFtZSA9IFwidGxzUG9saWN5XCI7XG4vKipcbiAqIEdldHMgYSBwaXBlbGluZSBwb2xpY3kgdGhhdCBhZGRzIHRoZSBjbGllbnQgY2VydGlmaWNhdGUgdG8gdGhlIEh0dHBDbGllbnQgYWdlbnQgZm9yIGF1dGhlbnRpY2F0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGxzUG9saWN5KHRsc1NldHRpbmdzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogdGxzUG9saWN5TmFtZSxcbiAgICAgICAgc2VuZFJlcXVlc3Q6IGFzeW5jIChyZXEsIG5leHQpID0+IHtcbiAgICAgICAgICAgIC8vIFVzZXJzIG1heSBkZWZpbmUgYSByZXF1ZXN0IHRsc1NldHRpbmdzLCBob25vciB0aG9zZSBvdmVyIHRoZSBjbGllbnQgbGV2ZWwgb25lXG4gICAgICAgICAgICBpZiAoIXJlcS50bHNTZXR0aW5ncykge1xuICAgICAgICAgICAgICAgIHJlcS50bHNTZXR0aW5ncyA9IHRsc1NldHRpbmdzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5leHQocmVxKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGxzUG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tracingPolicy: () => (/* binding */ tracingPolicy),\n/* harmony export */   tracingPolicyName: () => (/* binding */ tracingPolicyName)\n/* harmony export */ });\n/* harmony import */ var _azure_core_tracing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-tracing */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\");\n/* harmony import */ var _util_userAgent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/userAgent.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _restError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../restError.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js\");\n/* harmony import */ var _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/sanitizer.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/sanitizer.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nconst tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nfunction tracingPolicy(options = {}) {\n    const userAgentPromise = (0,_util_userAgent_js__WEBPACK_IMPORTED_MODULE_2__.getUserAgentValue)(options.userAgentPrefix);\n    const sanitizer = new _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_6__.Sanitizer({\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n    });\n    const tracingClient = tryCreateTracingClient();\n    return {\n        name: tracingPolicyName,\n        async sendRequest(request, next) {\n            var _a, _b;\n            if (!tracingClient || !((_a = request.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext)) {\n                return next(request);\n            }\n            const userAgent = await userAgentPromise;\n            const spanAttributes = {\n                \"http.url\": sanitizer.sanitizeUrl(request.url),\n                \"http.method\": request.method,\n                \"http.user_agent\": userAgent,\n                requestId: request.requestId,\n            };\n            if (userAgent) {\n                spanAttributes[\"http.user_agent\"] = userAgent;\n            }\n            const { span, tracingContext } = (_b = tryCreateSpan(tracingClient, request, spanAttributes)) !== null && _b !== void 0 ? _b : {};\n            if (!span || !tracingContext) {\n                return next(request);\n            }\n            try {\n                const response = await tracingClient.withContext(tracingContext, next, request);\n                tryProcessResponse(span, response);\n                return response;\n            }\n            catch (err) {\n                tryProcessError(span, err);\n                throw err;\n            }\n        },\n    };\n}\nfunction tryCreateTracingClient() {\n    try {\n        return (0,_azure_core_tracing__WEBPACK_IMPORTED_MODULE_0__.createTracingClient)({\n            namespace: \"\",\n            packageName: \"@azure/core-rest-pipeline\",\n            packageVersion: _constants_js__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION,\n        });\n    }\n    catch (e) {\n        _log_js__WEBPACK_IMPORTED_MODULE_3__.logger.warning(`Error when creating the TracingClient: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.getErrorMessage)(e)}`);\n        return undefined;\n    }\n}\nfunction tryCreateSpan(tracingClient, request, spanAttributes) {\n    try {\n        // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n        const { span, updatedOptions } = tracingClient.startSpan(`HTTP ${request.method}`, { tracingOptions: request.tracingOptions }, {\n            spanKind: \"client\",\n            spanAttributes,\n        });\n        // If the span is not recording, don't do any more work.\n        if (!span.isRecording()) {\n            span.end();\n            return undefined;\n        }\n        // set headers\n        const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);\n        for (const [key, value] of Object.entries(headers)) {\n            request.headers.set(key, value);\n        }\n        return { span, tracingContext: updatedOptions.tracingOptions.tracingContext };\n    }\n    catch (e) {\n        _log_js__WEBPACK_IMPORTED_MODULE_3__.logger.warning(`Skipping creating a tracing span due to an error: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.getErrorMessage)(e)}`);\n        return undefined;\n    }\n}\nfunction tryProcessError(span, error) {\n    try {\n        span.setStatus({\n            status: \"error\",\n            error: (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.isError)(error) ? error : undefined,\n        });\n        if ((0,_restError_js__WEBPACK_IMPORTED_MODULE_5__.isRestError)(error) && error.statusCode) {\n            span.setAttribute(\"http.status_code\", error.statusCode);\n        }\n        span.end();\n    }\n    catch (e) {\n        _log_js__WEBPACK_IMPORTED_MODULE_3__.logger.warning(`Skipping tracing span processing due to an error: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.getErrorMessage)(e)}`);\n    }\n}\nfunction tryProcessResponse(span, response) {\n    try {\n        span.setAttribute(\"http.status_code\", response.status);\n        const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n        if (serviceRequestId) {\n            span.setAttribute(\"serviceRequestId\", serviceRequestId);\n        }\n        span.setStatus({\n            status: \"success\",\n        });\n        span.end();\n    }\n    catch (e) {\n        _log_js__WEBPACK_IMPORTED_MODULE_3__.logger.warning(`Skipping tracing span processing due to an error: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.getErrorMessage)(e)}`);\n    }\n}\n//# sourceMappingURL=tracingPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   userAgentPolicy: () => (/* binding */ userAgentPolicy),\n/* harmony export */   userAgentPolicyName: () => (/* binding */ userAgentPolicyName)\n/* harmony export */ });\n/* harmony import */ var _util_userAgent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/userAgent.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst UserAgentHeaderName = (0,_util_userAgent_js__WEBPACK_IMPORTED_MODULE_0__.getUserAgentHeaderName)();\n/**\n * The programmatic identifier of the userAgentPolicy.\n */\nconst userAgentPolicyName = \"userAgentPolicy\";\n/**\n * A policy that sets the User-Agent header (or equivalent) to reflect\n * the library version.\n * @param options - Options to customize the user agent value.\n */\nfunction userAgentPolicy(options = {}) {\n    const userAgentValue = (0,_util_userAgent_js__WEBPACK_IMPORTED_MODULE_0__.getUserAgentValue)(options.userAgentPrefix);\n    return {\n        name: userAgentPolicyName,\n        async sendRequest(request, next) {\n            if (!request.headers.has(UserAgentHeaderName)) {\n                request.headers.set(UserAgentHeaderName, await userAgentValue);\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=userAgentPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy91c2VyQWdlbnRQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNpRjtBQUNqRiw0QkFBNEIsMEVBQXNCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHFDQUFxQztBQUM1QywyQkFBMkIscUVBQWlCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvdXNlckFnZW50UG9saWN5LmpzPzhkYjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBnZXRVc2VyQWdlbnRIZWFkZXJOYW1lLCBnZXRVc2VyQWdlbnRWYWx1ZSB9IGZyb20gXCIuLi91dGlsL3VzZXJBZ2VudC5qc1wiO1xuY29uc3QgVXNlckFnZW50SGVhZGVyTmFtZSA9IGdldFVzZXJBZ2VudEhlYWRlck5hbWUoKTtcbi8qKlxuICogVGhlIHByb2dyYW1tYXRpYyBpZGVudGlmaWVyIG9mIHRoZSB1c2VyQWdlbnRQb2xpY3kuXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VyQWdlbnRQb2xpY3lOYW1lID0gXCJ1c2VyQWdlbnRQb2xpY3lcIjtcbi8qKlxuICogQSBwb2xpY3kgdGhhdCBzZXRzIHRoZSBVc2VyLUFnZW50IGhlYWRlciAob3IgZXF1aXZhbGVudCkgdG8gcmVmbGVjdFxuICogdGhlIGxpYnJhcnkgdmVyc2lvbi5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBjdXN0b21pemUgdGhlIHVzZXIgYWdlbnQgdmFsdWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VyQWdlbnRQb2xpY3kob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgdXNlckFnZW50VmFsdWUgPSBnZXRVc2VyQWdlbnRWYWx1ZShvcHRpb25zLnVzZXJBZ2VudFByZWZpeCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogdXNlckFnZW50UG9saWN5TmFtZSxcbiAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICAgICAgaWYgKCFyZXF1ZXN0LmhlYWRlcnMuaGFzKFVzZXJBZ2VudEhlYWRlck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzLnNldChVc2VyQWdlbnRIZWFkZXJOYW1lLCBhd2FpdCB1c2VyQWdlbnRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV4dChyZXF1ZXN0KTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlckFnZW50UG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RestError: () => (/* binding */ RestError),\n/* harmony export */   isRestError: () => (/* binding */ isRestError)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _util_inspect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/inspect.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/inspect.js\");\n/* harmony import */ var _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/sanitizer.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/sanitizer.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\nconst errorSanitizer = new _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_2__.Sanitizer();\n/**\n * A custom error type for failed pipeline requests.\n */\nclass RestError extends Error {\n    constructor(message, options = {}) {\n        super(message);\n        this.name = \"RestError\";\n        this.code = options.code;\n        this.statusCode = options.statusCode;\n        this.request = options.request;\n        this.response = options.response;\n        Object.setPrototypeOf(this, RestError.prototype);\n    }\n    /**\n     * Logging method for util.inspect in Node\n     */\n    [_util_inspect_js__WEBPACK_IMPORTED_MODULE_1__.custom]() {\n        return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(this)}`;\n    }\n}\n/**\n * Something went wrong when making the request.\n * This means the actual request failed for some reason,\n * such as a DNS issue or the connection being lost.\n */\nRestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n/**\n * This means that parsing the response from the server failed.\n * It may have been malformed.\n */\nRestError.PARSE_ERROR = \"PARSE_ERROR\";\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nfunction isRestError(e) {\n    if (e instanceof RestError) {\n        return true;\n    }\n    return (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isError)(e) && e.name === \"RestError\";\n}\n//# sourceMappingURL=restError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9yZXN0RXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQzJDO0FBQ0E7QUFDSztBQUNoRCwyQkFBMkIseURBQVM7QUFDcEM7QUFDQTtBQUNBO0FBQ087QUFDUCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssb0RBQU07QUFDWCw2QkFBNkIsY0FBYyxLQUFLLDhCQUE4QjtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxXQUFXLHlEQUFPO0FBQ2xCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3Jlc3RFcnJvci5qcz80YmRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgaXNFcnJvciB9IGZyb20gXCJAYXp1cmUvY29yZS11dGlsXCI7XG5pbXBvcnQgeyBjdXN0b20gfSBmcm9tIFwiLi91dGlsL2luc3BlY3QuanNcIjtcbmltcG9ydCB7IFNhbml0aXplciB9IGZyb20gXCIuL3V0aWwvc2FuaXRpemVyLmpzXCI7XG5jb25zdCBlcnJvclNhbml0aXplciA9IG5ldyBTYW5pdGl6ZXIoKTtcbi8qKlxuICogQSBjdXN0b20gZXJyb3IgdHlwZSBmb3IgZmFpbGVkIHBpcGVsaW5lIHJlcXVlc3RzLlxuICovXG5leHBvcnQgY2xhc3MgUmVzdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJSZXN0RXJyb3JcIjtcbiAgICAgICAgdGhpcy5jb2RlID0gb3B0aW9ucy5jb2RlO1xuICAgICAgICB0aGlzLnN0YXR1c0NvZGUgPSBvcHRpb25zLnN0YXR1c0NvZGU7XG4gICAgICAgIHRoaXMucmVxdWVzdCA9IG9wdGlvbnMucmVxdWVzdDtcbiAgICAgICAgdGhpcy5yZXNwb25zZSA9IG9wdGlvbnMucmVzcG9uc2U7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBSZXN0RXJyb3IucHJvdG90eXBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9nZ2luZyBtZXRob2QgZm9yIHV0aWwuaW5zcGVjdCBpbiBOb2RlXG4gICAgICovXG4gICAgW2N1c3RvbV0oKSB7XG4gICAgICAgIHJldHVybiBgUmVzdEVycm9yOiAke3RoaXMubWVzc2FnZX0gXFxuICR7ZXJyb3JTYW5pdGl6ZXIuc2FuaXRpemUodGhpcyl9YDtcbiAgICB9XG59XG4vKipcbiAqIFNvbWV0aGluZyB3ZW50IHdyb25nIHdoZW4gbWFraW5nIHRoZSByZXF1ZXN0LlxuICogVGhpcyBtZWFucyB0aGUgYWN0dWFsIHJlcXVlc3QgZmFpbGVkIGZvciBzb21lIHJlYXNvbixcbiAqIHN1Y2ggYXMgYSBETlMgaXNzdWUgb3IgdGhlIGNvbm5lY3Rpb24gYmVpbmcgbG9zdC5cbiAqL1xuUmVzdEVycm9yLlJFUVVFU1RfU0VORF9FUlJPUiA9IFwiUkVRVUVTVF9TRU5EX0VSUk9SXCI7XG4vKipcbiAqIFRoaXMgbWVhbnMgdGhhdCBwYXJzaW5nIHRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIgZmFpbGVkLlxuICogSXQgbWF5IGhhdmUgYmVlbiBtYWxmb3JtZWQuXG4gKi9cblJlc3RFcnJvci5QQVJTRV9FUlJPUiA9IFwiUEFSU0VfRVJST1JcIjtcbi8qKlxuICogVHlwZWd1YXJkIGZvciBSZXN0RXJyb3JcbiAqIEBwYXJhbSBlIC0gU29tZXRoaW5nIGNhdWdodCBieSBhIGNhdGNoIGNsYXVzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUmVzdEVycm9yKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFJlc3RFcnJvcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRXJyb3IoZSkgJiYgZS5uYW1lID09PSBcIlJlc3RFcnJvclwiO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzdEVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/exponentialRetryStrategy.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/exponentialRetryStrategy.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exponentialRetryStrategy: () => (/* binding */ exponentialRetryStrategy),\n/* harmony export */   isExponentialRetryResponse: () => (/* binding */ isExponentialRetryResponse),\n/* harmony export */   isSystemError: () => (/* binding */ isSystemError)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./throttlingRetryStrategy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/throttlingRetryStrategy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n// intervals are in milliseconds\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n/**\n * A retry strategy that retries with an exponentially increasing delay in these two cases:\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails (408, greater or equal than 500, except for 501 and 505).\n */\nfunction exponentialRetryStrategy(options = {}) {\n    var _a, _b;\n    const retryInterval = (_a = options.retryDelayInMs) !== null && _a !== void 0 ? _a : DEFAULT_CLIENT_RETRY_INTERVAL;\n    const maxRetryInterval = (_b = options.maxRetryDelayInMs) !== null && _b !== void 0 ? _b : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n    let retryAfterInMs = retryInterval;\n    return {\n        name: \"exponentialRetryStrategy\",\n        retry({ retryCount, response, responseError }) {\n            const matchedSystemError = isSystemError(responseError);\n            const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;\n            const isExponential = isExponentialRetryResponse(response);\n            const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;\n            const unknownResponse = response && ((0,_throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_1__.isThrottlingRetryResponse)(response) || !isExponential);\n            if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {\n                return { skipStrategy: true };\n            }\n            if (responseError && !matchedSystemError && !isExponential) {\n                return { errorToThrow: responseError };\n            }\n            // Exponentially increase the delay each time\n            const exponentialDelay = retryAfterInMs * Math.pow(2, retryCount);\n            // Don't let the delay exceed the maximum\n            const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);\n            // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n            // that retries across multiple clients don't occur simultaneously.\n            retryAfterInMs =\n                clampedExponentialDelay / 2 + (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.getRandomIntegerInclusive)(0, clampedExponentialDelay / 2);\n            return { retryAfterInMs };\n        },\n    };\n}\n/**\n * A response is a retry response if it has status codes:\n * - 408, or\n * - Greater or equal than 500, except for 501 and 505.\n */\nfunction isExponentialRetryResponse(response) {\n    return Boolean(response &&\n        response.status !== undefined &&\n        (response.status >= 500 || response.status === 408) &&\n        response.status !== 501 &&\n        response.status !== 505);\n}\n/**\n * Determines whether an error from a pipeline response was triggered in the network layer.\n */\nfunction isSystemError(err) {\n    if (!err) {\n        return false;\n    }\n    return (err.code === \"ETIMEDOUT\" ||\n        err.code === \"ESOCKETTIMEDOUT\" ||\n        err.code === \"ECONNREFUSED\" ||\n        err.code === \"ECONNRESET\" ||\n        err.code === \"ENOENT\" ||\n        err.code === \"ENOTFOUND\");\n}\n//# sourceMappingURL=exponentialRetryStrategy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9yZXRyeVN0cmF0ZWdpZXMvZXhwb25lbnRpYWxSZXRyeVN0cmF0ZWd5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUM2RDtBQUNZO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyw4Q0FBOEM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHFDQUFxQztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxzRkFBeUI7QUFDMUU7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLDJFQUF5QjtBQUN2RSxxQkFBcUI7QUFDckIsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3JldHJ5U3RyYXRlZ2llcy9leHBvbmVudGlhbFJldHJ5U3RyYXRlZ3kuanM/YjBkYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IGdldFJhbmRvbUludGVnZXJJbmNsdXNpdmUgfSBmcm9tIFwiQGF6dXJlL2NvcmUtdXRpbFwiO1xuaW1wb3J0IHsgaXNUaHJvdHRsaW5nUmV0cnlSZXNwb25zZSB9IGZyb20gXCIuL3Rocm90dGxpbmdSZXRyeVN0cmF0ZWd5LmpzXCI7XG4vLyBpbnRlcnZhbHMgYXJlIGluIG1pbGxpc2Vjb25kc1xuY29uc3QgREVGQVVMVF9DTElFTlRfUkVUUllfSU5URVJWQUwgPSAxMDAwO1xuY29uc3QgREVGQVVMVF9DTElFTlRfTUFYX1JFVFJZX0lOVEVSVkFMID0gMTAwMCAqIDY0O1xuLyoqXG4gKiBBIHJldHJ5IHN0cmF0ZWd5IHRoYXQgcmV0cmllcyB3aXRoIGFuIGV4cG9uZW50aWFsbHkgaW5jcmVhc2luZyBkZWxheSBpbiB0aGVzZSB0d28gY2FzZXM6XG4gKiAtIFdoZW4gdGhlcmUgYXJlIGVycm9ycyBpbiB0aGUgdW5kZXJseWluZyB0cmFuc3BvcnQgbGF5ZXIgKGUuZy4gRE5TIGxvb2t1cCBmYWlsdXJlcykuXG4gKiAtIE9yIG90aGVyd2lzZSBpZiB0aGUgb3V0Z29pbmcgcmVxdWVzdCBmYWlscyAoNDA4LCBncmVhdGVyIG9yIGVxdWFsIHRoYW4gNTAwLCBleGNlcHQgZm9yIDUwMSBhbmQgNTA1KS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4cG9uZW50aWFsUmV0cnlTdHJhdGVneShvcHRpb25zID0ge30pIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IHJldHJ5SW50ZXJ2YWwgPSAoX2EgPSBvcHRpb25zLnJldHJ5RGVsYXlJbk1zKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBERUZBVUxUX0NMSUVOVF9SRVRSWV9JTlRFUlZBTDtcbiAgICBjb25zdCBtYXhSZXRyeUludGVydmFsID0gKF9iID0gb3B0aW9ucy5tYXhSZXRyeURlbGF5SW5NcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogREVGQVVMVF9DTElFTlRfTUFYX1JFVFJZX0lOVEVSVkFMO1xuICAgIGxldCByZXRyeUFmdGVySW5NcyA9IHJldHJ5SW50ZXJ2YWw7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogXCJleHBvbmVudGlhbFJldHJ5U3RyYXRlZ3lcIixcbiAgICAgICAgcmV0cnkoeyByZXRyeUNvdW50LCByZXNwb25zZSwgcmVzcG9uc2VFcnJvciB9KSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVkU3lzdGVtRXJyb3IgPSBpc1N5c3RlbUVycm9yKHJlc3BvbnNlRXJyb3IpO1xuICAgICAgICAgICAgY29uc3QgaWdub3JlU3lzdGVtRXJyb3JzID0gbWF0Y2hlZFN5c3RlbUVycm9yICYmIG9wdGlvbnMuaWdub3JlU3lzdGVtRXJyb3JzO1xuICAgICAgICAgICAgY29uc3QgaXNFeHBvbmVudGlhbCA9IGlzRXhwb25lbnRpYWxSZXRyeVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIGNvbnN0IGlnbm9yZUV4cG9uZW50aWFsUmVzcG9uc2UgPSBpc0V4cG9uZW50aWFsICYmIG9wdGlvbnMuaWdub3JlSHR0cFN0YXR1c0NvZGVzO1xuICAgICAgICAgICAgY29uc3QgdW5rbm93blJlc3BvbnNlID0gcmVzcG9uc2UgJiYgKGlzVGhyb3R0bGluZ1JldHJ5UmVzcG9uc2UocmVzcG9uc2UpIHx8ICFpc0V4cG9uZW50aWFsKTtcbiAgICAgICAgICAgIGlmICh1bmtub3duUmVzcG9uc2UgfHwgaWdub3JlRXhwb25lbnRpYWxSZXNwb25zZSB8fCBpZ25vcmVTeXN0ZW1FcnJvcnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBza2lwU3RyYXRlZ3k6IHRydWUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXNwb25zZUVycm9yICYmICFtYXRjaGVkU3lzdGVtRXJyb3IgJiYgIWlzRXhwb25lbnRpYWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBlcnJvclRvVGhyb3c6IHJlc3BvbnNlRXJyb3IgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEV4cG9uZW50aWFsbHkgaW5jcmVhc2UgdGhlIGRlbGF5IGVhY2ggdGltZVxuICAgICAgICAgICAgY29uc3QgZXhwb25lbnRpYWxEZWxheSA9IHJldHJ5QWZ0ZXJJbk1zICogTWF0aC5wb3coMiwgcmV0cnlDb3VudCk7XG4gICAgICAgICAgICAvLyBEb24ndCBsZXQgdGhlIGRlbGF5IGV4Y2VlZCB0aGUgbWF4aW11bVxuICAgICAgICAgICAgY29uc3QgY2xhbXBlZEV4cG9uZW50aWFsRGVsYXkgPSBNYXRoLm1pbihtYXhSZXRyeUludGVydmFsLCBleHBvbmVudGlhbERlbGF5KTtcbiAgICAgICAgICAgIC8vIEFsbG93IHRoZSBmaW5hbCB2YWx1ZSB0byBoYXZlIHNvbWUgXCJqaXR0ZXJcIiAod2l0aGluIDUwJSBvZiB0aGUgZGVsYXkgc2l6ZSkgc29cbiAgICAgICAgICAgIC8vIHRoYXQgcmV0cmllcyBhY3Jvc3MgbXVsdGlwbGUgY2xpZW50cyBkb24ndCBvY2N1ciBzaW11bHRhbmVvdXNseS5cbiAgICAgICAgICAgIHJldHJ5QWZ0ZXJJbk1zID1cbiAgICAgICAgICAgICAgICBjbGFtcGVkRXhwb25lbnRpYWxEZWxheSAvIDIgKyBnZXRSYW5kb21JbnRlZ2VySW5jbHVzaXZlKDAsIGNsYW1wZWRFeHBvbmVudGlhbERlbGF5IC8gMik7XG4gICAgICAgICAgICByZXR1cm4geyByZXRyeUFmdGVySW5NcyB9O1xuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIEEgcmVzcG9uc2UgaXMgYSByZXRyeSByZXNwb25zZSBpZiBpdCBoYXMgc3RhdHVzIGNvZGVzOlxuICogLSA0MDgsIG9yXG4gKiAtIEdyZWF0ZXIgb3IgZXF1YWwgdGhhbiA1MDAsIGV4Y2VwdCBmb3IgNTAxIGFuZCA1MDUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0V4cG9uZW50aWFsUmV0cnlSZXNwb25zZShyZXNwb25zZSkge1xuICAgIHJldHVybiBCb29sZWFuKHJlc3BvbnNlICYmXG4gICAgICAgIHJlc3BvbnNlLnN0YXR1cyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIChyZXNwb25zZS5zdGF0dXMgPj0gNTAwIHx8IHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA4KSAmJlxuICAgICAgICByZXNwb25zZS5zdGF0dXMgIT09IDUwMSAmJlxuICAgICAgICByZXNwb25zZS5zdGF0dXMgIT09IDUwNSk7XG59XG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhbiBlcnJvciBmcm9tIGEgcGlwZWxpbmUgcmVzcG9uc2Ugd2FzIHRyaWdnZXJlZCBpbiB0aGUgbmV0d29yayBsYXllci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3lzdGVtRXJyb3IoZXJyKSB7XG4gICAgaWYgKCFlcnIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKGVyci5jb2RlID09PSBcIkVUSU1FRE9VVFwiIHx8XG4gICAgICAgIGVyci5jb2RlID09PSBcIkVTT0NLRVRUSU1FRE9VVFwiIHx8XG4gICAgICAgIGVyci5jb2RlID09PSBcIkVDT05OUkVGVVNFRFwiIHx8XG4gICAgICAgIGVyci5jb2RlID09PSBcIkVDT05OUkVTRVRcIiB8fFxuICAgICAgICBlcnIuY29kZSA9PT0gXCJFTk9FTlRcIiB8fFxuICAgICAgICBlcnIuY29kZSA9PT0gXCJFTk9URk9VTkRcIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHBvbmVudGlhbFJldHJ5U3RyYXRlZ3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/exponentialRetryStrategy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/throttlingRetryStrategy.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/throttlingRetryStrategy.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isThrottlingRetryResponse: () => (/* binding */ isThrottlingRetryResponse),\n/* harmony export */   throttlingRetryStrategy: () => (/* binding */ throttlingRetryStrategy)\n/* harmony export */ });\n/* harmony import */ var _util_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/helpers.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/helpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * The header that comes back from Azure services representing\n * the amount of time (minimum) to wait to retry (in seconds or timestamp after which we can retry).\n */\nconst RetryAfterHeader = \"Retry-After\";\n/**\n * The headers that come back from Azure services representing\n * the amount of time (minimum) to wait to retry.\n *\n * \"retry-after-ms\", \"x-ms-retry-after-ms\" : milliseconds\n * \"Retry-After\" : seconds or timestamp\n */\nconst AllRetryAfterHeaders = [\"retry-after-ms\", \"x-ms-retry-after-ms\", RetryAfterHeader];\n/**\n * A response is a throttling retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n *\n * Returns the `retryAfterInMs` value if the response is a throttling retry response.\n * If not throttling retry response, returns `undefined`.\n *\n * @internal\n */\nfunction getRetryAfterInMs(response) {\n    if (!(response && [429, 503].includes(response.status)))\n        return undefined;\n    try {\n        // Headers: \"retry-after-ms\", \"x-ms-retry-after-ms\", \"Retry-After\"\n        for (const header of AllRetryAfterHeaders) {\n            const retryAfterValue = (0,_util_helpers_js__WEBPACK_IMPORTED_MODULE_0__.parseHeaderValueAsNumber)(response, header);\n            if (retryAfterValue === 0 || retryAfterValue) {\n                // \"Retry-After\" header ==> seconds\n                // \"retry-after-ms\", \"x-ms-retry-after-ms\" headers ==> milli-seconds\n                const multiplyingFactor = header === RetryAfterHeader ? 1000 : 1;\n                return retryAfterValue * multiplyingFactor; // in milli-seconds\n            }\n        }\n        // RetryAfterHeader (\"Retry-After\") has a special case where it might be formatted as a date instead of a number of seconds\n        const retryAfterHeader = response.headers.get(RetryAfterHeader);\n        if (!retryAfterHeader)\n            return;\n        const date = Date.parse(retryAfterHeader);\n        const diff = date - Date.now();\n        // negative diff would mean a date in the past, so retry asap with 0 milliseconds\n        return Number.isFinite(diff) ? Math.max(0, diff) : undefined;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n */\nfunction isThrottlingRetryResponse(response) {\n    return Number.isFinite(getRetryAfterInMs(response));\n}\nfunction throttlingRetryStrategy() {\n    return {\n        name: \"throttlingRetryStrategy\",\n        retry({ response }) {\n            const retryAfterInMs = getRetryAfterInMs(response);\n            if (!Number.isFinite(retryAfterInMs)) {\n                return { skipStrategy: true };\n            }\n            return {\n                retryAfterInMs,\n            };\n        },\n    };\n}\n//# sourceMappingURL=throttlingRetryStrategy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9yZXRyeVN0cmF0ZWdpZXMvdGhyb3R0bGluZ1JldHJ5U3RyYXRlZ3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUM4RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQywwRUFBd0I7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQ7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcmV0cnlTdHJhdGVnaWVzL3Rocm90dGxpbmdSZXRyeVN0cmF0ZWd5LmpzPzA3YmEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBwYXJzZUhlYWRlclZhbHVlQXNOdW1iZXIgfSBmcm9tIFwiLi4vdXRpbC9oZWxwZXJzLmpzXCI7XG4vKipcbiAqIFRoZSBoZWFkZXIgdGhhdCBjb21lcyBiYWNrIGZyb20gQXp1cmUgc2VydmljZXMgcmVwcmVzZW50aW5nXG4gKiB0aGUgYW1vdW50IG9mIHRpbWUgKG1pbmltdW0pIHRvIHdhaXQgdG8gcmV0cnkgKGluIHNlY29uZHMgb3IgdGltZXN0YW1wIGFmdGVyIHdoaWNoIHdlIGNhbiByZXRyeSkuXG4gKi9cbmNvbnN0IFJldHJ5QWZ0ZXJIZWFkZXIgPSBcIlJldHJ5LUFmdGVyXCI7XG4vKipcbiAqIFRoZSBoZWFkZXJzIHRoYXQgY29tZSBiYWNrIGZyb20gQXp1cmUgc2VydmljZXMgcmVwcmVzZW50aW5nXG4gKiB0aGUgYW1vdW50IG9mIHRpbWUgKG1pbmltdW0pIHRvIHdhaXQgdG8gcmV0cnkuXG4gKlxuICogXCJyZXRyeS1hZnRlci1tc1wiLCBcIngtbXMtcmV0cnktYWZ0ZXItbXNcIiA6IG1pbGxpc2Vjb25kc1xuICogXCJSZXRyeS1BZnRlclwiIDogc2Vjb25kcyBvciB0aW1lc3RhbXBcbiAqL1xuY29uc3QgQWxsUmV0cnlBZnRlckhlYWRlcnMgPSBbXCJyZXRyeS1hZnRlci1tc1wiLCBcIngtbXMtcmV0cnktYWZ0ZXItbXNcIiwgUmV0cnlBZnRlckhlYWRlcl07XG4vKipcbiAqIEEgcmVzcG9uc2UgaXMgYSB0aHJvdHRsaW5nIHJldHJ5IHJlc3BvbnNlIGlmIGl0IGhhcyBhIHRocm90dGxpbmcgc3RhdHVzIGNvZGUgKDQyOSBvciA1MDMpLFxuICogYXMgbG9uZyBhcyBvbmUgb2YgdGhlIFsgXCJSZXRyeS1BZnRlclwiIG9yIFwicmV0cnktYWZ0ZXItbXNcIiBvciBcIngtbXMtcmV0cnktYWZ0ZXItbXNcIiBdIGhlYWRlcnMgaGFzIGEgdmFsaWQgdmFsdWUuXG4gKlxuICogUmV0dXJucyB0aGUgYHJldHJ5QWZ0ZXJJbk1zYCB2YWx1ZSBpZiB0aGUgcmVzcG9uc2UgaXMgYSB0aHJvdHRsaW5nIHJldHJ5IHJlc3BvbnNlLlxuICogSWYgbm90IHRocm90dGxpbmcgcmV0cnkgcmVzcG9uc2UsIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldFJldHJ5QWZ0ZXJJbk1zKHJlc3BvbnNlKSB7XG4gICAgaWYgKCEocmVzcG9uc2UgJiYgWzQyOSwgNTAzXS5pbmNsdWRlcyhyZXNwb25zZS5zdGF0dXMpKSlcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB0cnkge1xuICAgICAgICAvLyBIZWFkZXJzOiBcInJldHJ5LWFmdGVyLW1zXCIsIFwieC1tcy1yZXRyeS1hZnRlci1tc1wiLCBcIlJldHJ5LUFmdGVyXCJcbiAgICAgICAgZm9yIChjb25zdCBoZWFkZXIgb2YgQWxsUmV0cnlBZnRlckhlYWRlcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJldHJ5QWZ0ZXJWYWx1ZSA9IHBhcnNlSGVhZGVyVmFsdWVBc051bWJlcihyZXNwb25zZSwgaGVhZGVyKTtcbiAgICAgICAgICAgIGlmIChyZXRyeUFmdGVyVmFsdWUgPT09IDAgfHwgcmV0cnlBZnRlclZhbHVlKSB7XG4gICAgICAgICAgICAgICAgLy8gXCJSZXRyeS1BZnRlclwiIGhlYWRlciA9PT4gc2Vjb25kc1xuICAgICAgICAgICAgICAgIC8vIFwicmV0cnktYWZ0ZXItbXNcIiwgXCJ4LW1zLXJldHJ5LWFmdGVyLW1zXCIgaGVhZGVycyA9PT4gbWlsbGktc2Vjb25kc1xuICAgICAgICAgICAgICAgIGNvbnN0IG11bHRpcGx5aW5nRmFjdG9yID0gaGVhZGVyID09PSBSZXRyeUFmdGVySGVhZGVyID8gMTAwMCA6IDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldHJ5QWZ0ZXJWYWx1ZSAqIG11bHRpcGx5aW5nRmFjdG9yOyAvLyBpbiBtaWxsaS1zZWNvbmRzXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmV0cnlBZnRlckhlYWRlciAoXCJSZXRyeS1BZnRlclwiKSBoYXMgYSBzcGVjaWFsIGNhc2Ugd2hlcmUgaXQgbWlnaHQgYmUgZm9ybWF0dGVkIGFzIGEgZGF0ZSBpbnN0ZWFkIG9mIGEgbnVtYmVyIG9mIHNlY29uZHNcbiAgICAgICAgY29uc3QgcmV0cnlBZnRlckhlYWRlciA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFJldHJ5QWZ0ZXJIZWFkZXIpO1xuICAgICAgICBpZiAoIXJldHJ5QWZ0ZXJIZWFkZXIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGRhdGUgPSBEYXRlLnBhcnNlKHJldHJ5QWZ0ZXJIZWFkZXIpO1xuICAgICAgICBjb25zdCBkaWZmID0gZGF0ZSAtIERhdGUubm93KCk7XG4gICAgICAgIC8vIG5lZ2F0aXZlIGRpZmYgd291bGQgbWVhbiBhIGRhdGUgaW4gdGhlIHBhc3QsIHNvIHJldHJ5IGFzYXAgd2l0aCAwIG1pbGxpc2Vjb25kc1xuICAgICAgICByZXR1cm4gTnVtYmVyLmlzRmluaXRlKGRpZmYpID8gTWF0aC5tYXgoMCwgZGlmZikgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuLyoqXG4gKiBBIHJlc3BvbnNlIGlzIGEgcmV0cnkgcmVzcG9uc2UgaWYgaXQgaGFzIGEgdGhyb3R0bGluZyBzdGF0dXMgY29kZSAoNDI5IG9yIDUwMyksXG4gKiBhcyBsb25nIGFzIG9uZSBvZiB0aGUgWyBcIlJldHJ5LUFmdGVyXCIgb3IgXCJyZXRyeS1hZnRlci1tc1wiIG9yIFwieC1tcy1yZXRyeS1hZnRlci1tc1wiIF0gaGVhZGVycyBoYXMgYSB2YWxpZCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVGhyb3R0bGluZ1JldHJ5UmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gTnVtYmVyLmlzRmluaXRlKGdldFJldHJ5QWZ0ZXJJbk1zKHJlc3BvbnNlKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGluZ1JldHJ5U3RyYXRlZ3koKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogXCJ0aHJvdHRsaW5nUmV0cnlTdHJhdGVneVwiLFxuICAgICAgICByZXRyeSh7IHJlc3BvbnNlIH0pIHtcbiAgICAgICAgICAgIGNvbnN0IHJldHJ5QWZ0ZXJJbk1zID0gZ2V0UmV0cnlBZnRlckluTXMocmVzcG9uc2UpO1xuICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUocmV0cnlBZnRlckluTXMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc2tpcFN0cmF0ZWd5OiB0cnVlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJldHJ5QWZ0ZXJJbk1zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3R0bGluZ1JldHJ5U3RyYXRlZ3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/throttlingRetryStrategy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/concat.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/concat.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concat: () => (/* binding */ concat)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var _typeGuards_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./typeGuards.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/typeGuards.js\");\n/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./file.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\nfunction streamAsyncIterator() {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__asyncGenerator)(this, arguments, function* streamAsyncIterator_1() {\n        const reader = this.getReader();\n        try {\n            while (true) {\n                const { done, value } = yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(reader.read());\n                if (done) {\n                    return yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(void 0);\n                }\n                yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(value);\n            }\n        }\n        finally {\n            reader.releaseLock();\n        }\n    });\n}\nfunction makeAsyncIterable(webStream) {\n    if (!webStream[Symbol.asyncIterator]) {\n        webStream[Symbol.asyncIterator] = streamAsyncIterator.bind(webStream);\n    }\n    if (!webStream.values) {\n        webStream.values = streamAsyncIterator.bind(webStream);\n    }\n}\nfunction ensureNodeStream(stream) {\n    if (stream instanceof ReadableStream) {\n        makeAsyncIterable(stream);\n        return node_stream__WEBPACK_IMPORTED_MODULE_0__.Readable.fromWeb(stream);\n    }\n    else {\n        return stream;\n    }\n}\nfunction toStream(source) {\n    if (source instanceof Uint8Array) {\n        return node_stream__WEBPACK_IMPORTED_MODULE_0__.Readable.from(Buffer.from(source));\n    }\n    else if ((0,_typeGuards_js__WEBPACK_IMPORTED_MODULE_1__.isBlob)(source)) {\n        return toStream((0,_file_js__WEBPACK_IMPORTED_MODULE_2__.getRawContent)(source));\n    }\n    else {\n        return ensureNodeStream(source);\n    }\n}\n/**\n * Utility function that concatenates a set of binary inputs into one combined output.\n *\n * @param sources - array of sources for the concatenation\n * @returns - in Node, a (() =\\> NodeJS.ReadableStream) which, when read, produces a concatenation of all the inputs.\n *           In browser, returns a `Blob` representing all the concatenated inputs.\n *\n * @internal\n */\nasync function concat(sources) {\n    return function () {\n        const streams = sources.map((x) => (typeof x === \"function\" ? x() : x)).map(toStream);\n        return node_stream__WEBPACK_IMPORTED_MODULE_0__.Readable.from((function () {\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__asyncGenerator)(this, arguments, function* () {\n                var _a, e_1, _b, _c;\n                for (const stream of streams) {\n                    try {\n                        for (var _d = true, stream_1 = (e_1 = void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__asyncValues)(stream)), stream_1_1; stream_1_1 = yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(stream_1.next()), _a = stream_1_1.done, !_a; _d = true) {\n                            _c = stream_1_1.value;\n                            _d = false;\n                            const chunk = _c;\n                            yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(chunk);\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (!_d && !_a && (_b = stream_1.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(_b.call(stream_1));\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                }\n            });\n        })());\n    };\n}\n//# sourceMappingURL=concat.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL2NvbmNhdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDaUU7QUFDMUI7QUFDRTtBQUNDO0FBQzFDO0FBQ0EsV0FBVyx1REFBZ0I7QUFDM0I7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGNBQWMsUUFBUSw4Q0FBTztBQUNyRDtBQUNBLGlDQUFpQyw4Q0FBTztBQUN4QztBQUNBLDRCQUE0Qiw4Q0FBTztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaURBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlEQUFRO0FBQ3ZCO0FBQ0EsYUFBYSxzREFBTTtBQUNuQix3QkFBd0IsdURBQWE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLGVBQWUsaURBQVE7QUFDdkIsbUJBQW1CLHVEQUFnQjtBQUNuQztBQUNBO0FBQ0E7QUFDQSxzRUFBc0Usb0RBQWEsdUJBQXVCLG1CQUFtQiw4Q0FBTyw4Q0FBOEM7QUFDbEw7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLDhDQUFPO0FBQy9DO0FBQ0E7QUFDQSxvQ0FBb0MsUUFBUTtBQUM1QztBQUNBO0FBQ0EsNEVBQTRFLDhDQUFPO0FBQ25GO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vdXRpbC9jb25jYXQuanM/ZjI0MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IF9fYXN5bmNHZW5lcmF0b3IsIF9fYXN5bmNWYWx1ZXMsIF9fYXdhaXQgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFJlYWRhYmxlIH0gZnJvbSBcIm5vZGU6c3RyZWFtXCI7XG5pbXBvcnQgeyBpc0Jsb2IgfSBmcm9tIFwiLi90eXBlR3VhcmRzLmpzXCI7XG5pbXBvcnQgeyBnZXRSYXdDb250ZW50IH0gZnJvbSBcIi4vZmlsZS5qc1wiO1xuZnVuY3Rpb24gc3RyZWFtQXN5bmNJdGVyYXRvcigpIHtcbiAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKiBzdHJlYW1Bc3luY0l0ZXJhdG9yXzEoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IHRoaXMuZ2V0UmVhZGVyKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZG9uZSwgdmFsdWUgfSA9IHlpZWxkIF9fYXdhaXQocmVhZGVyLnJlYWQoKSk7XG4gICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkIF9fYXdhaXQodm9pZCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgeWllbGQgeWllbGQgX19hd2FpdCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gbWFrZUFzeW5jSXRlcmFibGUod2ViU3RyZWFtKSB7XG4gICAgaWYgKCF3ZWJTdHJlYW1bU3ltYm9sLmFzeW5jSXRlcmF0b3JdKSB7XG4gICAgICAgIHdlYlN0cmVhbVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBzdHJlYW1Bc3luY0l0ZXJhdG9yLmJpbmQod2ViU3RyZWFtKTtcbiAgICB9XG4gICAgaWYgKCF3ZWJTdHJlYW0udmFsdWVzKSB7XG4gICAgICAgIHdlYlN0cmVhbS52YWx1ZXMgPSBzdHJlYW1Bc3luY0l0ZXJhdG9yLmJpbmQod2ViU3RyZWFtKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlbnN1cmVOb2RlU3RyZWFtKHN0cmVhbSkge1xuICAgIGlmIChzdHJlYW0gaW5zdGFuY2VvZiBSZWFkYWJsZVN0cmVhbSkge1xuICAgICAgICBtYWtlQXN5bmNJdGVyYWJsZShzdHJlYW0pO1xuICAgICAgICByZXR1cm4gUmVhZGFibGUuZnJvbVdlYihzdHJlYW0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICB9XG59XG5mdW5jdGlvbiB0b1N0cmVhbShzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gUmVhZGFibGUuZnJvbShCdWZmZXIuZnJvbShzb3VyY2UpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNCbG9iKHNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuIHRvU3RyZWFtKGdldFJhd0NvbnRlbnQoc291cmNlKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZW5zdXJlTm9kZVN0cmVhbShzb3VyY2UpO1xuICAgIH1cbn1cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiB0aGF0IGNvbmNhdGVuYXRlcyBhIHNldCBvZiBiaW5hcnkgaW5wdXRzIGludG8gb25lIGNvbWJpbmVkIG91dHB1dC5cbiAqXG4gKiBAcGFyYW0gc291cmNlcyAtIGFycmF5IG9mIHNvdXJjZXMgZm9yIHRoZSBjb25jYXRlbmF0aW9uXG4gKiBAcmV0dXJucyAtIGluIE5vZGUsIGEgKCgpID1cXD4gTm9kZUpTLlJlYWRhYmxlU3RyZWFtKSB3aGljaCwgd2hlbiByZWFkLCBwcm9kdWNlcyBhIGNvbmNhdGVuYXRpb24gb2YgYWxsIHRoZSBpbnB1dHMuXG4gKiAgICAgICAgICAgSW4gYnJvd3NlciwgcmV0dXJucyBhIGBCbG9iYCByZXByZXNlbnRpbmcgYWxsIHRoZSBjb25jYXRlbmF0ZWQgaW5wdXRzLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29uY2F0KHNvdXJjZXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBzdHJlYW1zID0gc291cmNlcy5tYXAoKHgpID0+ICh0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCgpIDogeCkpLm1hcCh0b1N0cmVhbSk7XG4gICAgICAgIHJldHVybiBSZWFkYWJsZS5mcm9tKChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBlXzEsIF9iLCBfYztcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN0cmVhbSBvZiBzdHJlYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZCA9IHRydWUsIHN0cmVhbV8xID0gKGVfMSA9IHZvaWQgMCwgX19hc3luY1ZhbHVlcyhzdHJlYW0pKSwgc3RyZWFtXzFfMTsgc3RyZWFtXzFfMSA9IHlpZWxkIF9fYXdhaXQoc3RyZWFtXzEubmV4dCgpKSwgX2EgPSBzdHJlYW1fMV8xLmRvbmUsICFfYTsgX2QgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MgPSBzdHJlYW1fMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2h1bmsgPSBfYztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCB5aWVsZCBfX2F3YWl0KGNodW5rKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfZCAmJiAhX2EgJiYgKF9iID0gc3RyZWFtXzEucmV0dXJuKSkgeWllbGQgX19hd2FpdChfYi5jYWxsKHN0cmVhbV8xKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkoKSk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/concat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFile: () => (/* binding */ createFile),\n/* harmony export */   createFileFromStream: () => (/* binding */ createFileFromStream),\n/* harmony export */   getRawContent: () => (/* binding */ getRawContent)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _typeGuards_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./typeGuards.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/typeGuards.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\nconst unimplementedMethods = {\n    arrayBuffer: () => {\n        throw new Error(\"Not implemented\");\n    },\n    slice: () => {\n        throw new Error(\"Not implemented\");\n    },\n    text: () => {\n        throw new Error(\"Not implemented\");\n    },\n};\n/**\n * Private symbol used as key on objects created using createFile containing the\n * original source of the file object.\n *\n * This is used in Node to access the original Node stream without using Blob#stream, which\n * returns a web stream. This is done to avoid a couple of bugs to do with Blob#stream and\n * Readable#to/fromWeb in Node versions we support:\n * - https://github.com/nodejs/node/issues/42694 (fixed in Node 18.14)\n * - https://github.com/nodejs/node/issues/48916 (fixed in Node 20.6)\n *\n * Once these versions are no longer supported, we may be able to stop doing this.\n *\n * @internal\n */\nconst rawContent = Symbol(\"rawContent\");\nfunction hasRawContent(x) {\n    return typeof x[rawContent] === \"function\";\n}\n/**\n * Extract the raw content from a given blob-like object. If the input was created using createFile\n * or createFileFromStream, the exact content passed into createFile/createFileFromStream will be used.\n * For true instances of Blob and File, returns the blob's content as a Web ReadableStream<Uint8Array>.\n *\n * @internal\n */\nfunction getRawContent(blob) {\n    if (hasRawContent(blob)) {\n        return blob[rawContent]();\n    }\n    else {\n        return blob.stream();\n    }\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function to:\n * - Create a File object for use in RequestBodyType.formData in environments where the\n *   global File object is unavailable.\n * - Create a File-like object from a readable stream without reading the stream into memory.\n *\n * @param stream - the content of the file as a callback returning a stream. When a File object made using createFile is\n *                  passed in a request's form data map, the stream will not be read into memory\n *                  and instead will be streamed when the request is made. In the event of a retry, the\n *                  stream needs to be read again, so this callback SHOULD return a fresh stream if possible.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nfunction createFileFromStream(stream, name, options = {}) {\n    var _a, _b, _c, _d;\n    return Object.assign(Object.assign({}, unimplementedMethods), { type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\", lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(), webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\", size: (_d = options.size) !== null && _d !== void 0 ? _d : -1, name, stream: () => {\n            const s = stream();\n            if ((0,_typeGuards_js__WEBPACK_IMPORTED_MODULE_1__.isNodeReadableStream)(s)) {\n                throw new Error(\"Not supported: a Node stream was provided as input to createFileFromStream.\");\n            }\n            return s;\n        }, [rawContent]: stream });\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function create a File object for use in RequestBodyType.formData in environments where the global File object is unavailable.\n *\n * @param content - the content of the file as a Uint8Array in memory.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nfunction createFile(content, name, options = {}) {\n    var _a, _b, _c;\n    if (_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNodeLike) {\n        return Object.assign(Object.assign({}, unimplementedMethods), { type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\", lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(), webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\", size: content.byteLength, name, arrayBuffer: async () => content.buffer, stream: () => new Blob([content]).stream(), [rawContent]: () => content });\n    }\n    else {\n        return new File([content], name, options);\n    }\n}\n//# sourceMappingURL=file.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL2ZpbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQzhDO0FBQ1M7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyx3REFBd0Q7QUFDL0Q7QUFDQSx5Q0FBeUMsMkJBQTJCO0FBQ3BFO0FBQ0EsZ0JBQWdCLG9FQUFvQjtBQUNwQztBQUNBO0FBQ0E7QUFDQSxTQUFTLHdCQUF3QjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywrQ0FBK0M7QUFDdEQ7QUFDQSxRQUFRLHdEQUFVO0FBQ2xCLDZDQUE2QywyQkFBMkIsNllBQTZZO0FBQ3JkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vdXRpbC9maWxlLmpzP2Q3NDYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBpc05vZGVMaWtlIH0gZnJvbSBcIkBhenVyZS9jb3JlLXV0aWxcIjtcbmltcG9ydCB7IGlzTm9kZVJlYWRhYmxlU3RyZWFtIH0gZnJvbSBcIi4vdHlwZUd1YXJkcy5qc1wiO1xuY29uc3QgdW5pbXBsZW1lbnRlZE1ldGhvZHMgPSB7XG4gICAgYXJyYXlCdWZmZXI6ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpO1xuICAgIH0sXG4gICAgc2xpY2U6ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpO1xuICAgIH0sXG4gICAgdGV4dDogKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIik7XG4gICAgfSxcbn07XG4vKipcbiAqIFByaXZhdGUgc3ltYm9sIHVzZWQgYXMga2V5IG9uIG9iamVjdHMgY3JlYXRlZCB1c2luZyBjcmVhdGVGaWxlIGNvbnRhaW5pbmcgdGhlXG4gKiBvcmlnaW5hbCBzb3VyY2Ugb2YgdGhlIGZpbGUgb2JqZWN0LlxuICpcbiAqIFRoaXMgaXMgdXNlZCBpbiBOb2RlIHRvIGFjY2VzcyB0aGUgb3JpZ2luYWwgTm9kZSBzdHJlYW0gd2l0aG91dCB1c2luZyBCbG9iI3N0cmVhbSwgd2hpY2hcbiAqIHJldHVybnMgYSB3ZWIgc3RyZWFtLiBUaGlzIGlzIGRvbmUgdG8gYXZvaWQgYSBjb3VwbGUgb2YgYnVncyB0byBkbyB3aXRoIEJsb2Ijc3RyZWFtIGFuZFxuICogUmVhZGFibGUjdG8vZnJvbVdlYiBpbiBOb2RlIHZlcnNpb25zIHdlIHN1cHBvcnQ6XG4gKiAtIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvNDI2OTQgKGZpeGVkIGluIE5vZGUgMTguMTQpXG4gKiAtIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvNDg5MTYgKGZpeGVkIGluIE5vZGUgMjAuNilcbiAqXG4gKiBPbmNlIHRoZXNlIHZlcnNpb25zIGFyZSBubyBsb25nZXIgc3VwcG9ydGVkLCB3ZSBtYXkgYmUgYWJsZSB0byBzdG9wIGRvaW5nIHRoaXMuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IHJhd0NvbnRlbnQgPSBTeW1ib2woXCJyYXdDb250ZW50XCIpO1xuZnVuY3Rpb24gaGFzUmF3Q29udGVudCh4KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB4W3Jhd0NvbnRlbnRdID09PSBcImZ1bmN0aW9uXCI7XG59XG4vKipcbiAqIEV4dHJhY3QgdGhlIHJhdyBjb250ZW50IGZyb20gYSBnaXZlbiBibG9iLWxpa2Ugb2JqZWN0LiBJZiB0aGUgaW5wdXQgd2FzIGNyZWF0ZWQgdXNpbmcgY3JlYXRlRmlsZVxuICogb3IgY3JlYXRlRmlsZUZyb21TdHJlYW0sIHRoZSBleGFjdCBjb250ZW50IHBhc3NlZCBpbnRvIGNyZWF0ZUZpbGUvY3JlYXRlRmlsZUZyb21TdHJlYW0gd2lsbCBiZSB1c2VkLlxuICogRm9yIHRydWUgaW5zdGFuY2VzIG9mIEJsb2IgYW5kIEZpbGUsIHJldHVybnMgdGhlIGJsb2IncyBjb250ZW50IGFzIGEgV2ViIFJlYWRhYmxlU3RyZWFtPFVpbnQ4QXJyYXk+LlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmF3Q29udGVudChibG9iKSB7XG4gICAgaWYgKGhhc1Jhd0NvbnRlbnQoYmxvYikpIHtcbiAgICAgICAgcmV0dXJuIGJsb2JbcmF3Q29udGVudF0oKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBibG9iLnN0cmVhbSgpO1xuICAgIH1cbn1cbi8qKlxuICogQ3JlYXRlIGFuIG9iamVjdCB0aGF0IGltcGxlbWVudHMgdGhlIEZpbGUgaW50ZXJmYWNlLiBUaGlzIG9iamVjdCBpcyBpbnRlbmRlZCB0byBiZVxuICogcGFzc2VkIGludG8gUmVxdWVzdEJvZHlUeXBlLmZvcm1EYXRhLCBhbmQgaXMgbm90IGd1YXJhbnRlZWQgdG8gd29yayBhcyBleHBlY3RlZCBpblxuICogb3RoZXIgc2l0dWF0aW9ucy5cbiAqXG4gKiBVc2UgdGhpcyBmdW5jdGlvbiB0bzpcbiAqIC0gQ3JlYXRlIGEgRmlsZSBvYmplY3QgZm9yIHVzZSBpbiBSZXF1ZXN0Qm9keVR5cGUuZm9ybURhdGEgaW4gZW52aXJvbm1lbnRzIHdoZXJlIHRoZVxuICogICBnbG9iYWwgRmlsZSBvYmplY3QgaXMgdW5hdmFpbGFibGUuXG4gKiAtIENyZWF0ZSBhIEZpbGUtbGlrZSBvYmplY3QgZnJvbSBhIHJlYWRhYmxlIHN0cmVhbSB3aXRob3V0IHJlYWRpbmcgdGhlIHN0cmVhbSBpbnRvIG1lbW9yeS5cbiAqXG4gKiBAcGFyYW0gc3RyZWFtIC0gdGhlIGNvbnRlbnQgb2YgdGhlIGZpbGUgYXMgYSBjYWxsYmFjayByZXR1cm5pbmcgYSBzdHJlYW0uIFdoZW4gYSBGaWxlIG9iamVjdCBtYWRlIHVzaW5nIGNyZWF0ZUZpbGUgaXNcbiAqICAgICAgICAgICAgICAgICAgcGFzc2VkIGluIGEgcmVxdWVzdCdzIGZvcm0gZGF0YSBtYXAsIHRoZSBzdHJlYW0gd2lsbCBub3QgYmUgcmVhZCBpbnRvIG1lbW9yeVxuICogICAgICAgICAgICAgICAgICBhbmQgaW5zdGVhZCB3aWxsIGJlIHN0cmVhbWVkIHdoZW4gdGhlIHJlcXVlc3QgaXMgbWFkZS4gSW4gdGhlIGV2ZW50IG9mIGEgcmV0cnksIHRoZVxuICogICAgICAgICAgICAgICAgICBzdHJlYW0gbmVlZHMgdG8gYmUgcmVhZCBhZ2Fpbiwgc28gdGhpcyBjYWxsYmFjayBTSE9VTEQgcmV0dXJuIGEgZnJlc2ggc3RyZWFtIGlmIHBvc3NpYmxlLlxuICogQHBhcmFtIG5hbWUgLSB0aGUgbmFtZSBvZiB0aGUgZmlsZS5cbiAqIEBwYXJhbSBvcHRpb25zIC0gb3B0aW9uYWwgbWV0YWRhdGEgYWJvdXQgdGhlIGZpbGUsIGUuZy4gZmlsZSBuYW1lLCBmaWxlIHNpemUsIE1JTUUgdHlwZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZpbGVGcm9tU3RyZWFtKHN0cmVhbSwgbmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHVuaW1wbGVtZW50ZWRNZXRob2RzKSwgeyB0eXBlOiAoX2EgPSBvcHRpb25zLnR5cGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCIsIGxhc3RNb2RpZmllZDogKF9iID0gb3B0aW9ucy5sYXN0TW9kaWZpZWQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLCB3ZWJraXRSZWxhdGl2ZVBhdGg6IChfYyA9IG9wdGlvbnMud2Via2l0UmVsYXRpdmVQYXRoKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBcIlwiLCBzaXplOiAoX2QgPSBvcHRpb25zLnNpemUpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IC0xLCBuYW1lLCBzdHJlYW06ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBzdHJlYW0oKTtcbiAgICAgICAgICAgIGlmIChpc05vZGVSZWFkYWJsZVN0cmVhbShzKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBzdXBwb3J0ZWQ6IGEgTm9kZSBzdHJlYW0gd2FzIHByb3ZpZGVkIGFzIGlucHV0IHRvIGNyZWF0ZUZpbGVGcm9tU3RyZWFtLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICB9LCBbcmF3Q29udGVudF06IHN0cmVhbSB9KTtcbn1cbi8qKlxuICogQ3JlYXRlIGFuIG9iamVjdCB0aGF0IGltcGxlbWVudHMgdGhlIEZpbGUgaW50ZXJmYWNlLiBUaGlzIG9iamVjdCBpcyBpbnRlbmRlZCB0byBiZVxuICogcGFzc2VkIGludG8gUmVxdWVzdEJvZHlUeXBlLmZvcm1EYXRhLCBhbmQgaXMgbm90IGd1YXJhbnRlZWQgdG8gd29yayBhcyBleHBlY3RlZCBpblxuICogb3RoZXIgc2l0dWF0aW9ucy5cbiAqXG4gKiBVc2UgdGhpcyBmdW5jdGlvbiBjcmVhdGUgYSBGaWxlIG9iamVjdCBmb3IgdXNlIGluIFJlcXVlc3RCb2R5VHlwZS5mb3JtRGF0YSBpbiBlbnZpcm9ubWVudHMgd2hlcmUgdGhlIGdsb2JhbCBGaWxlIG9iamVjdCBpcyB1bmF2YWlsYWJsZS5cbiAqXG4gKiBAcGFyYW0gY29udGVudCAtIHRoZSBjb250ZW50IG9mIHRoZSBmaWxlIGFzIGEgVWludDhBcnJheSBpbiBtZW1vcnkuXG4gKiBAcGFyYW0gbmFtZSAtIHRoZSBuYW1lIG9mIHRoZSBmaWxlLlxuICogQHBhcmFtIG9wdGlvbnMgLSBvcHRpb25hbCBtZXRhZGF0YSBhYm91dCB0aGUgZmlsZSwgZS5nLiBmaWxlIG5hbWUsIGZpbGUgc2l6ZSwgTUlNRSB0eXBlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmlsZShjb250ZW50LCBuYW1lLCBvcHRpb25zID0ge30pIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICBpZiAoaXNOb2RlTGlrZSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB1bmltcGxlbWVudGVkTWV0aG9kcyksIHsgdHlwZTogKF9hID0gb3B0aW9ucy50eXBlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiLCBsYXN0TW9kaWZpZWQ6IChfYiA9IG9wdGlvbnMubGFzdE1vZGlmaWVkKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSwgd2Via2l0UmVsYXRpdmVQYXRoOiAoX2MgPSBvcHRpb25zLndlYmtpdFJlbGF0aXZlUGF0aCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogXCJcIiwgc2l6ZTogY29udGVudC5ieXRlTGVuZ3RoLCBuYW1lLCBhcnJheUJ1ZmZlcjogYXN5bmMgKCkgPT4gY29udGVudC5idWZmZXIsIHN0cmVhbTogKCkgPT4gbmV3IEJsb2IoW2NvbnRlbnRdKS5zdHJlYW0oKSwgW3Jhd0NvbnRlbnRdOiAoKSA9PiBjb250ZW50IH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWxlKFtjb250ZW50XSwgbmFtZSwgb3B0aW9ucyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/helpers.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/helpers.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   delay: () => (/* binding */ delay),\n/* harmony export */   parseHeaderValueAsNumber: () => (/* binding */ parseHeaderValueAsNumber)\n/* harmony export */ });\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst StandardAbortMessage = \"The operation was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after delayInMs milliseconds.\n * @param delayInMs - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @param options - The options for delay - currently abort options\n *                  - abortSignal - The abortSignal associated with containing operation.\n *                  - abortErrorMsg - The abort error message associated with containing operation.\n * @returns Resolved promise\n */\nfunction delay(delayInMs, value, options) {\n    return new Promise((resolve, reject) => {\n        let timer = undefined;\n        let onAborted = undefined;\n        const rejectOnAbort = () => {\n            return reject(new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__.AbortError((options === null || options === void 0 ? void 0 : options.abortErrorMsg) ? options === null || options === void 0 ? void 0 : options.abortErrorMsg : StandardAbortMessage));\n        };\n        const removeListeners = () => {\n            if ((options === null || options === void 0 ? void 0 : options.abortSignal) && onAborted) {\n                options.abortSignal.removeEventListener(\"abort\", onAborted);\n            }\n        };\n        onAborted = () => {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            removeListeners();\n            return rejectOnAbort();\n        };\n        if ((options === null || options === void 0 ? void 0 : options.abortSignal) && options.abortSignal.aborted) {\n            return rejectOnAbort();\n        }\n        timer = setTimeout(() => {\n            removeListeners();\n            resolve(value);\n        }, delayInMs);\n        if (options === null || options === void 0 ? void 0 : options.abortSignal) {\n            options.abortSignal.addEventListener(\"abort\", onAborted);\n        }\n    });\n}\n/**\n * @internal\n * @returns the parsed value or undefined if the parsed value is invalid.\n */\nfunction parseHeaderValueAsNumber(response, headerName) {\n    const value = response.headers.get(headerName);\n    if (!value)\n        return;\n    const valueAsNum = Number(value);\n    if (Number.isNaN(valueAsNum))\n        return;\n    return valueAsNum;\n}\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL2hlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsK0RBQVU7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vdXRpbC9oZWxwZXJzLmpzPzMyNzUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBBYm9ydEVycm9yIH0gZnJvbSBcIkBhenVyZS9hYm9ydC1jb250cm9sbGVyXCI7XG5jb25zdCBTdGFuZGFyZEFib3J0TWVzc2FnZSA9IFwiVGhlIG9wZXJhdGlvbiB3YXMgYWJvcnRlZC5cIjtcbi8qKlxuICogQSB3cmFwcGVyIGZvciBzZXRUaW1lb3V0IHRoYXQgcmVzb2x2ZXMgYSBwcm9taXNlIGFmdGVyIGRlbGF5SW5NcyBtaWxsaXNlY29uZHMuXG4gKiBAcGFyYW0gZGVsYXlJbk1zIC0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gYmUgZGVsYXllZC5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSByZXNvbHZlZCB3aXRoIGFmdGVyIGEgdGltZW91dCBvZiB0IG1pbGxpc2Vjb25kcy5cbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIGRlbGF5IC0gY3VycmVudGx5IGFib3J0IG9wdGlvbnNcbiAqICAgICAgICAgICAgICAgICAgLSBhYm9ydFNpZ25hbCAtIFRoZSBhYm9ydFNpZ25hbCBhc3NvY2lhdGVkIHdpdGggY29udGFpbmluZyBvcGVyYXRpb24uXG4gKiAgICAgICAgICAgICAgICAgIC0gYWJvcnRFcnJvck1zZyAtIFRoZSBhYm9ydCBlcnJvciBtZXNzYWdlIGFzc29jaWF0ZWQgd2l0aCBjb250YWluaW5nIG9wZXJhdGlvbi5cbiAqIEByZXR1cm5zIFJlc29sdmVkIHByb21pc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGF5KGRlbGF5SW5NcywgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBsZXQgdGltZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCBvbkFib3J0ZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IHJlamVjdE9uQWJvcnQgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBBYm9ydEVycm9yKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWJvcnRFcnJvck1zZykgPyBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWJvcnRFcnJvck1zZyA6IFN0YW5kYXJkQWJvcnRNZXNzYWdlKSk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlbW92ZUxpc3RlbmVycyA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICgob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFib3J0U2lnbmFsKSAmJiBvbkFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmFib3J0U2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBvbkFib3J0ZWQgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0T25BYm9ydCgpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hYm9ydFNpZ25hbCkgJiYgb3B0aW9ucy5hYm9ydFNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0T25BYm9ydCgpO1xuICAgICAgICB9XG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICByZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICB9LCBkZWxheUluTXMpO1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFib3J0U2lnbmFsKSB7XG4gICAgICAgICAgICBvcHRpb25zLmFib3J0U2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0ZWQpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICogQHJldHVybnMgdGhlIHBhcnNlZCB2YWx1ZSBvciB1bmRlZmluZWQgaWYgdGhlIHBhcnNlZCB2YWx1ZSBpcyBpbnZhbGlkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VIZWFkZXJWYWx1ZUFzTnVtYmVyKHJlc3BvbnNlLCBoZWFkZXJOYW1lKSB7XG4gICAgY29uc3QgdmFsdWUgPSByZXNwb25zZS5oZWFkZXJzLmdldChoZWFkZXJOYW1lKTtcbiAgICBpZiAoIXZhbHVlKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgdmFsdWVBc051bSA9IE51bWJlcih2YWx1ZSk7XG4gICAgaWYgKE51bWJlci5pc05hTih2YWx1ZUFzTnVtKSlcbiAgICAgICAgcmV0dXJuO1xuICAgIHJldHVybiB2YWx1ZUFzTnVtO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/inspect.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/inspect.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   custom: () => (/* binding */ custom)\n/* harmony export */ });\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:util */ \"node:util\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst custom = node_util__WEBPACK_IMPORTED_MODULE_0__.inspect.custom;\n//# sourceMappingURL=inspect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL2luc3BlY3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ29DO0FBQzdCLGVBQWUsOENBQU87QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3V0aWwvaW5zcGVjdC5qcz8xMmU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgaW5zcGVjdCB9IGZyb20gXCJub2RlOnV0aWxcIjtcbmV4cG9ydCBjb25zdCBjdXN0b20gPSBpbnNwZWN0LmN1c3RvbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3BlY3QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/inspect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/sanitizer.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/sanitizer.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Sanitizer: () => (/* binding */ Sanitizer)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst RedactedString = \"REDACTED\";\n// Make sure this list is up-to-date with the one under core/logger/Readme#Keyconcepts\nconst defaultAllowedHeaderNames = [\n    \"x-ms-client-request-id\",\n    \"x-ms-return-client-request-id\",\n    \"x-ms-useragent\",\n    \"x-ms-correlation-request-id\",\n    \"x-ms-request-id\",\n    \"client-request-id\",\n    \"ms-cv\",\n    \"return-client-request-id\",\n    \"traceparent\",\n    \"Access-Control-Allow-Credentials\",\n    \"Access-Control-Allow-Headers\",\n    \"Access-Control-Allow-Methods\",\n    \"Access-Control-Allow-Origin\",\n    \"Access-Control-Expose-Headers\",\n    \"Access-Control-Max-Age\",\n    \"Access-Control-Request-Headers\",\n    \"Access-Control-Request-Method\",\n    \"Origin\",\n    \"Accept\",\n    \"Accept-Encoding\",\n    \"Cache-Control\",\n    \"Connection\",\n    \"Content-Length\",\n    \"Content-Type\",\n    \"Date\",\n    \"ETag\",\n    \"Expires\",\n    \"If-Match\",\n    \"If-Modified-Since\",\n    \"If-None-Match\",\n    \"If-Unmodified-Since\",\n    \"Last-Modified\",\n    \"Pragma\",\n    \"Request-Id\",\n    \"Retry-After\",\n    \"Server\",\n    \"Transfer-Encoding\",\n    \"User-Agent\",\n    \"WWW-Authenticate\",\n];\nconst defaultAllowedQueryParameters = [\"api-version\"];\n/**\n * @internal\n */\nclass Sanitizer {\n    constructor({ additionalAllowedHeaderNames: allowedHeaderNames = [], additionalAllowedQueryParameters: allowedQueryParameters = [], } = {}) {\n        allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);\n        allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);\n        this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n        this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n    }\n    sanitize(obj) {\n        const seen = new Set();\n        return JSON.stringify(obj, (key, value) => {\n            // Ensure Errors include their interesting non-enumerable members\n            if (value instanceof Error) {\n                return Object.assign(Object.assign({}, value), { name: value.name, message: value.message });\n            }\n            if (key === \"headers\") {\n                return this.sanitizeHeaders(value);\n            }\n            else if (key === \"url\") {\n                return this.sanitizeUrl(value);\n            }\n            else if (key === \"query\") {\n                return this.sanitizeQuery(value);\n            }\n            else if (key === \"body\") {\n                // Don't log the request body\n                return undefined;\n            }\n            else if (key === \"response\") {\n                // Don't log response again\n                return undefined;\n            }\n            else if (key === \"operationSpec\") {\n                // When using sendOperationRequest, the request carries a massive\n                // field with the autorest spec. No need to log it.\n                return undefined;\n            }\n            else if (Array.isArray(value) || (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isObject)(value)) {\n                if (seen.has(value)) {\n                    return \"[Circular]\";\n                }\n                seen.add(value);\n            }\n            return value;\n        }, 2);\n    }\n    sanitizeUrl(value) {\n        if (typeof value !== \"string\" || value === null || value === \"\") {\n            return value;\n        }\n        const url = new URL(value);\n        if (!url.search) {\n            return value;\n        }\n        for (const [key] of url.searchParams) {\n            if (!this.allowedQueryParameters.has(key.toLowerCase())) {\n                url.searchParams.set(key, RedactedString);\n            }\n        }\n        return url.toString();\n    }\n    sanitizeHeaders(obj) {\n        const sanitized = {};\n        for (const key of Object.keys(obj)) {\n            if (this.allowedHeaderNames.has(key.toLowerCase())) {\n                sanitized[key] = obj[key];\n            }\n            else {\n                sanitized[key] = RedactedString;\n            }\n        }\n        return sanitized;\n    }\n    sanitizeQuery(value) {\n        if (typeof value !== \"object\" || value === null) {\n            return value;\n        }\n        const sanitized = {};\n        for (const k of Object.keys(value)) {\n            if (this.allowedQueryParameters.has(k.toLowerCase())) {\n                sanitized[k] = value[k];\n            }\n            else {\n                sanitized[k] = RedactedString;\n            }\n        }\n        return sanitized;\n    }\n}\n//# sourceMappingURL=sanitizer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL3Nhbml0aXplci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1Asa0JBQWtCLHdIQUF3SCxJQUFJO0FBQzlJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELFlBQVksMENBQTBDO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsMERBQVE7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vdXRpbC9zYW5pdGl6ZXIuanM/YjA5MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSBcIkBhenVyZS9jb3JlLXV0aWxcIjtcbmNvbnN0IFJlZGFjdGVkU3RyaW5nID0gXCJSRURBQ1RFRFwiO1xuLy8gTWFrZSBzdXJlIHRoaXMgbGlzdCBpcyB1cC10by1kYXRlIHdpdGggdGhlIG9uZSB1bmRlciBjb3JlL2xvZ2dlci9SZWFkbWUjS2V5Y29uY2VwdHNcbmNvbnN0IGRlZmF1bHRBbGxvd2VkSGVhZGVyTmFtZXMgPSBbXG4gICAgXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgXCJ4LW1zLXJldHVybi1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgIFwieC1tcy11c2VyYWdlbnRcIixcbiAgICBcIngtbXMtY29ycmVsYXRpb24tcmVxdWVzdC1pZFwiLFxuICAgIFwieC1tcy1yZXF1ZXN0LWlkXCIsXG4gICAgXCJjbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgIFwibXMtY3ZcIixcbiAgICBcInJldHVybi1jbGllbnQtcmVxdWVzdC1pZFwiLFxuICAgIFwidHJhY2VwYXJlbnRcIixcbiAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzXCIsXG4gICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzXCIsXG4gICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzXCIsXG4gICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIixcbiAgICBcIkFjY2Vzcy1Db250cm9sLUV4cG9zZS1IZWFkZXJzXCIsXG4gICAgXCJBY2Nlc3MtQ29udHJvbC1NYXgtQWdlXCIsXG4gICAgXCJBY2Nlc3MtQ29udHJvbC1SZXF1ZXN0LUhlYWRlcnNcIixcbiAgICBcIkFjY2Vzcy1Db250cm9sLVJlcXVlc3QtTWV0aG9kXCIsXG4gICAgXCJPcmlnaW5cIixcbiAgICBcIkFjY2VwdFwiLFxuICAgIFwiQWNjZXB0LUVuY29kaW5nXCIsXG4gICAgXCJDYWNoZS1Db250cm9sXCIsXG4gICAgXCJDb25uZWN0aW9uXCIsXG4gICAgXCJDb250ZW50LUxlbmd0aFwiLFxuICAgIFwiQ29udGVudC1UeXBlXCIsXG4gICAgXCJEYXRlXCIsXG4gICAgXCJFVGFnXCIsXG4gICAgXCJFeHBpcmVzXCIsXG4gICAgXCJJZi1NYXRjaFwiLFxuICAgIFwiSWYtTW9kaWZpZWQtU2luY2VcIixcbiAgICBcIklmLU5vbmUtTWF0Y2hcIixcbiAgICBcIklmLVVubW9kaWZpZWQtU2luY2VcIixcbiAgICBcIkxhc3QtTW9kaWZpZWRcIixcbiAgICBcIlByYWdtYVwiLFxuICAgIFwiUmVxdWVzdC1JZFwiLFxuICAgIFwiUmV0cnktQWZ0ZXJcIixcbiAgICBcIlNlcnZlclwiLFxuICAgIFwiVHJhbnNmZXItRW5jb2RpbmdcIixcbiAgICBcIlVzZXItQWdlbnRcIixcbiAgICBcIldXVy1BdXRoZW50aWNhdGVcIixcbl07XG5jb25zdCBkZWZhdWx0QWxsb3dlZFF1ZXJ5UGFyYW1ldGVycyA9IFtcImFwaS12ZXJzaW9uXCJdO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIFNhbml0aXplciB7XG4gICAgY29uc3RydWN0b3IoeyBhZGRpdGlvbmFsQWxsb3dlZEhlYWRlck5hbWVzOiBhbGxvd2VkSGVhZGVyTmFtZXMgPSBbXSwgYWRkaXRpb25hbEFsbG93ZWRRdWVyeVBhcmFtZXRlcnM6IGFsbG93ZWRRdWVyeVBhcmFtZXRlcnMgPSBbXSwgfSA9IHt9KSB7XG4gICAgICAgIGFsbG93ZWRIZWFkZXJOYW1lcyA9IGRlZmF1bHRBbGxvd2VkSGVhZGVyTmFtZXMuY29uY2F0KGFsbG93ZWRIZWFkZXJOYW1lcyk7XG4gICAgICAgIGFsbG93ZWRRdWVyeVBhcmFtZXRlcnMgPSBkZWZhdWx0QWxsb3dlZFF1ZXJ5UGFyYW1ldGVycy5jb25jYXQoYWxsb3dlZFF1ZXJ5UGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMuYWxsb3dlZEhlYWRlck5hbWVzID0gbmV3IFNldChhbGxvd2VkSGVhZGVyTmFtZXMubWFwKChuKSA9PiBuLnRvTG93ZXJDYXNlKCkpKTtcbiAgICAgICAgdGhpcy5hbGxvd2VkUXVlcnlQYXJhbWV0ZXJzID0gbmV3IFNldChhbGxvd2VkUXVlcnlQYXJhbWV0ZXJzLm1hcCgocCkgPT4gcC50b0xvd2VyQ2FzZSgpKSk7XG4gICAgfVxuICAgIHNhbml0aXplKG9iaikge1xuICAgICAgICBjb25zdCBzZWVuID0gbmV3IFNldCgpO1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgLy8gRW5zdXJlIEVycm9ycyBpbmNsdWRlIHRoZWlyIGludGVyZXN0aW5nIG5vbi1lbnVtZXJhYmxlIG1lbWJlcnNcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdmFsdWUpLCB7IG5hbWU6IHZhbHVlLm5hbWUsIG1lc3NhZ2U6IHZhbHVlLm1lc3NhZ2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa2V5ID09PSBcImhlYWRlcnNcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNhbml0aXplSGVhZGVycyh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwidXJsXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZVVybCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwicXVlcnlcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNhbml0aXplUXVlcnkodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ID09PSBcImJvZHlcIikge1xuICAgICAgICAgICAgICAgIC8vIERvbid0IGxvZyB0aGUgcmVxdWVzdCBib2R5XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJyZXNwb25zZVwiKSB7XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgbG9nIHJlc3BvbnNlIGFnYWluXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJvcGVyYXRpb25TcGVjXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBXaGVuIHVzaW5nIHNlbmRPcGVyYXRpb25SZXF1ZXN0LCB0aGUgcmVxdWVzdCBjYXJyaWVzIGEgbWFzc2l2ZVxuICAgICAgICAgICAgICAgIC8vIGZpZWxkIHdpdGggdGhlIGF1dG9yZXN0IHNwZWMuIE5vIG5lZWQgdG8gbG9nIGl0LlxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2Vlbi5oYXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIltDaXJjdWxhcl1cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2Vlbi5hZGQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LCAyKTtcbiAgICB9XG4gICAgc2FuaXRpemVVcmwodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwodmFsdWUpO1xuICAgICAgICBpZiAoIXVybC5zZWFyY2gpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IFtrZXldIG9mIHVybC5zZWFyY2hQYXJhbXMpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hbGxvd2VkUXVlcnlQYXJhbWV0ZXJzLmhhcyhrZXkudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldChrZXksIFJlZGFjdGVkU3RyaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXJsLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHNhbml0aXplSGVhZGVycyhvYmopIHtcbiAgICAgICAgY29uc3Qgc2FuaXRpemVkID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG9iaikpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFsbG93ZWRIZWFkZXJOYW1lcy5oYXMoa2V5LnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICAgICAgc2FuaXRpemVkW2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNhbml0aXplZFtrZXldID0gUmVkYWN0ZWRTdHJpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNhbml0aXplZDtcbiAgICB9XG4gICAgc2FuaXRpemVRdWVyeSh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2FuaXRpemVkID0ge307XG4gICAgICAgIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFsbG93ZWRRdWVyeVBhcmFtZXRlcnMuaGFzKGsudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgICAgICBzYW5pdGl6ZWRba10gPSB2YWx1ZVtrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNhbml0aXplZFtrXSA9IFJlZGFjdGVkU3RyaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzYW5pdGl6ZWQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2FuaXRpemVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/sanitizer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_CYCLER_OPTIONS: () => (/* binding */ DEFAULT_CYCLER_OPTIONS),\n/* harmony export */   createTokenCycler: () => (/* binding */ createTokenCycler)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/helpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// Default options for the cycler if none are provided\nconst DEFAULT_CYCLER_OPTIONS = {\n    forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n    retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n    refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    async function tryGetAccessToken() {\n        if (Date.now() < refreshTimeout) {\n            try {\n                return await getAccessToken();\n            }\n            catch (_a) {\n                return null;\n            }\n        }\n        else {\n            const finalToken = await getAccessToken();\n            // Timeout is up, so throw if it's still null\n            if (finalToken === null) {\n                throw new Error(\"Failed to refresh access token.\");\n            }\n            return finalToken;\n        }\n    }\n    let token = await tryGetAccessToken();\n    while (token === null) {\n        await (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.delay)(retryIntervalInMs);\n        token = await tryGetAccessToken();\n    }\n    return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction createTokenCycler(credential, tokenCyclerOptions) {\n    let refreshWorker = null;\n    let token = null;\n    let tenantId;\n    const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n    /**\n     * This little holder defines several predicates that we use to construct\n     * the rules of refreshing the token.\n     */\n    const cycler = {\n        /**\n         * Produces true if a refresh job is currently in progress.\n         */\n        get isRefreshing() {\n            return refreshWorker !== null;\n        },\n        /**\n         * Produces true if the cycler SHOULD refresh (we are within the refresh\n         * window and not already refreshing)\n         */\n        get shouldRefresh() {\n            var _a;\n            return (!cycler.isRefreshing &&\n                ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now());\n        },\n        /**\n         * Produces true if the cycler MUST refresh (null or nearly-expired\n         * token).\n         */\n        get mustRefresh() {\n            return (token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now());\n        },\n    };\n    /**\n     * Starts a refresh job or returns the existing job if one is already\n     * running.\n     */\n    function refresh(scopes, getTokenOptions) {\n        var _a;\n        if (!cycler.isRefreshing) {\n            // We bind `scopes` here to avoid passing it around a lot\n            const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);\n            // Take advantage of promise chaining to insert an assignment to `token`\n            // before the refresh can be considered done.\n            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, \n            // If we don't have a token, then we should timeout immediately\n            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now())\n                .then((_token) => {\n                refreshWorker = null;\n                token = _token;\n                tenantId = getTokenOptions.tenantId;\n                return token;\n            })\n                .catch((reason) => {\n                // We also should reset the refresher if we enter a failed state.  All\n                // existing awaiters will throw, but subsequent requests will start a\n                // new retry chain.\n                refreshWorker = null;\n                token = null;\n                tenantId = undefined;\n                throw reason;\n            });\n        }\n        return refreshWorker;\n    }\n    return async (scopes, tokenOptions) => {\n        //\n        // Simple rules:\n        // - If we MUST refresh, then return the refresh task, blocking\n        //   the pipeline until a token is available.\n        // - If we SHOULD refresh, then run refresh but don't return it\n        //   (we can still use the cached token).\n        // - Return the token, since it's fine if we didn't return in\n        //   step 1.\n        //\n        const hasClaimChallenge = Boolean(tokenOptions.claims);\n        const tenantIdChanged = tenantId !== tokenOptions.tenantId;\n        if (hasClaimChallenge) {\n            // If we've received a claim, we know the existing token isn't valid\n            // We want to clear it so that that refresh worker won't use the old expiration time as a timeout\n            token = null;\n        }\n        // If the tenantId passed in token options is different to the one we have\n        // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n        // refresh the token with the new tenantId or token.\n        const mustRefresh = tenantIdChanged || hasClaimChallenge || cycler.mustRefresh;\n        if (mustRefresh) {\n            return refresh(scopes, tokenOptions);\n        }\n        if (cycler.shouldRefresh) {\n            refresh(scopes, tokenOptions);\n        }\n        return token;\n    };\n}\n//# sourceMappingURL=tokenCycler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/typeGuards.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/typeGuards.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBlob: () => (/* binding */ isBlob),\n/* harmony export */   isNodeReadableStream: () => (/* binding */ isNodeReadableStream),\n/* harmony export */   isReadableStream: () => (/* binding */ isReadableStream),\n/* harmony export */   isWebReadableStream: () => (/* binding */ isWebReadableStream)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction isNodeReadableStream(x) {\n    return Boolean(x && typeof x[\"pipe\"] === \"function\");\n}\nfunction isWebReadableStream(x) {\n    return Boolean(x &&\n        typeof x.getReader === \"function\" &&\n        typeof x.tee === \"function\");\n}\nfunction isReadableStream(x) {\n    return isNodeReadableStream(x) || isWebReadableStream(x);\n}\nfunction isBlob(x) {\n    return typeof x.stream === \"function\";\n}\n//# sourceMappingURL=typeGuards.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL3R5cGVHdWFyZHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3V0aWwvdHlwZUd1YXJkcy5qcz9hZGJmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVJlYWRhYmxlU3RyZWFtKHgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih4ICYmIHR5cGVvZiB4W1wicGlwZVwiXSA9PT0gXCJmdW5jdGlvblwiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1dlYlJlYWRhYmxlU3RyZWFtKHgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih4ICYmXG4gICAgICAgIHR5cGVvZiB4LmdldFJlYWRlciA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgIHR5cGVvZiB4LnRlZSA9PT0gXCJmdW5jdGlvblwiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1JlYWRhYmxlU3RyZWFtKHgpIHtcbiAgICByZXR1cm4gaXNOb2RlUmVhZGFibGVTdHJlYW0oeCkgfHwgaXNXZWJSZWFkYWJsZVN0cmVhbSh4KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0Jsb2IoeCkge1xuICAgIHJldHVybiB0eXBlb2YgeC5zdHJlYW0gPT09IFwiZnVuY3Rpb25cIjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVHdWFyZHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/typeGuards.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUserAgentHeaderName: () => (/* binding */ getUserAgentHeaderName),\n/* harmony export */   getUserAgentValue: () => (/* binding */ getUserAgentValue)\n/* harmony export */ });\n/* harmony import */ var _userAgentPlatform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userAgentPlatform.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgentPlatform.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\nfunction getUserAgentString(telemetryInfo) {\n    const parts = [];\n    for (const [key, value] of telemetryInfo) {\n        const token = value ? `${key}/${value}` : key;\n        parts.push(token);\n    }\n    return parts.join(\" \");\n}\n/**\n * @internal\n */\nfunction getUserAgentHeaderName() {\n    return (0,_userAgentPlatform_js__WEBPACK_IMPORTED_MODULE_0__.getHeaderName)();\n}\n/**\n * @internal\n */\nasync function getUserAgentValue(prefix) {\n    const runtimeInfo = new Map();\n    runtimeInfo.set(\"core-rest-pipeline\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION);\n    await (0,_userAgentPlatform_js__WEBPACK_IMPORTED_MODULE_0__.setPlatformSpecificData)(runtimeInfo);\n    const defaultAgent = getUserAgentString(runtimeInfo);\n    const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;\n    return userAgentValue;\n}\n//# sourceMappingURL=userAgent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL3VzZXJBZ2VudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNnRjtBQUNsQztBQUM5QztBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsSUFBSSxHQUFHLE1BQU07QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsb0VBQWE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsMENBQTBDLHNEQUFXO0FBQ3JELFVBQVUsOEVBQXVCO0FBQ2pDO0FBQ0EsdUNBQXVDLFFBQVEsRUFBRSxhQUFhO0FBQzlEO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vdXRpbC91c2VyQWdlbnQuanM/NTM1NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IGdldEhlYWRlck5hbWUsIHNldFBsYXRmb3JtU3BlY2lmaWNEYXRhIH0gZnJvbSBcIi4vdXNlckFnZW50UGxhdGZvcm0uanNcIjtcbmltcG9ydCB7IFNES19WRVJTSU9OIH0gZnJvbSBcIi4uL2NvbnN0YW50cy5qc1wiO1xuZnVuY3Rpb24gZ2V0VXNlckFnZW50U3RyaW5nKHRlbGVtZXRyeUluZm8pIHtcbiAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHRlbGVtZXRyeUluZm8pIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB2YWx1ZSA/IGAke2tleX0vJHt2YWx1ZX1gIDoga2V5O1xuICAgICAgICBwYXJ0cy5wdXNoKHRva2VuKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVzZXJBZ2VudEhlYWRlck5hbWUoKSB7XG4gICAgcmV0dXJuIGdldEhlYWRlck5hbWUoKTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVc2VyQWdlbnRWYWx1ZShwcmVmaXgpIHtcbiAgICBjb25zdCBydW50aW1lSW5mbyA9IG5ldyBNYXAoKTtcbiAgICBydW50aW1lSW5mby5zZXQoXCJjb3JlLXJlc3QtcGlwZWxpbmVcIiwgU0RLX1ZFUlNJT04pO1xuICAgIGF3YWl0IHNldFBsYXRmb3JtU3BlY2lmaWNEYXRhKHJ1bnRpbWVJbmZvKTtcbiAgICBjb25zdCBkZWZhdWx0QWdlbnQgPSBnZXRVc2VyQWdlbnRTdHJpbmcocnVudGltZUluZm8pO1xuICAgIGNvbnN0IHVzZXJBZ2VudFZhbHVlID0gcHJlZml4ID8gYCR7cHJlZml4fSAke2RlZmF1bHRBZ2VudH1gIDogZGVmYXVsdEFnZW50O1xuICAgIHJldHVybiB1c2VyQWdlbnRWYWx1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZXJBZ2VudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgentPlatform.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgentPlatform.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var node_process__WEBPACK_IMPORTED_MODULE_1___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHeaderName: () => (/* binding */ getHeaderName),\n/* harmony export */   setPlatformSpecificData: () => (/* binding */ setPlatformSpecificData)\n/* harmony export */ });\n/* harmony import */ var node_os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:os */ \"node:os\");\n/* harmony import */ var node_process__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:process */ \"node:process\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * @internal\n */\nfunction getHeaderName() {\n    return \"User-Agent\";\n}\n/**\n * @internal\n */\nasync function setPlatformSpecificData(map) {\n    if (/*#__PURE__*/ (node_process__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (node_process__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(node_process__WEBPACK_IMPORTED_MODULE_1__, 2))) && node_process__WEBPACK_IMPORTED_MODULE_1__.versions) {\n        const versions = node_process__WEBPACK_IMPORTED_MODULE_1__.versions;\n        if (versions.bun) {\n            map.set(\"Bun\", versions.bun);\n        }\n        else if (versions.deno) {\n            map.set(\"Deno\", versions.deno);\n        }\n        else if (versions.node) {\n            map.set(\"Node\", versions.node);\n        }\n    }\n    map.set(\"OS\", `(${node_os__WEBPACK_IMPORTED_MODULE_0__.arch()}-${node_os__WEBPACK_IMPORTED_MODULE_0__.type()}-${node_os__WEBPACK_IMPORTED_MODULE_0__.release()})`);\n}\n//# sourceMappingURL=userAgentPlatform.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL3VzZXJBZ2VudFBsYXRmb3JtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUM4QjtBQUNVO0FBQ3hDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsUUFBUSw4TUFBTyxJQUFJLGtEQUFnQjtBQUNuQyx5QkFBeUIsa0RBQWdCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHlDQUFPLEdBQUcsR0FBRyx5Q0FBTyxHQUFHLEdBQUcsNENBQVUsR0FBRztBQUM3RDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL3VzZXJBZ2VudFBsYXRmb3JtLmpzP2UwODkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgKiBhcyBvcyBmcm9tIFwibm9kZTpvc1wiO1xuaW1wb3J0ICogYXMgcHJvY2VzcyBmcm9tIFwibm9kZTpwcm9jZXNzXCI7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGVhZGVyTmFtZSgpIHtcbiAgICByZXR1cm4gXCJVc2VyLUFnZW50XCI7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0UGxhdGZvcm1TcGVjaWZpY0RhdGEobWFwKSB7XG4gICAgaWYgKHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucykge1xuICAgICAgICBjb25zdCB2ZXJzaW9ucyA9IHByb2Nlc3MudmVyc2lvbnM7XG4gICAgICAgIGlmICh2ZXJzaW9ucy5idW4pIHtcbiAgICAgICAgICAgIG1hcC5zZXQoXCJCdW5cIiwgdmVyc2lvbnMuYnVuKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2ZXJzaW9ucy5kZW5vKSB7XG4gICAgICAgICAgICBtYXAuc2V0KFwiRGVub1wiLCB2ZXJzaW9ucy5kZW5vKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2ZXJzaW9ucy5ub2RlKSB7XG4gICAgICAgICAgICBtYXAuc2V0KFwiTm9kZVwiLCB2ZXJzaW9ucy5ub2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtYXAuc2V0KFwiT1NcIiwgYCgke29zLmFyY2goKX0tJHtvcy50eXBlKCl9LSR7b3MucmVsZWFzZSgpfSlgKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZXJBZ2VudFBsYXRmb3JtLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgentPlatform.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/esm/AbortError.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/esm/AbortError.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nclass AbortError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"AbortError\";\n    }\n}\n//# sourceMappingURL=AbortError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC9lc20vQWJvcnRFcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL25vZGVfbW9kdWxlcy9AYXp1cmUvYWJvcnQtY29udHJvbGxlci9kaXN0L2VzbS9BYm9ydEVycm9yLmpzPzNmNmEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIFRoaXMgZXJyb3IgaXMgdGhyb3duIHdoZW4gYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbiBoYXMgYmVlbiBhYm9ydGVkLlxuICogQ2hlY2sgZm9yIHRoaXMgZXJyb3IgYnkgdGVzdGluZyB0aGUgYG5hbWVgIHRoYXQgdGhlIG5hbWUgcHJvcGVydHkgb2YgdGhlXG4gKiBlcnJvciBtYXRjaGVzIGBcIkFib3J0RXJyb3JcImAuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICogY29udHJvbGxlci5hYm9ydCgpO1xuICogdHJ5IHtcbiAqICAgZG9Bc3luY1dvcmsoY29udHJvbGxlci5zaWduYWwpXG4gKiB9IGNhdGNoIChlKSB7XG4gKiAgIGlmIChlLm5hbWUgPT09ICdBYm9ydEVycm9yJykge1xuICogICAgIC8vIGhhbmRsZSBhYm9ydCBlcnJvciBoZXJlLlxuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIEFib3J0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBYm9ydEVycm9yXCI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWJvcnRFcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/esm/AbortError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/esm/index.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/esm/index.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* reexport safe */ _AbortError_js__WEBPACK_IMPORTED_MODULE_0__.AbortError)\n/* harmony export */ });\n/* harmony import */ var _AbortError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbortError.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/esm/AbortError.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQzZDO0FBQzdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC9lc20vaW5kZXguanM/NmQ0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmV4cG9ydCB7IEFib3J0RXJyb3IgfSBmcm9tIFwiLi9BYm9ydEVycm9yLmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/node_modules/@azure/abort-controller/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/esm/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/esm/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTracingClient: () => (/* reexport safe */ _tracingClient_js__WEBPACK_IMPORTED_MODULE_1__.createTracingClient),\n/* harmony export */   useInstrumenter: () => (/* reexport safe */ _instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.useInstrumenter)\n/* harmony export */ });\n/* harmony import */ var _instrumenter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instrumenter.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/instrumenter.js\");\n/* harmony import */ var _tracingClient_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracingClient.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingClient.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNvRDtBQUNLO0FBQ3pEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS9pbmRleC5qcz9iNWU0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuZXhwb3J0IHsgdXNlSW5zdHJ1bWVudGVyIH0gZnJvbSBcIi4vaW5zdHJ1bWVudGVyLmpzXCI7XG5leHBvcnQgeyBjcmVhdGVUcmFjaW5nQ2xpZW50IH0gZnJvbSBcIi4vdHJhY2luZ0NsaWVudC5qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/esm/instrumenter.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/esm/instrumenter.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDefaultInstrumenter: () => (/* binding */ createDefaultInstrumenter),\n/* harmony export */   createDefaultTracingSpan: () => (/* binding */ createDefaultTracingSpan),\n/* harmony export */   getInstrumenter: () => (/* binding */ getInstrumenter),\n/* harmony export */   useInstrumenter: () => (/* binding */ useInstrumenter)\n/* harmony export */ });\n/* harmony import */ var _tracingContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tracingContext.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingContext.js\");\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/state.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\nfunction createDefaultTracingSpan() {\n    return {\n        end: () => {\n            // noop\n        },\n        isRecording: () => false,\n        recordException: () => {\n            // noop\n        },\n        setAttribute: () => {\n            // noop\n        },\n        setStatus: () => {\n            // noop\n        },\n    };\n}\nfunction createDefaultInstrumenter() {\n    return {\n        createRequestHeaders: () => {\n            return {};\n        },\n        parseTraceparentHeader: () => {\n            return undefined;\n        },\n        startSpan: (_name, spanOptions) => {\n            return {\n                span: createDefaultTracingSpan(),\n                tracingContext: (0,_tracingContext_js__WEBPACK_IMPORTED_MODULE_0__.createTracingContext)({ parentContext: spanOptions.tracingContext }),\n            };\n        },\n        withContext(_context, callback, ...callbackArgs) {\n            return callback(...callbackArgs);\n        },\n    };\n}\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\nfunction useInstrumenter(instrumenter) {\n    _state_js__WEBPACK_IMPORTED_MODULE_1__.state.instrumenterImplementation = instrumenter;\n}\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\nfunction getInstrumenter() {\n    if (!_state_js__WEBPACK_IMPORTED_MODULE_1__.state.instrumenterImplementation) {\n        _state_js__WEBPACK_IMPORTED_MODULE_1__.state.instrumenterImplementation = createDefaultInstrumenter();\n    }\n    return _state_js__WEBPACK_IMPORTED_MODULE_1__.state.instrumenterImplementation;\n}\n//# sourceMappingURL=instrumenter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS9pbnN0cnVtZW50ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUMyRDtBQUN4QjtBQUM1QjtBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyx3RUFBb0IsR0FBRywyQ0FBMkM7QUFDbEc7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsSUFBSSw0Q0FBSztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsU0FBUyw0Q0FBSztBQUNkLFFBQVEsNENBQUs7QUFDYjtBQUNBLFdBQVcsNENBQUs7QUFDaEI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXRyYWNpbmcvZGlzdC9lc20vaW5zdHJ1bWVudGVyLmpzPzY5YmIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVUcmFjaW5nQ29udGV4dCB9IGZyb20gXCIuL3RyYWNpbmdDb250ZXh0LmpzXCI7XG5pbXBvcnQgeyBzdGF0ZSB9IGZyb20gXCIuL3N0YXRlLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGVmYXVsdFRyYWNpbmdTcGFuKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGVuZDogKCkgPT4ge1xuICAgICAgICAgICAgLy8gbm9vcFxuICAgICAgICB9LFxuICAgICAgICBpc1JlY29yZGluZzogKCkgPT4gZmFsc2UsXG4gICAgICAgIHJlY29yZEV4Y2VwdGlvbjogKCkgPT4ge1xuICAgICAgICAgICAgLy8gbm9vcFxuICAgICAgICB9LFxuICAgICAgICBzZXRBdHRyaWJ1dGU6ICgpID0+IHtcbiAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgfSxcbiAgICAgICAgc2V0U3RhdHVzOiAoKSA9PiB7XG4gICAgICAgICAgICAvLyBub29wXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0SW5zdHJ1bWVudGVyKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNyZWF0ZVJlcXVlc3RIZWFkZXJzOiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH0sXG4gICAgICAgIHBhcnNlVHJhY2VwYXJlbnRIZWFkZXI6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIHN0YXJ0U3BhbjogKF9uYW1lLCBzcGFuT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzcGFuOiBjcmVhdGVEZWZhdWx0VHJhY2luZ1NwYW4oKSxcbiAgICAgICAgICAgICAgICB0cmFjaW5nQ29udGV4dDogY3JlYXRlVHJhY2luZ0NvbnRleHQoeyBwYXJlbnRDb250ZXh0OiBzcGFuT3B0aW9ucy50cmFjaW5nQ29udGV4dCB9KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHdpdGhDb250ZXh0KF9jb250ZXh0LCBjYWxsYmFjaywgLi4uY2FsbGJhY2tBcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soLi4uY2FsbGJhY2tBcmdzKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBFeHRlbmRzIHRoZSBBenVyZSBTREsgd2l0aCBzdXBwb3J0IGZvciBhIGdpdmVuIGluc3RydW1lbnRlciBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAcGFyYW0gaW5zdHJ1bWVudGVyIC0gVGhlIGluc3RydW1lbnRlciBpbXBsZW1lbnRhdGlvbiB0byB1c2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VJbnN0cnVtZW50ZXIoaW5zdHJ1bWVudGVyKSB7XG4gICAgc3RhdGUuaW5zdHJ1bWVudGVySW1wbGVtZW50YXRpb24gPSBpbnN0cnVtZW50ZXI7XG59XG4vKipcbiAqIEdldHMgdGhlIGN1cnJlbnRseSBzZXQgaW5zdHJ1bWVudGVyLCBhIE5vLU9wIGluc3RydW1lbnRlciBieSBkZWZhdWx0LlxuICpcbiAqIEByZXR1cm5zIFRoZSBjdXJyZW50bHkgc2V0IGluc3RydW1lbnRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5zdHJ1bWVudGVyKCkge1xuICAgIGlmICghc3RhdGUuaW5zdHJ1bWVudGVySW1wbGVtZW50YXRpb24pIHtcbiAgICAgICAgc3RhdGUuaW5zdHJ1bWVudGVySW1wbGVtZW50YXRpb24gPSBjcmVhdGVEZWZhdWx0SW5zdHJ1bWVudGVyKCk7XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZS5pbnN0cnVtZW50ZXJJbXBsZW1lbnRhdGlvbjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RydW1lbnRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/esm/instrumenter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/esm/state.js":
/*!************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/esm/state.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   state: () => (/* binding */ state)\n/* harmony export */ });\n/* harmony import */ var _commonjs_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../commonjs/state.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/state.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// @ts-expect-error The recommended approach to sharing module state between ESM and CJS.\n// See https://github.com/isaacs/tshy/blob/main/README.md#module-local-state for additional information.\n\n/**\n * Defines the shared state between CJS and ESM by re-exporting the CJS state.\n */\nconst state = _commonjs_state_js__WEBPACK_IMPORTED_MODULE_0__.state;\n//# sourceMappingURL=state.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS9zdGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ3lEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNPLGNBQWMscURBQVE7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS10cmFjaW5nL2Rpc3QvZXNtL3N0YXRlLmpzP2JhYWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vLyBAdHMtZXhwZWN0LWVycm9yIFRoZSByZWNvbW1lbmRlZCBhcHByb2FjaCB0byBzaGFyaW5nIG1vZHVsZSBzdGF0ZSBiZXR3ZWVuIEVTTSBhbmQgQ0pTLlxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pc2FhY3MvdHNoeS9ibG9iL21haW4vUkVBRE1FLm1kI21vZHVsZS1sb2NhbC1zdGF0ZSBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbi5cbmltcG9ydCB7IHN0YXRlIGFzIGNqc1N0YXRlIH0gZnJvbSBcIi4uL2NvbW1vbmpzL3N0YXRlLmpzXCI7XG4vKipcbiAqIERlZmluZXMgdGhlIHNoYXJlZCBzdGF0ZSBiZXR3ZWVuIENKUyBhbmQgRVNNIGJ5IHJlLWV4cG9ydGluZyB0aGUgQ0pTIHN0YXRlLlxuICovXG5leHBvcnQgY29uc3Qgc3RhdGUgPSBjanNTdGF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/esm/state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingClient.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/esm/tracingClient.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTracingClient: () => (/* binding */ createTracingClient)\n/* harmony export */ });\n/* harmony import */ var _instrumenter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instrumenter.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/instrumenter.js\");\n/* harmony import */ var _tracingContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracingContext.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingContext.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * Creates a new tracing client.\n *\n * @param options - Options used to configure the tracing client.\n * @returns - An instance of {@link TracingClient}.\n */\nfunction createTracingClient(options) {\n    const { namespace, packageName, packageVersion } = options;\n    function startSpan(name, operationOptions, spanOptions) {\n        var _a;\n        const startSpanResult = (0,_instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.getInstrumenter)().startSpan(name, Object.assign(Object.assign({}, spanOptions), { packageName: packageName, packageVersion: packageVersion, tracingContext: (_a = operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext }));\n        let tracingContext = startSpanResult.tracingContext;\n        const span = startSpanResult.span;\n        if (!tracingContext.getValue(_tracingContext_js__WEBPACK_IMPORTED_MODULE_1__.knownContextKeys.namespace)) {\n            tracingContext = tracingContext.setValue(_tracingContext_js__WEBPACK_IMPORTED_MODULE_1__.knownContextKeys.namespace, namespace);\n        }\n        span.setAttribute(\"az.namespace\", tracingContext.getValue(_tracingContext_js__WEBPACK_IMPORTED_MODULE_1__.knownContextKeys.namespace));\n        const updatedOptions = Object.assign({}, operationOptions, {\n            tracingOptions: Object.assign(Object.assign({}, operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions), { tracingContext }),\n        });\n        return {\n            span,\n            updatedOptions,\n        };\n    }\n    async function withSpan(name, operationOptions, callback, spanOptions) {\n        const { span, updatedOptions } = startSpan(name, operationOptions, spanOptions);\n        try {\n            const result = await withContext(updatedOptions.tracingOptions.tracingContext, () => Promise.resolve(callback(updatedOptions, span)));\n            span.setStatus({ status: \"success\" });\n            return result;\n        }\n        catch (err) {\n            span.setStatus({ status: \"error\", error: err });\n            throw err;\n        }\n        finally {\n            span.end();\n        }\n    }\n    function withContext(context, callback, ...callbackArgs) {\n        return (0,_instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.getInstrumenter)().withContext(context, callback, ...callbackArgs);\n    }\n    /**\n     * Parses a traceparent header value into a span identifier.\n     *\n     * @param traceparentHeader - The traceparent header to parse.\n     * @returns An implementation-specific identifier for the span.\n     */\n    function parseTraceparentHeader(traceparentHeader) {\n        return (0,_instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.getInstrumenter)().parseTraceparentHeader(traceparentHeader);\n    }\n    /**\n     * Creates a set of request headers to propagate tracing information to a backend.\n     *\n     * @param tracingContext - The context containing the span to serialize.\n     * @returns The set of headers to add to a request.\n     */\n    function createRequestHeaders(tracingContext) {\n        return (0,_instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.getInstrumenter)().createRequestHeaders(tracingContext);\n    }\n    return {\n        startSpan,\n        withSpan,\n        withContext,\n        parseTraceparentHeader,\n        createRequestHeaders,\n    };\n}\n//# sourceMappingURL=tracingClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS90cmFjaW5nQ2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDb0Q7QUFDRztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixvQkFBb0I7QUFDbEQ7QUFDTztBQUNQLFlBQVkseUNBQXlDO0FBQ3JEO0FBQ0E7QUFDQSxnQ0FBZ0MsaUVBQWUsaURBQWlELGtCQUFrQiw2T0FBNk87QUFDL1Y7QUFDQTtBQUNBLHFDQUFxQyxnRUFBZ0I7QUFDckQscURBQXFELGdFQUFnQjtBQUNyRTtBQUNBLGtFQUFrRSxnRUFBZ0I7QUFDbEYsK0NBQStDO0FBQy9DLDBEQUEwRCwwR0FBMEcsZ0JBQWdCO0FBQ3BMLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdUJBQXVCO0FBQ3ZDO0FBQ0E7QUFDQSw2QkFBNkIsbUJBQW1CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw2QkFBNkI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlFQUFlO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlFQUFlO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlFQUFlO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS90cmFjaW5nQ2xpZW50LmpzPzk0MDMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBnZXRJbnN0cnVtZW50ZXIgfSBmcm9tIFwiLi9pbnN0cnVtZW50ZXIuanNcIjtcbmltcG9ydCB7IGtub3duQ29udGV4dEtleXMgfSBmcm9tIFwiLi90cmFjaW5nQ29udGV4dC5qc1wiO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHRyYWNpbmcgY2xpZW50LlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUgdHJhY2luZyBjbGllbnQuXG4gKiBAcmV0dXJucyAtIEFuIGluc3RhbmNlIG9mIHtAbGluayBUcmFjaW5nQ2xpZW50fS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRyYWNpbmdDbGllbnQob3B0aW9ucykge1xuICAgIGNvbnN0IHsgbmFtZXNwYWNlLCBwYWNrYWdlTmFtZSwgcGFja2FnZVZlcnNpb24gfSA9IG9wdGlvbnM7XG4gICAgZnVuY3Rpb24gc3RhcnRTcGFuKG5hbWUsIG9wZXJhdGlvbk9wdGlvbnMsIHNwYW5PcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3Qgc3RhcnRTcGFuUmVzdWx0ID0gZ2V0SW5zdHJ1bWVudGVyKCkuc3RhcnRTcGFuKG5hbWUsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgc3Bhbk9wdGlvbnMpLCB7IHBhY2thZ2VOYW1lOiBwYWNrYWdlTmFtZSwgcGFja2FnZVZlcnNpb246IHBhY2thZ2VWZXJzaW9uLCB0cmFjaW5nQ29udGV4dDogKF9hID0gb3BlcmF0aW9uT3B0aW9ucyA9PT0gbnVsbCB8fCBvcGVyYXRpb25PcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcGVyYXRpb25PcHRpb25zLnRyYWNpbmdPcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudHJhY2luZ0NvbnRleHQgfSkpO1xuICAgICAgICBsZXQgdHJhY2luZ0NvbnRleHQgPSBzdGFydFNwYW5SZXN1bHQudHJhY2luZ0NvbnRleHQ7XG4gICAgICAgIGNvbnN0IHNwYW4gPSBzdGFydFNwYW5SZXN1bHQuc3BhbjtcbiAgICAgICAgaWYgKCF0cmFjaW5nQ29udGV4dC5nZXRWYWx1ZShrbm93bkNvbnRleHRLZXlzLm5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgIHRyYWNpbmdDb250ZXh0ID0gdHJhY2luZ0NvbnRleHQuc2V0VmFsdWUoa25vd25Db250ZXh0S2V5cy5uYW1lc3BhY2UsIG5hbWVzcGFjZSk7XG4gICAgICAgIH1cbiAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoXCJhei5uYW1lc3BhY2VcIiwgdHJhY2luZ0NvbnRleHQuZ2V0VmFsdWUoa25vd25Db250ZXh0S2V5cy5uYW1lc3BhY2UpKTtcbiAgICAgICAgY29uc3QgdXBkYXRlZE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcGVyYXRpb25PcHRpb25zLCB7XG4gICAgICAgICAgICB0cmFjaW5nT3B0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcGVyYXRpb25PcHRpb25zID09PSBudWxsIHx8IG9wZXJhdGlvbk9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wZXJhdGlvbk9wdGlvbnMudHJhY2luZ09wdGlvbnMpLCB7IHRyYWNpbmdDb250ZXh0IH0pLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNwYW4sXG4gICAgICAgICAgICB1cGRhdGVkT3B0aW9ucyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgZnVuY3Rpb24gd2l0aFNwYW4obmFtZSwgb3BlcmF0aW9uT3B0aW9ucywgY2FsbGJhY2ssIHNwYW5PcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgc3BhbiwgdXBkYXRlZE9wdGlvbnMgfSA9IHN0YXJ0U3BhbihuYW1lLCBvcGVyYXRpb25PcHRpb25zLCBzcGFuT3B0aW9ucyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB3aXRoQ29udGV4dCh1cGRhdGVkT3B0aW9ucy50cmFjaW5nT3B0aW9ucy50cmFjaW5nQ29udGV4dCwgKCkgPT4gUHJvbWlzZS5yZXNvbHZlKGNhbGxiYWNrKHVwZGF0ZWRPcHRpb25zLCBzcGFuKSkpO1xuICAgICAgICAgICAgc3Bhbi5zZXRTdGF0dXMoeyBzdGF0dXM6IFwic3VjY2Vzc1wiIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzcGFuLnNldFN0YXR1cyh7IHN0YXR1czogXCJlcnJvclwiLCBlcnJvcjogZXJyIH0pO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgc3Bhbi5lbmQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB3aXRoQ29udGV4dChjb250ZXh0LCBjYWxsYmFjaywgLi4uY2FsbGJhY2tBcmdzKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnN0cnVtZW50ZXIoKS53aXRoQ29udGV4dChjb250ZXh0LCBjYWxsYmFjaywgLi4uY2FsbGJhY2tBcmdzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgdHJhY2VwYXJlbnQgaGVhZGVyIHZhbHVlIGludG8gYSBzcGFuIGlkZW50aWZpZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHJhY2VwYXJlbnRIZWFkZXIgLSBUaGUgdHJhY2VwYXJlbnQgaGVhZGVyIHRvIHBhcnNlLlxuICAgICAqIEByZXR1cm5zIEFuIGltcGxlbWVudGF0aW9uLXNwZWNpZmljIGlkZW50aWZpZXIgZm9yIHRoZSBzcGFuLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlVHJhY2VwYXJlbnRIZWFkZXIodHJhY2VwYXJlbnRIZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIGdldEluc3RydW1lbnRlcigpLnBhcnNlVHJhY2VwYXJlbnRIZWFkZXIodHJhY2VwYXJlbnRIZWFkZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0IG9mIHJlcXVlc3QgaGVhZGVycyB0byBwcm9wYWdhdGUgdHJhY2luZyBpbmZvcm1hdGlvbiB0byBhIGJhY2tlbmQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHJhY2luZ0NvbnRleHQgLSBUaGUgY29udGV4dCBjb250YWluaW5nIHRoZSBzcGFuIHRvIHNlcmlhbGl6ZS5cbiAgICAgKiBAcmV0dXJucyBUaGUgc2V0IG9mIGhlYWRlcnMgdG8gYWRkIHRvIGEgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZXF1ZXN0SGVhZGVycyh0cmFjaW5nQ29udGV4dCkge1xuICAgICAgICByZXR1cm4gZ2V0SW5zdHJ1bWVudGVyKCkuY3JlYXRlUmVxdWVzdEhlYWRlcnModHJhY2luZ0NvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydFNwYW4sXG4gICAgICAgIHdpdGhTcGFuLFxuICAgICAgICB3aXRoQ29udGV4dCxcbiAgICAgICAgcGFyc2VUcmFjZXBhcmVudEhlYWRlcixcbiAgICAgICAgY3JlYXRlUmVxdWVzdEhlYWRlcnMsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYWNpbmdDbGllbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingContext.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/esm/tracingContext.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TracingContextImpl: () => (/* binding */ TracingContextImpl),\n/* harmony export */   createTracingContext: () => (/* binding */ createTracingContext),\n/* harmony export */   knownContextKeys: () => (/* binding */ knownContextKeys)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/** @internal */\nconst knownContextKeys = {\n    span: Symbol.for(\"@azure/core-tracing span\"),\n    namespace: Symbol.for(\"@azure/core-tracing namespace\"),\n};\n/**\n * Creates a new {@link TracingContext} with the given options.\n * @param options - A set of known keys that may be set on the context.\n * @returns A new {@link TracingContext} with the given options.\n *\n * @internal\n */\nfunction createTracingContext(options = {}) {\n    let context = new TracingContextImpl(options.parentContext);\n    if (options.span) {\n        context = context.setValue(knownContextKeys.span, options.span);\n    }\n    if (options.namespace) {\n        context = context.setValue(knownContextKeys.namespace, options.namespace);\n    }\n    return context;\n}\n/** @internal */\nclass TracingContextImpl {\n    constructor(initialContext) {\n        this._contextMap =\n            initialContext instanceof TracingContextImpl\n                ? new Map(initialContext._contextMap)\n                : new Map();\n    }\n    setValue(key, value) {\n        const newContext = new TracingContextImpl(this);\n        newContext._contextMap.set(key, value);\n        return newContext;\n    }\n    getValue(key) {\n        return this._contextMap.get(key);\n    }\n    deleteValue(key) {\n        const newContext = new TracingContextImpl(this);\n        newContext._contextMap.delete(key);\n        return newContext;\n    }\n}\n//# sourceMappingURL=tracingContext.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS90cmFjaW5nQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNCQUFzQjtBQUN4QztBQUNBLG1CQUFtQixzQkFBc0I7QUFDekM7QUFDQTtBQUNBO0FBQ08sMENBQTBDO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS10cmFjaW5nL2Rpc3QvZXNtL3RyYWNpbmdDb250ZXh0LmpzPzgwMTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3Qga25vd25Db250ZXh0S2V5cyA9IHtcbiAgICBzcGFuOiBTeW1ib2wuZm9yKFwiQGF6dXJlL2NvcmUtdHJhY2luZyBzcGFuXCIpLFxuICAgIG5hbWVzcGFjZTogU3ltYm9sLmZvcihcIkBhenVyZS9jb3JlLXRyYWNpbmcgbmFtZXNwYWNlXCIpLFxufTtcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB7QGxpbmsgVHJhY2luZ0NvbnRleHR9IHdpdGggdGhlIGdpdmVuIG9wdGlvbnMuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEEgc2V0IG9mIGtub3duIGtleXMgdGhhdCBtYXkgYmUgc2V0IG9uIHRoZSBjb250ZXh0LlxuICogQHJldHVybnMgQSBuZXcge0BsaW5rIFRyYWNpbmdDb250ZXh0fSB3aXRoIHRoZSBnaXZlbiBvcHRpb25zLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVHJhY2luZ0NvbnRleHQob3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IGNvbnRleHQgPSBuZXcgVHJhY2luZ0NvbnRleHRJbXBsKG9wdGlvbnMucGFyZW50Q29udGV4dCk7XG4gICAgaWYgKG9wdGlvbnMuc3Bhbikge1xuICAgICAgICBjb250ZXh0ID0gY29udGV4dC5zZXRWYWx1ZShrbm93bkNvbnRleHRLZXlzLnNwYW4sIG9wdGlvbnMuc3Bhbik7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLm5hbWVzcGFjZSkge1xuICAgICAgICBjb250ZXh0ID0gY29udGV4dC5zZXRWYWx1ZShrbm93bkNvbnRleHRLZXlzLm5hbWVzcGFjZSwgb3B0aW9ucy5uYW1lc3BhY2UpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dDtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjbGFzcyBUcmFjaW5nQ29udGV4dEltcGwge1xuICAgIGNvbnN0cnVjdG9yKGluaXRpYWxDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuX2NvbnRleHRNYXAgPVxuICAgICAgICAgICAgaW5pdGlhbENvbnRleHQgaW5zdGFuY2VvZiBUcmFjaW5nQ29udGV4dEltcGxcbiAgICAgICAgICAgICAgICA/IG5ldyBNYXAoaW5pdGlhbENvbnRleHQuX2NvbnRleHRNYXApXG4gICAgICAgICAgICAgICAgOiBuZXcgTWFwKCk7XG4gICAgfVxuICAgIHNldFZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgbmV3Q29udGV4dCA9IG5ldyBUcmFjaW5nQ29udGV4dEltcGwodGhpcyk7XG4gICAgICAgIG5ld0NvbnRleHQuX2NvbnRleHRNYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3Q29udGV4dDtcbiAgICB9XG4gICAgZ2V0VmFsdWUoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0TWFwLmdldChrZXkpO1xuICAgIH1cbiAgICBkZWxldGVWYWx1ZShrZXkpIHtcbiAgICAgICAgY29uc3QgbmV3Q29udGV4dCA9IG5ldyBUcmFjaW5nQ29udGV4dEltcGwodGhpcyk7XG4gICAgICAgIG5ld0NvbnRleHQuX2NvbnRleHRNYXAuZGVsZXRlKGtleSk7XG4gICAgICAgIHJldHVybiBuZXdDb250ZXh0O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYWNpbmdDb250ZXh0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/aborterUtils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/aborterUtils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cancelablePromiseRace: () => (/* binding */ cancelablePromiseRace)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * promise.race() wrapper that aborts rest of promises as soon as the first promise settles.\n */\nasync function cancelablePromiseRace(abortablePromiseBuilders, options) {\n    var _a, _b;\n    const aborter = new AbortController();\n    function abortHandler() {\n        aborter.abort();\n    }\n    (_a = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _a === void 0 ? void 0 : _a.addEventListener(\"abort\", abortHandler);\n    try {\n        return await Promise.race(abortablePromiseBuilders.map((p) => p({ abortSignal: aborter.signal })));\n    }\n    finally {\n        aborter.abort();\n        (_b = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _b === void 0 ? void 0 : _b.removeEventListener(\"abort\", abortHandler);\n    }\n}\n//# sourceMappingURL=aborterUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9hYm9ydGVyVXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLDZCQUE2QjtBQUN2RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXV0aWwvZGlzdC9lc20vYWJvcnRlclV0aWxzLmpzPzJkMjQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIHByb21pc2UucmFjZSgpIHdyYXBwZXIgdGhhdCBhYm9ydHMgcmVzdCBvZiBwcm9taXNlcyBhcyBzb29uIGFzIHRoZSBmaXJzdCBwcm9taXNlIHNldHRsZXMuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjYW5jZWxhYmxlUHJvbWlzZVJhY2UoYWJvcnRhYmxlUHJvbWlzZUJ1aWxkZXJzLCBvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBhYm9ydGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGZ1bmN0aW9uIGFib3J0SGFuZGxlcigpIHtcbiAgICAgICAgYWJvcnRlci5hYm9ydCgpO1xuICAgIH1cbiAgICAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWJvcnRTaWduYWwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRIYW5kbGVyKTtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5yYWNlKGFib3J0YWJsZVByb21pc2VCdWlsZGVycy5tYXAoKHApID0+IHAoeyBhYm9ydFNpZ25hbDogYWJvcnRlci5zaWduYWwgfSkpKTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGFib3J0ZXIuYWJvcnQoKTtcbiAgICAgICAgKF9iID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFib3J0U2lnbmFsKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0SGFuZGxlcik7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWJvcnRlclV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/aborterUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/bytesEncoding.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/bytesEncoding.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringToUint8Array: () => (/* binding */ stringToUint8Array),\n/* harmony export */   uint8ArrayToString: () => (/* binding */ uint8ArrayToString)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nfunction uint8ArrayToString(bytes, format) {\n    return Buffer.from(bytes).toString(format);\n}\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nfunction stringToUint8Array(value, format) {\n    return Buffer.from(value, format);\n}\n//# sourceMappingURL=bytesEncoding.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9ieXRlc0VuY29kaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9ieXRlc0VuY29kaW5nLmpzP2RmOGMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIFRoZSBoZWxwZXIgdGhhdCB0cmFuc2Zvcm1zIGJ5dGVzIHdpdGggc3BlY2lmaWMgY2hhcmFjdGVyIGVuY29kaW5nIGludG8gc3RyaW5nXG4gKiBAcGFyYW0gYnl0ZXMgLSB0aGUgdWludDhhcnJheSBieXRlc1xuICogQHBhcmFtIGZvcm1hdCAtIHRoZSBmb3JtYXQgd2UgdXNlIHRvIGVuY29kZSB0aGUgYnl0ZVxuICogQHJldHVybnMgYSBzdHJpbmcgb2YgdGhlIGVuY29kZWQgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1aW50OEFycmF5VG9TdHJpbmcoYnl0ZXMsIGZvcm1hdCkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShieXRlcykudG9TdHJpbmcoZm9ybWF0KTtcbn1cbi8qKlxuICogVGhlIGhlbHBlciB0aGF0IHRyYW5zZm9ybXMgc3RyaW5nIHRvIHNwZWNpZmljIGNoYXJhY3RlciBlbmNvZGVkIGJ5dGVzIGFycmF5LlxuICogQHBhcmFtIHZhbHVlIC0gdGhlIHN0cmluZyB0byBiZSBjb252ZXJ0ZWRcbiAqIEBwYXJhbSBmb3JtYXQgLSB0aGUgZm9ybWF0IHdlIHVzZSB0byBkZWNvZGUgdGhlIHZhbHVlXG4gKiBAcmV0dXJucyBhIHVpbnQ4YXJyYXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ1RvVWludDhBcnJheSh2YWx1ZSwgZm9ybWF0KSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlLCBmb3JtYXQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ynl0ZXNFbmNvZGluZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/bytesEncoding.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/checkEnvironment.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/checkEnvironment.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isBun: () => (/* binding */ isBun),\n/* harmony export */   isDeno: () => (/* binding */ isDeno),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isNodeLike: () => (/* binding */ isNodeLike),\n/* harmony export */   isNodeRuntime: () => (/* binding */ isNodeRuntime),\n/* harmony export */   isReactNative: () => (/* binding */ isReactNative),\n/* harmony export */   isWebWorker: () => (/* binding */ isWebWorker)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nvar _a, _b, _c, _d;\n/**\n * A constant that indicates whether the environment the code is running is a Web Browser.\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-no-window\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n/**\n * A constant that indicates whether the environment the code is running is a Web Worker.\n */\nconst isWebWorker = typeof self === \"object\" &&\n    typeof (self === null || self === void 0 ? void 0 : self.importScripts) === \"function\" &&\n    (((_a = self.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"DedicatedWorkerGlobalScope\" ||\n        ((_b = self.constructor) === null || _b === void 0 ? void 0 : _b.name) === \"ServiceWorkerGlobalScope\" ||\n        ((_c = self.constructor) === null || _c === void 0 ? void 0 : _c.name) === \"SharedWorkerGlobalScope\");\n/**\n * A constant that indicates whether the environment the code is running is Deno.\n */\nconst isDeno = typeof Deno !== \"undefined\" &&\n    typeof Deno.version !== \"undefined\" &&\n    typeof Deno.version.deno !== \"undefined\";\n/**\n * A constant that indicates whether the environment the code is running is Bun.sh.\n */\nconst isBun = typeof Bun !== \"undefined\" && typeof Bun.version !== \"undefined\";\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n */\nconst isNodeLike = typeof globalThis.process !== \"undefined\" &&\n    Boolean(globalThis.process.version) &&\n    Boolean((_d = globalThis.process.versions) === null || _d === void 0 ? void 0 : _d.node);\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n * @deprecated Use `isNodeLike` instead.\n */\nconst isNode = isNodeLike;\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n */\nconst isNodeRuntime = isNodeLike && !isBun && !isDeno;\n/**\n * A constant that indicates whether the environment the code is running is in React-Native.\n */\n// https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Core/setUpNavigator.js\nconst isReactNative = typeof navigator !== \"undefined\" && (navigator === null || navigator === void 0 ? void 0 : navigator.product) === \"ReactNative\";\n//# sourceMappingURL=checkEnvironment.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9jaGVja0Vudmlyb25tZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXV0aWwvZGlzdC9lc20vY2hlY2tFbnZpcm9ubWVudC5qcz9mNjhlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxudmFyIF9hLCBfYiwgX2MsIF9kO1xuLyoqXG4gKiBBIGNvbnN0YW50IHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGVudmlyb25tZW50IHRoZSBjb2RlIGlzIHJ1bm5pbmcgaXMgYSBXZWIgQnJvd3Nlci5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhenVyZS9henVyZS1zZGsvdHMtbm8td2luZG93XG5leHBvcnQgY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuLyoqXG4gKiBBIGNvbnN0YW50IHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGVudmlyb25tZW50IHRoZSBjb2RlIGlzIHJ1bm5pbmcgaXMgYSBXZWIgV29ya2VyLlxuICovXG5leHBvcnQgY29uc3QgaXNXZWJXb3JrZXIgPSB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiAmJlxuICAgIHR5cGVvZiAoc2VsZiA9PT0gbnVsbCB8fCBzZWxmID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZWxmLmltcG9ydFNjcmlwdHMpID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAoKChfYSA9IHNlbGYuY29uc3RydWN0b3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lKSA9PT0gXCJEZWRpY2F0ZWRXb3JrZXJHbG9iYWxTY29wZVwiIHx8XG4gICAgICAgICgoX2IgPSBzZWxmLmNvbnN0cnVjdG9yKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubmFtZSkgPT09IFwiU2VydmljZVdvcmtlckdsb2JhbFNjb3BlXCIgfHxcbiAgICAgICAgKChfYyA9IHNlbGYuY29uc3RydWN0b3IpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5uYW1lKSA9PT0gXCJTaGFyZWRXb3JrZXJHbG9iYWxTY29wZVwiKTtcbi8qKlxuICogQSBjb25zdGFudCB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBlbnZpcm9ubWVudCB0aGUgY29kZSBpcyBydW5uaW5nIGlzIERlbm8uXG4gKi9cbmV4cG9ydCBjb25zdCBpc0Rlbm8gPSB0eXBlb2YgRGVubyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBEZW5vLnZlcnNpb24gIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgRGVuby52ZXJzaW9uLmRlbm8gIT09IFwidW5kZWZpbmVkXCI7XG4vKipcbiAqIEEgY29uc3RhbnQgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZW52aXJvbm1lbnQgdGhlIGNvZGUgaXMgcnVubmluZyBpcyBCdW4uc2guXG4gKi9cbmV4cG9ydCBjb25zdCBpc0J1biA9IHR5cGVvZiBCdW4gIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIEJ1bi52ZXJzaW9uICE9PSBcInVuZGVmaW5lZFwiO1xuLyoqXG4gKiBBIGNvbnN0YW50IHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGVudmlyb25tZW50IHRoZSBjb2RlIGlzIHJ1bm5pbmcgaXMgYSBOb2RlLmpzIGNvbXBhdGlibGUgZW52aXJvbm1lbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBpc05vZGVMaWtlID0gdHlwZW9mIGdsb2JhbFRoaXMucHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIEJvb2xlYW4oZ2xvYmFsVGhpcy5wcm9jZXNzLnZlcnNpb24pICYmXG4gICAgQm9vbGVhbigoX2QgPSBnbG9iYWxUaGlzLnByb2Nlc3MudmVyc2lvbnMpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5ub2RlKTtcbi8qKlxuICogQSBjb25zdGFudCB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBlbnZpcm9ubWVudCB0aGUgY29kZSBpcyBydW5uaW5nIGlzIGEgTm9kZS5qcyBjb21wYXRpYmxlIGVudmlyb25tZW50LlxuICogQGRlcHJlY2F0ZWQgVXNlIGBpc05vZGVMaWtlYCBpbnN0ZWFkLlxuICovXG5leHBvcnQgY29uc3QgaXNOb2RlID0gaXNOb2RlTGlrZTtcbi8qKlxuICogQSBjb25zdGFudCB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBlbnZpcm9ubWVudCB0aGUgY29kZSBpcyBydW5uaW5nIGlzIE5vZGUuSlMuXG4gKi9cbmV4cG9ydCBjb25zdCBpc05vZGVSdW50aW1lID0gaXNOb2RlTGlrZSAmJiAhaXNCdW4gJiYgIWlzRGVubztcbi8qKlxuICogQSBjb25zdGFudCB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBlbnZpcm9ubWVudCB0aGUgY29kZSBpcyBydW5uaW5nIGlzIGluIFJlYWN0LU5hdGl2ZS5cbiAqL1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9ibG9iL21haW4vcGFja2FnZXMvcmVhY3QtbmF0aXZlL0xpYnJhcmllcy9Db3JlL3NldFVwTmF2aWdhdG9yLmpzXG5leHBvcnQgY29uc3QgaXNSZWFjdE5hdGl2ZSA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiYgKG5hdmlnYXRvciA9PT0gbnVsbCB8fCBuYXZpZ2F0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5hdmlnYXRvci5wcm9kdWN0KSA9PT0gXCJSZWFjdE5hdGl2ZVwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hlY2tFbnZpcm9ubWVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/checkEnvironment.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/createAbortablePromise.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/createAbortablePromise.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAbortablePromise: () => (/* binding */ createAbortablePromise)\n/* harmony export */ });\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Creates an abortable promise.\n * @param buildPromise - A function that takes the resolve and reject functions as parameters.\n * @param options - The options for the abortable promise.\n * @returns A promise that can be aborted.\n */\nfunction createAbortablePromise(buildPromise, options) {\n    const { cleanupBeforeAbort, abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};\n    return new Promise((resolve, reject) => {\n        function rejectOnAbort() {\n            reject(new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__.AbortError(abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : \"The operation was aborted.\"));\n        }\n        function removeListeners() {\n            abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener(\"abort\", onAbort);\n        }\n        function onAbort() {\n            cleanupBeforeAbort === null || cleanupBeforeAbort === void 0 ? void 0 : cleanupBeforeAbort();\n            removeListeners();\n            rejectOnAbort();\n        }\n        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n            return rejectOnAbort();\n        }\n        try {\n            buildPromise((x) => {\n                removeListeners();\n                resolve(x);\n            }, (x) => {\n                removeListeners();\n                reject(x);\n            });\n        }\n        catch (err) {\n            reject(err);\n        }\n        abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener(\"abort\", onAbort);\n    });\n}\n//# sourceMappingURL=createAbortablePromise.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9jcmVhdGVBYm9ydGFibGVQcm9taXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFlBQVksaURBQWlEO0FBQzdEO0FBQ0E7QUFDQSx1QkFBdUIsK0RBQVU7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL2Rpc3QvZXNtL2NyZWF0ZUFib3J0YWJsZVByb21pc2UuanM/MjgyMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEFib3J0RXJyb3IgfSBmcm9tIFwiQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXJcIjtcbi8qKlxuICogQ3JlYXRlcyBhbiBhYm9ydGFibGUgcHJvbWlzZS5cbiAqIEBwYXJhbSBidWlsZFByb21pc2UgLSBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhlIHJlc29sdmUgYW5kIHJlamVjdCBmdW5jdGlvbnMgYXMgcGFyYW1ldGVycy5cbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBhYm9ydGFibGUgcHJvbWlzZS5cbiAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IGNhbiBiZSBhYm9ydGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQWJvcnRhYmxlUHJvbWlzZShidWlsZFByb21pc2UsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGNsZWFudXBCZWZvcmVBYm9ydCwgYWJvcnRTaWduYWwsIGFib3J0RXJyb3JNc2cgfSA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwID8gb3B0aW9ucyA6IHt9O1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdE9uQWJvcnQoKSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEFib3J0RXJyb3IoYWJvcnRFcnJvck1zZyAhPT0gbnVsbCAmJiBhYm9ydEVycm9yTXNnICE9PSB2b2lkIDAgPyBhYm9ydEVycm9yTXNnIDogXCJUaGUgb3BlcmF0aW9uIHdhcyBhYm9ydGVkLlwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXJzKCkge1xuICAgICAgICAgICAgYWJvcnRTaWduYWwgPT09IG51bGwgfHwgYWJvcnRTaWduYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFib3J0U2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBvbkFib3J0KCkge1xuICAgICAgICAgICAgY2xlYW51cEJlZm9yZUFib3J0ID09PSBudWxsIHx8IGNsZWFudXBCZWZvcmVBYm9ydCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xlYW51cEJlZm9yZUFib3J0KCk7XG4gICAgICAgICAgICByZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIHJlamVjdE9uQWJvcnQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWJvcnRTaWduYWwgPT09IG51bGwgfHwgYWJvcnRTaWduYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFib3J0U2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3RPbkFib3J0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGJ1aWxkUHJvbWlzZSgoeCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoeCk7XG4gICAgICAgICAgICB9LCAoeCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgICAgICAgICAgIHJlamVjdCh4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGFib3J0U2lnbmFsID09PSBudWxsIHx8IGFib3J0U2lnbmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhYm9ydFNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVBYm9ydGFibGVQcm9taXNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/createAbortablePromise.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/delay.js":
/*!*********************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/delay.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   delay: () => (/* binding */ delay)\n/* harmony export */ });\n/* harmony import */ var _createAbortablePromise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createAbortablePromise.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/createAbortablePromise.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst StandardAbortMessage = \"The delay was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nfunction delay(timeInMs, options) {\n    let token;\n    const { abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};\n    return (0,_createAbortablePromise_js__WEBPACK_IMPORTED_MODULE_0__.createAbortablePromise)((resolve) => {\n        token = setTimeout(resolve, timeInMs);\n    }, {\n        cleanupBeforeAbort: () => clearTimeout(token),\n        abortSignal,\n        abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage,\n    });\n}\n//# sourceMappingURL=delay.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9kZWxheS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDcUU7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsWUFBWSw2QkFBNkI7QUFDekMsV0FBVyxrRkFBc0I7QUFDakM7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL2Rpc3QvZXNtL2RlbGF5LmpzPzJlOGYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVBYm9ydGFibGVQcm9taXNlIH0gZnJvbSBcIi4vY3JlYXRlQWJvcnRhYmxlUHJvbWlzZS5qc1wiO1xuY29uc3QgU3RhbmRhcmRBYm9ydE1lc3NhZ2UgPSBcIlRoZSBkZWxheSB3YXMgYWJvcnRlZC5cIjtcbi8qKlxuICogQSB3cmFwcGVyIGZvciBzZXRUaW1lb3V0IHRoYXQgcmVzb2x2ZXMgYSBwcm9taXNlIGFmdGVyIHRpbWVJbk1zIG1pbGxpc2Vjb25kcy5cbiAqIEBwYXJhbSB0aW1lSW5NcyAtIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGRlbGF5ZWQuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciBkZWxheSAtIGN1cnJlbnRseSBhYm9ydCBvcHRpb25zXG4gKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgYWZ0ZXIgdGltZUluTXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGF5KHRpbWVJbk1zLCBvcHRpb25zKSB7XG4gICAgbGV0IHRva2VuO1xuICAgIGNvbnN0IHsgYWJvcnRTaWduYWwsIGFib3J0RXJyb3JNc2cgfSA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwID8gb3B0aW9ucyA6IHt9O1xuICAgIHJldHVybiBjcmVhdGVBYm9ydGFibGVQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHRva2VuID0gc2V0VGltZW91dChyZXNvbHZlLCB0aW1lSW5Ncyk7XG4gICAgfSwge1xuICAgICAgICBjbGVhbnVwQmVmb3JlQWJvcnQ6ICgpID0+IGNsZWFyVGltZW91dCh0b2tlbiksXG4gICAgICAgIGFib3J0U2lnbmFsLFxuICAgICAgICBhYm9ydEVycm9yTXNnOiBhYm9ydEVycm9yTXNnICE9PSBudWxsICYmIGFib3J0RXJyb3JNc2cgIT09IHZvaWQgMCA/IGFib3J0RXJyb3JNc2cgOiBTdGFuZGFyZEFib3J0TWVzc2FnZSxcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/delay.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/error.js":
/*!*********************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/error.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   isError: () => (/* binding */ isError)\n/* harmony export */ });\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./object.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/object.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Typeguard for an error object shape (has name and message)\n * @param e - Something caught by a catch clause.\n */\nfunction isError(e) {\n    if ((0,_object_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(e)) {\n        const hasName = typeof e.name === \"string\";\n        const hasMessage = typeof e.message === \"string\";\n        return hasName && hasMessage;\n    }\n    return false;\n}\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */\nfunction getErrorMessage(e) {\n    if (isError(e)) {\n        return e.message;\n    }\n    else {\n        let stringified;\n        try {\n            if (typeof e === \"object\" && e) {\n                stringified = JSON.stringify(e);\n            }\n            else {\n                stringified = String(e);\n            }\n        }\n        catch (err) {\n            stringified = \"[unable to stringify input]\";\n        }\n        return `Unknown error ${stringified}`;\n    }\n}\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9lcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ3VDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxRQUFRLG9EQUFRO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsWUFBWTtBQUM1QztBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL2Rpc3QvZXNtL2Vycm9yLmpzP2I0ZGUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gXCIuL29iamVjdC5qc1wiO1xuLyoqXG4gKiBUeXBlZ3VhcmQgZm9yIGFuIGVycm9yIG9iamVjdCBzaGFwZSAoaGFzIG5hbWUgYW5kIG1lc3NhZ2UpXG4gKiBAcGFyYW0gZSAtIFNvbWV0aGluZyBjYXVnaHQgYnkgYSBjYXRjaCBjbGF1c2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgICBpZiAoaXNPYmplY3QoZSkpIHtcbiAgICAgICAgY29uc3QgaGFzTmFtZSA9IHR5cGVvZiBlLm5hbWUgPT09IFwic3RyaW5nXCI7XG4gICAgICAgIGNvbnN0IGhhc01lc3NhZ2UgPSB0eXBlb2YgZS5tZXNzYWdlID09PSBcInN0cmluZ1wiO1xuICAgICAgICByZXR1cm4gaGFzTmFtZSAmJiBoYXNNZXNzYWdlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEdpdmVuIHdoYXQgaXMgdGhvdWdodCB0byBiZSBhbiBlcnJvciBvYmplY3QsIHJldHVybiB0aGUgbWVzc2FnZSBpZiBwb3NzaWJsZS5cbiAqIElmIHRoZSBtZXNzYWdlIGlzIG1pc3NpbmcsIHJldHVybnMgYSBzdHJpbmdpZmllZCB2ZXJzaW9uIG9mIHRoZSBpbnB1dC5cbiAqIEBwYXJhbSBlIC0gU29tZXRoaW5nIHRocm93biBmcm9tIGEgdHJ5IGJsb2NrXG4gKiBAcmV0dXJucyBUaGUgZXJyb3IgbWVzc2FnZSBvciBhIHN0cmluZyBvZiB0aGUgaW5wdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEVycm9yTWVzc2FnZShlKSB7XG4gICAgaWYgKGlzRXJyb3IoZSkpIHtcbiAgICAgICAgcmV0dXJuIGUubWVzc2FnZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBzdHJpbmdpZmllZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZSA9PT0gXCJvYmplY3RcIiAmJiBlKSB7XG4gICAgICAgICAgICAgICAgc3RyaW5naWZpZWQgPSBKU09OLnN0cmluZ2lmeShlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0cmluZ2lmaWVkID0gU3RyaW5nKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHN0cmluZ2lmaWVkID0gXCJbdW5hYmxlIHRvIHN0cmluZ2lmeSBpbnB1dF1cIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYFVua25vd24gZXJyb3IgJHtzdHJpbmdpZmllZH1gO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cancelablePromiseRace: () => (/* reexport safe */ _aborterUtils_js__WEBPACK_IMPORTED_MODULE_1__.cancelablePromiseRace),\n/* harmony export */   computeSha256Hash: () => (/* reexport safe */ _sha256_js__WEBPACK_IMPORTED_MODULE_6__.computeSha256Hash),\n/* harmony export */   computeSha256Hmac: () => (/* reexport safe */ _sha256_js__WEBPACK_IMPORTED_MODULE_6__.computeSha256Hmac),\n/* harmony export */   createAbortablePromise: () => (/* reexport safe */ _createAbortablePromise_js__WEBPACK_IMPORTED_MODULE_2__.createAbortablePromise),\n/* harmony export */   delay: () => (/* reexport safe */ _delay_js__WEBPACK_IMPORTED_MODULE_0__.delay),\n/* harmony export */   getErrorMessage: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_5__.getErrorMessage),\n/* harmony export */   getRandomIntegerInclusive: () => (/* reexport safe */ _random_js__WEBPACK_IMPORTED_MODULE_3__.getRandomIntegerInclusive),\n/* harmony export */   isBrowser: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isBrowser),\n/* harmony export */   isBun: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isBun),\n/* harmony export */   isDefined: () => (/* reexport safe */ _typeGuards_js__WEBPACK_IMPORTED_MODULE_7__.isDefined),\n/* harmony export */   isDeno: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isDeno),\n/* harmony export */   isError: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_5__.isError),\n/* harmony export */   isNode: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isNode),\n/* harmony export */   isNodeLike: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isNodeLike),\n/* harmony export */   isNodeRuntime: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isNodeRuntime),\n/* harmony export */   isObject: () => (/* reexport safe */ _object_js__WEBPACK_IMPORTED_MODULE_4__.isObject),\n/* harmony export */   isObjectWithProperties: () => (/* reexport safe */ _typeGuards_js__WEBPACK_IMPORTED_MODULE_7__.isObjectWithProperties),\n/* harmony export */   isReactNative: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isReactNative),\n/* harmony export */   isWebWorker: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isWebWorker),\n/* harmony export */   objectHasProperty: () => (/* reexport safe */ _typeGuards_js__WEBPACK_IMPORTED_MODULE_7__.objectHasProperty),\n/* harmony export */   randomUUID: () => (/* reexport safe */ _uuidUtils_js__WEBPACK_IMPORTED_MODULE_8__.randomUUID),\n/* harmony export */   stringToUint8Array: () => (/* reexport safe */ _bytesEncoding_js__WEBPACK_IMPORTED_MODULE_10__.stringToUint8Array),\n/* harmony export */   uint8ArrayToString: () => (/* reexport safe */ _bytesEncoding_js__WEBPACK_IMPORTED_MODULE_10__.uint8ArrayToString)\n/* harmony export */ });\n/* harmony import */ var _delay_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./delay.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/delay.js\");\n/* harmony import */ var _aborterUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./aborterUtils.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/aborterUtils.js\");\n/* harmony import */ var _createAbortablePromise_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createAbortablePromise.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/createAbortablePromise.js\");\n/* harmony import */ var _random_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./random.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/random.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./object.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/object.js\");\n/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./error.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/error.js\");\n/* harmony import */ var _sha256_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sha256.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/sha256.js\");\n/* harmony import */ var _typeGuards_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./typeGuards.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/typeGuards.js\");\n/* harmony import */ var _uuidUtils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./uuidUtils.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/uuidUtils.js\");\n/* harmony import */ var _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./checkEnvironment.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/checkEnvironment.js\");\n/* harmony import */ var _bytesEncoding_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./bytesEncoding.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/bytesEncoding.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNtQztBQUN3QjtBQUNXO0FBQ2Q7QUFDakI7QUFDZTtBQUNhO0FBQ29CO0FBQzNDO0FBQ3FGO0FBQ3JEO0FBQzVFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9pbmRleC5qcz9iZTFmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuZXhwb3J0IHsgZGVsYXkgfSBmcm9tIFwiLi9kZWxheS5qc1wiO1xuZXhwb3J0IHsgY2FuY2VsYWJsZVByb21pc2VSYWNlLCB9IGZyb20gXCIuL2Fib3J0ZXJVdGlscy5qc1wiO1xuZXhwb3J0IHsgY3JlYXRlQWJvcnRhYmxlUHJvbWlzZSwgfSBmcm9tIFwiLi9jcmVhdGVBYm9ydGFibGVQcm9taXNlLmpzXCI7XG5leHBvcnQgeyBnZXRSYW5kb21JbnRlZ2VySW5jbHVzaXZlIH0gZnJvbSBcIi4vcmFuZG9tLmpzXCI7XG5leHBvcnQgeyBpc09iamVjdCB9IGZyb20gXCIuL29iamVjdC5qc1wiO1xuZXhwb3J0IHsgaXNFcnJvciwgZ2V0RXJyb3JNZXNzYWdlIH0gZnJvbSBcIi4vZXJyb3IuanNcIjtcbmV4cG9ydCB7IGNvbXB1dGVTaGEyNTZIYXNoLCBjb21wdXRlU2hhMjU2SG1hYyB9IGZyb20gXCIuL3NoYTI1Ni5qc1wiO1xuZXhwb3J0IHsgaXNEZWZpbmVkLCBpc09iamVjdFdpdGhQcm9wZXJ0aWVzLCBvYmplY3RIYXNQcm9wZXJ0eSB9IGZyb20gXCIuL3R5cGVHdWFyZHMuanNcIjtcbmV4cG9ydCB7IHJhbmRvbVVVSUQgfSBmcm9tIFwiLi91dWlkVXRpbHMuanNcIjtcbmV4cG9ydCB7IGlzQnJvd3NlciwgaXNCdW4sIGlzTm9kZSwgaXNOb2RlTGlrZSwgaXNOb2RlUnVudGltZSwgaXNEZW5vLCBpc1JlYWN0TmF0aXZlLCBpc1dlYldvcmtlciwgfSBmcm9tIFwiLi9jaGVja0Vudmlyb25tZW50LmpzXCI7XG5leHBvcnQgeyB1aW50OEFycmF5VG9TdHJpbmcsIHN0cmluZ1RvVWludDhBcnJheSB9IGZyb20gXCIuL2J5dGVzRW5jb2RpbmcuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/object.js":
/*!**********************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/object.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isObject: () => (/* binding */ isObject)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Helper to determine when an input is a generic JS object.\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nfunction isObject(input) {\n    return (typeof input === \"object\" &&\n        input !== null &&\n        !Array.isArray(input) &&\n        !(input instanceof RegExp) &&\n        !(input instanceof Date));\n}\n//# sourceMappingURL=object.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9vYmplY3QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL2Rpc3QvZXNtL29iamVjdC5qcz83Zjk5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBIZWxwZXIgdG8gZGV0ZXJtaW5lIHdoZW4gYW4gaW5wdXQgaXMgYSBnZW5lcmljIEpTIG9iamVjdC5cbiAqIEByZXR1cm5zIHRydWUgd2hlbiBpbnB1dCBpcyBhbiBvYmplY3QgdHlwZSB0aGF0IGlzIG5vdCBudWxsLCBBcnJheSwgUmVnRXhwLCBvciBEYXRlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QoaW5wdXQpIHtcbiAgICByZXR1cm4gKHR5cGVvZiBpbnB1dCA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBpbnB1dCAhPT0gbnVsbCAmJlxuICAgICAgICAhQXJyYXkuaXNBcnJheShpbnB1dCkgJiZcbiAgICAgICAgIShpbnB1dCBpbnN0YW5jZW9mIFJlZ0V4cCkgJiZcbiAgICAgICAgIShpbnB1dCBpbnN0YW5jZW9mIERhdGUpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9iamVjdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/object.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/random.js":
/*!**********************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/random.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRandomIntegerInclusive: () => (/* binding */ getRandomIntegerInclusive)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Returns a random integer value between a lower and upper bound,\n * inclusive of both bounds.\n * Note that this uses Math.random and isn't secure. If you need to use\n * this for any kind of security purpose, find a better source of random.\n * @param min - The smallest integer value allowed.\n * @param max - The largest integer value allowed.\n */\nfunction getRandomIntegerInclusive(min, max) {\n    // Make sure inputs are integers.\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    // Pick a random offset from zero to the size of the range.\n    // Since Math.random() can never return 1, we have to make the range one larger\n    // in order to be inclusive of the maximum value after we take the floor.\n    const offset = Math.floor(Math.random() * (max - min + 1));\n    return offset + min;\n}\n//# sourceMappingURL=random.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9yYW5kb20uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXV0aWwvZGlzdC9lc20vcmFuZG9tLmpzP2Q4YTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIFJldHVybnMgYSByYW5kb20gaW50ZWdlciB2YWx1ZSBiZXR3ZWVuIGEgbG93ZXIgYW5kIHVwcGVyIGJvdW5kLFxuICogaW5jbHVzaXZlIG9mIGJvdGggYm91bmRzLlxuICogTm90ZSB0aGF0IHRoaXMgdXNlcyBNYXRoLnJhbmRvbSBhbmQgaXNuJ3Qgc2VjdXJlLiBJZiB5b3UgbmVlZCB0byB1c2VcbiAqIHRoaXMgZm9yIGFueSBraW5kIG9mIHNlY3VyaXR5IHB1cnBvc2UsIGZpbmQgYSBiZXR0ZXIgc291cmNlIG9mIHJhbmRvbS5cbiAqIEBwYXJhbSBtaW4gLSBUaGUgc21hbGxlc3QgaW50ZWdlciB2YWx1ZSBhbGxvd2VkLlxuICogQHBhcmFtIG1heCAtIFRoZSBsYXJnZXN0IGludGVnZXIgdmFsdWUgYWxsb3dlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmRvbUludGVnZXJJbmNsdXNpdmUobWluLCBtYXgpIHtcbiAgICAvLyBNYWtlIHN1cmUgaW5wdXRzIGFyZSBpbnRlZ2Vycy5cbiAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcbiAgICBtYXggPSBNYXRoLmZsb29yKG1heCk7XG4gICAgLy8gUGljayBhIHJhbmRvbSBvZmZzZXQgZnJvbSB6ZXJvIHRvIHRoZSBzaXplIG9mIHRoZSByYW5nZS5cbiAgICAvLyBTaW5jZSBNYXRoLnJhbmRvbSgpIGNhbiBuZXZlciByZXR1cm4gMSwgd2UgaGF2ZSB0byBtYWtlIHRoZSByYW5nZSBvbmUgbGFyZ2VyXG4gICAgLy8gaW4gb3JkZXIgdG8gYmUgaW5jbHVzaXZlIG9mIHRoZSBtYXhpbXVtIHZhbHVlIGFmdGVyIHdlIHRha2UgdGhlIGZsb29yLlxuICAgIGNvbnN0IG9mZnNldCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSk7XG4gICAgcmV0dXJuIG9mZnNldCArIG1pbjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhbmRvbS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/random.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/sha256.js":
/*!**********************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/sha256.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeSha256Hash: () => (/* binding */ computeSha256Hash),\n/* harmony export */   computeSha256Hmac: () => (/* binding */ computeSha256Hmac)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Generates a SHA-256 HMAC signature.\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n * @param stringToSign - The data to be signed.\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nasync function computeSha256Hmac(key, stringToSign, encoding) {\n    const decodedKey = Buffer.from(key, \"base64\");\n    return (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac)(\"sha256\", decodedKey).update(stringToSign).digest(encoding);\n}\n/**\n * Generates a SHA-256 hash.\n * @param content - The data to be included in the hash.\n * @param encoding - The textual encoding to use for the returned hash.\n */\nasync function computeSha256Hash(content, encoding) {\n    return (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"sha256\").update(content).digest(encoding);\n}\n//# sourceMappingURL=sha256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9zaGEyNTYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsV0FBVyxrREFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsa0RBQVU7QUFDckI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXV0aWwvZGlzdC9lc20vc2hhMjU2LmpzP2RlMjgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVIYXNoLCBjcmVhdGVIbWFjIH0gZnJvbSBcImNyeXB0b1wiO1xuLyoqXG4gKiBHZW5lcmF0ZXMgYSBTSEEtMjU2IEhNQUMgc2lnbmF0dXJlLlxuICogQHBhcmFtIGtleSAtIFRoZSBITUFDIGtleSByZXByZXNlbnRlZCBhcyBhIGJhc2U2NCBzdHJpbmcsIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGNyeXB0b2dyYXBoaWMgSE1BQyBoYXNoLlxuICogQHBhcmFtIHN0cmluZ1RvU2lnbiAtIFRoZSBkYXRhIHRvIGJlIHNpZ25lZC5cbiAqIEBwYXJhbSBlbmNvZGluZyAtIFRoZSB0ZXh0dWFsIGVuY29kaW5nIHRvIHVzZSBmb3IgdGhlIHJldHVybmVkIEhNQUMgZGlnZXN0LlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29tcHV0ZVNoYTI1NkhtYWMoa2V5LCBzdHJpbmdUb1NpZ24sIGVuY29kaW5nKSB7XG4gICAgY29uc3QgZGVjb2RlZEtleSA9IEJ1ZmZlci5mcm9tKGtleSwgXCJiYXNlNjRcIik7XG4gICAgcmV0dXJuIGNyZWF0ZUhtYWMoXCJzaGEyNTZcIiwgZGVjb2RlZEtleSkudXBkYXRlKHN0cmluZ1RvU2lnbikuZGlnZXN0KGVuY29kaW5nKTtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgU0hBLTI1NiBoYXNoLlxuICogQHBhcmFtIGNvbnRlbnQgLSBUaGUgZGF0YSB0byBiZSBpbmNsdWRlZCBpbiB0aGUgaGFzaC5cbiAqIEBwYXJhbSBlbmNvZGluZyAtIFRoZSB0ZXh0dWFsIGVuY29kaW5nIHRvIHVzZSBmb3IgdGhlIHJldHVybmVkIGhhc2guXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb21wdXRlU2hhMjU2SGFzaChjb250ZW50LCBlbmNvZGluZykge1xuICAgIHJldHVybiBjcmVhdGVIYXNoKFwic2hhMjU2XCIpLnVwZGF0ZShjb250ZW50KS5kaWdlc3QoZW5jb2RpbmcpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhMjU2LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/sha256.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/typeGuards.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/typeGuards.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   isObjectWithProperties: () => (/* binding */ isObjectWithProperties),\n/* harmony export */   objectHasProperty: () => (/* binding */ objectHasProperty)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Helper TypeGuard that checks if something is defined or not.\n * @param thing - Anything\n */\nfunction isDefined(thing) {\n    return typeof thing !== \"undefined\" && thing !== null;\n}\n/**\n * Helper TypeGuard that checks if the input is an object with the specified properties.\n * @param thing - Anything.\n * @param properties - The name of the properties that should appear in the object.\n */\nfunction isObjectWithProperties(thing, properties) {\n    if (!isDefined(thing) || typeof thing !== \"object\") {\n        return false;\n    }\n    for (const property of properties) {\n        if (!objectHasProperty(thing, property)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Helper TypeGuard that checks if the input is an object with the specified property.\n * @param thing - Any object.\n * @param property - The name of the property that should appear in the object.\n */\nfunction objectHasProperty(thing, property) {\n    return (isDefined(thing) && typeof thing === \"object\" && property in thing);\n}\n//# sourceMappingURL=typeGuards.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS90eXBlR3VhcmRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS90eXBlR3VhcmRzLmpzPzQ4MTEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIEhlbHBlciBUeXBlR3VhcmQgdGhhdCBjaGVja3MgaWYgc29tZXRoaW5nIGlzIGRlZmluZWQgb3Igbm90LlxuICogQHBhcmFtIHRoaW5nIC0gQW55dGhpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5lZCh0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgIT09IFwidW5kZWZpbmVkXCIgJiYgdGhpbmcgIT09IG51bGw7XG59XG4vKipcbiAqIEhlbHBlciBUeXBlR3VhcmQgdGhhdCBjaGVja3MgaWYgdGhlIGlucHV0IGlzIGFuIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAqIEBwYXJhbSB0aGluZyAtIEFueXRoaW5nLlxuICogQHBhcmFtIHByb3BlcnRpZXMgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydGllcyB0aGF0IHNob3VsZCBhcHBlYXIgaW4gdGhlIG9iamVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0V2l0aFByb3BlcnRpZXModGhpbmcsIHByb3BlcnRpZXMpIHtcbiAgICBpZiAoIWlzRGVmaW5lZCh0aGluZykgfHwgdHlwZW9mIHRoaW5nICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eSBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIGlmICghb2JqZWN0SGFzUHJvcGVydHkodGhpbmcsIHByb3BlcnR5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBIZWxwZXIgVHlwZUd1YXJkIHRoYXQgY2hlY2tzIGlmIHRoZSBpbnB1dCBpcyBhbiBvYmplY3Qgd2l0aCB0aGUgc3BlY2lmaWVkIHByb3BlcnR5LlxuICogQHBhcmFtIHRoaW5nIC0gQW55IG9iamVjdC5cbiAqIEBwYXJhbSBwcm9wZXJ0eSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0aGF0IHNob3VsZCBhcHBlYXIgaW4gdGhlIG9iamVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9iamVjdEhhc1Byb3BlcnR5KHRoaW5nLCBwcm9wZXJ0eSkge1xuICAgIHJldHVybiAoaXNEZWZpbmVkKHRoaW5nKSAmJiB0eXBlb2YgdGhpbmcgPT09IFwib2JqZWN0XCIgJiYgcHJvcGVydHkgaW4gdGhpbmcpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZUd1YXJkcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/typeGuards.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/uuidUtils.js":
/*!*************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/uuidUtils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   randomUUID: () => (/* binding */ randomUUID)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nvar _a;\n\n// NOTE: This is a workaround until we can use `globalThis.crypto.randomUUID` in Node.js 19+.\nconst uuidFunction = typeof ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.crypto) === null || _a === void 0 ? void 0 : _a.randomUUID) === \"function\"\n    ? globalThis.crypto.randomUUID.bind(globalThis.crypto)\n    : crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID;\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nfunction randomUUID() {\n    return uuidFunction();\n}\n//# sourceMappingURL=uuidUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS91dWlkVXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0EsTUFBTSw4Q0FBWTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL2Rpc3QvZXNtL3V1aWRVdGlscy5qcz8zYzc4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxudmFyIF9hO1xuaW1wb3J0IHsgcmFuZG9tVVVJRCBhcyB2NFJhbmRvbVVVSUQgfSBmcm9tIFwiY3J5cHRvXCI7XG4vLyBOT1RFOiBUaGlzIGlzIGEgd29ya2Fyb3VuZCB1bnRpbCB3ZSBjYW4gdXNlIGBnbG9iYWxUaGlzLmNyeXB0by5yYW5kb21VVUlEYCBpbiBOb2RlLmpzIDE5Ky5cbmNvbnN0IHV1aWRGdW5jdGlvbiA9IHR5cGVvZiAoKF9hID0gZ2xvYmFsVGhpcyA9PT0gbnVsbCB8fCBnbG9iYWxUaGlzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBnbG9iYWxUaGlzLmNyeXB0bykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJhbmRvbVVVSUQpID09PSBcImZ1bmN0aW9uXCJcbiAgICA/IGdsb2JhbFRoaXMuY3J5cHRvLnJhbmRvbVVVSUQuYmluZChnbG9iYWxUaGlzLmNyeXB0bylcbiAgICA6IHY0UmFuZG9tVVVJRDtcbi8qKlxuICogR2VuZXJhdGVkIFVuaXZlcnNhbGx5IFVuaXF1ZSBJZGVudGlmaWVyXG4gKlxuICogQHJldHVybnMgUkZDNDEyMiB2NCBVVUlELlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tVVVJRCgpIHtcbiAgICByZXR1cm4gdXVpZEZ1bmN0aW9uKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dWlkVXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/uuidUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/AbortError.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/AbortError.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nclass AbortError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"AbortError\";\n    }\n}\n//# sourceMappingURL=AbortError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC9lc20vQWJvcnRFcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL25vZGVfbW9kdWxlcy9AYXp1cmUvYWJvcnQtY29udHJvbGxlci9kaXN0L2VzbS9BYm9ydEVycm9yLmpzPzg4NmYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIFRoaXMgZXJyb3IgaXMgdGhyb3duIHdoZW4gYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbiBoYXMgYmVlbiBhYm9ydGVkLlxuICogQ2hlY2sgZm9yIHRoaXMgZXJyb3IgYnkgdGVzdGluZyB0aGUgYG5hbWVgIHRoYXQgdGhlIG5hbWUgcHJvcGVydHkgb2YgdGhlXG4gKiBlcnJvciBtYXRjaGVzIGBcIkFib3J0RXJyb3JcImAuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICogY29udHJvbGxlci5hYm9ydCgpO1xuICogdHJ5IHtcbiAqICAgZG9Bc3luY1dvcmsoY29udHJvbGxlci5zaWduYWwpXG4gKiB9IGNhdGNoIChlKSB7XG4gKiAgIGlmIChlLm5hbWUgPT09ICdBYm9ydEVycm9yJykge1xuICogICAgIC8vIGhhbmRsZSBhYm9ydCBlcnJvciBoZXJlLlxuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIEFib3J0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBYm9ydEVycm9yXCI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWJvcnRFcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/AbortError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/index.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/index.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* reexport safe */ _AbortError_js__WEBPACK_IMPORTED_MODULE_0__.AbortError)\n/* harmony export */ });\n/* harmony import */ var _AbortError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbortError.js */ \"(rsc)/./node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/AbortError.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQzZDO0FBQzdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC9lc20vaW5kZXguanM/NjYwNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmV4cG9ydCB7IEFib3J0RXJyb3IgfSBmcm9tIFwiLi9BYm9ydEVycm9yLmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/dist/esm/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@azure/core-xml/dist/esm/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XML_ATTRKEY: () => (/* reexport safe */ _xml_common_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY),\n/* harmony export */   XML_CHARKEY: () => (/* reexport safe */ _xml_common_js__WEBPACK_IMPORTED_MODULE_1__.XML_CHARKEY),\n/* harmony export */   parseXML: () => (/* reexport safe */ _xml_js__WEBPACK_IMPORTED_MODULE_0__.parseXML),\n/* harmony export */   stringifyXML: () => (/* reexport safe */ _xml_js__WEBPACK_IMPORTED_MODULE_0__.stringifyXML)\n/* harmony export */ });\n/* harmony import */ var _xml_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xml.js */ \"(rsc)/./node_modules/@azure/core-xml/dist/esm/xml.js\");\n/* harmony import */ var _xml_common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xml.common.js */ \"(rsc)/./node_modules/@azure/core-xml/dist/esm/xml.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDa0Q7QUFDUztBQUMzRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXhtbC9kaXN0L2VzbS9pbmRleC5qcz81YjU0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuZXhwb3J0IHsgc3RyaW5naWZ5WE1MLCBwYXJzZVhNTCB9IGZyb20gXCIuL3htbC5qc1wiO1xuZXhwb3J0IHsgWE1MX0FUVFJLRVksIFhNTF9DSEFSS0VZIH0gZnJvbSBcIi4veG1sLmNvbW1vbi5qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/dist/esm/xml.common.js":
/*!*************************************************************!*\
  !*** ./node_modules/@azure/core-xml/dist/esm/xml.common.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XML_ATTRKEY: () => (/* binding */ XML_ATTRKEY),\n/* harmony export */   XML_CHARKEY: () => (/* binding */ XML_CHARKEY)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Default key used to access the XML attributes.\n */\nconst XML_ATTRKEY = \"$\";\n/**\n * Default key used to access the XML value content.\n */\nconst XML_CHARKEY = \"_\";\n//# sourceMappingURL=xml.common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL2Rpc3QvZXNtL3htbC5jb21tb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL2Rpc3QvZXNtL3htbC5jb21tb24uanM/NzU3YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8qKlxuICogRGVmYXVsdCBrZXkgdXNlZCB0byBhY2Nlc3MgdGhlIFhNTCBhdHRyaWJ1dGVzLlxuICovXG5leHBvcnQgY29uc3QgWE1MX0FUVFJLRVkgPSBcIiRcIjtcbi8qKlxuICogRGVmYXVsdCBrZXkgdXNlZCB0byBhY2Nlc3MgdGhlIFhNTCB2YWx1ZSBjb250ZW50LlxuICovXG5leHBvcnQgY29uc3QgWE1MX0NIQVJLRVkgPSBcIl9cIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXhtbC5jb21tb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/dist/esm/xml.common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/dist/esm/xml.js":
/*!******************************************************!*\
  !*** ./node_modules/@azure/core-xml/dist/esm/xml.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseXML: () => (/* binding */ parseXML),\n/* harmony export */   stringifyXML: () => (/* binding */ stringifyXML)\n/* harmony export */ });\n/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fast-xml-parser */ \"(rsc)/./node_modules/fast-xml-parser/src/fxp.js\");\n/* harmony import */ var _xml_common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xml.common.js */ \"(rsc)/./node_modules/@azure/core-xml/dist/esm/xml.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\nfunction getCommonOptions(options) {\n    var _a;\n    return {\n        attributesGroupName: _xml_common_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY,\n        textNodeName: (_a = options.xmlCharKey) !== null && _a !== void 0 ? _a : _xml_common_js__WEBPACK_IMPORTED_MODULE_1__.XML_CHARKEY,\n        ignoreAttributes: false,\n        suppressBooleanAttributes: false,\n    };\n}\nfunction getSerializerOptions(options = {}) {\n    var _a, _b;\n    return Object.assign(Object.assign({}, getCommonOptions(options)), { attributeNamePrefix: \"@_\", format: true, suppressEmptyNode: true, indentBy: \"\", rootNodeName: (_a = options.rootName) !== null && _a !== void 0 ? _a : \"root\", cdataPropName: (_b = options.cdataPropName) !== null && _b !== void 0 ? _b : \"__cdata\" });\n}\nfunction getParserOptions(options = {}) {\n    return Object.assign(Object.assign({}, getCommonOptions(options)), { parseAttributeValue: false, parseTagValue: false, attributeNamePrefix: \"\", stopNodes: options.stopNodes, processEntities: true });\n}\n/**\n * Converts given JSON object to XML string\n * @param obj - JSON object to be converted into XML string\n * @param opts - Options that govern the XML building of given JSON object\n * `rootName` indicates the name of the root element in the resulting XML\n */\nfunction stringifyXML(obj, opts = {}) {\n    const parserOptions = getSerializerOptions(opts);\n    const j2x = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__.XMLBuilder(parserOptions);\n    const node = { [parserOptions.rootNodeName]: obj };\n    const xmlData = j2x.build(node);\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>${xmlData}`.replace(/\\n/g, \"\");\n}\n/**\n * Converts given XML string into JSON\n * @param str - String containing the XML content to be parsed into JSON\n * @param opts - Options that govern the parsing of given xml string\n * `includeRoot` indicates whether the root element is to be included or not in the output\n */\nasync function parseXML(str, opts = {}) {\n    if (!str) {\n        throw new Error(\"Document is empty\");\n    }\n    const validation = fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__.XMLValidator.validate(str);\n    if (validation !== true) {\n        throw validation;\n    }\n    const parser = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__.XMLParser(getParserOptions(opts));\n    const parsedXml = parser.parse(str);\n    // Remove the <?xml version=\"...\" ?> node.\n    // This is a change in behavior on fxp v4. Issue #424\n    if (parsedXml[\"?xml\"]) {\n        delete parsedXml[\"?xml\"];\n    }\n    if (!opts.includeRoot) {\n        for (const key of Object.keys(parsedXml)) {\n            const value = parsedXml[key];\n            return typeof value === \"object\" ? Object.assign({}, value) : value;\n        }\n    }\n    return parsedXml;\n}\n//# sourceMappingURL=xml.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL2Rpc3QvZXNtL3htbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNzRTtBQUNYO0FBQzNEO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qix1REFBVztBQUN4QyxpRkFBaUYsdURBQVc7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQSx5Q0FBeUMsZ0NBQWdDLHVQQUF1UDtBQUNoVTtBQUNBLHNDQUFzQztBQUN0Qyx5Q0FBeUMsZ0NBQWdDLGdJQUFnSTtBQUN6TTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLG9DQUFvQztBQUMzQztBQUNBLG9CQUFvQix1REFBVTtBQUM5QixtQkFBbUI7QUFDbkI7QUFDQSxxRUFBcUUsUUFBUTtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHNDQUFzQztBQUM3QztBQUNBO0FBQ0E7QUFDQSx1QkFBdUIseURBQVk7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNEQUFTO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRDtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFzaGJvYXJkLWJhbm5lcnMvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL2Rpc3QvZXNtL3htbC5qcz8wNTViIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgWE1MQnVpbGRlciwgWE1MUGFyc2VyLCBYTUxWYWxpZGF0b3IgfSBmcm9tIFwiZmFzdC14bWwtcGFyc2VyXCI7XG5pbXBvcnQgeyBYTUxfQVRUUktFWSwgWE1MX0NIQVJLRVkgfSBmcm9tIFwiLi94bWwuY29tbW9uLmpzXCI7XG5mdW5jdGlvbiBnZXRDb21tb25PcHRpb25zKG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXR0cmlidXRlc0dyb3VwTmFtZTogWE1MX0FUVFJLRVksXG4gICAgICAgIHRleHROb2RlTmFtZTogKF9hID0gb3B0aW9ucy54bWxDaGFyS2V5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBYTUxfQ0hBUktFWSxcbiAgICAgICAgaWdub3JlQXR0cmlidXRlczogZmFsc2UsXG4gICAgICAgIHN1cHByZXNzQm9vbGVhbkF0dHJpYnV0ZXM6IGZhbHNlLFxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRTZXJpYWxpemVyT3B0aW9ucyhvcHRpb25zID0ge30pIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGdldENvbW1vbk9wdGlvbnMob3B0aW9ucykpLCB7IGF0dHJpYnV0ZU5hbWVQcmVmaXg6IFwiQF9cIiwgZm9ybWF0OiB0cnVlLCBzdXBwcmVzc0VtcHR5Tm9kZTogdHJ1ZSwgaW5kZW50Qnk6IFwiXCIsIHJvb3ROb2RlTmFtZTogKF9hID0gb3B0aW9ucy5yb290TmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJyb290XCIsIGNkYXRhUHJvcE5hbWU6IChfYiA9IG9wdGlvbnMuY2RhdGFQcm9wTmFtZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJfX2NkYXRhXCIgfSk7XG59XG5mdW5jdGlvbiBnZXRQYXJzZXJPcHRpb25zKG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGdldENvbW1vbk9wdGlvbnMob3B0aW9ucykpLCB7IHBhcnNlQXR0cmlidXRlVmFsdWU6IGZhbHNlLCBwYXJzZVRhZ1ZhbHVlOiBmYWxzZSwgYXR0cmlidXRlTmFtZVByZWZpeDogXCJcIiwgc3RvcE5vZGVzOiBvcHRpb25zLnN0b3BOb2RlcywgcHJvY2Vzc0VudGl0aWVzOiB0cnVlIH0pO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBnaXZlbiBKU09OIG9iamVjdCB0byBYTUwgc3RyaW5nXG4gKiBAcGFyYW0gb2JqIC0gSlNPTiBvYmplY3QgdG8gYmUgY29udmVydGVkIGludG8gWE1MIHN0cmluZ1xuICogQHBhcmFtIG9wdHMgLSBPcHRpb25zIHRoYXQgZ292ZXJuIHRoZSBYTUwgYnVpbGRpbmcgb2YgZ2l2ZW4gSlNPTiBvYmplY3RcbiAqIGByb290TmFtZWAgaW5kaWNhdGVzIHRoZSBuYW1lIG9mIHRoZSByb290IGVsZW1lbnQgaW4gdGhlIHJlc3VsdGluZyBYTUxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeVhNTChvYmosIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IHBhcnNlck9wdGlvbnMgPSBnZXRTZXJpYWxpemVyT3B0aW9ucyhvcHRzKTtcbiAgICBjb25zdCBqMnggPSBuZXcgWE1MQnVpbGRlcihwYXJzZXJPcHRpb25zKTtcbiAgICBjb25zdCBub2RlID0geyBbcGFyc2VyT3B0aW9ucy5yb290Tm9kZU5hbWVdOiBvYmogfTtcbiAgICBjb25zdCB4bWxEYXRhID0gajJ4LmJ1aWxkKG5vZGUpO1xuICAgIHJldHVybiBgPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIiBzdGFuZGFsb25lPVwieWVzXCI/PiR7eG1sRGF0YX1gLnJlcGxhY2UoL1xcbi9nLCBcIlwiKTtcbn1cbi8qKlxuICogQ29udmVydHMgZ2l2ZW4gWE1MIHN0cmluZyBpbnRvIEpTT05cbiAqIEBwYXJhbSBzdHIgLSBTdHJpbmcgY29udGFpbmluZyB0aGUgWE1MIGNvbnRlbnQgdG8gYmUgcGFyc2VkIGludG8gSlNPTlxuICogQHBhcmFtIG9wdHMgLSBPcHRpb25zIHRoYXQgZ292ZXJuIHRoZSBwYXJzaW5nIG9mIGdpdmVuIHhtbCBzdHJpbmdcbiAqIGBpbmNsdWRlUm9vdGAgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHJvb3QgZWxlbWVudCBpcyB0byBiZSBpbmNsdWRlZCBvciBub3QgaW4gdGhlIG91dHB1dFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGFyc2VYTUwoc3RyLCBvcHRzID0ge30pIHtcbiAgICBpZiAoIXN0cikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEb2N1bWVudCBpcyBlbXB0eVwiKTtcbiAgICB9XG4gICAgY29uc3QgdmFsaWRhdGlvbiA9IFhNTFZhbGlkYXRvci52YWxpZGF0ZShzdHIpO1xuICAgIGlmICh2YWxpZGF0aW9uICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IHZhbGlkYXRpb247XG4gICAgfVxuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBYTUxQYXJzZXIoZ2V0UGFyc2VyT3B0aW9ucyhvcHRzKSk7XG4gICAgY29uc3QgcGFyc2VkWG1sID0gcGFyc2VyLnBhcnNlKHN0cik7XG4gICAgLy8gUmVtb3ZlIHRoZSA8P3htbCB2ZXJzaW9uPVwiLi4uXCIgPz4gbm9kZS5cbiAgICAvLyBUaGlzIGlzIGEgY2hhbmdlIGluIGJlaGF2aW9yIG9uIGZ4cCB2NC4gSXNzdWUgIzQyNFxuICAgIGlmIChwYXJzZWRYbWxbXCI/eG1sXCJdKSB7XG4gICAgICAgIGRlbGV0ZSBwYXJzZWRYbWxbXCI/eG1sXCJdO1xuICAgIH1cbiAgICBpZiAoIW9wdHMuaW5jbHVkZVJvb3QpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMocGFyc2VkWG1sKSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZWRYbWxba2V5XTtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgPyBPYmplY3QuYXNzaWduKHt9LCB2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkWG1sO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9eG1sLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/dist/esm/xml.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/logger/dist/esm/debug.js":
/*!******************************************************!*\
  !*** ./node_modules/@azure/logger/dist/esm/debug.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./log.js */ \"(rsc)/./node_modules/@azure/logger/dist/esm/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst debugEnvVariable = (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\nlet enabledString;\nlet enabledNamespaces = [];\nlet skippedNamespaces = [];\nconst debuggers = [];\nif (debugEnvVariable) {\n    enable(debugEnvVariable);\n}\nconst debugObj = Object.assign((namespace) => {\n    return createDebugger(namespace);\n}, {\n    enable,\n    enabled,\n    disable,\n    log: _log_js__WEBPACK_IMPORTED_MODULE_0__.log,\n});\nfunction enable(namespaces) {\n    enabledString = namespaces;\n    enabledNamespaces = [];\n    skippedNamespaces = [];\n    const wildcard = /\\*/g;\n    const namespaceList = namespaces.split(\",\").map((ns) => ns.trim().replace(wildcard, \".*?\"));\n    for (const ns of namespaceList) {\n        if (ns.startsWith(\"-\")) {\n            skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n        }\n        else {\n            enabledNamespaces.push(new RegExp(`^${ns}$`));\n        }\n    }\n    for (const instance of debuggers) {\n        instance.enabled = enabled(instance.namespace);\n    }\n}\nfunction enabled(namespace) {\n    if (namespace.endsWith(\"*\")) {\n        return true;\n    }\n    for (const skipped of skippedNamespaces) {\n        if (skipped.test(namespace)) {\n            return false;\n        }\n    }\n    for (const enabledNamespace of enabledNamespaces) {\n        if (enabledNamespace.test(namespace)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction disable() {\n    const result = enabledString || \"\";\n    enable(\"\");\n    return result;\n}\nfunction createDebugger(namespace) {\n    const newDebugger = Object.assign(debug, {\n        enabled: enabled(namespace),\n        destroy,\n        log: debugObj.log,\n        namespace,\n        extend,\n    });\n    function debug(...args) {\n        if (!newDebugger.enabled) {\n            return;\n        }\n        if (args.length > 0) {\n            args[0] = `${namespace} ${args[0]}`;\n        }\n        newDebugger.log(...args);\n    }\n    debuggers.push(newDebugger);\n    return newDebugger;\n}\nfunction destroy() {\n    const index = debuggers.indexOf(this);\n    if (index >= 0) {\n        debuggers.splice(index, 1);\n        return true;\n    }\n    return false;\n}\nfunction extend(namespace) {\n    const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n    newDebugger.log = this.log;\n    return newDebugger;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (debugObj);\n//# sourceMappingURL=debug.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2xvZ2dlci9kaXN0L2VzbS9kZWJ1Zy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGFBQWE7QUFDL0Q7QUFDQTtBQUNBLGtEQUFrRCxHQUFHO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsV0FBVyxFQUFFLFFBQVE7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGVBQWUsR0FBRyxVQUFVO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLFFBQVEsRUFBQztBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9sb2dnZXIvZGlzdC9lc20vZGVidWcuanM/ZjdhMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IGxvZyB9IGZyb20gXCIuL2xvZy5qc1wiO1xuY29uc3QgZGVidWdFbnZWYXJpYWJsZSA9ICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5ERUJVRykgfHwgdW5kZWZpbmVkO1xubGV0IGVuYWJsZWRTdHJpbmc7XG5sZXQgZW5hYmxlZE5hbWVzcGFjZXMgPSBbXTtcbmxldCBza2lwcGVkTmFtZXNwYWNlcyA9IFtdO1xuY29uc3QgZGVidWdnZXJzID0gW107XG5pZiAoZGVidWdFbnZWYXJpYWJsZSkge1xuICAgIGVuYWJsZShkZWJ1Z0VudlZhcmlhYmxlKTtcbn1cbmNvbnN0IGRlYnVnT2JqID0gT2JqZWN0LmFzc2lnbigobmFtZXNwYWNlKSA9PiB7XG4gICAgcmV0dXJuIGNyZWF0ZURlYnVnZ2VyKG5hbWVzcGFjZSk7XG59LCB7XG4gICAgZW5hYmxlLFxuICAgIGVuYWJsZWQsXG4gICAgZGlzYWJsZSxcbiAgICBsb2csXG59KTtcbmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gICAgZW5hYmxlZFN0cmluZyA9IG5hbWVzcGFjZXM7XG4gICAgZW5hYmxlZE5hbWVzcGFjZXMgPSBbXTtcbiAgICBza2lwcGVkTmFtZXNwYWNlcyA9IFtdO1xuICAgIGNvbnN0IHdpbGRjYXJkID0gL1xcKi9nO1xuICAgIGNvbnN0IG5hbWVzcGFjZUxpc3QgPSBuYW1lc3BhY2VzLnNwbGl0KFwiLFwiKS5tYXAoKG5zKSA9PiBucy50cmltKCkucmVwbGFjZSh3aWxkY2FyZCwgXCIuKj9cIikpO1xuICAgIGZvciAoY29uc3QgbnMgb2YgbmFtZXNwYWNlTGlzdCkge1xuICAgICAgICBpZiAobnMuc3RhcnRzV2l0aChcIi1cIikpIHtcbiAgICAgICAgICAgIHNraXBwZWROYW1lc3BhY2VzLnB1c2gobmV3IFJlZ0V4cChgXiR7bnMuc3Vic3RyKDEpfSRgKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbmFibGVkTmFtZXNwYWNlcy5wdXNoKG5ldyBSZWdFeHAoYF4ke25zfSRgKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBpbnN0YW5jZSBvZiBkZWJ1Z2dlcnMpIHtcbiAgICAgICAgaW5zdGFuY2UuZW5hYmxlZCA9IGVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlbmFibGVkKG5hbWVzcGFjZSkge1xuICAgIGlmIChuYW1lc3BhY2UuZW5kc1dpdGgoXCIqXCIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHNraXBwZWQgb2Ygc2tpcHBlZE5hbWVzcGFjZXMpIHtcbiAgICAgICAgaWYgKHNraXBwZWQudGVzdChuYW1lc3BhY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBlbmFibGVkTmFtZXNwYWNlIG9mIGVuYWJsZWROYW1lc3BhY2VzKSB7XG4gICAgICAgIGlmIChlbmFibGVkTmFtZXNwYWNlLnRlc3QobmFtZXNwYWNlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBjb25zdCByZXN1bHQgPSBlbmFibGVkU3RyaW5nIHx8IFwiXCI7XG4gICAgZW5hYmxlKFwiXCIpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjcmVhdGVEZWJ1Z2dlcihuYW1lc3BhY2UpIHtcbiAgICBjb25zdCBuZXdEZWJ1Z2dlciA9IE9iamVjdC5hc3NpZ24oZGVidWcsIHtcbiAgICAgICAgZW5hYmxlZDogZW5hYmxlZChuYW1lc3BhY2UpLFxuICAgICAgICBkZXN0cm95LFxuICAgICAgICBsb2c6IGRlYnVnT2JqLmxvZyxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBleHRlbmQsXG4gICAgfSk7XG4gICAgZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuICAgICAgICBpZiAoIW5ld0RlYnVnZ2VyLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBhcmdzWzBdID0gYCR7bmFtZXNwYWNlfSAke2FyZ3NbMF19YDtcbiAgICAgICAgfVxuICAgICAgICBuZXdEZWJ1Z2dlci5sb2coLi4uYXJncyk7XG4gICAgfVxuICAgIGRlYnVnZ2Vycy5wdXNoKG5ld0RlYnVnZ2VyKTtcbiAgICByZXR1cm4gbmV3RGVidWdnZXI7XG59XG5mdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGNvbnN0IGluZGV4ID0gZGVidWdnZXJzLmluZGV4T2YodGhpcyk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgZGVidWdnZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBleHRlbmQobmFtZXNwYWNlKSB7XG4gICAgY29uc3QgbmV3RGVidWdnZXIgPSBjcmVhdGVEZWJ1Z2dlcihgJHt0aGlzLm5hbWVzcGFjZX06JHtuYW1lc3BhY2V9YCk7XG4gICAgbmV3RGVidWdnZXIubG9nID0gdGhpcy5sb2c7XG4gICAgcmV0dXJuIG5ld0RlYnVnZ2VyO1xufVxuZXhwb3J0IGRlZmF1bHQgZGVidWdPYmo7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/logger/dist/esm/debug.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/logger/dist/esm/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@azure/logger/dist/esm/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureLogger: () => (/* binding */ AzureLogger),\n/* harmony export */   createClientLogger: () => (/* binding */ createClientLogger),\n/* harmony export */   getLogLevel: () => (/* binding */ getLogLevel),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel)\n/* harmony export */ });\n/* harmony import */ var _debug_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug.js */ \"(rsc)/./node_modules/@azure/logger/dist/esm/debug.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst registeredLoggers = new Set();\nconst logLevelFromEnv = (typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;\nlet azureLogLevel;\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nconst AzureLogger = (0,_debug_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"azure\");\nAzureLogger.log = (...args) => {\n    _debug_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].log(...args);\n};\nconst AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\nif (logLevelFromEnv) {\n    // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n    if (isAzureLogLevel(logLevelFromEnv)) {\n        setLogLevel(logLevelFromEnv);\n    }\n    else {\n        console.error(`AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(\", \")}.`);\n    }\n}\n/**\n * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nfunction setLogLevel(level) {\n    if (level && !isAzureLogLevel(level)) {\n        throw new Error(`Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(\",\")}`);\n    }\n    azureLogLevel = level;\n    const enabledNamespaces = [];\n    for (const logger of registeredLoggers) {\n        if (shouldEnable(logger)) {\n            enabledNamespaces.push(logger.namespace);\n        }\n    }\n    _debug_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].enable(enabledNamespaces.join(\",\"));\n}\n/**\n * Retrieves the currently specified log level.\n */\nfunction getLogLevel() {\n    return azureLogLevel;\n}\nconst levelMap = {\n    verbose: 400,\n    info: 300,\n    warning: 200,\n    error: 100,\n};\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\nfunction createClientLogger(namespace) {\n    const clientRootLogger = AzureLogger.extend(namespace);\n    patchLogMethod(AzureLogger, clientRootLogger);\n    return {\n        error: createLogger(clientRootLogger, \"error\"),\n        warning: createLogger(clientRootLogger, \"warning\"),\n        info: createLogger(clientRootLogger, \"info\"),\n        verbose: createLogger(clientRootLogger, \"verbose\"),\n    };\n}\nfunction patchLogMethod(parent, child) {\n    child.log = (...args) => {\n        parent.log(...args);\n    };\n}\nfunction createLogger(parent, level) {\n    const logger = Object.assign(parent.extend(level), {\n        level,\n    });\n    patchLogMethod(parent, logger);\n    if (shouldEnable(logger)) {\n        const enabledNamespaces = _debug_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].disable();\n        _debug_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].enable(enabledNamespaces + \",\" + logger.namespace);\n    }\n    registeredLoggers.add(logger);\n    return logger;\n}\nfunction shouldEnable(logger) {\n    return Boolean(azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]);\n}\nfunction isAzureLogLevel(logLevel) {\n    return AZURE_LOG_LEVELS.includes(logLevel);\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2xvZ2dlci9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLG9CQUFvQixxREFBSztBQUNoQztBQUNBLElBQUksaURBQUs7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLGdCQUFnQixHQUFHLDZDQUE2Qyw0QkFBNEI7QUFDL0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSw4Q0FBOEMsTUFBTSx3QkFBd0IsMkJBQTJCO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGlEQUFLO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxrQ0FBa0MsaURBQUs7QUFDdkMsUUFBUSxpREFBSztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoYm9hcmQtYmFubmVycy8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbG9nZ2VyL2Rpc3QvZXNtL2luZGV4LmpzPzAwNWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgZGVidWcgZnJvbSBcIi4vZGVidWcuanNcIjtcbmNvbnN0IHJlZ2lzdGVyZWRMb2dnZXJzID0gbmV3IFNldCgpO1xuY29uc3QgbG9nTGV2ZWxGcm9tRW52ID0gKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MuZW52ICYmIHByb2Nlc3MuZW52LkFaVVJFX0xPR19MRVZFTCkgfHwgdW5kZWZpbmVkO1xubGV0IGF6dXJlTG9nTGV2ZWw7XG4vKipcbiAqIFRoZSBBenVyZUxvZ2dlciBwcm92aWRlcyBhIG1lY2hhbmlzbSBmb3Igb3ZlcnJpZGluZyB3aGVyZSBsb2dzIGFyZSBvdXRwdXQgdG8uXG4gKiBCeSBkZWZhdWx0LCBsb2dzIGFyZSBzZW50IHRvIHN0ZGVyci5cbiAqIE92ZXJyaWRlIHRoZSBgbG9nYCBtZXRob2QgdG8gcmVkaXJlY3QgbG9ncyB0byBhbm90aGVyIGxvY2F0aW9uLlxuICovXG5leHBvcnQgY29uc3QgQXp1cmVMb2dnZXIgPSBkZWJ1ZyhcImF6dXJlXCIpO1xuQXp1cmVMb2dnZXIubG9nID0gKC4uLmFyZ3MpID0+IHtcbiAgICBkZWJ1Zy5sb2coLi4uYXJncyk7XG59O1xuY29uc3QgQVpVUkVfTE9HX0xFVkVMUyA9IFtcInZlcmJvc2VcIiwgXCJpbmZvXCIsIFwid2FybmluZ1wiLCBcImVycm9yXCJdO1xuaWYgKGxvZ0xldmVsRnJvbUVudikge1xuICAgIC8vIGF2b2lkIGNhbGxpbmcgc2V0TG9nTGV2ZWwgYmVjYXVzZSB3ZSBkb24ndCB3YW50IGEgbWlzLXNldCBlbnZpcm9ubWVudCB2YXJpYWJsZSB0byBjcmFzaFxuICAgIGlmIChpc0F6dXJlTG9nTGV2ZWwobG9nTGV2ZWxGcm9tRW52KSkge1xuICAgICAgICBzZXRMb2dMZXZlbChsb2dMZXZlbEZyb21FbnYpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgQVpVUkVfTE9HX0xFVkVMIHNldCB0byB1bmtub3duIGxvZyBsZXZlbCAnJHtsb2dMZXZlbEZyb21FbnZ9JzsgbG9nZ2luZyBpcyBub3QgZW5hYmxlZC4gQWNjZXB0YWJsZSB2YWx1ZXM6ICR7QVpVUkVfTE9HX0xFVkVMUy5qb2luKFwiLCBcIil9LmApO1xuICAgIH1cbn1cbi8qKlxuICogSW1tZWRpYXRlbHkgZW5hYmxlcyBsb2dnaW5nIGF0IHRoZSBzcGVjaWZpZWQgbG9nIGxldmVsLiBJZiBubyBsZXZlbCBpcyBzcGVjaWZpZWQsIGxvZ2dpbmcgaXMgZGlzYWJsZWQuXG4gKiBAcGFyYW0gbGV2ZWwgLSBUaGUgbG9nIGxldmVsIHRvIGVuYWJsZSBmb3IgbG9nZ2luZy5cbiAqIE9wdGlvbnMgZnJvbSBtb3N0IHZlcmJvc2UgdG8gbGVhc3QgdmVyYm9zZSBhcmU6XG4gKiAtIHZlcmJvc2VcbiAqIC0gaW5mb1xuICogLSB3YXJuaW5nXG4gKiAtIGVycm9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRMb2dMZXZlbChsZXZlbCkge1xuICAgIGlmIChsZXZlbCAmJiAhaXNBenVyZUxvZ0xldmVsKGxldmVsKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gbG9nIGxldmVsICcke2xldmVsfScuIEFjY2VwdGFibGUgdmFsdWVzOiAke0FaVVJFX0xPR19MRVZFTFMuam9pbihcIixcIil9YCk7XG4gICAgfVxuICAgIGF6dXJlTG9nTGV2ZWwgPSBsZXZlbDtcbiAgICBjb25zdCBlbmFibGVkTmFtZXNwYWNlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgbG9nZ2VyIG9mIHJlZ2lzdGVyZWRMb2dnZXJzKSB7XG4gICAgICAgIGlmIChzaG91bGRFbmFibGUobG9nZ2VyKSkge1xuICAgICAgICAgICAgZW5hYmxlZE5hbWVzcGFjZXMucHVzaChsb2dnZXIubmFtZXNwYWNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZWJ1Zy5lbmFibGUoZW5hYmxlZE5hbWVzcGFjZXMuam9pbihcIixcIikpO1xufVxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGN1cnJlbnRseSBzcGVjaWZpZWQgbG9nIGxldmVsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9nTGV2ZWwoKSB7XG4gICAgcmV0dXJuIGF6dXJlTG9nTGV2ZWw7XG59XG5jb25zdCBsZXZlbE1hcCA9IHtcbiAgICB2ZXJib3NlOiA0MDAsXG4gICAgaW5mbzogMzAwLFxuICAgIHdhcm5pbmc6IDIwMCxcbiAgICBlcnJvcjogMTAwLFxufTtcbi8qKlxuICogQ3JlYXRlcyBhIGxvZ2dlciBmb3IgdXNlIGJ5IHRoZSBBenVyZSBTREtzIHRoYXQgaW5oZXJpdHMgZnJvbSBgQXp1cmVMb2dnZXJgLlxuICogQHBhcmFtIG5hbWVzcGFjZSAtIFRoZSBuYW1lIG9mIHRoZSBTREsgcGFja2FnZS5cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNsaWVudExvZ2dlcihuYW1lc3BhY2UpIHtcbiAgICBjb25zdCBjbGllbnRSb290TG9nZ2VyID0gQXp1cmVMb2dnZXIuZXh0ZW5kKG5hbWVzcGFjZSk7XG4gICAgcGF0Y2hMb2dNZXRob2QoQXp1cmVMb2dnZXIsIGNsaWVudFJvb3RMb2dnZXIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBjcmVhdGVMb2dnZXIoY2xpZW50Um9vdExvZ2dlciwgXCJlcnJvclwiKSxcbiAgICAgICAgd2FybmluZzogY3JlYXRlTG9nZ2VyKGNsaWVudFJvb3RMb2dnZXIsIFwid2FybmluZ1wiKSxcbiAgICAgICAgaW5mbzogY3JlYXRlTG9nZ2VyKGNsaWVudFJvb3RMb2dnZXIsIFwiaW5mb1wiKSxcbiAgICAgICAgdmVyYm9zZTogY3JlYXRlTG9nZ2VyKGNsaWVudFJvb3RMb2dnZXIsIFwidmVyYm9zZVwiKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gcGF0Y2hMb2dNZXRob2QocGFyZW50LCBjaGlsZCkge1xuICAgIGNoaWxkLmxvZyA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgIHBhcmVudC5sb2coLi4uYXJncyk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUxvZ2dlcihwYXJlbnQsIGxldmVsKSB7XG4gICAgY29uc3QgbG9nZ2VyID0gT2JqZWN0LmFzc2lnbihwYXJlbnQuZXh0ZW5kKGxldmVsKSwge1xuICAgICAgICBsZXZlbCxcbiAgICB9KTtcbiAgICBwYXRjaExvZ01ldGhvZChwYXJlbnQsIGxvZ2dlcik7XG4gICAgaWYgKHNob3VsZEVuYWJsZShsb2dnZXIpKSB7XG4gICAgICAgIGNvbnN0IGVuYWJsZWROYW1lc3BhY2VzID0gZGVidWcuZGlzYWJsZSgpO1xuICAgICAgICBkZWJ1Zy5lbmFibGUoZW5hYmxlZE5hbWVzcGFjZXMgKyBcIixcIiArIGxvZ2dlci5uYW1lc3BhY2UpO1xuICAgIH1cbiAgICByZWdpc3RlcmVkTG9nZ2Vycy5hZGQobG9nZ2VyKTtcbiAgICByZXR1cm4gbG9nZ2VyO1xufVxuZnVuY3Rpb24gc2hvdWxkRW5hYmxlKGxvZ2dlcikge1xuICAgIHJldHVybiBCb29sZWFuKGF6dXJlTG9nTGV2ZWwgJiYgbGV2ZWxNYXBbbG9nZ2VyLmxldmVsXSA8PSBsZXZlbE1hcFthenVyZUxvZ0xldmVsXSk7XG59XG5mdW5jdGlvbiBpc0F6dXJlTG9nTGV2ZWwobG9nTGV2ZWwpIHtcbiAgICByZXR1cm4gQVpVUkVfTE9HX0xFVkVMUy5pbmNsdWRlcyhsb2dMZXZlbCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/logger/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/logger/dist/esm/log.js":
/*!****************************************************!*\
  !*** ./node_modules/@azure/logger/dist/esm/log.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   log: () => (/* binding */ log)\n/* harmony export */ });\n/* harmony import */ var node_os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:os */ \"node:os\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var node_process__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:process */ \"node:process\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\nfunction log(message, ...args) {\n    node_process__WEBPACK_IMPORTED_MODULE_2__.stderr.write(`${node_util__WEBPACK_IMPORTED_MODULE_1__.format(message, ...args)}${node_os__WEBPACK_IMPORTED_MODULE_0__.EOL}`);\n}\n//# sourceMappingURL=log.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2xvZ2dlci9kaXN0L2VzbS9sb2cuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDOEI7QUFDRDtBQUNXO0FBQ2pDO0FBQ1AsSUFBSSxnREFBYyxVQUFVLDZDQUFXLG1CQUFtQixFQUFFLHdDQUFHLENBQUM7QUFDaEU7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC1iYW5uZXJzLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9sb2dnZXIvZGlzdC9lc20vbG9nLmpzP2YzNTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBFT0wgfSBmcm9tIFwibm9kZTpvc1wiO1xuaW1wb3J0IHV0aWwgZnJvbSBcIm5vZGU6dXRpbFwiO1xuaW1wb3J0ICogYXMgcHJvY2VzcyBmcm9tIFwibm9kZTpwcm9jZXNzXCI7XG5leHBvcnQgZnVuY3Rpb24gbG9nKG1lc3NhZ2UsIC4uLmFyZ3MpIHtcbiAgICBwcm9jZXNzLnN0ZGVyci53cml0ZShgJHt1dGlsLmZvcm1hdChtZXNzYWdlLCAuLi5hcmdzKX0ke0VPTH1gKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/logger/dist/esm/log.js\n");

/***/ })

};
;